Index: packages/apps/Settings/src/com/android/settings/BootedReceiver.java
===================================================================
--- packages/apps/Settings/src/com/android/settings/BootedReceiver.java	(revision 12230)
+++ packages/apps/Settings/src/com/android/settings/BootedReceiver.java	(revision 12231)
@@ -14,6 +14,9 @@
 import java.io.IOException;
 import java.io.RandomAccessFile;
 import android.content.ComponentName;
+import android.app.job.JobInfo;
+import android.app.job.JobScheduler;
+import com.android.settings.location.FotaLocationService;
 /**
  * Created by Administrator on 2017/8/26.
  */
@@ -29,6 +32,7 @@
     private static final String TIME_Off = "timeOff";
     private String timeOn = "22:00";
     private String timeOff = "07:00";
+    private static final int JOB_ID = 2018;
 
     @Override
     public void onReceive(Context context, Intent intent) {
@@ -83,6 +87,13 @@
 		intentStart.setComponent(new ComponentName("com.greenpoint.android.mc10086.activity", "com.leadeon.cmcc.cservice.PushService"));
 		context.startService(intentStart);
 		
+		JobScheduler scheduler = (JobScheduler) context.getSystemService(context.JOB_SCHEDULER_SERVICE);  
+        JobInfo jobInfo = new JobInfo.Builder(JOB_ID, new ComponentName(context, FotaLocationService.class))   
+            .setRequiredNetworkType(JobInfo.NETWORK_TYPE_ANY)
+            .setPeriodic(120000)
+            .build();  
+        scheduler.schedule(jobInfo);
+		
 
     }
 
Index: packages/apps/Settings/src/com/android/settings/location/FotaLocationService.java
===================================================================
--- packages/apps/Settings/src/com/android/settings/location/FotaLocationService.java	(revision 0)
+++ packages/apps/Settings/src/com/android/settings/location/FotaLocationService.java	(revision 12231)
@@ -0,0 +1,228 @@
+package com.android.settings.location;
+
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.database.ContentObserver;
+import android.location.Location;
+import android.location.LocationListener;
+import android.location.LocationManager;
+import android.net.ConnectivityManager;
+import android.net.NetworkInfo.State;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Message;
+import android.provider.Settings;
+import android.util.Log;
+import com.android.settings.R;
+//SmartContainer modify begin
+import android.os.UserHandle;
+//SmartContainer modify end
+import android.app.job.JobService;
+import android.app.job.JobParameters;
+
+public class FotaLocationService extends JobService {
+
+    private static final String TAG = "FotaLocationService";
+    private static final String NET_CHANGE_ACTION = "android.net.conn.CONNECTIVITY_CHANGE";
+    private static final String OTA_LOCATION_INITIALIZE = "0_0";
+    private static final String FOTA_LOCATION_ACTION = "com.tcl.systemui.action.LOCATION_INFO";
+    private static final int TIMEOUT = 120000;
+    private static final int STATE_NORMAL = 0;
+    private static final int STATE_RUNNING = 1;
+    private static final int STATE_STOP = 2;
+    private static final int MSG_GET_LOCATION = 0 ;
+    private LegacyLocationProvider locationProvider;
+    private static int mRealLocationSwitchState = -1;
+    private static int mState;
+    private int time = 0;//calculate the time for getlocation
+    private Context mContext;
+    //handle message of getlocation
+    private Handler mHandler = new Handler(){
+        @Override
+        public void handleMessage(Message msg) {
+            // TODO Auto-generated method stub
+            switch(msg.what) {
+            case MSG_GET_LOCATION:
+                this.removeMessages(MSG_GET_LOCATION);
+                getLocationInfo();
+                break;
+
+            default:
+                super.handleMessage(msg);
+                break;
+
+            }
+        }
+
+        };
+        
+    
+    @Override
+    public boolean onStartJob(JobParameters params) {
+        Logger.d("onReceive userId = " + UserHandle.myUserId());
+        //SmartContainer modify begin, control double application
+        if(UserHandle.myUserId() != 0){
+            return false;
+         }
+        //SmartContainer modify end
+        mContext = getApplicationContext();
+			//Get customize value
+        boolean isNeedGetData = mContext.getResources().getBoolean(R.bool.feature_ota_getlocation_on);
+             Logger.d("isNeedGetData = "+isNeedGetData);
+        if(!isNeedGetData){
+             return false;
+        }
+
+            //get data from database
+        String locationinfo = Settings.System.getString(mContext.getContentResolver(), "tcl_ota_locationinfo");
+             //locationinfo = OTA_LOCATION_INITIALIZE;//test
+        if (null == locationinfo || OTA_LOCATION_INITIALIZE.equals(locationinfo)) {
+        boolean isNetWorkOn = getNetworkState(mContext);
+        Logger.d("isNetWorkOn = "+isNetWorkOn);
+        if (isNetWorkOn){
+             if(!mHandler.hasMessages(MSG_GET_LOCATION)){
+                Logger.d(" onReceive mState = "+mState);
+                if(mState != STATE_RUNNING) {
+                   mHandler.sendEmptyMessage(MSG_GET_LOCATION);
+                   Logger.d("Add one task");
+                 };
+
+               }
+         } else {
+              if (mState == STATE_RUNNING) mState = STATE_STOP;
+         }
+        
+	    }
+	      changeLocationMode();
+	      jobFinished(params, false);
+        return true;
+    }
+
+    @Override  
+    public boolean onStopJob(JobParameters params) {  
+        Log.i(TAG, "stop job " + params.getJobId());  
+        return false;  
+} 
+
+  
+    private void getLocationInfo(){
+        mState = STATE_RUNNING;
+        //get real location status
+        mRealLocationSwitchState = Settings.Secure.getInt(mContext.getContentResolver(), android.provider.Settings.Secure.LOCATION_MODE,Settings.Secure.LOCATION_MODE_OFF);
+        if(mRealLocationSwitchState != Settings.Secure.LOCATION_MODE_HIGH_ACCURACY){
+              Settings.Secure.putInt(mContext.getContentResolver(),
+                          Settings.Secure.LOCATION_MODE,
+                          Settings.Secure.LOCATION_MODE_HIGH_ACCURACY);
+         }
+
+        //send broadcast to systemUI to hide the icon in the statusbar
+        notifyStatusBarShow(false);
+
+        if(locationProvider == null){
+              locationProvider = new LegacyLocationProvider(mContext);
+              }
+        locationProvider.recordLocation(true);
+        //get location
+        Runnable runable = new Runnable(){
+              @Override
+              public void run() {
+                    Location currentLocation = locationProvider.getCurrentLocation();
+
+                    Logger.d("mState = " + mState + "; currentLocation = "+currentLocation );
+                    if(currentLocation!=null || mState == STATE_STOP){
+                        stopAll(currentLocation!=null,currentLocation);
+                        Logger.d("stopall 1");
+                    }else{
+                          if(time<=TIMEOUT){
+                                time += 1000;
+                                Logger.d("time =" + time);
+                                mHandler.postDelayed(this,1000);
+                          }else{
+                                stopAll(false,null);
+                                Logger.d("stopall 2");
+                          }
+                    }
+              }
+        };
+        mHandler.post(runable);
+    }
+
+    private void stopAll(boolean isSuccess, Location location) {
+        time = 0;
+        Logger.d("isSuccess = "+ isSuccess);
+        if (isSuccess) {
+            saveData(location);
+        }
+        //send broadcast to systemUI to hide the icon in the statusbar
+        notifyStatusBarShow(true);
+
+        if (locationProvider != null) {
+            locationProvider.recordLocation(false);
+         }
+        if(mRealLocationSwitchState != Settings.Secure.getInt(mContext.getContentResolver(), android.provider.Settings.Secure.LOCATION_MODE,Settings.Secure.LOCATION_MODE_OFF))
+            Settings.Secure.putInt(mContext.getContentResolver(),android.provider.Settings.Secure.LOCATION_MODE, mRealLocationSwitchState);
+        Logger.d("change location switch to ==== " + mRealLocationSwitchState);
+
+        mState = STATE_NORMAL;
+    }
+
+    private void saveData(Location location) {
+        String value = location.getLongitude() + "_" + location.getLatitude();
+        Settings.System.putString(mContext.getContentResolver(), "tcl_ota_locationinfo", value);
+        Logger.d("location value = " + value);
+
+        Intent intent = new Intent();
+        intent.putExtra("Longitude", location.getLongitude() + "");
+        intent.putExtra("Latitude", location.getLatitude() + "");
+        intent.setAction("com.tcl.ota.action.LOCATION_INFO");
+        intent.setFlags(Intent.FLAG_INCLUDE_STOPPED_PACKAGES);
+        mContext.sendBroadcast(intent);
+    }
+
+    //get network status
+    public static boolean getNetworkState(Context context) {
+        ConnectivityManager connManager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
+        // WIFI
+        State state = connManager.getNetworkInfo(ConnectivityManager.TYPE_WIFI).getState();
+        if (state == State.CONNECTED || state == State.CONNECTING) {
+            Log.e(TAG, "networkstate wifi = "+state);
+            return true;
+        }
+        // Mobile
+        state = connManager.getNetworkInfo(ConnectivityManager.TYPE_MOBILE).getState();
+        if (state == State.CONNECTED || state == State.CONNECTING) {
+            Log.e(TAG, "networkstate Mobile data = "+state);
+            return true;
+        }
+        return false;
+    }
+
+    private void changeLocationMode(){
+        mRealLocationSwitchState = Settings.Secure.getInt(mContext.getContentResolver(), Settings.Secure.LOCATION_MODE,
+                Settings.Secure.LOCATION_MODE_OFF);
+       Logger.d("changeLocationMode mRealLocationSwitchState value = " + mRealLocationSwitchState);
+       if(mRealLocationSwitchState == Settings.Secure.LOCATION_MODE_OFF){       	   
+           if (mState == STATE_RUNNING) mState = STATE_STOP;
+        }
+    }
+
+    //notify systemui to update status icon
+    private void notifyStatusBarShow(boolean ishow) {
+        Intent intent = new Intent();
+        intent.putExtra("isShow", ishow);
+        intent.setAction(FOTA_LOCATION_ACTION);
+        mContext.sendBroadcast(intent);
+    }
+
+    public static class Logger {
+        private static boolean isLogOn = true;
+
+        public static  void d(String message){
+            if(isLogOn)
+                Log.e(TAG,message);
+        }
+    }
+
+}
Index: packages/apps/Settings/src/com/android/settings/location/LocationProvider.java
===================================================================
--- packages/apps/Settings/src/com/android/settings/location/LocationProvider.java	(revision 0)
+++ packages/apps/Settings/src/com/android/settings/location/LocationProvider.java	(revision 12231)
@@ -0,0 +1,53 @@
+/*
+ * Copyright (C) 2013 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.settings.location;
+
+import android.location.Location;
+
+/**
+ * A generic interface for a location provider {Fused, GPS, Network}.
+ */
+public interface LocationProvider {
+
+    /**
+     * Report when connection fails so another location provider may be used.
+     */
+    public interface OnConnectionFailedListener {
+        /**
+         * Report connection failure.
+         */
+        public void onConnectionFailed();
+    }
+
+    /**
+     * Get the current location.
+     */
+    public Location getCurrentLocation();
+
+    /**
+     * Turn on/off recording of location.
+     *
+     * @param recordLocation Whether or not to record location.
+     */
+    public void recordLocation(boolean recordLocation);
+
+    /**
+     * Disconnect the location provider after use. The location provider can no longer acquire
+     * locations after this has been called.
+     */
+    public void disconnect();
+}
\ No newline at end of file
Index: packages/apps/Settings/src/com/android/settings/location/LegacyLocationProvider.java
===================================================================
--- packages/apps/Settings/src/com/android/settings/location/LegacyLocationProvider.java	(revision 0)
+++ packages/apps/Settings/src/com/android/settings/location/LegacyLocationProvider.java	(revision 12231)
@@ -0,0 +1,171 @@
+/*
+ * Copyright (C) 2013 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.settings.location;
+
+import android.content.Context;
+import android.location.Location;
+import android.os.Bundle;
+import android.util.Log;
+
+
+/**
+ * A class that handles legacy (network, gps) location providers, in the event
+ * the fused location provider from Google Play Services is unavailable.
+ */
+public class LegacyLocationProvider implements LocationProvider {
+    private static final String TAG = "LegacyLocationProvider";
+
+    private Context mContext;
+    private android.location.LocationManager mLocationManager;
+    private boolean mRecordLocation;
+
+    LocationListener [] mLocationListeners = new LocationListener[] {
+            new LocationListener(android.location.LocationManager.GPS_PROVIDER),
+            new LocationListener(android.location.LocationManager.NETWORK_PROVIDER)
+    };
+
+    public LegacyLocationProvider(Context context) {
+        mContext = context;
+    }
+
+    @Override
+    public Location getCurrentLocation() {
+        if (!mRecordLocation) return null;
+
+        // go in best to worst order
+        for (int i = 0; i < mLocationListeners.length; i++) {
+            Location l = mLocationListeners[i].current();
+            if (l != null) return l;
+        }
+        Log.d(TAG, "No location received yet.");
+        return null;
+    }
+
+    public void recordLocation(boolean recordLocation) {
+        if (mRecordLocation != recordLocation) {
+            mRecordLocation = recordLocation;
+            if (recordLocation) {
+                startReceivingLocationUpdates();
+            } else {
+                stopReceivingLocationUpdates();
+            }
+        }
+    }
+
+    @Override
+    public void disconnect() {
+        Log.d(TAG, "disconnect");
+        // The onPause() call to stopReceivingLocationUpdates is sufficient to unregister the
+        // Network/GPS listener.
+    }
+
+    private void startReceivingLocationUpdates() {
+        if (mLocationManager == null) {
+            mLocationManager = (android.location.LocationManager)
+                    mContext.getSystemService(Context.LOCATION_SERVICE);
+        }
+        if (mLocationManager != null) {
+            try {
+                mLocationManager.requestLocationUpdates(
+                        android.location.LocationManager.NETWORK_PROVIDER,
+                        1000,
+                        0F,
+                        mLocationListeners[1]);
+            } catch (SecurityException ex) {
+                Log.i(TAG, "fail to request location update, ignore", ex);
+            } catch (IllegalArgumentException ex) {
+                Log.d(TAG, "provider does not exist " + ex.getMessage());
+            }
+            try {
+                mLocationManager.requestLocationUpdates(
+                        android.location.LocationManager.GPS_PROVIDER,
+                        1000,
+                        0F,
+                        mLocationListeners[0]);
+            } catch (SecurityException ex) {
+                Log.i(TAG, "fail to request location update, ignore", ex);
+            } catch (IllegalArgumentException ex) {
+                Log.d(TAG, "provider does not exist " + ex.getMessage());
+            }
+            Log.d(TAG, "startReceivingLocationUpdates");
+        }
+    }
+
+    private void stopReceivingLocationUpdates() {
+        if (mLocationManager != null) {
+            for (int i = 0; i < mLocationListeners.length; i++) {
+                try {
+                    mLocationManager.removeUpdates(mLocationListeners[i]);
+                } catch (Exception ex) {
+                    Log.i(TAG, "fail to remove location listners, ignore", ex);
+                }
+            }
+            Log.d(TAG, "stopReceivingLocationUpdates");
+        }
+    }
+
+    private class LocationListener
+            implements android.location.LocationListener {
+        Location mLastLocation;
+        boolean mValid = false;
+        String mProvider;
+
+        public LocationListener(String provider) {
+            mProvider = provider;
+            mLastLocation = new Location(mProvider);
+        }
+
+        @Override
+        public void onLocationChanged(Location newLocation) {
+            if (newLocation.getLatitude() == 0.0
+                    && newLocation.getLongitude() == 0.0) {
+                // Hack to filter out 0.0,0.0 locations
+                return;
+            }
+            if (!mValid) {
+                Log.d(TAG, "Got first location.");
+            }
+            mLastLocation.set(newLocation);
+            mValid = true;
+        }
+
+        @Override
+        public void onProviderEnabled(String provider) {
+        }
+
+        @Override
+        public void onProviderDisabled(String provider) {
+            mValid = false;
+        }
+
+        @Override
+        public void onStatusChanged(
+                String provider, int status, Bundle extras) {
+            switch(status) {
+                case android.location.LocationProvider.OUT_OF_SERVICE:
+                case android.location.LocationProvider.TEMPORARILY_UNAVAILABLE: {
+                    mValid = false;
+                    break;
+                }
+            }
+        }
+
+        public Location current() {
+            return mValid ? mLastLocation : null;
+        }
+    }
+}
Index: packages/apps/Settings/res/values/bools.xml
===================================================================
--- packages/apps/Settings/res/values/bools.xml	(revision 12230)
+++ packages/apps/Settings/res/values/bools.xml	(revision 12231)
@@ -51,4 +51,5 @@
 	<bool name="remove_sound_settings_cast">true</bool>
 	
 	<bool name="config_remove_wifi_calling">true</bool>
+	<bool name="feature_ota_getlocation_on">true</bool>
 </resources>
