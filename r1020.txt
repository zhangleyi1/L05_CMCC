Index: packages/apps/GalleryTcl/Android.mk
===================================================================
--- packages/apps/GalleryTcl/Android.mk	(revision 0)
+++ packages/apps/GalleryTcl/Android.mk	(revision 1020)
@@ -0,0 +1,37 @@
+LOCAL_PATH:= $(call my-dir)
+
+include $(CLEAR_VARS)
+
+LOCAL_MODULE_TAGS := optional
+
+LOCAL_SRC_FILES := $(call all-java-files-under, src)
+
+LOCAL_RESOURCE_DIR := $(LOCAL_PATH)/res
+LOCAL_RESOURCE_DIR += frameworks/support/v7/appcompat/res
+LOCAL_RESOURCE_DIR += frameworks/support/v7/recyclerview/res
+
+LOCAL_STATIC_JAVA_LIBRARIES := libnineoldandroids android-common glide android-support-design android-support-v4 android-support-v7-appcompat android-support-v7-recyclerview libphotoview librebound
+LOCAL_STATIC_JAVA_AAR_LIBRARIES += libalivlayout
+
+LOCAL_AAPT_FLAGS := --auto-add-overlay
+LOCAL_AAPT_FLAGS += --extra-packages android.support.v7.appcompat
+LOCAL_AAPT_FLAGS += --extra-packages android.support.v7.recyclerview
+LOCAL_AAPT_FLAGS += --extra-packages libalivlayout
+
+LOCAL_PACKAGE_NAME := GalleryTcl
+
+LOCAL_CERTIFICATE := platform
+
+#LOCAL_SDK_VERSION := current
+
+include $(BUILD_PACKAGE)
+
+########################################
+include $(CLEAR_VARS) 
+
+LOCAL_PREBUILT_STATIC_JAVA_LIBRARIES := libnineoldandroids:libs/library-2.4.0.jar libphotoview:libs/uk-co-senab-photoview.jar librebound:libs/rebound-0.3.8.jar
+LOCAL_PREBUILT_STATIC_JAVA_LIBRARIES += libalivlayout:libs/vlayout-1.2.1.aar
+
+include $(BUILD_MULTI_PREBUILT) 
+
+include $(call all-makefiles-under, $(LOCAL_PATH))
Index: packages/apps/GalleryTcl/AndroidManifest.xml
===================================================================
--- packages/apps/GalleryTcl/AndroidManifest.xml	(revision 0)
+++ packages/apps/GalleryTcl/AndroidManifest.xml	(revision 1020)
@@ -0,0 +1,35 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.gallery.tclgallery">
+
+    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
+    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
+	
+	<uses-sdk android:minSdkVersion="14"
+			android:targetSdkVersion="23"/>
+
+    <application
+        android:name=".application.GooglePhotoApplication"
+        android:allowBackup="true"
+        android:icon="@mipmap/ic_launcher"
+        android:label="@string/app_name"
+        android:supportsRtl="true"
+        android:theme="@style/AppTheme">
+        <activity android:name=".ui.GalleryBaseActivity">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+
+                <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
+        </activity>
+        <activity android:name=".ui.GalleryHomeActivity" />
+        <activity android:name=".ui.GalleryCreateActivity" />
+        <activity android:name=".ui.LocalScanActivity" />
+        <activity android:name=".ui.AlbumPhotoActivity" />
+        <activity android:name=".ui.AlbumOtherActivity" />
+        <activity android:name=".ui.GooglePhotoActivity" />
+        <activity android:name=".ui.RolloutBaseActivity" />
+        <activity android:name=".ui.RolloutPreviewActivity" />
+    </application>
+
+</manifest>
\ No newline at end of file
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/viewholder/DayView.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/viewholder/DayView.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/viewholder/DayView.java	(revision 1020)
@@ -0,0 +1,64 @@
+package com.gallery.tclgallery.viewholder;
+
+import android.content.Context;
+import android.support.v7.widget.GridLayoutManager;
+import android.support.v7.widget.RecyclerView;
+import android.util.Log;
+import android.view.ScaleGestureDetector;
+import android.view.View;
+
+import com.alibaba.android.vlayout.LayoutHelper;
+import com.gallery.tclgallery.ui.adapter.DayViewAdapter;
+import com.gallery.tclgallery.ui.adapter.base.BaseViewAdapter;
+import com.gallery.tclgallery.viewholder.base.BasePhotoView;
+
+import java.util.LinkedList;
+import java.util.List;
+
+
+/**
+ * Google相册日视图
+ * Created by jiaojie.jia on 2017/3/20.
+ */
+
+public class DayView extends BasePhotoView {
+    public static DayView dayview;
+    public  List<LayoutHelper> helpers = new LinkedList<>();
+    public Context mcontext=context;
+    public RecyclerView recy =mRecyclerView;
+    public static int CLUMN_COUNT = 4;
+
+    public DayView(Context context) {
+        super(context);
+    }
+
+    @Override
+    protected ScaleGestureDetector getScaleDetector() {
+        return new ScaleGestureDetector(context, new ScaleGestureDetector.SimpleOnScaleGestureListener() {
+            @Override
+            public boolean onScale(ScaleGestureDetector detector) {
+                if (detector.getScaleFactor() < 1) {
+                    View child = mRecyclerView.getChildAt(0);
+                    if (child != null) {
+                        int position = mRecyclerView.getLayoutManager().getPosition(child);
+                        int section = ((DayViewAdapter) mAdapter).getSectionInMonthView(position);
+                        mSwitchViewListener.onSwitchViewBySection(section);
+                    }
+                }
+                return true;
+            }
+        });
+    }
+
+    @Override
+    protected GridLayoutManager getLayoutManager() {
+        return new GridLayoutManager(context, CLUMN_COUNT);
+    }
+
+
+
+    @Override
+    protected BaseViewAdapter getAdapter() {
+        return new DayViewAdapter();
+    }
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/viewholder/RolloutViewPager.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/viewholder/RolloutViewPager.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/viewholder/RolloutViewPager.java	(revision 1020)
@@ -0,0 +1,75 @@
+package com.gallery.tclgallery.viewholder;
+
+import android.content.Context;
+import android.support.v4.view.ViewPager;
+import android.util.AttributeSet;
+import android.view.MotionEvent;
+
+/**
+ * Found at http://stackoverflow.com/questions/7814017/is-it-possible-to-disable-scrolling-on-a-viewpager.
+ * Convenient way to temporarily disable ViewPager navigation while interacting with ImageView.
+ * 
+ * Julia Zudikova
+ */
+
+/**
+ * Hacky fix for Issue #4 and
+ * http://code.google.com/p/android/issues/detail?id=18990
+ * <p/>
+ * ScaleGestureDetector seems to mess up the touch events, which means that
+ * ViewGroups which make use of onInterceptTouchEvent throw a lot of
+ * IllegalArgumentException: pointerIndex out of range.
+ * <p/>
+ * There's not much I can do in my code for now, but we can mask the result by
+ * just catching the problem and ignoring it.
+ *
+ * @author Chris Banes
+ */
+public class RolloutViewPager extends ViewPager {
+
+	private boolean isLocked;
+	
+    public RolloutViewPager(Context context) {
+        super(context);
+        isLocked = false;
+    }
+
+    public RolloutViewPager(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        isLocked = false;
+    }
+
+    @Override
+    public boolean onInterceptTouchEvent(MotionEvent ev) {
+    	if (!isLocked) {
+	        try {
+	            return super.onInterceptTouchEvent(ev);
+	        } catch (IllegalArgumentException e) {
+	            e.printStackTrace();
+	            return false;
+	        }
+    	}
+    	return false;
+    }
+
+    @Override
+    public boolean onTouchEvent(MotionEvent event) {
+        if (!isLocked) {
+            return super.onTouchEvent(event);
+        }
+        return false;
+    }
+    
+	public void toggleLock() {
+		isLocked = !isLocked;
+	}
+
+	public void setLocked(boolean isLocked) {
+		this.isLocked = isLocked;
+	}
+
+	public boolean isLocked() {
+		return isLocked;
+	}
+	
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/viewholder/base/BaseHolder.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/viewholder/base/BaseHolder.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/viewholder/base/BaseHolder.java	(revision 1020)
@@ -0,0 +1,54 @@
+package com.gallery.tclgallery.viewholder.base;
+
+import android.app.Activity;
+import android.content.Context;
+import android.view.View;
+
+/**
+ * 模块基类
+ */
+public abstract class BaseHolder<T> {
+    protected final Context context;                    // 上下文
+    protected View view;                                // 视图
+    protected T data;                                   // 数据
+
+
+    public BaseHolder(Context context) {
+        this.context = context;
+        init();
+        view = initView();
+    }
+
+    /**
+     * 初始化视图之前的准备
+     */
+    public void init() {
+    }
+
+    /**
+     * 初始化视图
+     */
+    public abstract View initView();
+
+
+    /**
+     * 设置数据
+     */
+    public void setData(T data) {
+        if (context instanceof Activity && ((Activity) context).isFinishing()) return;
+        this.data = data;
+        refreshView();
+    }
+
+    /**
+     * 刷新视图
+     */
+    public abstract void refreshView();
+
+    /**
+     * 获得所属的持有者View
+     */
+    public View getRootView() {
+        return view;
+    }
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/viewholder/base/BasePhotoView.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/viewholder/base/BasePhotoView.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/viewholder/base/BasePhotoView.java	(revision 1020)
@@ -0,0 +1,332 @@
+package com.gallery.tclgallery.viewholder.base;
+
+import android.content.Context;
+import android.content.Intent;
+import android.support.v7.widget.GridLayoutManager;
+import android.support.v7.widget.RecyclerView;
+import android.support.v7.widget.SimpleItemAnimator;
+import android.view.ScaleGestureDetector;
+import android.view.View;
+
+
+import com.gallery.tclgallery.R;
+import com.gallery.tclgallery.bean.CameraItem;
+import com.gallery.tclgallery.bean.State;
+import com.gallery.tclgallery.contract.GooglePhotoContract;
+import com.gallery.tclgallery.fastscroll.FastScroller;
+import com.gallery.tclgallery.listener.DragSelectTouchListener;
+import com.gallery.tclgallery.listener.OnSwitchViewListener;
+import com.gallery.tclgallery.sectionedrecyclerviewadapter.SectionedSpanSizeLookup;
+import com.gallery.tclgallery.ui.GooglePhotoActivity;
+import com.gallery.tclgallery.ui.RolloutPreviewActivity;
+import com.gallery.tclgallery.ui.adapter.base.BaseViewAdapter;
+import com.gallery.tclgallery.utils.Format;
+import com.gallery.tclgallery.utils.RolloutBDInfo;
+import com.gallery.tclgallery.utils.UIUtils;
+
+import java.io.Serializable;
+import java.util.ArrayList;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
+
+/**
+ * 相册视图基类
+ * Created by jiaojie.jia on 2017/3/20.
+ */
+
+public abstract class BasePhotoView extends BaseHolder<LinkedHashMap<String, List<CameraItem>>> {
+    protected RecyclerView mRecyclerView;           // 列表
+    protected BaseViewAdapter mAdapter;
+    private FastScroller fastScroller;              // 右侧快速导航
+    private DragSelectTouchListener touchListener;              // 滑动选择 Listener
+    protected OnSwitchViewListener mSwitchViewListener;         // 缩放手势 Listener
+    private RolloutBDInfo bdInfo;
+    private GooglePhotoContract.Presenter mPresenter;
+
+    public BasePhotoView(Context context) {
+        super(context);
+    }
+
+    public void setSwitchViewListener(OnSwitchViewListener switchViewListener) {
+        mSwitchViewListener = switchViewListener;
+    }
+
+    public void setPresenter(GooglePhotoContract.Presenter presenter) {
+        mPresenter = presenter;
+        mAdapter.setPresenter(presenter);
+    }
+
+    @Override
+    public View initView() {
+        View view = View.inflate(context, R.layout.holder_month_view, null);
+        mRecyclerView = (RecyclerView) view.findViewById(R.id.rv_month);
+        fastScroller = (FastScroller) view.findViewById(R.id.fastscroll);
+        mAdapter = getAdapter();
+        mRecyclerView.setAdapter(mAdapter);
+        fastScroller.setRecyclerView(mRecyclerView);
+        final GridLayoutManager layoutManager = getLayoutManager();
+        SectionedSpanSizeLookup lookup = new SectionedSpanSizeLookup(mAdapter, layoutManager);
+        layoutManager.setSpanSizeLookup(lookup);
+
+        mRecyclerView.setLayoutManager(layoutManager);
+
+        mAdapter.setLongClickListener(new View.OnLongClickListener() {
+            @Override
+            public boolean onLongClick(View v) {
+                GooglePhotoActivity.LongCickState.invalidateOptionsMenu();
+                State.SelectState=true;
+                int position = mRecyclerView.getChildAdapterPosition(v);
+                mAdapter.setSelected(position);
+                touchListener.setStartSelectPosition(position);
+                refreshView();
+                return false;
+            }
+        });
+
+        mAdapter.setClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                if (State.SelectState) {
+                    int position = mRecyclerView.getChildAdapterPosition(v);
+                    mAdapter.setSelected(position);
+//                    Log.d("whj", "onClick: position"+position);
+
+                }else {
+                    LinkedHashMap<String, List<CameraItem>> mAllPhotos;       // key-日期（月或日), value-该日期下的所有照片
+
+                    List<String> mTitles;                             // 日期集合
+                    List<List<CameraItem>> mSectionPhotos;      // 照片集合
+                    List<CameraItem> items;
+                    mAllPhotos = data;
+                    mTitles = new ArrayList<>(mAllPhotos.size());
+                    mSectionPhotos = new ArrayList<>(mAllPhotos.size());
+                    items = new ArrayList<>();
+                    for (Map.Entry<String, List<CameraItem>> entry : mAllPhotos.entrySet()) {
+                        mTitles.add(entry.getKey());
+                        mSectionPhotos.add(entry.getValue());
+                    }
+                    for (List<CameraItem> photoSection : mSectionPhotos) {
+                        for (CameraItem cameraItem : photoSection) {
+                            items.add(cameraItem);
+                        }
+                    }
+
+                    bdInfo=new RolloutBDInfo();
+                    int position = mRecyclerView.getChildAdapterPosition(v);
+
+                    int section = 0;
+                    int sum = 0;
+                    for (List<CameraItem> photoSection : mSectionPhotos) {
+                        sum += photoSection.size() + 1;
+                        if (position < sum) {
+                            break;
+                        }
+                        section++;
+                    }
+                    int dataPosition = position -section - 1;
+                    int Rposition=(dataPosition < 0 ? 0 : dataPosition);
+
+                    View c=layoutManager.getChildAt(0);
+                    int top=c.getTop();
+                    int firstVisiblePosition=layoutManager.findFirstVisibleItemPosition();
+                    int a, b;
+                    int Rposition1=0;
+                    int  size = 0;
+                    int hang = 0;
+                    //模拟位置
+                    if (mPresenter.getViewType()== GooglePhotoActivity.ViewType.DAY) {
+                    for (int i=0;i<section;i++){
+                        Rposition1+=mSectionPhotos.get(i).size()+(4-mSectionPhotos.get(i).size()%4);
+                        size+=mSectionPhotos.get(i).size();
+                    }
+                    Rposition1=Rposition-size+Rposition1;
+
+                    //模拟行列划分3等分进行计算
+
+                        a = Rposition1 / 4;
+                        b = Rposition1 % 4;
+                        bdInfo.width = (UIUtils.getScreenWidth() - 4 * UIUtils.dip2px(2)) / 4;
+                        bdInfo.height = bdInfo.width;
+
+                        //把屏幕划分成了行和列，采用行列估算方法，进行计算位置
+                        bdInfo.x = UIUtils.dip2px(1) + b * bdInfo.width + b * UIUtils.dip2px(2);
+
+                        //模拟实际firstVisiblePosition的行数
+//                    int title=1;
+//                    Log.d("mm", "onClick: 1 = "+firstVisiblePosition);
+                        for (int a1 = 0; a1 < mSectionPhotos.size(); a1++) {
+                            if (a1 != 0) {
+                                firstVisiblePosition = firstVisiblePosition - 1;
+//                            title++;
+                            }
+                            if (firstVisiblePosition > 0) {
+                                if (((firstVisiblePosition - mSectionPhotos.get(a1).size())) >= 0) {
+                                    firstVisiblePosition = firstVisiblePosition - mSectionPhotos.get(a1).size();
+                                    hang += mSectionPhotos.get(a1).size() / 4 + (mSectionPhotos.get(a1).size() % 4 != 0 ? 1 : 0);
+//                                Log.d("mm", "onClick: 2 = "+firstVisiblePosition+"\t\thang = "+hang);
+
+                                } else {
+                                    hang += firstVisiblePosition / 4 + (firstVisiblePosition % 4 == 0 ? 0 : 1);
+//                                Log.d("mm", "onClick: 3 = "+firstVisiblePosition+"\t\thang = "+hang);
+                                    break;
+                                }
+                            } else {
+                                break;
+                            }
+                        }
+                        hang = hang - 1;
+//                    bdInfo.y = UIUtils.dip2px( 1) + bdInfo.height * (a - firstVisiblePosition) + top + (a - firstVisiblePosition) * UIUtils.dip2px( 2) + top - UIUtils.dip2px( 1)+section*UIUtils.dip2px(20);
+                        bdInfo.y = UIUtils.dip2px(1) + bdInfo.height * (a - hang) + top + (a - hang) * UIUtils.dip2px(2) + layoutManager.getPaddingTop() - UIUtils.dip2px(1);
+//                    Log.d("mm", "onClick: firstVisiblePosition = "+firstVisiblePosition+"\t\tbdInfo.y = "+bdInfo.y+"\t\tRposition1 = "+Rposition1+"\t\tRposition = "+Rposition);
+//                    Log.d("nn", "bdInfo.height"+bdInfo.height+"\nbdInfo.height * (a - hang) = "+bdInfo.height * (a - hang)+"\ntop = "+top+"\nlayoutManager.getPaddingTop() = "
+//                            +layoutManager.getPaddingTop()+"\ntitle*UIUtils.dip2px(20) = "+title*UIUtils.dip2px(5)+"\n(a - hang) * UIUtils.dip2px( 2) = "+(a - hang) * UIUtils.dip2px( title)+"\ntitle"+title+"\nbdInfo.y = "+bdInfo.y);
+//                    Log.d("mm", "onClick: hang = "+hang+"\t\tbdInfo.y = "+bdInfo.y+"\t\tRposition1 = "+Rposition1+"\t\tRposition = "+Rposition+"\t\thang1 = "+hang1+"\t\tfirstVisiblePosition = "+firstVisiblePosition+"\t\ttop = "+top);
+                    }else if (mPresenter.getViewType()== GooglePhotoActivity.ViewType.MONTH){
+                        for (int i=0;i<section;i++){
+                            Rposition1+=mSectionPhotos.get(i).size()+(6-mSectionPhotos.get(i).size()%6);
+                            size+=mSectionPhotos.get(i).size();
+                        }
+                        Rposition1=Rposition-size+Rposition1;
+
+                        //模拟行列划分6等分进行计算
+
+                        a = Rposition1 / 6;
+                        b = Rposition1 % 6;
+                        bdInfo.width = (UIUtils.getScreenWidth() - 6 * UIUtils.dip2px(2)) / 6;
+                        bdInfo.height = bdInfo.width;
+
+                        //把屏幕划分成了行和列，采用行列估算方法，进行计算位置
+                        bdInfo.x = UIUtils.dip2px(1) + b * bdInfo.width + b * UIUtils.dip2px(2);
+
+                        //模拟实际firstVisiblePosition的行数
+                        for (int a1 = 0; a1 < mSectionPhotos.size(); a1++) {
+                            if (a1 != 0) {
+                                firstVisiblePosition = firstVisiblePosition - 1;
+                            }
+                            if (firstVisiblePosition > 0) {
+                                if (((firstVisiblePosition - mSectionPhotos.get(a1).size())) >= 0) {
+                                    firstVisiblePosition = firstVisiblePosition - mSectionPhotos.get(a1).size();
+                                    hang += mSectionPhotos.get(a1).size() / 6 + (mSectionPhotos.get(a1).size() % 6 != 0 ? 1 : 0);
+                                } else {
+                                    hang += firstVisiblePosition / 6 + (firstVisiblePosition % 6 == 0 ? 0 : 1);
+                                    break;
+                                }
+                            } else {
+                                break;
+                            }
+                        }
+                        hang = hang - 1;
+                        bdInfo.y = UIUtils.dip2px(1) + bdInfo.height * (a - hang) + top + (a - hang) * UIUtils.dip2px(10) + layoutManager.getPaddingTop() - UIUtils.dip2px(1)+(section+1)*UIUtils.dip2px(20);
+                    }
+                    Intent intent = new Intent(context, RolloutPreviewActivity.class);
+                    intent.putExtra("data",  (Serializable)items);
+                    intent.putExtra("bdinfo", bdInfo);
+                    intent.putExtra("index", Rposition);
+                    intent.putExtra("type", 2);
+                    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+                    context.startActivity(intent);
+
+                }
+            }
+        });
+
+        // 添加滑动监听
+        touchListener = new DragSelectTouchListener();
+        mRecyclerView.addOnItemTouchListener(touchListener);
+
+        // 取消默认选中动画（闪烁）
+        RecyclerView.ItemAnimator animator = mRecyclerView.getItemAnimator();
+        if (animator instanceof SimpleItemAnimator) {
+            ((SimpleItemAnimator) animator).setSupportsChangeAnimations(false);
+        }
+
+        touchListener.setSelectListener(new DragSelectTouchListener.onSelectListener() {
+            @Override
+            public void onSelectChange(int start, int end, boolean isSelected) {
+                mAdapter.selectRangeChange(start, end, isSelected);
+            }
+        });
+
+        touchListener.setScaleGestureDetector(getScaleDetector());
+
+        return view;
+    }
+
+    protected abstract ScaleGestureDetector getScaleDetector();
+
+    protected abstract GridLayoutManager getLayoutManager();
+    protected abstract BaseViewAdapter getAdapter();
+
+
+    /**
+     * 滚动到指定位置
+     */
+    public void scrollToPosition(int position) {
+        if (mRecyclerView != null) {
+            mRecyclerView.scrollToPosition(position);
+        }
+    }
+
+    /**
+     * 滚动到指定分组
+     */
+    public void scrollToSection(int section) {
+        int position = mAdapter.getHeaderPosition(section);
+        if (mRecyclerView != null) {
+            mRecyclerView.scrollToPosition(position);
+            int scrollY = 0;
+            RecyclerView.ViewHolder viewHolder = mRecyclerView.findViewHolderForAdapterPosition(position);
+            if (viewHolder != null) {        // 显示在屏幕中
+                View view = viewHolder.itemView;
+                scrollY = view.getTop();
+            } else {                        // 没有显示
+                View view = mRecyclerView.getChildAt(0);
+                if (view != null) {
+                    int firstVisable = mRecyclerView.getLayoutManager().getPosition(view);
+                    if (firstVisable < position) {       // 目标位置在下方，需要滚动
+                        scrollY = UIUtils.getScreenHeight() - UIUtils.dip2px(98) - UIUtils.getStatusBarHeight();
+                    }
+                }
+            }
+            final int finalScrollY = scrollY;
+            if (finalScrollY != 0) {
+                mRecyclerView.postDelayed(new Runnable() {
+                    @Override
+                    public void run() {
+                        mRecyclerView.scrollBy(0, finalScrollY);
+                    }
+                }, 100);
+            }
+        }
+    }
+
+    /**
+     * 判断当前视图是否填充了数据
+     */
+    public boolean isEmpty() {
+        return !(mAdapter != null && mAdapter.getItemCount() > 0);
+    }
+
+    @Override
+    public void refreshView() {
+        if (Format.isEmpty(data)) return;
+        mAdapter.setAllPhotos(data);
+        mRecyclerView.postDelayed(new Runnable() {
+            @Override
+            public void run() {
+
+                    fastScroller.initTimelineView();
+
+            }
+        }, 1000);
+    }
+
+    /**
+     * 清除数据选中状态
+     */
+    public void clearSelectedStatus() {
+        mAdapter.notifyDataSetChanged();
+    }
+
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/viewholder/base/BasePhotoItemHolder.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/viewholder/base/BasePhotoItemHolder.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/viewholder/base/BasePhotoItemHolder.java	(revision 1020)
@@ -0,0 +1,85 @@
+package com.gallery.tclgallery.viewholder.base;
+
+import android.support.v7.widget.RecyclerView;
+import android.text.TextUtils;
+import android.view.View;
+import android.widget.ImageView;
+import android.widget.RelativeLayout;
+import android.widget.TextView;
+
+import com.gallery.tclgallery.R;
+import com.gallery.tclgallery.bean.CameraItem;
+import com.gallery.tclgallery.bean.State;
+import com.gallery.tclgallery.utils.DateUtil;
+import com.gallery.tclgallery.utils.ImageLoader;
+import com.gallery.tclgallery.utils.UIUtils;
+import com.nineoldandroids.view.ViewPropertyAnimator;
+
+
+/**
+ * 照片item基类
+ * Created by jiaojie.jia on 2017/3/20.
+ */
+
+public abstract class   BasePhotoItemHolder extends RecyclerView.ViewHolder {
+
+    private final ImageView imgItem;        // 照片图片
+    private final ImageView imgSelect;      // 右上角选中标识图片
+    private final ImageView imageVideo;
+    private final TextView duration;
+
+    private ViewPropertyAnimator mAnimator;
+
+    public BasePhotoItemHolder(View itemView) {
+        super(itemView);
+        imgItem = (ImageView) itemView.findViewById(R.id.iv_photo);
+        imgSelect = (ImageView) itemView.findViewById(R.id.iv_select);
+        imageVideo = (ImageView) itemView.findViewById(R.id.iv_video);
+        duration = (TextView) itemView.findViewById(R.id.video_duration);
+        int width = UIUtils.getScreenWidth() / getClumnCount();
+        RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(width, width);
+        itemView.setLayoutParams(lp);
+    }
+
+    public void setData(CameraItem cameraItem) {
+        if (/*System.getProperty("isLongSelect", "false").equals("true")*/State.SelectState) {
+            imgSelect.setVisibility(View.VISIBLE);
+            imgSelect.setSelected(cameraItem.isSelected());
+//            startAnim(photoItem);
+
+        } else {
+            imgSelect.setVisibility(View.GONE);
+        }
+        String type = cameraItem.getMime_type();
+        if (type.indexOf("video") != -1) {
+            imageVideo.setVisibility(View.VISIBLE);
+            duration.setVisibility(View.VISIBLE);
+            duration.setText(DateUtil.convertDuration(cameraItem.getDuration()));
+        }else {
+            imageVideo.setVisibility(View.GONE);
+            duration.setVisibility(View.GONE);
+        }
+        String path = TextUtils.isEmpty(cameraItem.getThumbnail()) ? cameraItem.getPath() : cameraItem.getThumbnail();
+        ImageLoader.loadGalleryImage(imgItem.getContext(), path, imgItem);
+    }
+
+
+    public abstract int getClumnCount();
+
+    /**
+     * 选中动画
+     *
+     * @param cameraItem
+     */
+    private void startAnim(CameraItem cameraItem) {
+        if (mAnimator == null) {
+            mAnimator = ViewPropertyAnimator.animate(imgItem);
+        }
+        if (cameraItem.isSelected()) {
+            mAnimator.scaleX(0.8f).scaleY(0.8f).setDuration(200);
+        } else {
+            mAnimator.scaleX(1.0f).scaleY(1.0f).setDuration(200);
+        }
+        mAnimator.start();
+    }
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/viewholder/YearView.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/viewholder/YearView.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/viewholder/YearView.java	(revision 1020)
@@ -0,0 +1,105 @@
+package com.gallery.tclgallery.viewholder;
+
+import android.content.Context;
+import android.graphics.Rect;
+import android.support.v7.widget.LinearLayoutManager;
+import android.support.v7.widget.RecyclerView;
+import android.view.ScaleGestureDetector;
+import android.view.View;
+
+import com.gallery.tclgallery.R;
+import com.gallery.tclgallery.bean.CameraItem;
+import com.gallery.tclgallery.listener.DragSelectTouchListener;
+import com.gallery.tclgallery.listener.OnGridViewClickListener;
+import com.gallery.tclgallery.listener.OnSwitchViewListener;
+import com.gallery.tclgallery.ui.adapter.YearViewAdapter;
+import com.gallery.tclgallery.utils.Format;
+import com.gallery.tclgallery.viewholder.base.BaseHolder;
+import com.gallery.tclgallery.viewholder.item.YearViewItemHolder;
+
+import java.util.LinkedHashMap;
+import java.util.List;
+
+
+/**
+ * Created by jiaojie.jia on 2017/3/21.
+ */
+
+public class YearView extends BaseHolder<LinkedHashMap<String, List<CameraItem>>> {
+
+    private RecyclerView mRecyclerView;                     // 列表
+    private YearViewAdapter mAdapter;
+    private YearViewItemHolder yearViewItemHolder;
+
+    private DragSelectTouchListener touchListener;          // 滑动选择 Listener
+    private OnSwitchViewListener mSwitchViewListener;       // 缩放手势 Listener
+
+    public YearView(Context context) {
+        super(context);
+    }
+
+    public void setSwitchViewListener(OnSwitchViewListener switchViewListener) {
+        mSwitchViewListener = switchViewListener;
+    }
+
+    @Override
+    public View initView() {
+        View view = View.inflate(context, R.layout.holder_year_view, null);
+        mRecyclerView = (RecyclerView) view.findViewById(R.id.rv_month);
+        mAdapter = new YearViewAdapter();
+        mRecyclerView.setAdapter(mAdapter);
+        LinearLayoutManager layoutManager = new LinearLayoutManager(context);
+        mRecyclerView.setLayoutManager(layoutManager);
+//        mRecyclerView.addItemDecoration(new SpaceItemDecoration(UIUtils.dip2px(5)));
+
+        touchListener = new DragSelectTouchListener();
+        mRecyclerView.addOnItemTouchListener(touchListener);
+        touchListener.setScaleGestureDetector(new ScaleGestureDetector(context, new ScaleGestureDetector.SimpleOnScaleGestureListener() {
+            @Override
+            public boolean onScale(ScaleGestureDetector detector) {
+                if (detector.getScaleFactor() > 1) {
+                    mSwitchViewListener.onSwitchView(detector.getScaleFactor());
+                }
+                return true;
+            }
+        }));
+
+        mAdapter.setClickListener(new OnGridViewClickListener() {
+            @Override
+            public void onGridViewClick(int parentPosition) {
+                int monthPosition = mAdapter.getMonthPosition(parentPosition);
+                mSwitchViewListener.onSwitchViewBySection(monthPosition);
+            }
+        });
+
+        return view;
+    }
+
+    @Override
+    public void refreshView() {
+        if (Format.isEmpty(data)) return;
+        mAdapter.setAllPhotos(data);
+//        yearViewItemHolder.setAllPhotos(data);
+    }
+
+    /**
+     * 判断当前视图是否填充了数据
+     */
+    public boolean isEmpty() {
+        return !(mAdapter != null && mAdapter.getItemCount() > 0);
+    }
+
+    private class SpaceItemDecoration extends RecyclerView.ItemDecoration {
+
+        private int space;
+
+        SpaceItemDecoration(int space) {
+            this.space = space;
+        }
+
+        @Override
+        public void getItemOffsets(Rect outRect, View view, RecyclerView parent, RecyclerView.State state) {
+            outRect.bottom = space;
+        }
+    }
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/viewholder/MyListView.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/viewholder/MyListView.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/viewholder/MyListView.java	(revision 1020)
@@ -0,0 +1,706 @@
+package com.gallery.tclgallery.viewholder;
+
+import android.content.Context;
+import android.database.DataSetObserver;
+import android.graphics.Color;
+import android.media.Image;
+import android.text.TextUtils;
+import android.util.Log;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.Adapter;
+import android.widget.BaseAdapter;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.ListView;
+import android.widget.TextView;
+
+
+import com.gallery.tclgallery.R;
+import com.gallery.tclgallery.bean.CameraItem;
+import com.gallery.tclgallery.data.GooglePhotoScanner;
+import com.gallery.tclgallery.ui.GooglePhotoActivity;
+import com.gallery.tclgallery.utils.Format;
+import com.gallery.tclgallery.utils.ImageLoader;
+import com.gallery.tclgallery.utils.UIUtils;
+import com.gallery.tclgallery.viewholder.base.BaseHolder;
+
+import java.util.ArrayList;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
+
+/**
+ * Created by Administrator on 2017/10/3 0003.
+ */
+
+public class MyListView extends BaseHolder {
+    private static String TAG = "666";
+
+    protected List<Integer> one;
+    protected List<Integer> two;
+    private List<String> list = null;
+    private List<String> groupkey = new ArrayList<String>();
+    private ListView myListView;
+    private LinkedHashMap<String, List<CameraItem>> mAllPhotos;
+    private Context myContext;
+    protected List<String> mTitles;                             // 日期集合
+    protected List<List<CameraItem>> mSectionPhotos;      // 照片集合
+    protected List<CameraItem> items;                       // 把上面照片集合转成一维集合，方便取值
+    protected List<Integer> mTitlesIndex;
+
+    public MyListView(Context context) {
+        super(context);
+        myContext = context;
+    }
+
+    @Override
+    public View initView() {
+        View view = View.inflate(context, R.layout.collage_view, null);
+        myListView = (ListView) view.findViewById(R.id.list);
+//        myListView.setBackgroundColor(Color.BLUE);
+        GooglePhotoScanner.startScan();
+        mAllPhotos = GooglePhotoScanner.getPhotoSections(GooglePhotoActivity.ViewType.DAY);
+        Log.d(TAG, "initView: mAllPhotos" + mAllPhotos.keySet() + "\tmAllPhotos  == " + mAllPhotos.size());
+        //添加 数据
+        setAllPhotos(mAllPhotos);
+        //添加状态为1和2的行数
+//        classify();
+        /*for (int i = 0; i < 20; i++) {
+            getRow(i);
+            getGrop(i);
+            Log.d("1111", "initView: i = " + i + "\tgetGrop= " + getGrop(i) + "\tgetRow = " + getRow(i));
+        }*/
+        Log.d(TAG, "initView: mSectionPhotos.get(0).size()" + mSectionPhotos.get(0).size());
+        MYAdapter myAdapter = new MYAdapter(context);
+        myListView.setAdapter(myAdapter);
+        return view;
+    }
+
+
+    /**
+     * 根据行数获取组的行数
+     */
+    public int getGrop(int hang) {
+        int sum = 0;
+        for (int i = 0; i < mSectionPhotos.size(); i++) {
+            if (i == 0) {
+                sum += (mSectionPhotos.get(i).size() - 1) / 3 + ((mSectionPhotos.get(i).size() - 1) % 3 != 0 ? 1 : 0);
+            } else {
+                sum += mSectionPhotos.get(i).size() / 3 + (mSectionPhotos.get(i).size() % 3 != 0 ? 1 : 0);
+            }
+            if ((sum - hang) >= 0) {
+//                Log.d("1111", "getGrop: " + i);
+                return i;
+            }
+        }
+        return -1;
+    }
+
+    public int getRow(int hang) {
+        int i = getGrop(hang);
+        int sum = 0;
+        int row = 0;
+        if (i == 0) {
+            row = hang;
+        } else if (i > 0) {
+            for (int a = 1; a < i; a++) {
+                sum += mSectionPhotos.get(a).size() / 3 + (mSectionPhotos.get(a).size() % 3 != 0 ? 1 : 0);
+            }
+            sum = sum + (mSectionPhotos.get(0).size() - 1) / 3 + ((mSectionPhotos.get(0).size() - 1) % 3 != 0 ? 1 : 0);
+            row = hang - sum - 1;
+        }
+//        Log.d("1111", "getRow: sum = "+sum+"\t row = "+row+"\t hang "+hang);
+        return row;
+    }
+
+    /**
+     * 计算状态为1和2的行数
+     */
+    private void classify() {
+        int typehang = 0;
+        int yu = 0;
+        List<CameraItem> list;
+        one = new ArrayList<>();
+        two = new ArrayList<>();
+        //判断是今天
+        if (true) {
+            Log.d(TAG, "classify: " + one + "\t\t" + two);
+            one.add(0);
+            list = mSectionPhotos.get(0);
+            yu = (list.size() - 1) % 3;
+            typehang += 1 + list.size() / 3 + ((list.size() - 1) % 3 != 0 ? 1 : 0);
+            switch (yu) {
+                case 0:
+                    break;
+                case 1:
+                    one.add(typehang);
+                    break;
+                case 2:
+                    two.add(typehang);
+                    break;
+                default:
+                    break;
+            }
+        } else {
+            list = mSectionPhotos.get(0);
+            yu = list.size() % 3;
+            typehang += list.size() / 3 + (list.size() % 3 != 0 ? 1 : 0);
+            switch (yu) {
+                case 0:
+                    break;
+                case 1:
+                    one.add(typehang);
+                    break;
+                case 2:
+                    two.add(typehang);
+                    break;
+                default:
+                    break;
+            }
+        }
+        for (int section = 1; section < mSectionPhotos.size(); section++) {
+            list = mSectionPhotos.get(section);
+            yu = list.size() % 3;
+            typehang += list.size() / 3 + (list.size() % 3 != 0 ? 1 : 0);
+            switch (yu) {
+                case 0:
+                    break;
+                case 1:
+                    one.add(typehang);
+                    break;
+                case 2:
+                    two.add(typehang);
+                    break;
+                default:
+                    break;
+            }
+
+        }
+    }
+
+    @Override
+    public void refreshView() {
+        if (Format.isEmpty(mAllPhotos)) return;
+        setAllPhotos(mAllPhotos);
+    }
+
+    private class MYAdapter extends BaseAdapter {
+        int index = 0;
+        private LayoutInflater mInflater = null;
+
+        public MYAdapter(Context context) {
+            this.mInflater = LayoutInflater.from(context);
+        }
+
+        @Override
+        public void registerDataSetObserver(DataSetObserver dataSetObserver) {
+
+        }
+
+        @Override
+        public void unregisterDataSetObserver(DataSetObserver dataSetObserver) {
+
+        }
+
+        @Override
+        public int getCount() {
+//            return mAllPhotos.keySet().size();
+//            List<CameraItem> list = mAllPhotos.get(mAllPhotos.keySet().toArray()[0]);
+//            mSectionPhotos
+            //是否特殊行
+            //判断是不是今天
+            //添加余数为1的状态行
+            //添加余数为2的状态
+            int zonghang = 0;
+            int hang = 0;
+            List<CameraItem> list;
+            mTitlesIndex = new ArrayList<>();
+            //判断是否是今天
+            if (true) {
+                Log.d("2222", "getCount: "+zonghang);mTitlesIndex.add(new Integer(zonghang));
+                list = mSectionPhotos.get(0);
+                hang = 1 + (list.size() - 1) / 3 + ((list.size() - 1) % 3 != 0 ? 1 : 0);
+                zonghang = hang;
+            } else {
+                Log.d("2222", "getCount: "+zonghang);   mTitlesIndex.add(new Integer(zonghang));
+                list = mSectionPhotos.get(0);
+                hang = list.size() / 3 + (list.size() % 3 != 0 ? 1 : 0);
+                zonghang = hang;
+            }
+
+
+            for (int section = 1; section < mSectionPhotos.size(); section++) {
+                Log.d("2222", "getCount: "+zonghang);
+                mTitlesIndex.add(new Integer(zonghang));
+                list = mSectionPhotos.get(section);
+                hang = list.size() / 3 + (list.size() % 3 != 0 ? 1 : 0);
+                zonghang += hang;
+            }
+//            Log.d(TAG, "getCount: "+items.size());
+            Log.d("777", "getCount: " + zonghang);
+            return zonghang ;
+        }
+
+
+        @Override
+        public Object getItem(int i) {
+            return i;
+        }
+
+        @Override
+        public long getItemId(int i) {
+            return i;
+        }
+
+        @Override
+        public boolean hasStableIds() {
+            return true;
+        }
+
+        @Override
+        public View getView(int i, View convertView, ViewGroup viewGroup) {
+            Log.d("777", "getView: i" + i);
+            ViewHolder holder = null;
+            if (convertView == null) {
+
+                holder = new ViewHolder();
+
+                convertView = viewGroup.inflate(context, R.layout.collage_item, null);
+
+                convertView.setTag(holder);
+
+
+            } else {
+
+                holder = (ViewHolder) convertView.getTag();
+            }
+
+            holder.textView = (TextView) convertView.findViewById(R.id.collage_text);
+            holder.imageView1 = (ImageView) convertView.findViewById(R.id.collage_image1);
+            holder.imageView2 = (ImageView) convertView.findViewById(R.id.collage_image2);
+            holder.imageView3 = (ImageView) convertView.findViewById(R.id.collage_image3);
+
+            holder.imageView1.setVisibility(View.INVISIBLE);
+            holder.imageView2.setVisibility(View.INVISIBLE);
+            holder.imageView3.setVisibility(View.INVISIBLE);
+
+//            if (mTitlesIndex.contains(new Integer(i))) {
+                for (Integer a : mTitlesIndex) {
+                    Log.d("qqq", "getView: 1");
+                    if (a == i) {
+                        Log.d("qqq", "getView: 2"+i);
+                        holder.textView.setText("" + mTitles.get(getGrop(i)));
+                        holder.textView.setVisibility(View.VISIBLE);
+                        break;
+                    } else {
+                        holder.textView.setVisibility(View.GONE);
+                    }
+                }
+//            }
+                /*if (mTitles.size() > 0) {
+                    Log.d(TAG, "getView: mTitles.size()" + mTitles.size());
+//                    if (i <= mTitles.size()) {
+                        holder.textView.setText("" + mTitles.get(getGrop(i)));
+                    Log.d("2222", "getView: holder.textView  = "+mTitles.get(getGrop(i)));
+//                    }
+//                    CameraItem item=items.get(i);
+
+//                    holder.imageView.
+//                    mTitles.remove(i);
+                }
+
+            } else {
+                holder.textView.setVisibility(View.GONE);
+//                CameraItem item=items.get(i);
+
+//                holder.textView.setText(item.getPath());
+            }*/
+//第一轮
+//            setPhoto
+            //判断当前循环的状态
+
+            int type = 0;    /*(mSectionPhotos.get(0).size()-1)%3;*///1为图片1屏幕宽度 2为 图片1三分之二宽度 0位全部三分之一宽度
+//            Log.d(TAG, "getView: one = "+one+"\t\ttwo = "+two);
+         /*  for(Integer a:two){
+                if(a==i){
+                    type=2;
+                }else break;
+            }
+            for(Integer a:one){
+                if(a==i){
+                    type=1;
+                }else break;
+            }*/
+            ViewGroup.LayoutParams lp = null;
+            type = /*mSectionPhotos.get(getGrop(i)).size() % 3;*/0;
+            Log.d(TAG, "getView: type" + type);
+            List<CameraItem> list = mSectionPhotos.get(0);
+            int index = 3 * i - 2;
+            //today is true
+            if (getGrop(i) == 0) {
+                if (true) {
+                    type = (mSectionPhotos.get(0).size() - 1) % 3;
+                    if (i == 0) {
+                        Log.d("aaa", "getView: i = "+i+"\ttype = "+type);
+                        if (index <= list.size() - 1) {
+                            Log.i("666", "getView: do 1 in 1");
+                            holder.setData1(list.get(0));
+//                            ViewGroup.LayoutParams lp;
+                            lp = holder.imageView1.getLayoutParams();
+                            lp.width = UIUtils.getScreenWidth();
+                            lp.height = UIUtils.getScreenWidth() / 3;
+                            holder.imageView1.setLayoutParams(lp);
+                            holder.imageView1.setVisibility(View.VISIBLE);
+                        }
+
+                    } else if ((type == 1) && (i == ((mSectionPhotos.get(0).size() - 1) / 3 + (type != 0 ? 1 : 0)))) {
+                        Log.d("aaa", "getView: i = "+i+"\ttype = "+type);
+                        if (index <= list.size() - 1) {
+                            Log.i("666", "getView: do 1 in 1");
+                            holder.setData1(list.get(index));
+//                            ViewGroup.LayoutParams lp;
+                            lp = holder.imageView1.getLayoutParams();
+                            lp.width = UIUtils.getScreenWidth();
+                            lp.height = UIUtils.getScreenWidth() / 3;
+                            holder.imageView1.setLayoutParams(lp);
+                            holder.imageView1.setVisibility(View.VISIBLE);
+                            index++;
+                        }
+                    } else if ((type == 2) && (i == ((mSectionPhotos.get(0).size() - 1) / 3 + ((mSectionPhotos.get(0).size() - 1) % 3 != 0 ? 1 : 0)) - 1)) {
+                        Log.d("aaa", "getView: i = "+i+"\ttype = "+type);
+                        if (index <= list.size() - 1) {
+                            Log.d(TAG, "getView: 1");
+                            holder.setData1(list.get(index));
+//                            ViewGroup.LayoutParams lp;
+                            lp = holder.imageView1.getLayoutParams();
+                            lp.width = UIUtils.getScreenWidth() / 3 * 2;
+                            lp.height = UIUtils.getScreenWidth() / 3;
+                            holder.imageView1.setLayoutParams(lp);
+                            holder.imageView1.setVisibility(View.VISIBLE);
+                            index++;
+                            Log.d(TAG, "getView: 2");
+                            holder.setData2(list.get(index));
+                            lp = holder.imageView2.getLayoutParams();
+                            lp.width = UIUtils.getScreenWidth() / 3;
+                            lp.height = UIUtils.getScreenWidth() / 3;
+                            holder.imageView2.setLayoutParams(lp);
+                            holder.imageView2.setVisibility(View.VISIBLE);
+                            index++;
+                        }
+                    } else {
+
+                        if (index <= list.size() - 1) {
+
+                            Log.d("aaa", "getView: i = "+i+"\ttype = "+type);
+                            Log.i("666", "getView: do 1 in 3");
+                            holder.setData1(list.get(index));
+//                    holder.imageView1.setMinimumWidth(UIUtils.getScreenWidth()/3);
+
+                            Log.i("imagepath", "setData: " + index + "--" + items.get(index).getPath());
+//                            ViewGroup.LayoutParams lp;
+                            lp = holder.imageView1.getLayoutParams();
+                            lp.width = UIUtils.getScreenWidth() / 3;
+                            lp.height = UIUtils.getScreenWidth() / 3;
+                            holder.imageView1.setLayoutParams(lp);
+                            holder.imageView1.setVisibility(View.VISIBLE);
+                            index++;
+                        }
+                        Log.d("aaa", "getView: i = "+i+"\ttype = "+type);
+                        if (index <= list.size() - 1) {
+                            Log.i("666", "getView: do 2 in 3");
+                            holder.setData2(list.get(index));
+                            Log.i("imagepath", "setData: " + index + "--" + items.get(index).getPath());
+//                            ViewGroup.LayoutParams lp;
+                            lp = holder.imageView2.getLayoutParams();
+                            lp.width = UIUtils.getScreenWidth() / 3;
+                            lp.height = UIUtils.getScreenWidth() / 3;
+                            holder.imageView2.setLayoutParams(lp);
+
+                            holder.imageView2.setVisibility(View.VISIBLE);
+                            index++;
+                        }
+
+                        Log.i("668", "getView: do 3 in 3");
+                        if (index <= list.size() - 1) {
+                            Log.d("aaa", "getView: i = "+i+"\ttype = "+type);
+                            holder.setData3(list.get(index));
+                            Log.i("imagepath", "setData: " + index + "--" + items.get(index).getPath());
+//                            ViewGroup.LayoutParams lp;
+                            lp = holder.imageView3.getLayoutParams();
+                            lp.width = UIUtils.getScreenWidth() / 3;
+                            lp.height = UIUtils.getScreenWidth() / 3;
+                            holder.imageView3.setLayoutParams(lp);
+
+                            holder.imageView3.setVisibility(View.VISIBLE);
+                            index++;
+                        }
+
+                    }
+                } else {
+                    index = 3 * i;
+                    type = mSectionPhotos.get(0).size() % 3;
+                    if ((type == 1) && (i == (mSectionPhotos.get(0).size() / 3 + (type != 0 ? 1 : 0)))) {
+                        if (index <= list.size() - 1) {
+                            Log.i("666", "getView: do 1 in 1");
+                            holder.setData1(list.get(0));
+//                            ViewGroup.LayoutParams lp;
+                            lp = holder.imageView1.getLayoutParams();
+                            lp.width = UIUtils.getScreenWidth();
+                            lp.height = UIUtils.getScreenWidth() / 3;
+                            holder.imageView1.setLayoutParams(lp);
+                            holder.imageView1.setVisibility(View.VISIBLE);
+                            index++;
+                        }
+                    } else if ((type == 2) && (i == (mSectionPhotos.get(0).size() / 3 + (mSectionPhotos.get(0).size() % 3 != 0 ? 1 : 0)) - 1)) {
+                        if (index <= list.size() - 1) {
+                            Log.d(TAG, "getView: 1");
+                            holder.setData1(list.get(index));
+//                            ViewGroup.LayoutParams lp;
+                            lp = holder.imageView1.getLayoutParams();
+                            lp.width = UIUtils.getScreenWidth() / 3 * 2;
+                            lp.height = UIUtils.getScreenWidth() / 3;
+                            holder.imageView1.setLayoutParams(lp);
+                            holder.imageView1.setVisibility(View.VISIBLE);
+                            index++;
+                            Log.d(TAG, "getView: 2");
+                            holder.setData2(list.get(index));
+                            lp = holder.imageView2.getLayoutParams();
+                            lp.width = UIUtils.getScreenWidth() / 3;
+                            lp.height = UIUtils.getScreenWidth() / 3;
+                            holder.imageView2.setLayoutParams(lp);
+                            holder.imageView2.setVisibility(View.VISIBLE);
+                            index++;
+                        }
+                    } else {
+
+                        if (index <= list.size() - 1) {
+
+
+                            Log.i("666", "getView: do 1 in 3");
+                            holder.setData1(list.get(index));
+//                    holder.imageView1.setMinimumWidth(UIUtils.getScreenWidth()/3);
+
+                            Log.i("imagepath", "setData: " + index + "--" + items.get(index).getPath());
+//                            ViewGroup.LayoutParams lp;
+                            lp = holder.imageView1.getLayoutParams();
+                            lp.width = UIUtils.getScreenWidth() / 3;
+                            lp.height = UIUtils.getScreenWidth() / 3;
+                            holder.imageView1.setLayoutParams(lp);
+                            holder.imageView1.setVisibility(View.VISIBLE);
+                            index++;
+                        }
+
+                        if (index <= list.size() - 1) {
+                            Log.i("666", "getView: do 2 in 3");
+                            holder.setData2(list.get(index));
+                            Log.i("imagepath", "setData: " + index + "--" + items.get(index).getPath());
+//                            ViewGroup.LayoutParams lp;
+                            lp = holder.imageView2.getLayoutParams();
+                            lp.width = UIUtils.getScreenWidth() / 3;
+                            lp.height = UIUtils.getScreenWidth() / 3;
+                            holder.imageView2.setLayoutParams(lp);
+
+                            holder.imageView2.setVisibility(View.VISIBLE);
+                            index++;
+                        }
+
+                        Log.i("668", "getView: do 3 in 3");
+                        if (index <= list.size() - 1) {
+                            holder.setData3(list.get(index));
+                            Log.i("imagepath", "setData: " + index + "--" + items.get(index).getPath());
+//                            ViewGroup.LayoutParams lp;
+                            lp = holder.imageView3.getLayoutParams();
+                            lp.width = UIUtils.getScreenWidth() / 3;
+                            lp.height = UIUtils.getScreenWidth() / 3;
+                            holder.imageView3.setLayoutParams(lp);
+
+                            holder.imageView3.setVisibility(View.VISIBLE);
+                            index++;
+                        }
+
+                    }
+                }
+            } else {
+                list = mSectionPhotos.get(getGrop(i));
+                   /* int grop = 0;
+                    grop = getGrop(i);*/
+                   /* int sum = 0;
+                    for (int i1 = 0; i1 < grop; i1++) {
+                        sum += mSectionPhotos.get(i1).size();
+                    }*/
+                index = 3 * getRow(i);
+                type = mSectionPhotos.get(getGrop(i)).size() % 3;
+                Log.d("1111", "getView: getGrop" + getGrop(i) + "\tindex" + index + "\ttype" + type + "\tlist = " + list);
+                if ((type == 1) && (getRow(i) == (mSectionPhotos.get(getGrop(i)).size() / 3 + (type != 0 ? 1 : 0)-1))) {
+                    if (index <= list.size() - 1) {
+
+                        Log.i("1111", "getView: do 1 in 1");
+                        holder.setData1(list.get(index));
+//                        ViewGroup.LayoutParams lp;
+                        lp = holder.imageView1.getLayoutParams();
+                        lp.width = UIUtils.getScreenWidth();
+                        lp.height = UIUtils.getScreenWidth() / 3;
+                        holder.imageView1.setLayoutParams(lp);
+                        holder.imageView1.setVisibility(View.VISIBLE);
+                        Log.d("aaa", "getView: i = "+i+"\ttype = "+type+"\t  lp.h = "+lp.height+"\t lp.w = "+lp.width+"\tindex = "+index);
+                        index++;
+                    }
+                } else if ((type == 2) && (getRow(i) == (mSectionPhotos.get(getGrop(i)).size() / 3 + (mSectionPhotos.get(getGrop(i)).size() % 3 != 0 ? 1 : 0)) - 1)) {
+                    if (index <= list.size() - 1) {
+                        Log.d("1111", "getView: 1");
+                        Log.d("aaa", "getView: i = "+i+"\ttype = "+type);
+                        holder.setData1(list.get(index));
+//                        ViewGroup.LayoutParams lp;
+                        lp = holder.imageView1.getLayoutParams();
+                        lp.width = UIUtils.getScreenWidth() / 3 * 2;
+                        lp.height = UIUtils.getScreenWidth() / 3;
+                        holder.imageView1.setLayoutParams(lp);
+                        holder.imageView1.setVisibility(View.VISIBLE);
+                        Log.d("aaa", "getView: i = "+i+"\ttype = "+type+"\t  lp.h = "+lp.height+"\t lp.w = "+lp.width+"\tindex = "+index);
+                        index++;
+                        Log.d("1111", "getView: 2");
+                        holder.setData2(list.get(index));
+                        lp = holder.imageView2.getLayoutParams();
+                        lp.width = UIUtils.getScreenWidth() / 3;
+                        lp.height = UIUtils.getScreenWidth() / 3;
+                        holder.imageView2.setLayoutParams(lp);
+                        holder.imageView2.setVisibility(View.VISIBLE);
+                        Log.d("aaa", "getView: i = "+i+"\ttype = "+type+"\t  lp.h = "+lp.height+"\t lp.w = "+lp.width+"\tindex = "+index);
+                        index++;
+                    }
+                } else {
+                    if (index <= list.size() - 1) {
+
+                        Log.i("1111", "getView: do 1 in 3");
+                        holder.setData1(list.get(index));
+//                    holder.imageView1.setMinimumWidth(UIUtils.getScreenWidth()/3);
+
+                        Log.i("imagepath", "setData: " + index + "--" + items.get(index).getPath());
+//                        ViewGroup.LayoutParams lp;
+                        lp = holder.imageView1.getLayoutParams();
+                        lp.width = UIUtils.getScreenWidth() / 3;
+                        lp.height = UIUtils.getScreenWidth() / 3;
+                        holder.imageView1.setLayoutParams(lp);
+                        holder.imageView1.setVisibility(View.VISIBLE);
+                        Log.d("aaa", "getView: i = "+i+"\ttype = "+type+"\t  lp.h = "+lp.height+"\t lp.w = "+lp.width+"\tindex = "+index);
+                        index++;
+                    }
+
+                    if (index <= list.size() - 1) {
+                        Log.i("1111", "getView: do 2 in 3");
+                        holder.setData2(list.get(index));
+                        Log.i("imagepath", "setData: " + index + "--" + items.get(index).getPath());
+//                        ViewGroup.LayoutParams lp;
+                        lp = holder.imageView2.getLayoutParams();
+                        lp.width = UIUtils.getScreenWidth() / 3;
+                        lp.height = UIUtils.getScreenWidth() / 3;
+                        holder.imageView2.setLayoutParams(lp);
+
+                        holder.imageView2.setVisibility(View.VISIBLE);
+                        Log.d("aaa", "getView: i = "+i+"\ttype = "+type+"\t  lp.h = "+lp.height+"\t lp.w = "+lp.width+"\tindex = "+index);
+
+                        index++;
+                    }
+
+                    Log.i("1111", "getView: do 3 in 3");
+                    if (index <= list.size() - 1) {
+                        holder.setData3(list.get(index));
+                        Log.i("imagepath", "setData: " + index + "--" + items.get(index).getPath());
+//                        ViewGroup.LayoutParams lp;
+                        lp = holder.imageView3.getLayoutParams();
+                        lp.width = UIUtils.getScreenWidth() / 3;
+                        lp.height = UIUtils.getScreenWidth() / 3;
+                        holder.imageView3.setLayoutParams(lp);
+
+                        holder.imageView3.setVisibility(View.VISIBLE);
+                        Log.d("aaa", "getView: i = "+i+"\ttype = "+type+"\t  lp.h = "+lp.height+"\t lp.w = "+lp.width+"\tindex = "+index);
+
+                        index++;
+                    }
+
+                }
+
+            }
+            return convertView;
+        }
+
+
+        @Override
+        public int getItemViewType(int i) {
+            return 0;
+        }
+
+        @Override
+        public int getViewTypeCount() {
+            return 1;
+        }
+
+        @Override
+        public boolean isEmpty() {
+            return false;
+        }
+    }
+
+    public static Object[][] ListToArray(List<LinkedHashMap<String, Object>> list, int KeyLenght)
+
+    {
+
+        Object[][] array = new Object[list.size()][KeyLenght];
+
+        for (int i = 0; i < list.size(); i++)
+
+        {
+
+            array[i] = list.get(i).values().toArray();
+
+        }
+
+        return array;
+
+    }
+
+    public void setAllPhotos(LinkedHashMap<String, List<CameraItem>> allPhotos) {
+        mAllPhotos = allPhotos;
+        mTitles = new ArrayList<>(mAllPhotos.size());
+        mSectionPhotos = new ArrayList<>(mAllPhotos.size());
+        items = new ArrayList<>();
+//        mTitlesIndex = new ArrayList<>();
+        for (Map.Entry<String, List<CameraItem>> entry : mAllPhotos.entrySet()) {
+            mTitles.add(entry.getKey());
+            mSectionPhotos.add(entry.getValue());
+        }
+//        int count = 0;
+        for (List<CameraItem> photoSection : mSectionPhotos) {
+//            mTitlesIndex.add(new Integer(count));
+//            count += photoSection.size();
+//            Log.d("2222", "setAllPhotos: count  = "+count);
+            for (CameraItem cameraItem : photoSection) {
+                items.add(cameraItem);
+            }
+        }
+
+    }
+
+    class ViewHolder {
+        TextView textView;
+        ImageView imageView1, imageView2, imageView3;
+
+        public void setData1(CameraItem cameraItem) {
+            String path = TextUtils.isEmpty(cameraItem.getThumbnail()) ? cameraItem.getPath() : cameraItem.getThumbnail();
+            ImageLoader.loadGalleryImage(myContext, path, imageView1);
+        }
+
+        public void setData2(CameraItem cameraItem) {
+            String path = TextUtils.isEmpty(cameraItem.getThumbnail()) ? cameraItem.getPath() : cameraItem.getThumbnail();
+            ImageLoader.loadGalleryImage(myContext, path, imageView2);
+        }
+
+        public void setData3(CameraItem cameraItem) {
+            String path = TextUtils.isEmpty(cameraItem.getThumbnail()) ? cameraItem.getPath() : cameraItem.getThumbnail();
+
+            ImageLoader.loadGalleryImage(myContext, path, imageView3);
+        }
+    }
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/viewholder/OtherView.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/viewholder/OtherView.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/viewholder/OtherView.java	(revision 1020)
@@ -0,0 +1,104 @@
+package com.gallery.tclgallery.viewholder;
+
+import android.content.Context;
+import android.support.v7.widget.GridLayoutManager;
+import android.support.v7.widget.RecyclerView;
+import android.support.v7.widget.SimpleItemAnimator;
+import android.view.View;
+
+import com.gallery.tclgallery.R;
+import com.gallery.tclgallery.bean.ImageFolder;
+import com.gallery.tclgallery.contract.GooglePhotoContract;
+import com.gallery.tclgallery.fastscroll.FastScroller;
+import com.gallery.tclgallery.listener.DragSelectTouchListener;
+import com.gallery.tclgallery.ui.adapter.OtherViewAdapter;
+import com.gallery.tclgallery.utils.Format;
+import com.gallery.tclgallery.viewholder.base.BaseHolder;
+
+/**
+ * 除相册其他文件夹视图
+ * Created by jiaojie.jia on 2017/3/23.
+ */
+
+public class OtherView extends BaseHolder<ImageFolder> {
+
+    public static final int CLUMN_COUNT = 4;
+
+    protected RecyclerView mRecyclerView;       // 列表
+    private OtherViewAdapter mAdapter;
+    private FastScroller fastScroller;          // 右侧快速导航
+
+    private DragSelectTouchListener touchListener;          // 滑动选择 Listener
+
+    private GooglePhotoContract.Presenter mPresenter;
+
+    public OtherView(Context context) {
+        super(context);
+    }
+
+    public void setPresenter(GooglePhotoContract.Presenter presenter) {
+        mPresenter = presenter;
+        mAdapter.setPresenter(presenter);
+    }
+
+    @Override
+    public View initView() {
+        View view = View.inflate(context, R.layout.holder_month_view, null);
+        mRecyclerView = (RecyclerView) view.findViewById(R.id.rv_month);
+        fastScroller = (FastScroller) view.findViewById(R.id.fastscroll);
+        mAdapter = new OtherViewAdapter();
+        mRecyclerView.setAdapter(mAdapter);
+        fastScroller.setRecyclerView(mRecyclerView);
+        GridLayoutManager layoutManager = new GridLayoutManager(context, 4);
+        mRecyclerView.setLayoutManager(layoutManager);
+
+        mAdapter.setLongClickListener(new View.OnLongClickListener() {
+            @Override
+            public boolean onLongClick(View v) {
+                int position = mRecyclerView.getChildAdapterPosition(v);
+                mAdapter.setSelected(position);
+                touchListener.setStartSelectPosition(position);
+                return false;
+            }
+        });
+        mAdapter.setClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                int position = mRecyclerView.getChildAdapterPosition(v);
+                mAdapter.setSelected(position);
+            }
+        });
+
+        // 添加滑动监听
+        touchListener = new DragSelectTouchListener();
+        mRecyclerView.addOnItemTouchListener(touchListener);
+
+        // 取消默认选中动画（闪烁）
+        RecyclerView.ItemAnimator animator = mRecyclerView.getItemAnimator();
+        if (animator instanceof SimpleItemAnimator) {
+            ((SimpleItemAnimator) animator).setSupportsChangeAnimations(false);
+        }
+
+        touchListener.setSelectListener(new DragSelectTouchListener.onSelectListener() {
+            @Override
+            public void onSelectChange(int start, int end, boolean isSelected) {
+                mAdapter.selectRangeChange(start, end, isSelected);
+            }
+        });
+
+        return view;
+    }
+
+    @Override
+    public void refreshView() {
+        if (Format.isEmpty(data.getList())) return;
+        mAdapter.setData(data.getList());
+    }
+
+    /**
+     * 清除数据选中状态
+     */
+    public void clearSelectedStatus() {
+        mAdapter.notifyDataSetChanged();
+    }
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/viewholder/item/PhotoFolderItemHolder.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/viewholder/item/PhotoFolderItemHolder.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/viewholder/item/PhotoFolderItemHolder.java	(revision 1020)
@@ -0,0 +1,52 @@
+package com.gallery.tclgallery.viewholder.item;
+
+import android.content.Context;
+import android.support.v7.widget.RecyclerView;
+import android.view.View;
+import android.widget.ImageView;
+import android.widget.TextView;
+
+import com.gallery.tclgallery.R;
+import com.gallery.tclgallery.bean.ImageFolder;
+import com.gallery.tclgallery.listener.OnEditItemClickListener;
+import com.gallery.tclgallery.utils.ImageLoader;
+
+/**
+ * 文件夹Item
+ * Created by jiaojie.jia on 2017/3/23.
+ */
+
+public class PhotoFolderItemHolder extends RecyclerView.ViewHolder implements View.OnClickListener{
+
+    private Context mContext;
+    private ImageView mIvThumbnails;        // 文件夹缩略图
+    private TextView mTvFolderName;         // 文件夹名称
+    private TextView mTvPictureNum;         // 文件图片数
+
+    private OnEditItemClickListener mOnEditItemClickListener;
+
+    public PhotoFolderItemHolder(Context context, OnEditItemClickListener itemClickListener) {
+        super(View.inflate(context, R.layout.holder_gallery_folder_list_item, null));
+        mContext = context;
+        mOnEditItemClickListener = itemClickListener;
+        mIvThumbnails = (ImageView) itemView.findViewById(R.id.iv_folder_thumbnail);
+        mTvFolderName = (TextView) itemView.findViewById(R.id.tv_folder_name);
+        mTvPictureNum = (TextView) itemView.findViewById(R.id.tv_picture_num);
+        itemView.setOnClickListener(this);
+    }
+
+    public void setData(ImageFolder folder) {
+        if(folder != null) {
+            ImageLoader.loadGalleryImage(mContext, folder.getFirstImagePath(), mIvThumbnails);
+            mTvFolderName.setText(folder.getName());
+            mTvPictureNum.setText(String.valueOf(folder.getCount()));
+        }
+    }
+
+    @Override
+    public void onClick(View v) {
+        if(mOnEditItemClickListener != null) {
+            mOnEditItemClickListener.onItemClick(v, getAdapterPosition());
+        }
+    }
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/viewholder/item/DayViewItemHolder.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/viewholder/item/DayViewItemHolder.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/viewholder/item/DayViewItemHolder.java	(revision 1020)
@@ -0,0 +1,25 @@
+package com.gallery.tclgallery.viewholder.item;
+
+import android.view.View;
+
+import com.gallery.tclgallery.viewholder.DayView;
+import com.gallery.tclgallery.viewholder.base.BasePhotoItemHolder;
+
+
+/**
+ * 日视图照片Item
+ * Created by jiaojie.jia on 2017/3/20.
+ */
+
+public class DayViewItemHolder extends BasePhotoItemHolder {
+
+
+    public DayViewItemHolder(View itemView) {
+        super(itemView);
+    }
+
+    @Override
+    public int getClumnCount() {
+        return DayView.CLUMN_COUNT;
+    }
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/viewholder/item/YearViewItemItemHolder.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/viewholder/item/YearViewItemItemHolder.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/viewholder/item/YearViewItemItemHolder.java	(revision 1020)
@@ -0,0 +1,44 @@
+package com.gallery.tclgallery.viewholder.item;
+
+import android.content.Context;
+import android.text.TextUtils;
+import android.view.View;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+
+import com.gallery.tclgallery.R;
+import com.gallery.tclgallery.bean.CameraItem;
+import com.gallery.tclgallery.utils.ImageLoader;
+import com.gallery.tclgallery.utils.UIUtils;
+import com.gallery.tclgallery.viewholder.base.BaseHolder;
+
+
+/**
+ * 年视图Item的Item
+ * Created by jiaojie.jia on 2017/3/21.
+ */
+
+public class YearViewItemItemHolder extends BaseHolder<CameraItem> {
+
+    private ImageView mIvImage;
+
+    public YearViewItemItemHolder(Context context) {
+        super(context);
+    }
+
+    @Override
+    public View initView() {
+        View view = View.inflate(context, R.layout.imageview, null);
+        mIvImage = (ImageView) view.findViewById(R.id.iv_image);
+        int width = (UIUtils.getScreenWidth() - UIUtils.dip2px(100)) / 7;
+        mIvImage.setLayoutParams(new LinearLayout.LayoutParams(width, width));
+        return view;
+    }
+
+    @Override
+    public void refreshView() {
+        if(data == null) return;
+        String path = TextUtils.isEmpty(data.getThumbnail()) ? data.getPath() : data.getThumbnail();
+        ImageLoader.loadGalleryImage(context, path, mIvImage);
+    }
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/viewholder/item/YearViewItemHolder.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/viewholder/item/YearViewItemHolder.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/viewholder/item/YearViewItemHolder.java	(revision 1020)
@@ -0,0 +1,229 @@
+package com.gallery.tclgallery.viewholder.item;
+
+import android.content.Context;
+import android.os.Handler;
+import android.os.Looper;
+import android.support.annotation.NonNull;
+import android.support.v7.widget.RecyclerView;
+import android.text.TextUtils;
+import android.util.Log;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ImageView;
+import android.widget.RelativeLayout;
+import android.widget.TextView;
+
+import com.alibaba.android.vlayout.LayoutHelper;
+import com.alibaba.android.vlayout.VirtualLayoutAdapter;
+import com.alibaba.android.vlayout.VirtualLayoutManager;
+import com.alibaba.android.vlayout.layout.ColumnLayoutHelper;
+import com.alibaba.android.vlayout.layout.DefaultLayoutHelper;
+import com.alibaba.android.vlayout.layout.GridLayoutHelper;
+import com.gallery.tclgallery.R;
+import com.gallery.tclgallery.bean.CameraItem;
+import com.gallery.tclgallery.bean.State;
+import com.gallery.tclgallery.listener.OnGridViewClickListener;
+import com.gallery.tclgallery.utils.DateUtil;
+import com.gallery.tclgallery.utils.ImageLoader;
+import com.gallery.tclgallery.utils.UIUtils;
+
+import java.util.LinkedHashMap;
+import java.util.LinkedList;
+import java.util.List;
+
+/**
+ * 年视图Item（包含一个文字和一个GridView）
+ * Created by jiaojie.jia on 2017/3/21.
+ */
+
+public class YearViewItemHolder extends RecyclerView.ViewHolder {
+    public static final String TAG = "666";
+    private VirtualLayoutManager layoutManager;
+    private TextView mTextView;
+    //    List<CameraItem> photos;
+    private RecyclerView myRecyclerView;
+    protected Context context;
+    private MyAdapter mAdapter;
+    boolean isToDay;
+    int number;
+    protected LinkedHashMap<String, List<CameraItem>> mAllPhotos;     // key-日期（月或日), value-该日期下的所有照片
+    protected List<CameraItem> items;                       // 把上面照片集合转成一维集合，方便取值
+    protected List<List<CameraItem>> mSectionPhotos;      // 照片集合
+    protected List<String> mTitles;
+    protected ImageView imgItem;        // 照片图片
+    protected ImageView imgSelect;      // 右上角选中标识图片
+    protected ImageView imageVideo;
+    protected TextView duration;
+
+    private OnGridViewClickListener mClickListener;
+
+    private View.OnClickListener mChildClickListener = new View.OnClickListener() {
+        @Override
+        public void onClick(View v) {
+            mClickListener.onGridViewClick(getAdapterPosition());
+        }
+    };
+
+
+    public void setClickListener(OnGridViewClickListener clickListener) {
+        mClickListener = clickListener;
+    }
+
+    public YearViewItemHolder(final View itemView) {
+        super(itemView);
+        mTextView = (TextView) itemView.findViewById(R.id.tv_month);
+        myRecyclerView = (RecyclerView) itemView.findViewById(R.id.gv_photos);
+        layoutManager = new VirtualLayoutManager(context);
+        myRecyclerView.setLayoutManager(layoutManager);
+        mAdapter = new MyAdapter(layoutManager);
+//        final ScrollFixLayoutHelper scrollFixLayoutHelper = new ScrollFixLayoutHelper(FixLayoutHelper.TOP_RIGHT, 100, 100);
+        new Handler(Looper.getMainLooper()).postDelayed(new Runnable() {
+            @Override
+            public void run() {
+                myRecyclerView.scrollToPosition(7);
+                myRecyclerView.getAdapter().notifyDataSetChanged();
+            }
+        }, 6000);
+        myRecyclerView.setAdapter(mAdapter);
+    }
+
+
+    public void removeView() {
+        if (itemView != null) {
+            ((ViewGroup) itemView).removeView(myRecyclerView);
+        }
+    }
+
+    public void setData(String month, List<CameraItem> photos) {
+        mTextView.setText(month.substring(5));
+        mTextView.setVisibility(View.GONE);
+        if (((ViewGroup) itemView).getChildCount() == 1) {
+            ((ViewGroup) itemView).addView(myRecyclerView);
+        }
+        mAdapter.setPhotos(photos);
+    }
+
+
+    private void setData1(CameraItem cameraItem) {
+        if (State.SelectState) {
+            imgSelect.setVisibility(View.VISIBLE);
+            imgSelect.setSelected(cameraItem.isSelected());
+        } else {
+            imgSelect.setVisibility(View.GONE);
+        }
+        String type = cameraItem.getMime_type();
+        if (type.indexOf("video") != -1) {
+            imageVideo.setVisibility(View.VISIBLE);
+            duration.setVisibility(View.VISIBLE);
+            duration.setText(DateUtil.convertDuration(cameraItem.getDuration()));
+        } else {
+            imageVideo.setVisibility(View.GONE);
+            duration.setVisibility(View.GONE);
+        }
+        String path = TextUtils.isEmpty(cameraItem.getThumbnail()) ? cameraItem.getPath() : cameraItem.getThumbnail();
+        ImageLoader.loadGalleryImage(imgItem.getContext(), path, imgItem);
+    }
+
+
+    class MainViewHolder extends RecyclerView.ViewHolder {
+        public MainViewHolder(View itemView) {
+            super(itemView);
+            imgItem = (ImageView) itemView.findViewById(R.id.iv_photo);
+            imgSelect = (ImageView) itemView.findViewById(R.id.iv_select);
+            imageVideo = (ImageView) itemView.findViewById(R.id.iv_video);
+            duration = (TextView) itemView.findViewById(R.id.video_duration);
+            RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(UIUtils.getScreenWidth(), UIUtils.getScreenWidth() /5*3);
+            itemView.setLayoutParams(lp);
+
+        }
+    }
+
+    private class MyAdapter extends VirtualLayoutAdapter {
+        List<CameraItem> photos;
+
+        public void setPhotos(List<CameraItem> photos) {
+            this.photos = photos;
+            notifyDataSetChanged();
+            myRecyclerView.setMinimumHeight((photos.size()/3+(photos.size()%3!=0?1:0))*(UIUtils.getScreenWidth()/5*3));
+            final List<LayoutHelper> helpers = new LinkedList<>();
+            int a = photos.size() % 3;
+            if (a == 1) {
+                final GridLayoutHelper gridLayoutHelper = new GridLayoutHelper(3);
+                gridLayoutHelper.setItemCount(photos.size() - 1);
+                helpers.add(gridLayoutHelper);
+                helpers.add(DefaultLayoutHelper.newHelper(1));
+            } else if (a == 2) {
+                final GridLayoutHelper gridLayoutHelper = new GridLayoutHelper(3);
+                gridLayoutHelper.setItemCount(photos.size() - 2);
+                helpers.add(gridLayoutHelper);
+                final ColumnLayoutHelper columnLayoutHelper = new ColumnLayoutHelper();
+                columnLayoutHelper.setWeights(new float[]{60f, 38f});
+                columnLayoutHelper.setItemCount(2);
+                helpers.add(columnLayoutHelper);
+            } else if (a == 0) {
+                final GridLayoutHelper gridLayoutHelper = new GridLayoutHelper(3);
+                gridLayoutHelper.setItemCount(photos.size());
+                helpers.add(gridLayoutHelper);
+            }
+            layoutManager.setLayoutHelpers(helpers);
+        }
+
+        public MyAdapter(@NonNull VirtualLayoutManager layoutManager) {
+            super(layoutManager);
+        }
+
+        @Override
+        public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
+            LayoutInflater inflater = LayoutInflater.from(parent.getContext());
+            View view = inflater.inflate(R.layout.holder_month_item, parent, false);
+            return new MainViewHolder(view);
+        }
+
+        @Override
+        public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
+            if(holder.itemView==null){
+                holder.itemView.setTag(photos.get(position));
+            }else {
+                holder.itemView.getTag();
+            }
+            VirtualLayoutManager.LayoutParams layoutParams = new VirtualLayoutManager.LayoutParams(
+                    UIUtils.getScreenWidth() / 3, UIUtils.getScreenWidth() /5*3);
+            if (photos.size() % 3 == 1) {
+                if ((photos.size() - 1) == position)
+                    layoutParams.width = UIUtils.getScreenWidth();
+                layoutParams.height= UIUtils.getScreenWidth() /5*3;
+            } else if (photos.size() % 3 == 2) {
+                if ((photos.size() - 2) == position)
+                    layoutParams.width = UIUtils.getScreenWidth() / 3 * 2;
+                layoutParams.height= UIUtils.getScreenWidth() /5*3;
+                if ((photos.size() - 1) == position)
+                    layoutParams.width = UIUtils.getScreenWidth() / 3;
+                layoutParams.height= UIUtils.getScreenWidth() /5*3;
+            }
+            Log.d("cccc", "onBindViewHolder: "+photos.get(position).getPath());
+
+            setData1(photos.get(position));
+            myRecyclerView.requestLayout();
+        }
+
+        @Override
+        public int getItemCount() {
+            List<LayoutHelper> helpers = getLayoutHelpers();
+            if (helpers == null) {
+                return 0;
+            }
+            int count = 0;
+            for (int i = 0, size = helpers.size(); i < size; i++) {
+                count += helpers.get(i).getItemCount();
+            }
+            return count;
+        }
+
+        @Override
+        public int getItemViewType(int position) {
+            position=photos.size()%3;
+            return position;
+        }
+    }
+}
\ No newline at end of file
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/viewholder/item/OtherViewItemHolder.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/viewholder/item/OtherViewItemHolder.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/viewholder/item/OtherViewItemHolder.java	(revision 1020)
@@ -0,0 +1,24 @@
+package com.gallery.tclgallery.viewholder.item;
+
+import android.view.View;
+
+import com.gallery.tclgallery.viewholder.OtherView;
+import com.gallery.tclgallery.viewholder.base.BasePhotoItemHolder;
+
+
+/**
+ * 除相册外视图Item
+ * Created by jiaojie.jia on 2017/3/23.
+ */
+
+public class OtherViewItemHolder extends BasePhotoItemHolder {
+
+    public OtherViewItemHolder(View itemView) {
+        super(itemView);
+    }
+
+    @Override
+    public int getClumnCount() {
+        return OtherView.CLUMN_COUNT;
+    }
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/viewholder/item/CollageViewItemItemHolder.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/viewholder/item/CollageViewItemItemHolder.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/viewholder/item/CollageViewItemItemHolder.java	(revision 1020)
@@ -0,0 +1,58 @@
+package com.gallery.tclgallery.viewholder.item;
+
+import android.support.v7.widget.RecyclerView;
+import android.text.TextUtils;
+import android.view.View;
+import android.widget.ImageView;
+import android.widget.RelativeLayout;
+import android.widget.TextView;
+
+import com.gallery.tclgallery.R;
+import com.gallery.tclgallery.bean.CameraItem;
+import com.gallery.tclgallery.bean.State;
+import com.gallery.tclgallery.utils.DateUtil;
+import com.gallery.tclgallery.utils.ImageLoader;
+
+
+/**
+ * Created by Administrator on 2017/9/27.
+ */
+
+
+public class CollageViewItemItemHolder extends  RecyclerView.ViewHolder {
+private final ImageView imgItem;        // 照片图片
+    private final ImageView imgSelect;      // 右上角选中标识图片
+    private final ImageView imageVideo;
+    private final TextView duration;
+
+    public CollageViewItemItemHolder(View itemView) {
+        super(itemView);
+        imgItem = (ImageView) itemView.findViewById(R.id.iv_photo);
+        imgSelect = (ImageView) itemView.findViewById(R.id.iv_select);
+        imageVideo = (ImageView) itemView.findViewById(R.id.iv_video);
+        duration = (TextView) itemView.findViewById(R.id.video_duration);
+    }
+
+    public void setData(CameraItem cameraItem) {
+        if (/*System.getProperty("isLongSelect", "false").equals("true")*/State.SelectState) {
+            imgSelect.setVisibility(View.VISIBLE);
+            imgSelect.setSelected(cameraItem.isSelected());
+//            startAnim(photoItem);
+
+        } else {
+            imgSelect.setVisibility(View.GONE);
+        }
+        String type = cameraItem.getMime_type();
+        if (type.indexOf("video") != -1) {
+            imageVideo.setVisibility(View.VISIBLE);
+            duration.setVisibility(View.VISIBLE);
+            duration.setText(DateUtil.convertDuration(cameraItem.getDuration()));
+        }else {
+            imageVideo.setVisibility(View.GONE);
+            duration.setVisibility(View.GONE);
+        }
+        String path = TextUtils.isEmpty(cameraItem.getThumbnail()) ? cameraItem.getPath() : cameraItem.getThumbnail();
+        ImageLoader.loadGalleryImage(imgItem.getContext(), path, imgItem);
+    }
+
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/viewholder/item/MonthViewItemHolder.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/viewholder/item/MonthViewItemHolder.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/viewholder/item/MonthViewItemHolder.java	(revision 1020)
@@ -0,0 +1,24 @@
+package com.gallery.tclgallery.viewholder.item;
+
+import android.view.View;
+
+import com.gallery.tclgallery.viewholder.MonthView;
+import com.gallery.tclgallery.viewholder.base.BasePhotoItemHolder;
+
+
+/**
+ * 月视图照片Item
+ * Created by jiaojie.jia on 2017/3/16.
+ */
+
+public class MonthViewItemHolder extends BasePhotoItemHolder {
+
+    public MonthViewItemHolder(View itemView) {
+        super(itemView);
+    }
+
+    @Override
+    public int getClumnCount() {
+        return MonthView.CLUMN_COUNT;
+    }
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/viewholder/item/CollageViewItemHolder.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/viewholder/item/CollageViewItemHolder.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/viewholder/item/CollageViewItemHolder.java	(revision 1020)
@@ -0,0 +1,12 @@
+package com.gallery.tclgallery.viewholder.item;
+
+import android.view.View;
+
+/**
+ * Created by Administrator on 2017/9/30.
+ */
+public class CollageViewItemHolder extends CollageViewItemItemHolder {
+    public CollageViewItemHolder(View itemView) {
+        super(itemView);
+    }
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/viewholder/MonthView.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/viewholder/MonthView.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/viewholder/MonthView.java	(revision 1020)
@@ -0,0 +1,45 @@
+package com.gallery.tclgallery.viewholder;
+
+import android.content.Context;
+import android.support.v7.widget.GridLayoutManager;
+import android.view.ScaleGestureDetector;
+
+import com.gallery.tclgallery.ui.adapter.MonthViewAdapter;
+import com.gallery.tclgallery.ui.adapter.base.BaseViewAdapter;
+import com.gallery.tclgallery.viewholder.base.BasePhotoView;
+
+
+/**
+ * Google相册月视图
+ * Created by jiaojie.jia on 2017/3/15.
+ */
+
+public class MonthView extends BasePhotoView {
+
+    public static  int CLUMN_COUNT = 6;
+
+    public MonthView(Context context) {
+        super(context);
+    }
+
+    @Override
+    protected ScaleGestureDetector getScaleDetector() {
+        return new ScaleGestureDetector(context, new ScaleGestureDetector.SimpleOnScaleGestureListener(){
+            @Override
+            public boolean onScale(ScaleGestureDetector detector) {
+                mSwitchViewListener.onSwitchView(detector.getScaleFactor());
+                return true;
+            }
+        });
+    }
+
+ @Override
+    protected GridLayoutManager getLayoutManager() {
+        return new GridLayoutManager(context, CLUMN_COUNT);
+    }
+
+    @Override
+    protected BaseViewAdapter getAdapter() {
+        return new MonthViewAdapter();
+    }
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/viewholder/RSquareLayout.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/viewholder/RSquareLayout.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/viewholder/RSquareLayout.java	(revision 1020)
@@ -0,0 +1,41 @@
+package com.gallery.tclgallery.viewholder;
+
+import android.content.Context;
+import android.util.AttributeSet;
+import android.widget.RelativeLayout;
+
+/**
+ * Created by DavidWang on 15/9/6.
+ */
+public class RSquareLayout extends RelativeLayout {
+
+    public RSquareLayout(Context context, AttributeSet attrs, int defStyle) {
+        super(context, attrs, defStyle);
+    }
+
+    public RSquareLayout(Context context, AttributeSet attrs) {
+        super(context, attrs);
+    }
+
+    public RSquareLayout(Context context) {
+        super(context);
+    }
+
+    @SuppressWarnings("unused")
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        // For simple implementation, or internal size is always 0.
+        // We depend on the container to specify the layout size of
+        // our view. We can't really know what it is since we will be
+        // adding and removing different arbitrary views and do not
+        // want the layout to change as this happens.
+        setMeasuredDimension(getDefaultSize(0, widthMeasureSpec), getDefaultSize(0, heightMeasureSpec));
+
+        // Children are just made to fill our space.
+        int childWidthSize = getMeasuredWidth();
+        int childHeightSize = getMeasuredHeight();
+        //高度和宽度一样
+        heightMeasureSpec = widthMeasureSpec = MeasureSpec.makeMeasureSpec(childWidthSize, MeasureSpec.EXACTLY);
+        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
+    }
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/viewholder/CollageView.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/viewholder/CollageView.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/viewholder/CollageView.java	(revision 1020)
@@ -0,0 +1,103 @@
+package com.gallery.tclgallery.viewholder;
+
+import android.content.Context;
+import android.graphics.Rect;
+import android.support.v7.widget.LinearLayoutManager;
+import android.support.v7.widget.RecyclerView;
+import android.view.ScaleGestureDetector;
+import android.view.View;
+
+
+import com.gallery.tclgallery.R;
+import com.gallery.tclgallery.bean.CameraItem;
+import com.gallery.tclgallery.listener.DragSelectTouchListener;
+import com.gallery.tclgallery.listener.OnGridViewClickListener;
+import com.gallery.tclgallery.listener.OnSwitchViewListener;
+import com.gallery.tclgallery.ui.adapter.YearViewAdapter;
+import com.gallery.tclgallery.utils.Format;
+import com.gallery.tclgallery.utils.UIUtils;
+import com.gallery.tclgallery.viewholder.base.BaseHolder;
+
+import java.util.LinkedHashMap;
+import java.util.List;
+
+/**
+ * Created by jiaojie.jia on 2017/3/21.
+ */
+
+public class CollageView extends BaseHolder<LinkedHashMap<String, List<CameraItem>>> {
+
+    private RecyclerView mRecyclerView;                     // 列表
+    private YearViewAdapter mAdapter;
+
+    private DragSelectTouchListener touchListener;          // 滑动选择 Listener
+    private OnSwitchViewListener mSwitchViewListener;       // 缩放手势 Listener
+
+    public CollageView(Context context) {
+        super(context);
+    }
+
+    public void setSwitchViewListener(OnSwitchViewListener switchViewListener) {
+        mSwitchViewListener = switchViewListener;
+    }
+
+    @Override
+    public View initView() {
+        View view = View.inflate(context, R.layout.holder_year_view, null);
+        mRecyclerView = (RecyclerView) view.findViewById(R.id.rv_month);
+//        mAdapter = new YearViewAdapter();
+        mRecyclerView.setAdapter(mAdapter);
+        LinearLayoutManager layoutManager = new LinearLayoutManager(context);
+        mRecyclerView.setLayoutManager(layoutManager);
+        mRecyclerView.addItemDecoration(new SpaceItemDecoration(UIUtils.dip2px(5)));
+
+        touchListener = new DragSelectTouchListener();
+        mRecyclerView.addOnItemTouchListener(touchListener);
+        touchListener.setScaleGestureDetector(new ScaleGestureDetector(context, new ScaleGestureDetector.SimpleOnScaleGestureListener() {
+            @Override
+            public boolean onScale(ScaleGestureDetector detector) {
+                if (detector.getScaleFactor() > 1) {
+                    mSwitchViewListener.onSwitchView(detector.getScaleFactor());
+                }
+                return true;
+            }
+        }));
+
+        mAdapter.setClickListener(new OnGridViewClickListener() {
+            @Override
+            public void onGridViewClick(int parentPosition) {
+                int monthPosition = mAdapter.getMonthPosition(parentPosition);
+                mSwitchViewListener.onSwitchViewBySection(monthPosition);
+            }
+        });
+
+        return view;
+    }
+
+    @Override
+    public void refreshView() {
+        if (Format.isEmpty(data)) return;
+        mAdapter.setAllPhotos(data);
+    }
+
+    /**
+     * 判断当前视图是否填充了数据
+     */
+    public boolean isEmpty() {
+        return !(mAdapter != null && mAdapter.getItemCount() > 0);
+    }
+
+    private class SpaceItemDecoration extends RecyclerView.ItemDecoration {
+
+        private int space;
+
+        SpaceItemDecoration(int space) {
+            this.space = space;
+        }
+
+        @Override
+        public void getItemOffsets(Rect outRect, View view, RecyclerView parent, RecyclerView.State state) {
+            outRect.bottom = space;
+        }
+    }
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/data/GooglePhotoScanner.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/data/GooglePhotoScanner.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/data/GooglePhotoScanner.java	(revision 1020)
@@ -0,0 +1,384 @@
+package com.gallery.tclgallery.data;
+
+import android.app.Activity;
+import android.content.ContentResolver;
+import android.database.Cursor;
+import android.net.Uri;
+import android.provider.MediaStore;
+import android.text.TextUtils;
+import android.util.Log;
+
+import com.gallery.tclgallery.bean.CameraItem;
+import com.gallery.tclgallery.bean.ImageFolder;
+import com.gallery.tclgallery.ui.GooglePhotoActivity;
+import com.gallery.tclgallery.utils.UIUtils;
+
+import java.io.File;
+import java.text.SimpleDateFormat;
+import java.util.ArrayList;
+import java.util.Date;
+import java.util.HashMap;
+import java.util.LinkedHashMap;
+import java.util.List;
+
+/**
+ * Google相册扫描器
+ * Created by jiaojie.jia on 2017/3/15.
+ */
+
+public class GooglePhotoScanner extends Activity{
+
+    private static final int MIN_SIZE = 1024 * 10;
+
+    private static final long MIN_DATE = 1000000000;
+
+    //扫描结果图片文件夹
+    private static HashMap<String, ImageFolder> mGruopMap = new HashMap<>();
+
+    private static LinkedHashMap<String, List<CameraItem>> mSectionsOfMonth = new LinkedHashMap<>();
+    private static LinkedHashMap<String, List<CameraItem>> mSectionsOfDay = new LinkedHashMap<>();
+
+    private static List<ImageFolder> imageFloders = new ArrayList<>();
+
+    public static ImageFolder mDefaultFolder;                  // 默认图片文件夹
+
+    private static final SimpleDateFormat mDataFormatOfMonth = new SimpleDateFormat("yyyy年MM月");
+    private static final SimpleDateFormat mDataFormatOfDay = new SimpleDateFormat("yyyy-MM-dd");
+    /**
+     * Video attribute.
+     */
+    private static final String[] VIDEOS = {
+            MediaStore.Video.Media._ID,
+            MediaStore.Video.Media.DATA,
+            MediaStore.Video.Media.WIDTH,
+            MediaStore.Video.Media.HEIGHT,
+            MediaStore.Video.Media.DATE_MODIFIED,
+            MediaStore.Video.Media.SIZE,
+            MediaStore.Video.Media.LATITUDE,
+            MediaStore.Video.Media.LONGITUDE,
+            MediaStore.Video.Media.MIME_TYPE,
+            MediaStore.Video.Media.DURATION,
+            MediaStore.Video.Media.DATE_TAKEN
+    };
+
+    public static void startScan(){
+        readSystemGallery(MediaStore.Images.Media.INTERNAL_CONTENT_URI);
+        readSystemGallery(MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
+        readVideo(MediaStore.Video.Media.INTERNAL_CONTENT_URI);
+        readVideo(MediaStore.Video.Media.EXTERNAL_CONTENT_URI);
+    }
+
+    private static void readSystemGallery(Uri uri){
+        //获取ContentResolver
+        ContentResolver contentResolver = UIUtils.getContext().getContentResolver();
+        //查询字段
+        String[] projection = new String[]{MediaStore.Images.Media._ID,
+                MediaStore.Images.Media.DATA,
+                MediaStore.Images.Media.WIDTH,
+                MediaStore.Images.Media.HEIGHT,
+                MediaStore.Images.Media.DATE_MODIFIED,
+                MediaStore.Images.Media.SIZE,
+                MediaStore.Images.Media.LONGITUDE,
+                MediaStore.Images.Media.LATITUDE,
+                MediaStore.Images.Media.ORIENTATION,
+                MediaStore.Images.Media.MIME_TYPE,
+                MediaStore.Images.Media.DATE_TAKEN};
+        // 条件
+        String selection = MediaStore.Images.Media.MIME_TYPE + "=? or " + MediaStore.Images.Media.MIME_TYPE + "=? or "
+                + MediaStore.Images.Media.MIME_TYPE + "=? or " + MediaStore.Images.Media.MIME_TYPE + "=?";
+        // 条件值
+        String[] selectionArgs = {"image/jpeg", "image/png", "image/gif", "image/webp"};
+        // 排序
+        String sortOrder = MediaStore.Images.Media.DATE_MODIFIED + " desc";
+        // 查询
+        Cursor mCursor = MediaStore.Images.Media.query(contentResolver, uri, projection, selection, selectionArgs, sortOrder);
+
+        while (mCursor != null && mCursor.moveToNext()) {
+            //图片大小
+            int size = mCursor.getInt(mCursor.getColumnIndex(MediaStore.Images.Media.SIZE));
+            //过滤掉10k以下的图片
+            if(size < MIN_SIZE)
+                continue;
+            //修改日期
+            long modified = mCursor.getInt(mCursor.getColumnIndex(MediaStore.Images.Media.DATE_MODIFIED));
+            if(modified < MIN_DATE)
+                continue;
+            //图片路径
+            String path = mCursor.getString(mCursor.getColumnIndex(MediaStore.Images.Media.DATA));
+            if(TextUtils.isEmpty(path))
+                continue;
+            //图片Id
+            int id = mCursor.getInt(mCursor.getColumnIndex(MediaStore.Images.Media._ID));
+            //图片宽度
+            int width = mCursor.getInt(mCursor.getColumnIndex(MediaStore.Images.Media.WIDTH));
+            //图片高度
+            int height = mCursor.getInt(mCursor.getColumnIndex(MediaStore.Images.Media.HEIGHT));
+            //拍摄日期
+            int takendate = mCursor.getInt(mCursor.getColumnIndex(MediaStore.Images.Media.DATE_TAKEN));
+            double longitude = mCursor.getDouble(mCursor.getColumnIndexOrThrow(MediaStore.Images.Media.LONGITUDE));
+            double latitude = mCursor.getDouble(mCursor.getColumnIndexOrThrow(MediaStore.Images.Media.LATITUDE));
+            int orientation = mCursor.getInt(mCursor.getColumnIndex(MediaStore.Images.Media.ORIENTATION));
+            //类型
+            String mime_type = mCursor.getString(mCursor.getColumnIndex(MediaStore.Images.Media.MIME_TYPE));
+            String parentName = new File(path).getParent();
+            CameraItem cameraItem = new CameraItem(id, path, width, height, size, latitude, longitude, 0, orientation, takendate, modified,0,mime_type);
+
+            // 查询缩略图非常消耗性能
+//            Log.i("667", "readSystemGallery: tempid"+id);
+            String temp =  getImageThumbnail(id);
+            Log.i("667", "readSystemGallery: temp"+temp);
+            cameraItem.setThumbnail(temp);
+
+            //根据父路径名将图片放入到mGruopMap中
+            if (!mGruopMap.containsKey(parentName)) {
+                ImageFolder floder = new ImageFolder();
+                floder.setDir(parentName);
+                floder.setFirstImagePath(path);
+                floder.setCount(floder.getCount() + 1);
+                List<CameraItem> photoList = new ArrayList<>();
+                photoList.add(cameraItem);
+                if(floder.isPhoto()) {
+                    mDefaultFolder = floder;
+                    sortPhotosByMonth(cameraItem);
+                    sortPhotosByDay(cameraItem);
+                }
+                floder.setList(photoList);
+                mGruopMap.put(parentName, floder);
+                imageFloders.add(floder);
+                if(mDefaultFolder == null || !mDefaultFolder.isPhoto()) {
+                    mDefaultFolder = floder;
+                }
+            } else {
+                ImageFolder floder = mGruopMap.get(parentName);
+                floder.setCount(floder.getCount() + 1);
+                floder. getList().add(cameraItem);
+                if(floder.isPhoto()) {
+                    sortPhotosByMonth(cameraItem);
+                    sortPhotosByDay(cameraItem);
+                }
+            }
+        }
+        if (mCursor != null) {
+            mCursor.close();
+        }
+    }
+private  static void readVideo(Uri uri){
+        //获取ContentResolver
+        ContentResolver contentResolver = UIUtils.getContext().getContentResolver();
+    Log.d("wwww", "readVideo: Start");
+        // 查询
+        Cursor mCursor = contentResolver.query(uri, VIDEOS,null,null,MediaStore.Video.Media.DATE_ADDED);
+
+        while (mCursor != null && mCursor.moveToNext()) {
+            //图片大小
+            int size = mCursor.getInt(mCursor.getColumnIndex(MediaStore.Video.Media.SIZE));
+            //过滤掉10k以下的图片
+            if(size < MIN_SIZE)
+                continue;
+            //修改日期
+            long modified = mCursor.getInt(mCursor.getColumnIndex(MediaStore.Video.Media.DATE_MODIFIED));
+            if(modified < MIN_DATE)
+                continue;
+            //图片路径
+            String path = mCursor.getString(mCursor.getColumnIndex(MediaStore.Video.Media.DATA));
+            if(TextUtils.isEmpty(path))
+                continue;
+            //图片Id
+            int id = mCursor.getInt(mCursor.getColumnIndex(MediaStore.Video.Media._ID));
+            //图片宽度
+            int width = mCursor.getInt(mCursor.getColumnIndex(MediaStore.Video.Media.WIDTH));
+            //图片高度
+            int height = mCursor.getInt(mCursor.getColumnIndex(MediaStore.Video.Media.HEIGHT));
+            //拍摄日期
+            int takendate = mCursor.getInt(mCursor.getColumnIndex(MediaStore.Video.Media.DATE_TAKEN));
+            double longitude = mCursor.getDouble(mCursor.getColumnIndexOrThrow(MediaStore.Video.Media.LONGITUDE));
+            double latitude = mCursor.getDouble(mCursor.getColumnIndexOrThrow(MediaStore.Video.Media.LATITUDE));
+            //int orientation = mCursor.getInt(mCursor.getColumnIndex(MediaStore.Video.Media.ORIENTATION));
+            //类型
+            String mime_type = mCursor.getString(mCursor.getColumnIndex(MediaStore.Video.Media.MIME_TYPE));
+            long  duration =  mCursor.getLong(mCursor.getColumnIndex(MediaStore.Video.Media.DURATION));
+            String parentName = new File(path).getParent();
+            CameraItem cameraItem = new CameraItem(id, path, width, height, size, latitude, longitude, 0, 0, takendate, modified,duration,mime_type);
+            Log.d("wwww", "readVideo: cameraItem.setThumbnail start");
+            // 查询缩略图非常消耗性能
+            cameraItem.setThumbnail(getVideoThumbnail(id,uri));
+            Log.d("wwww", "readVideo: cameraItem.setThumbnail end" );
+            //根据父路径名将图片放入到mGruopMap中
+            if (!mGruopMap.containsKey(parentName)) {
+                ImageFolder floder = new ImageFolder();
+                floder.setDir(parentName);
+                floder.setFirstImagePath(path);
+                floder.setCount(floder.getCount() + 1);
+                List<CameraItem> photoList = new ArrayList<>();
+                photoList.add(cameraItem);
+                if(floder.isPhoto()) {
+                    mDefaultFolder = floder;
+                    sortPhotosByMonth(cameraItem);
+                    sortPhotosByDay(cameraItem);
+                }
+                floder.setList(photoList);
+                mGruopMap.put(parentName, floder);
+                imageFloders.add(floder);
+                if(mDefaultFolder == null || !mDefaultFolder.isPhoto()) {
+                    mDefaultFolder = floder;
+                }
+            } else {
+                ImageFolder floder = mGruopMap.get(parentName);
+                floder.setCount(floder.getCount() + 1);
+                floder. getList().add(cameraItem);
+                if(floder.isPhoto()) {
+                    sortPhotosByMonth(cameraItem);
+                    sortPhotosByDay(cameraItem);
+                }
+            }
+        }
+        if (mCursor != null) {
+            mCursor.close();
+        }
+    }
+    /** 获取照片缩略图 */
+    private static String getImageThumbnail(int imageId) {
+        Log.i("667", "readSystemGallery: do getImageThumbnail");
+        String thumbnailPath = null;
+        final String[] projection = {MediaStore.Images.Thumbnails.DATA, MediaStore.Images.Thumbnails.IMAGE_ID};
+        Cursor cursor = MediaStore.Images.Thumbnails.queryMiniThumbnail(UIUtils.getContext().getContentResolver(),
+                imageId, MediaStore.Images.Thumbnails.MICRO_KIND, projection);
+        if(/*cursor != null && */cursor.moveToFirst()) {
+            thumbnailPath = cursor.getString(cursor.getColumnIndex(MediaStore.Images.Thumbnails.DATA));
+            cursor.close();
+        }
+        return thumbnailPath;
+    }
+    /** 获取视频缩略图*/
+    private static String getVideoThumbnail(int imageId, Uri uri) {
+        String thumbPath = null;
+        ContentResolver contentResolver = UIUtils.getContext().getContentResolver();
+        Cursor thumbCursor = contentResolver.query(uri,
+                VIDEOS,
+                MediaStore.Video.Thumbnails._ID + "=" + imageId,
+                null,
+                null);
+        if (thumbCursor != null) {
+            if (thumbCursor.moveToFirst()) {
+                thumbPath = thumbCursor.getString(thumbCursor.getColumnIndex(MediaStore.Video.Thumbnails.DATA));
+            }
+            thumbCursor.close();
+        }
+        Log.d("wwww", "getVideoThumbnail: thumbPath"+thumbPath);
+        return thumbPath;
+    }
+    /** 根据当前视图，返回对应数据 */
+    public static LinkedHashMap<String, List<CameraItem>> getPhotoSections(GooglePhotoActivity.ViewType viewType) {
+        switch (viewType) {
+            case COLLAGE:
+            case DAY:
+            case YEAR:
+                Log.i("666", "getPhotoSections: mSectionsOfDay in googlePhotoScanner :"+mSectionsOfDay.keySet());
+                return mSectionsOfDay;
+            case MONTH:
+            default:
+                return mSectionsOfMonth;
+        }
+    }
+
+    /*public static List<ImageFolder> getImageFloders() {
+        return imageFloders;
+    }*/
+
+    /** 把照片按月分类 */
+    private static void sortPhotosByMonth(CameraItem photo) {
+        Date date = new Date(photo.getModified() * 1000);
+        String millisecond = mDataFormatOfMonth.format(date);
+        if(!mSectionsOfMonth.containsKey(millisecond)) {
+            List<CameraItem> section = new ArrayList<>();
+            section.add(photo);
+            mSectionsOfMonth.put(millisecond, section);
+        } else {
+            List<CameraItem> section = mSectionsOfMonth.get(millisecond);
+            section.add(photo);
+        }
+    }
+
+    /** 把照片按日分类 */
+    private static void sortPhotosByDay(CameraItem photo) {
+        Date date = new Date(photo.getModified() * 1000);
+//        Date today = new Date(System.currentTimeMillis());//获取当前时间
+//        String dayKey =mDataFormatOfDay.format(date);
+        /*if(IsToday(dayKey)){dayKey="ToDay";}else if (IsYesterday(dayKey)){dayKey="YesterDay";}*/
+        String detail = mDataFormatOfDay.format(date);
+//        String week = DateUtil.getWeek(date);
+//        String dayKey = detail + week;
+        if(!mSectionsOfDay.containsKey(detail)) {
+            List<CameraItem> section = new ArrayList<>();
+            section.add(photo);
+            mSectionsOfDay.put(detail, section);
+        } else {
+            List<CameraItem> section = mSectionsOfDay.get(detail);
+            section.add(photo);
+        }
+    }
+   /* public static boolean IsToday(String day){
+
+        Calendar pre = Calendar.getInstance();
+        Date predate = new Date(System.currentTimeMillis());
+        pre.setTime(predate);
+        Calendar cal = Calendar.getInstance();
+        try {
+            Date date = getDateFormat().parse(day);
+            cal.setTime(date);
+        }catch (ParseException e){
+            e.printStackTrace();
+        }
+        if (cal.get(Calendar.YEAR) == (pre.get(Calendar.YEAR))) {
+            int diffDay = cal.get(Calendar.DAY_OF_YEAR)
+                    - pre.get(Calendar.DAY_OF_YEAR);
+
+            if (diffDay == 0) {
+                return true;
+            }
+        }
+        return false;
+    }
+    public static boolean IsYesterday(String day) {
+
+        Calendar pre = Calendar.getInstance();
+        Date predate = new Date(System.currentTimeMillis());
+        pre.setTime(predate);
+
+        Calendar cal = Calendar.getInstance();
+        try {
+            Date date = getDateFormat().parse(day);
+            cal.setTime(date);
+        }catch (ParseException e){
+            e.printStackTrace();
+        }
+
+        if (cal.get(Calendar.YEAR) == (pre.get(Calendar.YEAR))) {
+            int diffDay = cal.get(Calendar.DAY_OF_YEAR)
+                    - pre.get(Calendar.DAY_OF_YEAR);
+
+            if (diffDay == -1) {
+                return true;
+            }
+        }
+        return false;
+    }
+    public static SimpleDateFormat getDateFormat() {
+        if (null == DateLocal.get()) {
+            DateLocal.set(new SimpleDateFormat("yyyy-MM-dd", Locale.CHINA));
+        }
+        return DateLocal.get();
+    }
+    private static ThreadLocal<SimpleDateFormat> DateLocal = new ThreadLocal<SimpleDateFormat>();*/
+    public static void clear() {
+        if(mGruopMap != null)
+            mGruopMap.clear();
+        if(imageFloders != null)
+            imageFloders.clear();
+        if(mSectionsOfMonth != null)
+            mSectionsOfMonth.clear();
+        if(mSectionsOfDay != null)
+            mSectionsOfDay.clear();
+        mDefaultFolder = null;
+    }
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/fastscroll/SectionTitleProvider.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/fastscroll/SectionTitleProvider.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/fastscroll/SectionTitleProvider.java	(revision 1020)
@@ -0,0 +1,17 @@
+package com.gallery.tclgallery.fastscroll;
+
+/**
+ * Created by mklimczak on 31/07/15.
+ */
+public interface SectionTitleProvider{
+
+    /**
+     * Should be implemented by the adapter of the RecyclerView.
+     * Provides a text to be shown by the bubble, when RecyclerView reaches
+     * the position. Usually the first letter of the text shown by the item
+     * at this position.
+     * @param position Position of the row in adapter
+     * @return The text to be shown in the bubble
+     */
+    String getSectionTitle(int position);
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/fastscroll/FastScroller.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/fastscroll/FastScroller.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/fastscroll/FastScroller.java	(revision 1020)
@@ -0,0 +1,369 @@
+package com.gallery.tclgallery.fastscroll;
+
+import android.content.Context;
+import android.content.res.TypedArray;
+import android.graphics.drawable.Drawable;
+import android.support.v4.graphics.drawable.DrawableCompat;
+import android.support.v4.widget.TextViewCompat;
+import android.support.v7.widget.RecyclerView;
+import android.text.TextUtils;
+import android.util.AttributeSet;
+import android.view.Gravity;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.FrameLayout;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import com.gallery.tclgallery.R;
+import com.gallery.tclgallery.fastscroll.viewprovider.DefaultScrollerViewProvider;
+import com.gallery.tclgallery.fastscroll.viewprovider.ScrollerViewProvider;
+import com.gallery.tclgallery.listener.PhotoTimelineDataProvider;
+import com.gallery.tclgallery.utils.UIUtils;
+
+import java.util.List;
+
+import static android.view.ViewGroup.LayoutParams.WRAP_CONTENT;
+
+
+/**
+ * Created by mklimczak on 28/07/15.
+ */
+public class FastScroller extends LinearLayout {
+
+    private static final int STYLE_NONE = -1;
+    private final RecyclerViewScrollListener scrollListener = new RecyclerViewScrollListener(this);
+    private RecyclerView recyclerView;
+
+    private View bubble;
+    private View handle;
+    private TextView bubbleTextView;
+    private ViewGroup timeline;
+
+    private int bubbleOffset;
+    private int handleColor;
+    private int bubbleColor;
+    private int bubbleTextAppearance;
+    private int scrollerOrientation;
+    private PhotoTimelineDataProvider timelineProvider;
+
+    //TODO the name should be fixed, also check if there is a better way of handling the visibility, because this is somewhat convoluted
+    private int maxVisibility;
+
+    private boolean manuallyChangingPosition;
+
+    private ScrollerViewProvider viewProvider;
+    private SectionTitleProvider titleProvider;
+
+    public FastScroller(Context context) {
+        this(context, null);
+    }
+
+    public FastScroller(Context context, AttributeSet attrs) {
+        this(context, attrs, 0);
+    }
+
+    public FastScroller(Context context, AttributeSet attrs, int defStyle) {
+        super(context, attrs, defStyle);
+        setClipChildren(false);
+        TypedArray style = context.obtainStyledAttributes(attrs, R.styleable.fastscroll__fastScroller, R.attr.fastscroll__style, 0);
+        try {
+            bubbleColor = style.getColor(R.styleable.fastscroll__fastScroller_fastscroll__bubbleColor, STYLE_NONE);
+            handleColor = style.getColor(R.styleable.fastscroll__fastScroller_fastscroll__handleColor, STYLE_NONE);
+            bubbleTextAppearance = style.getResourceId(R.styleable.fastscroll__fastScroller_fastscroll__bubbleTextAppearance, STYLE_NONE);
+        } finally {
+            style.recycle();
+        }
+        maxVisibility = getVisibility();
+        setViewProvider(new DefaultScrollerViewProvider());
+    }
+
+    /**
+     * Enables custom layout for {@link FastScroller}.
+     * @param viewProvider A {@link ScrollerViewProvider} for the {@link FastScroller} to use when building layout.
+     */
+    public void setViewProvider(ScrollerViewProvider viewProvider) {
+        removeAllViews();
+        this.viewProvider = viewProvider;
+        viewProvider.setFastScroller(this);
+        bubble = viewProvider.provideBubbleView(this);
+        handle = viewProvider.provideHandleView(this);
+        bubbleTextView = viewProvider.provideBubbleTextView();
+        timeline = viewProvider.provideTimelineView(this);
+        timeline.addView(bubble);
+        addView(timeline);
+        addView(handle);
+    }
+
+    /**
+     * 初始化时间轴
+     */
+    public void initTimelineView() {
+        if(timelineProvider == null) return;
+        List<Float> percents = timelineProvider.getPercents();
+        List<String> titles = timelineProvider.getTitles();
+        int height = UIUtils.dip2px(20);
+        boolean forceAdd;
+        String year = null;
+        float lastPosition = 0;
+        TextView lastTag = null;
+        for(int i = 0; i < percents.size(); i++) {
+            TextView tvTime = getTimelineTag();
+            String title = titles.get(i);
+            if(!TextUtils.isEmpty(year) && title.startsWith(year)) {
+                forceAdd = false;
+                tvTime.setText(title.substring(5));
+            } else {
+                forceAdd = true;
+                tvTime.setText(title.substring(0, 5));
+            }
+            year = title.substring(0, 5);
+
+            float y = getHeight() * percents.get(i);
+            if(y >= lastPosition || forceAdd) {
+                timeline.addView(tvTime);
+                tvTime.setY(y);
+                lastPosition = y + height;
+                if(forceAdd && lastTag != null) {
+                    timeline.removeView(lastTag);
+                }
+                lastTag = tvTime;
+            }
+        }
+    }
+
+    private TextView getTimelineTag() {
+        TextView tvTime = new TextView(getContext());
+        tvTime.setTextSize(12);
+        tvTime.setTextColor(getResources().getColor(R.color.gray_text));
+        tvTime.setBackgroundResource(R.drawable.fastscroll_default_timeline_tag);
+        int padding = (int) getContext().getResources().getDimension(R.dimen.dimen_5dp);
+        tvTime.setPadding(padding * 2, padding / 2, padding * 2, padding / 2);
+        FrameLayout.LayoutParams lp = new FrameLayout.LayoutParams(WRAP_CONTENT, WRAP_CONTENT);
+        lp.gravity = Gravity.RIGHT;
+        tvTime.setLayoutParams(lp);
+        return tvTime;
+    }
+
+    /**
+     * Attach the {@link FastScroller} to {@link RecyclerView}. Should be used after the adapter is set
+     * to the {@link RecyclerView}. If the adapter implements SectionTitleProvider, the FastScroller
+     * will show a bubble with title.
+     * @param recyclerView A {@link RecyclerView} to attach the {@link FastScroller} to.
+     */
+    public void setRecyclerView(RecyclerView recyclerView) {
+        this.recyclerView = recyclerView;
+        if(recyclerView.getAdapter() instanceof SectionTitleProvider) {
+            titleProvider = (SectionTitleProvider) recyclerView.getAdapter();
+        }
+        if(recyclerView.getAdapter() instanceof PhotoTimelineDataProvider) {
+            timelineProvider = (PhotoTimelineDataProvider) recyclerView.getAdapter();
+        }
+        recyclerView.addOnScrollListener(scrollListener);
+        invalidateVisibility();
+        recyclerView.setOnHierarchyChangeListener(new OnHierarchyChangeListener() {
+            @Override
+            public void onChildViewAdded(View parent, View child) {
+                invalidateVisibility();
+            }
+
+            @Override
+            public void onChildViewRemoved(View parent, View child) {
+                invalidateVisibility();
+            }
+        });
+    }
+
+    /**
+     * Set the orientation of the {@link FastScroller}. The orientation of the {@link FastScroller}
+     * should generally match the orientation of connected  {@link RecyclerView} for good UX but it's not enforced.
+     * Note: This method is overridden from {@link LinearLayout#setOrientation(int)} but for {@link FastScroller}
+     * it has a totally different meaning.
+     * @param orientation of the {@link FastScroller}. {@link #VERTICAL} or {@link #HORIZONTAL}
+     */
+    @Override
+    public void setOrientation(int orientation) {
+        scrollerOrientation = orientation;
+        //switching orientation, because orientation in linear layout
+        //is something different than orientation of fast scroller
+        super.setOrientation(orientation == HORIZONTAL ? VERTICAL : HORIZONTAL);
+    }
+
+    /**
+     * Set the background color of the bubble.
+     * @param color Color in hex notation with alpha channel, e.g. 0xFFFFFFFF
+     */
+    public void setBubbleColor(int color) {
+        bubbleColor = color;
+        invalidate();
+    }
+
+    /**
+     * Set the background color of the handle.
+     * @param color Color in hex notation with alpha channel, e.g. 0xFFFFFFFF
+     */
+    public void setHandleColor(int color) {
+        handleColor = color;
+        invalidate();
+    }
+
+    /**
+     * Sets the text appearance of the bubble.
+     * @param textAppearanceResourceId The id of the resource to be used as text appearance of the bubble.
+     */
+    public void setBubbleTextAppearance(int textAppearanceResourceId){
+        bubbleTextAppearance = textAppearanceResourceId;
+        invalidate();
+    }
+
+    /**
+     * Add a ScrollerListener
+     * to be notified of user scrolling
+     * @param listener
+     */
+    public void addScrollerListener(RecyclerViewScrollListener.ScrollerListener listener){
+        scrollListener.addScrollerListener(listener);
+    }
+
+    @Override
+    protected void onLayout(boolean changed, int l, int t, int r, int b) {
+        super.onLayout(changed, l, t, r, b);
+
+        initHandleMovement();
+        bubbleOffset = viewProvider.getBubbleOffset();
+
+        applyStyling(); //TODO this doesn't belong here, even if it works
+
+        if (!isInEditMode()) {
+            //sometimes recycler starts with a defined scroll (e.g. when coming from saved state)
+            scrollListener.updateHandlePosition(recyclerView);
+        }
+
+    }
+
+    private void applyStyling() {
+        if(bubbleColor!=STYLE_NONE) setBackgroundTint(bubbleTextView, bubbleColor);
+        if(handleColor!=STYLE_NONE) setBackgroundTint(handle, handleColor);
+        if(bubbleTextAppearance!=STYLE_NONE) TextViewCompat.setTextAppearance(bubbleTextView, bubbleTextAppearance);
+    }
+
+    private void setBackgroundTint(View view, int color) {
+        final Drawable background = DrawableCompat.wrap(view.getBackground());
+        if(background==null) return;
+        DrawableCompat.setTint(background.mutate(), color);
+        Utils.setBackground(view, background);
+    }
+
+    private void initHandleMovement() {
+        handle.setOnTouchListener(new OnTouchListener() {
+            @Override
+            public boolean onTouch(View v, MotionEvent event) {
+                requestDisallowInterceptTouchEvent(true);
+                if (event.getAction() == MotionEvent.ACTION_DOWN || event.getAction() == MotionEvent.ACTION_MOVE) {
+                    if(titleProvider!=null && event.getAction() == MotionEvent.ACTION_DOWN) viewProvider.onHandleGrabbed();
+                    manuallyChangingPosition = true;
+                    float relativePos = getRelativeTouchPosition(event);
+                    setScrollerPosition(relativePos);
+                    setRecyclerViewPosition(relativePos);
+                    return true;
+                } else if (event.getAction() == MotionEvent.ACTION_UP) {
+                    manuallyChangingPosition = false;
+                    if(titleProvider!=null) viewProvider.onHandleReleased();
+                    return true;
+                }
+                return false;
+            }
+        });
+    }
+
+    private float getRelativeTouchPosition(MotionEvent event){
+        if(isVertical()){
+            float yInParent = event.getRawY() - Utils.getViewRawY(handle);
+            return yInParent / (getHeight() - handle.getHeight());
+        } else {
+            float xInParent = event.getRawX() - Utils.getViewRawX(handle);
+            return xInParent / (getWidth() - handle.getWidth());
+        }
+    }
+
+    @Override
+    public void setVisibility(int visibility) {
+        maxVisibility = visibility;
+        invalidateVisibility();
+    }
+
+    private void invalidateVisibility() {
+        if(
+                recyclerView.getAdapter()==null ||
+                recyclerView.getAdapter().getItemCount()==0 ||
+                recyclerView.getChildAt(0)==null ||
+//                isRecyclerViewNotScrollable() ||
+                maxVisibility != View.VISIBLE
+                ){
+            super.setVisibility(INVISIBLE);
+        } else {
+            super.setVisibility(VISIBLE);
+        }
+    }
+
+    private boolean isRecyclerViewNotScrollable() {
+        if(isVertical()) {
+            return recyclerView.getChildAt(0).getHeight() * recyclerView.getAdapter().getItemCount() <= recyclerView.getHeight();
+        } else {
+            return recyclerView.getChildAt(0).getWidth() * recyclerView.getAdapter().getItemCount() <= recyclerView.getWidth();
+        }
+    }
+
+    private void setRecyclerViewPosition(float relativePos) {
+        if (recyclerView == null) return;
+        int itemCount = recyclerView.getAdapter().getItemCount();
+        int targetPos = (int) Utils.getValueInRange(0, itemCount - 1, (int) (relativePos * (float) itemCount));
+        recyclerView.scrollToPosition(targetPos);
+        if(titleProvider!=null && bubbleTextView!=null) {
+            String title = titleProvider.getSectionTitle(targetPos);
+            if(!TextUtils.isEmpty(title)) {
+                bubbleTextView.setText(title);
+            }
+            UIUtils.updateVisibility(bubbleTextView, TextUtils.isEmpty(title) ? View.INVISIBLE : View.VISIBLE);
+        }
+    }
+
+    void setScrollerPosition(float relativePos) {
+        if(isVertical()) {
+            bubble.setY(Utils.getValueInRange(
+                    0,
+                    getHeight() - bubble.getHeight(),
+                    relativePos * (getHeight() - handle.getHeight()) + bubbleOffset)
+            );
+            handle.setY(Utils.getValueInRange(
+                    0,
+                    getHeight() - handle.getHeight(),
+                    relativePos * (getHeight() - handle.getHeight()))
+            );
+        } else {
+            bubble.setX(Utils.getValueInRange(
+                    0,
+                    getWidth() - bubble.getWidth(),
+                    relativePos * (getWidth() - handle.getWidth()) + bubbleOffset)
+            );
+            handle.setX(Utils.getValueInRange(
+                    0,
+                    getWidth() - handle.getWidth(),
+                    relativePos * (getWidth() - handle.getWidth()))
+            );
+        }
+    }
+
+    public boolean isVertical(){
+        return scrollerOrientation == VERTICAL;
+    }
+
+    boolean shouldUpdateHandlePosition() {
+        return handle!=null && !manuallyChangingPosition && recyclerView.getChildCount() > 0;
+    }
+
+    ScrollerViewProvider getViewProvider() {
+        return viewProvider;
+    }
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/fastscroll/viewprovider/DefaultBubbleBehavior.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/fastscroll/viewprovider/DefaultBubbleBehavior.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/fastscroll/viewprovider/DefaultBubbleBehavior.java	(revision 1020)
@@ -0,0 +1,34 @@
+package com.gallery.tclgallery.fastscroll.viewprovider;
+
+/**
+ * Created by Michal on 11/08/16.
+ */
+public class DefaultBubbleBehavior implements ViewBehavior {
+
+    private final VisibilityAnimationManager animationManager;
+
+    public DefaultBubbleBehavior(VisibilityAnimationManager animationManager) {
+        this.animationManager = animationManager;
+    }
+
+    @Override
+    public void onHandleGrabbed() {
+        animationManager.show();
+    }
+
+    @Override
+    public void onHandleReleased() {
+        animationManager.hide();
+    }
+
+    @Override
+    public void onScrollStarted() {
+
+    }
+
+    @Override
+    public void onScrollFinished() {
+
+    }
+
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/fastscroll/viewprovider/DefaultHandleBehavior.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/fastscroll/viewprovider/DefaultHandleBehavior.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/fastscroll/viewprovider/DefaultHandleBehavior.java	(revision 1020)
@@ -0,0 +1,110 @@
+package com.gallery.tclgallery.fastscroll.viewprovider;
+
+import android.animation.AnimatorInflater;
+import android.animation.AnimatorSet;
+import android.support.annotation.AnimatorRes;
+import android.support.annotation.Nullable;
+import android.view.View;
+
+
+/**
+ * Created by Michal on 11/08/16.
+ */
+public class DefaultHandleBehavior implements ViewBehavior {
+
+    private final VisibilityAnimationManager visibilityManager;
+    private final HandleAnimationManager grabManager;
+
+    private boolean isGrabbed;
+
+    public DefaultHandleBehavior(VisibilityAnimationManager visibilityManager, HandleAnimationManager grabManager) {
+        this.visibilityManager = visibilityManager;
+        this.grabManager = grabManager;
+    }
+
+    @Override
+    public void onHandleGrabbed() {
+        isGrabbed = true;
+        visibilityManager.show();
+        grabManager.onGrab();
+    }
+
+    @Override
+    public void onHandleReleased() {
+        isGrabbed = false;
+        visibilityManager.hide();
+        grabManager.onRelease();
+    }
+
+    @Override
+    public void onScrollStarted() {
+        visibilityManager.show();
+    }
+
+    @Override
+    public void onScrollFinished() {
+        if(!isGrabbed) visibilityManager.hide();
+    }
+
+    public static class HandleAnimationManager {
+
+        @Nullable
+        private AnimatorSet grabAnimator;
+        @Nullable
+        private AnimatorSet releaseAnimator;
+
+        protected HandleAnimationManager(View handle, @AnimatorRes int grabAnimator, @AnimatorRes int releaseAnimator) {
+            if (grabAnimator != -1) {
+                this.grabAnimator = (AnimatorSet) AnimatorInflater.loadAnimator(handle.getContext(), grabAnimator);
+                this.grabAnimator.setTarget(handle);
+            }
+            if (releaseAnimator != -1) {
+                this.releaseAnimator = (AnimatorSet) AnimatorInflater.loadAnimator(handle.getContext(), releaseAnimator);
+                this.releaseAnimator.setTarget(handle);
+            }
+        }
+
+        public void onGrab() {
+            if (releaseAnimator != null) {
+                releaseAnimator.cancel();
+            }
+            if (grabAnimator != null) {
+                grabAnimator.start();
+            }
+        }
+
+        public void onRelease() {
+            if (grabAnimator != null) {
+                grabAnimator.cancel();
+            }
+            if (releaseAnimator != null) {
+                releaseAnimator.start();
+            }
+        }
+
+        public static class Builder {
+            private View handle;
+            private int grabAnimator;
+            private int releaseAnimator;
+
+            public Builder(View handle) {
+                this.handle = handle;
+            }
+
+            public Builder withGrabAnimator(@AnimatorRes int grabAnimator) {
+                this.grabAnimator = grabAnimator;
+                return this;
+            }
+
+            public Builder withReleaseAnimator(@AnimatorRes int releaseAnimator) {
+                this.releaseAnimator = releaseAnimator;
+                return this;
+            }
+
+            public HandleAnimationManager build() {
+                return new HandleAnimationManager(handle, grabAnimator, releaseAnimator);
+            }
+        }
+    }
+
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/fastscroll/viewprovider/DefaultScrollerViewProvider.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/fastscroll/viewprovider/DefaultScrollerViewProvider.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/fastscroll/viewprovider/DefaultScrollerViewProvider.java	(revision 1020)
@@ -0,0 +1,76 @@
+package com.gallery.tclgallery.fastscroll.viewprovider;
+
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import com.gallery.tclgallery.R;
+
+
+/**
+ * Created by Michal on 05/08/16.
+ */
+public class DefaultScrollerViewProvider extends ScrollerViewProvider {
+
+    protected View bubble;
+    protected View handle;
+    protected View timeline;
+
+    @Override
+    public View provideHandleView(ViewGroup container) {
+        handle = new View(getContext());
+
+        int handleWidth = getContext().getResources().getDimensionPixelSize(getScroller().isVertical() ? R.dimen.fastscroll__handle_clickable_width : R.dimen.fastscroll__handle_height);
+        int handleHeight = getContext().getResources().getDimensionPixelSize(getScroller().isVertical() ? R.dimen.fastscroll__handle_height : R.dimen.fastscroll__handle_clickable_width);
+        LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(handleWidth, handleHeight);
+        params.leftMargin = getContext().getResources().getDimensionPixelSize(R.dimen.dimen_20dp);
+        handle.setBackgroundResource(R.drawable.photo_handle);
+        handle.setLayoutParams(params);
+
+        return handle;
+    }
+
+    @Override
+    public View provideBubbleView(ViewGroup container) {
+        bubble = LayoutInflater.from(getContext()).inflate(R.layout.fastscroll__default_bubble, container, false);
+        return bubble;
+    }
+
+    @Override
+    public TextView provideBubbleTextView() {
+        return (TextView) bubble;
+    }
+
+    @Override
+    public ViewGroup provideTimelineView(ViewGroup container) {
+        timeline = LayoutInflater.from(getContext()).inflate(R.layout.fastscroll_default_timeline, container, false);
+        return (ViewGroup) timeline;
+    }
+
+    @Override
+    public int getBubbleOffset() {
+        return (int) (getScroller().isVertical() ? ((float)handle.getHeight()/2f)-bubble.getHeight() / 2 : ((float)handle.getWidth()/2f)-bubble.getWidth());
+    }
+
+    @Override
+    protected ViewBehavior provideHandleBehavior() {
+        return new DefaultHandleBehavior(
+                new VisibilityAnimationManager.Builder(handle)
+                        .withHideDelay(1500)
+                        .build(),
+                new DefaultHandleBehavior.HandleAnimationManager.Builder(handle)
+                        .withGrabAnimator(R.animator.custom_grab)
+                        .withReleaseAnimator(R.animator.custom_release)
+                        .build()
+        );
+    }
+
+    @Override
+    protected ViewBehavior provideBubbleBehavior() {
+        return new DefaultBubbleBehavior(new VisibilityAnimationManager.Builder(timeline).withPivotX(1f).withPivotY(1f).build());
+    }
+
+
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/fastscroll/viewprovider/VisibilityAnimationManager.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/fastscroll/viewprovider/VisibilityAnimationManager.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/fastscroll/viewprovider/VisibilityAnimationManager.java	(revision 1020)
@@ -0,0 +1,129 @@
+package com.gallery.tclgallery.fastscroll.viewprovider;
+
+import android.animation.Animator;
+import android.animation.AnimatorInflater;
+import android.animation.AnimatorListenerAdapter;
+import android.animation.AnimatorSet;
+import android.support.annotation.AnimatorRes;
+import android.view.View;
+
+import com.gallery.tclgallery.R;
+
+/**
+ * Created by Michal on 05/08/16.
+ * Animates showing and hiding elements of the  (handle and bubble).
+ * The decision when to show/hide the element should be implemented via {@link ViewBehavior}.
+ */
+public class VisibilityAnimationManager {
+
+    protected final View view;
+
+    protected AnimatorSet hideAnimator;
+    protected AnimatorSet showAnimator;
+
+    private float pivotXRelative;
+    private float pivotYRelative;
+
+    protected VisibilityAnimationManager(final View view, @AnimatorRes int showAnimator, @AnimatorRes int hideAnimator, float pivotXRelative, float pivotYRelative, int hideDelay){
+        this.view = view;
+        this.pivotXRelative = pivotXRelative;
+        this.pivotYRelative = pivotYRelative;
+        this.hideAnimator = (AnimatorSet) AnimatorInflater.loadAnimator(view.getContext(), hideAnimator);
+        this.hideAnimator.setStartDelay(hideDelay);
+        this.hideAnimator.setTarget(view);
+        this.showAnimator = (AnimatorSet) AnimatorInflater.loadAnimator(view.getContext(), showAnimator);
+        this.showAnimator.setTarget(view);
+        this.hideAnimator.addListener(new AnimatorListenerAdapter() {
+
+            //because onAnimationEnd() goes off even for canceled animations
+            boolean wasCanceled;
+
+            @Override
+            public void onAnimationEnd(Animator animation) {
+                super.onAnimationEnd(animation);
+                if(!wasCanceled) view.setVisibility(View.INVISIBLE);
+                wasCanceled = false;
+            }
+
+            @Override
+            public void onAnimationCancel(Animator animation) {
+                super.onAnimationCancel(animation);
+                wasCanceled = true;
+            }
+        });
+
+        updatePivot();
+    }
+
+    public void show(){
+        hideAnimator.cancel();
+        if (view.getVisibility() == View.INVISIBLE) {
+            view.setVisibility(View.VISIBLE);
+            updatePivot();
+            showAnimator.start();
+        }
+    }
+
+    public void hide(){
+        updatePivot();
+        hideAnimator.start();
+    }
+
+    protected void updatePivot() {
+        view.setPivotX(pivotXRelative*view.getMeasuredWidth());
+        view.setPivotY(pivotYRelative*view.getMeasuredHeight());
+    }
+
+    public static abstract class AbsBuilder<T extends VisibilityAnimationManager> {
+        protected final View view;
+        protected int showAnimatorResource = R.animator.fastscroll__default_show;
+        protected int hideAnimatorResource = R.animator.fastscroll__default_hide;
+        protected int hideDelay = 1000;
+        protected float pivotX = 0.5f;
+        protected float pivotY = 0.5f;
+
+        public AbsBuilder(View view) {
+            this.view = view;
+        }
+
+        public AbsBuilder<T> withShowAnimator(@AnimatorRes int showAnimatorResource){
+            this.showAnimatorResource = showAnimatorResource;
+            return this;
+        }
+
+        public AbsBuilder<T> withHideAnimator(@AnimatorRes int hideAnimatorResource){
+            this.hideAnimatorResource = hideAnimatorResource;
+            return this;
+        }
+
+        public AbsBuilder<T> withHideDelay(int hideDelay){
+            this.hideDelay = hideDelay;
+            return this;
+        }
+
+        public AbsBuilder<T> withPivotX(float pivotX){
+            this.pivotX = pivotX;
+            return this;
+        }
+
+        public AbsBuilder<T> withPivotY(float pivotY){
+            this.pivotY = pivotY;
+            return this;
+        }
+
+        public abstract T build();
+    }
+
+    public static class Builder extends AbsBuilder<VisibilityAnimationManager> {
+
+        public Builder(View view) {
+            super(view);
+        }
+
+        public VisibilityAnimationManager build(){
+            return new VisibilityAnimationManager(view, showAnimatorResource, hideAnimatorResource, pivotX, pivotY, hideDelay);
+        }
+
+    }
+
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/fastscroll/viewprovider/ViewBehavior.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/fastscroll/viewprovider/ViewBehavior.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/fastscroll/viewprovider/ViewBehavior.java	(revision 1020)
@@ -0,0 +1,14 @@
+package com.gallery.tclgallery.fastscroll.viewprovider;
+
+/**
+ * Created by Michal on 11/08/16.
+ * Extending classes should use this interface to get notified about events that occur to the
+ * fastscroller elements (handle and bubble) and react accordingly. See {@link DefaultBubbleBehavior}
+ * for an example.
+ */
+public interface ViewBehavior {
+    void onHandleGrabbed();
+    void onHandleReleased();
+    void onScrollStarted();
+    void onScrollFinished();
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/fastscroll/viewprovider/ScrollerViewProvider.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/fastscroll/viewprovider/ScrollerViewProvider.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/fastscroll/viewprovider/ScrollerViewProvider.java	(revision 1020)
@@ -0,0 +1,97 @@
+package com.gallery.tclgallery.fastscroll.viewprovider;
+
+import android.content.Context;
+import android.support.annotation.Nullable;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.TextView;
+
+import com.gallery.tclgallery.fastscroll.FastScroller;
+
+
+/**
+ * Created by Michal on 05/08/16.
+ * Provides {@link View}s and their behaviors for the handle and bubble of the fastscroller.
+ */
+public abstract class ScrollerViewProvider {
+
+    private FastScroller scroller;
+    private ViewBehavior handleBehavior;
+    private ViewBehavior bubbleBehavior;
+
+    public void setFastScroller(FastScroller scroller){
+        this.scroller = scroller;
+    }
+
+    protected Context getContext(){
+        return scroller.getContext();
+    }
+
+    protected FastScroller getScroller() {
+        return scroller;
+    }
+
+    /**
+     * @param container The container {@link FastScroller} for the view to inflate properly.
+     * @return A view which will be by the {@link FastScroller} used as a handle.
+     */
+    public abstract View provideHandleView(ViewGroup container);
+
+    /**
+     * @param container The container {@link FastScroller} for the view to inflate properly.
+     * @return A view which will be by the {@link FastScroller} used as a bubble.
+     */
+    public abstract View provideBubbleView(ViewGroup container);
+
+    /**
+     * Bubble view has to provide a {@link TextView} that will show the index title.
+     * @return A {@link TextView} that will hold the index title.
+     */
+    public abstract TextView provideBubbleTextView();
+
+    public abstract ViewGroup provideTimelineView(ViewGroup container);
+
+    /**
+     * To offset the position of the bubble relative to the handle. E.g. in {@link DefaultScrollerViewProvider}
+     * the sharp corner of the bubble is aligned with the center of the handle.
+     * @return the position of the bubble in relation to the handle (according to the orientation).
+     */
+    public abstract int getBubbleOffset();
+
+    @Nullable
+    protected abstract ViewBehavior provideHandleBehavior();
+
+    @Nullable
+    protected abstract ViewBehavior provideBubbleBehavior();
+
+    protected ViewBehavior getHandleBehavior(){
+        if(handleBehavior==null) handleBehavior = provideHandleBehavior();
+        return handleBehavior;
+    }
+
+    protected ViewBehavior getBubbleBehavior(){
+        if(bubbleBehavior==null) bubbleBehavior = provideBubbleBehavior();
+        return bubbleBehavior;
+    }
+
+    public void onHandleGrabbed(){
+        if(getHandleBehavior()!=null) getHandleBehavior().onHandleGrabbed();
+        if(getBubbleBehavior()!=null) getBubbleBehavior().onHandleGrabbed();
+    }
+
+    public void onHandleReleased(){
+        if(getHandleBehavior()!=null) getHandleBehavior().onHandleReleased();
+        if(getBubbleBehavior()!=null) getBubbleBehavior().onHandleReleased();
+    }
+
+    public void onScrollStarted(){
+        if(getHandleBehavior()!=null) getHandleBehavior().onScrollStarted();
+        if(getBubbleBehavior()!=null) getBubbleBehavior().onScrollStarted();
+    }
+
+    public void onScrollFinished(){
+        if(getHandleBehavior()!=null) getHandleBehavior().onScrollFinished();
+        if(getBubbleBehavior()!=null) getBubbleBehavior().onScrollFinished();
+    }
+
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/fastscroll/RecyclerViewScrollListener.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/fastscroll/RecyclerViewScrollListener.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/fastscroll/RecyclerViewScrollListener.java	(revision 1020)
@@ -0,0 +1,69 @@
+package com.gallery.tclgallery.fastscroll;
+
+import android.support.v7.widget.RecyclerView;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * Created by Michal on 04/08/16.
+ * Responsible for updating the handle / bubble position when user scrolls the {@link RecyclerView}.
+ */
+public class RecyclerViewScrollListener extends RecyclerView.OnScrollListener {
+
+    private final FastScroller scroller;
+    List<ScrollerListener> listeners = new ArrayList<>();
+    int oldScrollState = RecyclerView.SCROLL_STATE_IDLE;
+
+    public RecyclerViewScrollListener(FastScroller scroller) {
+        this.scroller = scroller;
+    }
+
+    public void addScrollerListener(ScrollerListener listener){
+        listeners.add(listener);
+    }
+
+    @Override
+    public void onScrollStateChanged(RecyclerView recyclerView, int newScrollState) {
+        super.onScrollStateChanged(recyclerView, newScrollState);
+        if(newScrollState== RecyclerView.SCROLL_STATE_IDLE && oldScrollState!= RecyclerView.SCROLL_STATE_IDLE){
+            scroller.getViewProvider().onScrollFinished();
+        } else if(newScrollState!= RecyclerView.SCROLL_STATE_IDLE && oldScrollState== RecyclerView.SCROLL_STATE_IDLE){
+            scroller.getViewProvider().onScrollStarted();
+        }
+        oldScrollState = newScrollState;
+    }
+
+    @Override
+    public void onScrolled(RecyclerView rv, int dx, int dy) {
+        if(scroller.shouldUpdateHandlePosition()) {
+            updateHandlePosition(rv);
+        }
+    }
+
+    void updateHandlePosition(RecyclerView rv) {
+        float relativePos;
+        if(scroller.isVertical()) {
+            int offset = rv.computeVerticalScrollOffset();
+            int extent = rv.computeVerticalScrollExtent();
+            int range = rv.computeVerticalScrollRange();
+            relativePos = offset / (float)(range - extent);
+        } else {
+            int offset = rv.computeHorizontalScrollOffset();
+            int extent = rv.computeHorizontalScrollExtent();
+            int range = rv.computeHorizontalScrollRange();
+            relativePos = offset / (float)(range - extent);
+        }
+        scroller.setScrollerPosition(relativePos);
+        notifyListeners(relativePos);
+    }
+
+    public void notifyListeners(float relativePos){
+        for(ScrollerListener listener : listeners) listener.onScroll(relativePos);
+    }
+
+    public interface ScrollerListener {
+        void onScroll(float relativePos);
+    }
+
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/fastscroll/Utils.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/fastscroll/Utils.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/fastscroll/Utils.java	(revision 1020)
@@ -0,0 +1,41 @@
+package com.gallery.tclgallery.fastscroll;
+
+import android.graphics.drawable.Drawable;
+import android.os.Build;
+import android.view.View;
+
+/**
+ * Created by mklimczak on 31/07/15.
+ */
+public class Utils {
+
+    public static float getViewRawY(View view) {
+        int[] location = new int[2];
+        location[0] = 0;
+        location[1] = (int) view.getY();
+        ((View)view.getParent()).getLocationInWindow(location);
+        return location[1];
+    }
+
+    public static float getViewRawX(View view) {
+        int[] location = new int[2];
+        location[0] = (int) view.getX();
+        location[1] = 0;
+        ((View)view.getParent()).getLocationInWindow(location);
+        return location[0];
+    }
+
+    public static float getValueInRange(float min, float max, float value) {
+        float minimum = Math.max(min, value);
+        return Math.min(minimum, max);
+    }
+
+    public static void setBackground(View view, Drawable drawable){
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
+            view.setBackground(drawable);
+        } else {
+            view.setBackgroundDrawable(drawable);
+        }
+    }
+
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/contract/GooglePhotoContract.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/contract/GooglePhotoContract.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/contract/GooglePhotoContract.java	(revision 1020)
@@ -0,0 +1,130 @@
+package com.gallery.tclgallery.contract;
+
+
+import android.net.Uri;
+
+
+import com.gallery.tclgallery.bean.CameraItem;
+import com.gallery.tclgallery.ui.GooglePhotoActivity;
+
+import java.util.ArrayList;
+import java.util.LinkedHashMap;
+import java.util.List;
+
+/**
+ * Created by jiaojie.jia on 2017/3/15.
+ */
+
+public interface GooglePhotoContract {
+
+    interface View {
+
+        /**
+         * 填充相册数据
+         */
+        void fullData(LinkedHashMap<String, List<CameraItem>> sections);
+
+        /**
+         * 填充文件夹数据
+         *
+         * @param folders
+         */
+//        void fullFolders(List<ImageFolder> folders);
+
+    }
+
+    interface Presenter {
+
+        /**
+         * 设置视图类型
+         */
+        void setViewType(GooglePhotoActivity.ViewType viewType);
+
+        /**
+         * 获取视图类型
+         */
+        GooglePhotoActivity.ViewType getViewType();
+
+        /**
+         * 开始加载数据
+         */
+        void loadPhotos();
+
+        /**
+         * 重新load数据
+         */
+        void scanPhotos();
+
+        /**
+         * 选中照片
+         *
+         * @param cameraItem
+         */
+        void selectPhoto(CameraItem cameraItem);
+
+        /**
+         * 全选图片
+         */
+        void selectPhotoAll();
+
+        /**
+         * 图片选择的数量
+         */
+        int SelectPictrueNumber();
+
+        /**
+         * 是否全选状态
+         */
+        boolean isAllSelect();
+
+        /**
+         * 删除的图片打包
+         */
+        ArrayList<String> DeleteFile();
+
+        /**
+         * 分享的图片Uri打包
+         */
+        ArrayList<Uri> ShareFile();
+
+        /**
+         * 是否选择了照片
+         *
+         * @return
+         */
+        boolean isSelectedEmpty();
+
+        /**
+         * 清楚所有选中的照片
+         */
+        void cancleAllSelected();
+
+
+        /**
+         * 设置相册时间线数据
+         *
+         * @param percents
+         * @param timelineTags
+         */
+        void setTimelineData(List<Float> percents, List<String> timelineTags);
+
+        /**
+         * 获取时间线tag位置数据
+         *
+         * @return
+         */
+        List<Float> getPercents();
+
+        /**
+         * 获取时间线tag标题
+         *
+         * @return
+         */
+        List<String> getTimelineTags();
+
+        /**
+         * 清楚数据
+         */
+        void clear();
+    }
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/ui/GooglePhotoActivity.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/ui/GooglePhotoActivity.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/ui/GooglePhotoActivity.java	(revision 1020)
@@ -0,0 +1,498 @@
+package com.gallery.tclgallery.ui;
+
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.content.res.Configuration;
+import android.os.Bundle;
+import android.provider.MediaStore;
+import android.support.v7.app.AlertDialog;
+import android.support.v7.app.AppCompatActivity;
+import android.support.v7.widget.Toolbar;
+import android.view.Menu;
+import android.view.MenuItem;
+import android.view.ViewGroup;
+
+
+import com.gallery.tclgallery.R;
+import com.gallery.tclgallery.anim.SwitchViewAnimHelper;
+import com.gallery.tclgallery.bean.CameraItem;
+import com.gallery.tclgallery.bean.State;
+import com.gallery.tclgallery.contract.GooglePhotoContract;
+import com.gallery.tclgallery.listener.OnSwitchViewListener;
+import com.gallery.tclgallery.presenter.GooglePhotoPresenter;
+import com.gallery.tclgallery.utils.ImageLoader;
+import com.gallery.tclgallery.viewholder.DayView;
+import com.gallery.tclgallery.viewholder.MonthView;
+import com.gallery.tclgallery.viewholder.MyListView;
+import com.gallery.tclgallery.viewholder.YearView;
+
+import java.util.ArrayList;
+import java.util.LinkedHashMap;
+import java.util.List;
+
+/**
+ * 主 Activity
+ */
+public class GooglePhotoActivity extends AppCompatActivity implements GooglePhotoContract.View {
+
+    /**
+     * 视图类型
+     */
+    public enum ViewType {
+        YEAR, MONTH, DAY, /*OTHER,*/COLLAGE, LIST
+    }
+
+    private ViewGroup mContainer;       // 视图容器
+    private MyListView myListView;
+    private YearView mYearView;         // 年视图
+    private MonthView mMonthView;       // 月视图
+    private DayView mDayView;           // 日视图
+    //    private OtherView mOtherView;  // 其他文件夹视图
+    private Toolbar toolbar;
+    //    private PhotoFoldersAdapter mFoldersAdapter;
+//    private BottomSheetBehavior mBottomSheetBehavior;
+    private GooglePhotoContract.Presenter mPresenter;
+    public static GooglePhotoActivity LongCickState = null;
+    /**
+     * 缩放操作回调
+     */
+    private OnSwitchViewListener mSwitchViewListener = new OnSwitchViewListener() {
+        @Override
+        public void onSwitchView(float scaleFactor) {
+            switch (mPresenter.getViewType()) {
+                case YEAR:
+                    switchView(ViewType.MONTH, 0);
+                    break;
+                /*case COLLAGE:
+                    switchView(ViewType.COLLAGE);*/
+                case MONTH:
+                    if (scaleFactor > 1) {
+                        switchView(ViewType.DAY);
+                    } else if (scaleFactor < 1) {
+//                        switchView(ViewType.YEAR);
+                        switchView(ViewType.COLLAGE);
+                    }
+                    break;
+                case DAY:
+                    if (1 < scaleFactor && scaleFactor < 2) {
+                        switchView(ViewType.MONTH);
+                    } else if (0 < scaleFactor && scaleFactor < 1) {
+//                        switchView(ViewType.YEAR);
+                        switchView(ViewType.COLLAGE);
+                    }
+            }
+        }
+
+        @Override
+        public void onSwitchViewBySection(int section) {
+            switchView(ViewType.MONTH, section);
+        }
+    };
+
+    @Override
+    protected void onNewIntent(Intent intent) {
+        setIntent(intent);
+        invalidateOptionsMenu();
+    }
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_google_photo);
+        LongCickState = this;
+
+
+        mPresenter = new GooglePhotoPresenter(this);
+
+        setupToolbar();
+
+        initDateViews();
+
+//        initPhotoFolders();
+
+        switchView(ViewType.YEAR);      // 默认显示月视图
+    }
+
+    /**
+     * 初始化Toolbar
+     */
+    private void setupToolbar() {
+        toolbar = (Toolbar) findViewById(R.id.toolbar);
+        setSupportActionBar(toolbar);
+    }
+
+    /**
+     * 初始化各个视图
+     */
+    private void initDateViews() {
+        mContainer = (ViewGroup) findViewById(R.id.fl_container);
+        mYearView = new YearView(this);
+        mYearView.setSwitchViewListener(mSwitchViewListener);
+        mMonthView = new MonthView(this);
+        mMonthView.setSwitchViewListener(mSwitchViewListener);
+        mMonthView.setPresenter(mPresenter);
+        mDayView = new DayView(this);
+        mDayView.setPresenter(mPresenter);
+        mDayView.setSwitchViewListener(mSwitchViewListener);
+        myListView =new MyListView(this);
+//        myListView.setPresenter(mPresenter);
+//        myListView.setSwitchViewListener(mSwitchViewListener);
+        /*mCollageView= new CollageView(this);
+        mCollageView.setPresenter(mPresenter);
+        mCollageView.setSwitchViewListener(mSwitchViewListener);*/
+//        mOtherView = new OtherView(this);
+//        mOtherView.setPresenter(mPresenter);
+    }
+
+    /**
+     * 初始化文件夹列表
+     */
+    /*private void initPhotoFolders() {
+        View bottomSheet = findViewById(R.id.design_bottom_sheet);
+        RecyclerView rvPhotoFolders = (RecyclerView) bottomSheet.findViewById(R.id.rv_filedir);
+        rvPhotoFolders.setLayoutManager(new LinearLayoutManager(this));
+        mFoldersAdapter = new PhotoFoldersAdapter();
+        rvPhotoFolders.setAdapter(mFoldersAdapter);
+        mBottomSheetBehavior = BottomSheetBehavior.from(bottomSheet);
+        mBottomSheetBehavior.setState(BottomSheetBehavior.STATE_HIDDEN);
+        mFoldersAdapter.setOnItemClickListener(new OnEditItemClickListener() {
+            @Override
+            public void onItemClick(View view, int position) {
+                mBottomSheetBehavior.setState(BottomSheetBehavior.STATE_HIDDEN);
+                ImageFolder folder = mFoldersAdapter.getItem(position);
+                mOtherView.setData(folder);
+                if (folder.isPhoto()) {
+                    switchView(ViewType.MONTH);
+                } else {
+                    mContainer.removeAllViews();
+                    mPresenter.setViewType(ViewType.OTHER);
+                    mContainer.addView(mOtherView.getRootView());
+                }
+            }
+        });
+    }*/
+    @Override
+    public void fullData(LinkedHashMap<String, List<CameraItem>> sections) {
+        switch (mPresenter.getViewType()) {
+            case YEAR:
+                mYearView.setData(sections);
+                break;
+            case MONTH:
+                mMonthView.setData(sections);
+                break;
+            case DAY:
+                mDayView.setData(sections);
+                break;
+            /*case COLLAGE:
+                mCollageView.setData(sections);*/
+        }
+    }
+
+   /* @Override
+    public void fullFolders(List<ImageFolder> folders) {
+        mFoldersAdapter.setData(folders);
+    }*/
+
+    @Override
+    protected void onRestart() {
+        super.onRestart();
+//        mPresenter.loadPhotos();
+        //数据刷新
+        refresh();
+    }
+
+    @Override
+    public void onDestroy() {
+        super.onDestroy();
+//        EventBus.getDefault().unregister(this);
+        mPresenter.clear();
+        ImageLoader.clearMemory();
+    }
+
+    @Override
+    public void onBackPressed() {
+       /* if (mBottomSheetBehavior.getState() != BottomSheetBehavior.STATE_HIDDEN) {
+            mBottomSheetBehavior.setState(BottomSheetBehavior.STATE_HIDDEN);
+            return;
+        }*/
+        if (!mPresenter.isSelectedEmpty()) {
+            mPresenter.cancleAllSelected();
+            mMonthView.clearSelectedStatus();
+            mDayView.clearSelectedStatus();
+//            mOtherView.clearSelectedStatus();
+            return;
+        }
+        if (mPresenter.isSelectedEmpty() && State.SelectState) {
+            State.SelectState = false;
+            invalidateOptionsMenu();
+            mPresenter.loadPhotos();
+            return;
+        }
+        finish();
+    }
+
+    @Override
+    public boolean onCreateOptionsMenu(Menu menu) {
+        getMenuInflater().inflate(R.menu.photo_view_menu, menu);
+        return true;
+    }
+
+    @Override
+    public void invalidateOptionsMenu() {
+        getDelegate().invalidateOptionsMenu();
+    }
+
+    @Override
+    public boolean onPrepareOptionsMenu(Menu menu) {
+        if (mPresenter.getViewType() == ViewType.DAY) {
+            menu.findItem(R.id.day_view).setChecked(false);
+            menu.findItem(R.id.month_view).setChecked(true);
+            menu.findItem(R.id.year_view).setChecked(true);
+        } else if (mPresenter.getViewType() == ViewType.MONTH) {
+            menu.findItem(R.id.day_view).setChecked(true);
+            menu.findItem(R.id.year_view).setChecked(true);
+            menu.findItem(R.id.month_view).setChecked(false);
+        } else if (mPresenter.getViewType() == ViewType.YEAR) {
+            menu.findItem(R.id.day_view).setChecked(true);
+            menu.findItem(R.id.month_view).setChecked(true);
+            menu.findItem(R.id.year_view).setChecked(false);
+        }
+        if (mPresenter.isAllSelect()) {
+            menu.findItem(R.id.selectall).setTitle(R.string.unselectall);
+        } else {
+            menu.findItem(R.id.selectall).setTitle(R.string.selectall);
+        }
+        if (State.SelectState) {
+            menu.findItem(R.id.share).setVisible(true);
+            menu.findItem(R.id.delete).setVisible(true);
+            menu.findItem(R.id.camera).setVisible(false);
+            menu.findItem(R.id.selectall).setVisible(true);
+        } else {
+            menu.findItem(R.id.share).setVisible(false);
+            menu.findItem(R.id.delete).setVisible(false);
+            menu.findItem(R.id.camera).setVisible(true);
+            menu.findItem(R.id.selectall).setVisible(false);
+        }
+        return super.onPrepareOptionsMenu(menu);
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        switch (item.getItemId()) {
+            case R.id.year_view:
+//                switchView(ViewType.YEAR);
+                switchView(ViewType.LIST);
+                break;
+            case R.id.month_view:
+                switchView(ViewType.MONTH);
+                break;
+            case R.id.day_view:
+                switchView(ViewType.DAY);
+                break;
+            /*case R.id.other_view:
+                if (mBottomSheetBehavior.getState() == BottomSheetBehavior.STATE_HIDDEN) {
+                    mBottomSheetBehavior.setState(BottomSheetBehavior.STATE_COLLAPSED);
+                } else {
+                    mBottomSheetBehavior.setState(BottomSheetBehavior.STATE_HIDDEN);
+                }
+                break;*/
+            case R.id.delete:
+                delete();
+                break;
+            case R.id.share:
+                share();
+                break;
+            case R.id.camera:
+                TakePicture();
+                break;
+            case R.id.selectall:
+                if (!mPresenter.isAllSelect()) {
+                    mPresenter.selectPhotoAll();
+                    //item.setTitle(R.string.unselectall);
+                } else {
+                    mPresenter.cancleAllSelected();
+                    //item.setTitle(R.string.selectall);
+                }
+                mPresenter.loadPhotos();
+                break;
+        }
+        return true;
+    }
+
+    private void TakePicture() {
+        Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
+        startActivity(intent);
+    }
+
+    private void share() {
+        if (mPresenter.SelectPictrueNumber() == 1 && mPresenter.SelectPictrueNumber() != 0) {
+            Intent shareIntent = new Intent();
+            shareIntent.setAction(Intent.ACTION_SEND);
+            shareIntent.putExtra(Intent.EXTRA_STREAM, mPresenter.ShareFile().get(0));
+            shareIntent.setType("image/*");
+            startActivity(Intent.createChooser(shareIntent, "share image to ..."));
+        } else {
+            Intent shareIntent = new Intent();
+            shareIntent.setAction(Intent.ACTION_SEND_MULTIPLE);
+            shareIntent.putParcelableArrayListExtra(Intent.EXTRA_STREAM, mPresenter.ShareFile());
+            shareIntent.setType("image/*");
+            startActivity(Intent.createChooser(shareIntent, "Share images to.."));
+        }
+    }
+
+    /*删除dialog方法*/
+    private void delete() {
+        AlertDialog.Builder deleteDialog = new AlertDialog.Builder(this);
+        deleteDialog.setMessage(getDeleteString(mPresenter.SelectPictrueNumber()))
+                .setNegativeButton(R.string.btn_cancel, new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialog, int which) {
+                        //do nothing
+                    }
+                }).setPositiveButton(R.string.btn_ok, new DialogInterface.OnClickListener() {
+            @Override
+            public void onClick(DialogInterface dialog, int which) {
+                deletePicture();
+                //数据刷新
+                refresh();
+            }
+        }).show();
+
+    }
+
+    //数据刷新
+    public void refresh() {
+        mContainer.removeAllViews();
+        mPresenter.scanPhotos();
+        mPresenter.setViewType(mPresenter.getViewType());
+        if (mPresenter.getViewType() == ViewType.DAY) {
+            mContainer.addView(mDayView.getRootView());
+        } else if (mPresenter.getViewType() == ViewType.MONTH) {
+            mContainer.addView(mMonthView.getRootView());
+        }
+    }
+
+    /*删除图片*/
+    private void deletePicture() {
+        ArrayList<String> filelist = mPresenter.DeleteFile();
+        String[] filepath = new String[filelist.size()];
+        for (int i = 0; i < filelist.size(); i++) {
+            filepath[i] = filelist.get(i);
+            if (isPic(filepath[i])) {
+                GooglePhotoActivity.this.getContentResolver()
+                        .delete(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,
+                                MediaStore.Images.Media.DATA
+                                        + " LIKE ?",
+                                new String[]{filepath[i]});
+            }
+        }
+    }
+
+    /*判断是否为图片*/
+    private boolean isPic(String path) {
+        if (path.endsWith(".png") || path.endsWith(".jpg") || path.endsWith(".jpeg")
+                || path.endsWith(".bmp") || path.endsWith(".gif")) {
+            return true;
+        }
+        return false;
+    }
+
+
+    private int getDeleteString(int num) {
+        switch (num) {
+            case 0:
+                break;
+            case 1:
+                return R.string.delete_photo;
+            default:
+                return R.string.delete_photos;
+        }
+        return R.string.app_name;
+    }
+
+    /**
+     * 切换视图
+     *
+     * @param viewType 视图类型
+     */
+    public void switchView(ViewType viewType) {
+        switchView(viewType, 0);
+    }
+
+    public void switchView(ViewType viewType, int section) {
+        if ((mContainer.getChildCount() != 0 && mPresenter.getViewType() == viewType)
+                || SwitchViewAnimHelper.getInstance().isAnimRunning()) {
+            return;
+        }
+        switch (viewType) {
+            case YEAR:
+                toolbar.setTitle(R.string.year_view);
+                break;
+            case MONTH:
+                toolbar.setTitle(R.string.month_view);
+                break;
+            case DAY:
+                toolbar.setTitle(R.string.day_view);
+                break;
+            /*case COLLAGE:
+                toolbar.setTitle("Collage View");*/
+        }
+        boolean load = true;
+        mContainer.removeAllViews();
+        switch (viewType) {
+            case YEAR:
+                mContainer.addView(mYearView.getRootView());
+                SwitchViewAnimHelper.getInstance().toSmallView(mYearView.getRootView());
+
+                // load = mYearView.isEmpty();
+                break;
+            case MONTH:
+                mContainer.addView(mMonthView.getRootView());
+                mMonthView.scrollToSection(section);
+                if (mPresenter.getViewType() == ViewType.DAY) {
+                    SwitchViewAnimHelper.getInstance().toSmallView(mMonthView.getRootView());
+                } else if (mPresenter.getViewType() == ViewType.YEAR) {
+                    SwitchViewAnimHelper.getInstance().toLargeView(mMonthView.getRootView());
+                }
+
+                // load = mMonthView.isEmpty();
+                break;
+            case DAY:
+                mContainer.addView(mDayView.getRootView());
+                SwitchViewAnimHelper.getInstance().toLargeView(mDayView.getRootView());
+                // load = mDayView.isEmpty();
+
+                break;
+            /*case COLLAGE:
+                mContainer.addView(mCollageView.getRootView());
+                SwitchViewAnimHelper.getInstance().toLargeView(mCollageView.getRootView());*/
+
+                // load = mYearView.isEmpty();
+//                break;
+            case  LIST:
+                mContainer.addView(myListView.getRootView());
+                break;
+        }
+        mPresenter.setViewType(viewType);
+        if (load) {
+            mPresenter.loadPhotos();
+        }
+    }
+
+    @Override
+    public void onConfigurationChanged(Configuration newConfig) {
+        if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
+//横屏
+            DayView.CLUMN_COUNT = 6;
+            MonthView.CLUMN_COUNT = 10;
+            State.orientation=2;
+        } else if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {
+//竖屏
+            State.orientation=1;
+            DayView.CLUMN_COUNT = 4;
+            MonthView.CLUMN_COUNT = 6;
+        }
+        super.onConfigurationChanged(newConfig);
+    }
+
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/ui/GalleryHomeActivity.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/ui/GalleryHomeActivity.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/ui/GalleryHomeActivity.java	(revision 1020)
@@ -0,0 +1,276 @@
+package com.gallery.tclgallery.ui;
+
+import android.content.Context;
+import android.content.Intent;
+import android.os.Bundle;
+import android.support.v7.app.AppCompatActivity;
+import android.support.v7.widget.Toolbar;
+import android.util.Log;
+import android.view.Menu;
+import android.view.MenuItem;
+import android.view.View;
+import android.widget.AdapterView;
+import android.widget.GridView;
+
+import com.gallery.tclgallery.R;
+import com.gallery.tclgallery.bean.AlbumTag;
+import com.gallery.tclgallery.bean.LocalMediaBean;
+import com.gallery.tclgallery.controller.AlbumController;
+import com.gallery.tclgallery.ui.adapter.AlbumFolderAdapter;
+
+import java.util.ArrayList;
+
+
+/**
+ * Created by liddo on 2017/9/16.
+ */
+
+public class GalleryHomeActivity extends AppCompatActivity {
+
+    private final static String TAG = "GalleryHomeActivity";
+    private Toolbar toolbar;
+    private GridView albumGridv;
+    private ArrayList<AlbumTag> albumFolders;
+    private ArrayList<AlbumTag> invisibleAlbums;
+    private ArrayList<AlbumTag> visibleAlbums;
+    private ArrayList<AlbumTag> showAlbums;
+    private AlbumFolderAdapter albumFolderAdapter;
+    private boolean folderNoChecked = true;
+    private int folderCheckedCount = 0;
+
+    private AlbumController albumController;
+    private Context mContext;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_home);
+        toolbar = (Toolbar) findViewById(R.id.gallery_toolbar);
+        mContext = getApplicationContext();
+        albumController = new AlbumController(mContext);
+        // 初始化Toolbar
+        initToolBar();
+        setSupportActionBar(toolbar);
+        // 初始化AlbumGridView
+        initAlbumGridv();
+        // 初始化相册数据
+        loadAlbumFolderDate();
+    }
+
+    private void initToolBar(){
+        toolbar.setTitle("Album");
+        toolbar.setNavigationIcon(null);
+    }
+
+    private void initAlbumGridv() {
+        albumGridv = (GridView)findViewById(R.id.album_gridview);
+        albumFolderAdapter = new AlbumFolderAdapter(this);
+        albumGridv.setAdapter(albumFolderAdapter);
+        albumGridv.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {
+            @Override
+            public boolean onItemLongClick(AdapterView<?> adapterView, View view, int i, long l) {
+                if (!albumFolderAdapter.isAlbumSelected() && i != albumFolderAdapter.getCount()-1) {
+                    if (showAlbums.size() != 0) {
+                        showAlbums.get(i).setChecked(true);
+                        albumFolderAdapter.setAlbumSelected(true);
+                        folderCheckedCount = 1;
+                        toolbar.setTitle(folderCheckedCount + "");
+                        toolbar.setNavigationIcon(R.drawable.ic_close_24px);
+                        toolbar.setNavigationOnClickListener(new View.OnClickListener() {
+                            @Override
+                            public void onClick(View v) {
+                                albumFolderAdapter.setAlbumSelected(false);
+                                for (AlbumTag album:showAlbums) {
+                                    album.setChecked(false);
+                                }
+                                albumFolderAdapter.notifyDataSetChanged();
+                                toolbar.setTitle("Album");
+                                toolbar.setNavigationIcon(null);
+                                invalidateOptionsMenu();
+                            }
+                        });
+                        invalidateOptionsMenu();
+                        albumFolderAdapter.notifyDataSetChanged();
+                    }
+                }
+                return true;
+            }
+        });
+        albumGridv.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+            @Override
+            public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
+                if (albumFolderAdapter.isAlbumSelected()){
+                    if (i != albumFolderAdapter.getCount()-1) {
+                        boolean isSelected = showAlbums.get(i).isChecked();
+                        showAlbums.get(i).setChecked(!isSelected);
+                        albumFolderAdapter.notifyDataSetChanged();
+                        checkAlbumFoldersNoChecked();
+                        if (folderNoChecked) {
+                            toolbar.setTitle("");
+                            invalidateOptionsMenu();
+                        } else {
+                            toolbar.setTitle(folderCheckedCount + "");
+                            invalidateOptionsMenu();
+                        }
+                    }
+                } else {
+                    if (i != albumFolderAdapter.getCount()-1) {
+                        // 点击显式相册
+                        Intent intent = new Intent(GalleryHomeActivity.this, AlbumPhotoActivity.class);
+                        intent.putExtra("albumTag", showAlbums.get(i));
+                        startActivity(intent);
+                    } else {
+                        // 点击Others相册
+                        Intent intent = new Intent(GalleryHomeActivity.this, AlbumOtherActivity.class);
+                        intent.putExtra("invisible_album",invisibleAlbums);
+                        startActivity(intent);
+                    }
+                }
+            }
+        });
+    }
+
+    private void checkAlbumFoldersNoChecked () {
+        folderCheckedCount = 0;
+        for (AlbumTag album : showAlbums){
+            if (album.isChecked()) {
+                folderCheckedCount++;
+            }
+        }
+        folderNoChecked = folderCheckedCount > 0? false:true;
+    }
+
+    private void loadAlbumFolderDate() {
+        albumFolders = new ArrayList<>();
+        visibleAlbums = new ArrayList<>();
+        invisibleAlbums = new ArrayList<>();
+        showAlbums = new ArrayList<>();
+        // 所有相册
+        albumFolders.addAll(albumController.getAlbum());
+        for(AlbumTag album:albumFolders) {
+            ArrayList<LocalMediaBean> localMediaBeen = albumController.getLocalMediaByAlbum(album);
+            album.setMediaBeans(localMediaBeen);
+            if (album.getVisible()==1) {
+                // 可见相册
+                visibleAlbums.add(album);
+            } else {
+                // 不可见相册 other
+                invisibleAlbums.add(album);
+            }
+        }
+        showAlbums.addAll(showAlbumList(visibleAlbums,invisibleAlbums));
+        albumFolderAdapter.setArrayList(showAlbums);
+        albumFolderAdapter.notifyDataSetChanged();
+    }
+
+    private ArrayList<AlbumTag> showAlbumList(ArrayList<AlbumTag> visibleAlbums,ArrayList<AlbumTag> invisibleAlbums){
+        ArrayList<AlbumTag> showAlbums = new ArrayList<>();
+        for (AlbumTag folder: visibleAlbums) {
+            if (folder.isChecked()) {
+                Log.i("dongdong",folder.getName() + "is selected");
+                albumFolderAdapter.setAlbumSelected(true);
+            }
+        }
+        showAlbums.addAll(visibleAlbums);
+        AlbumTag othersAlbum = new AlbumTag();
+        othersAlbum.setName(mContext.getString(R.string.default_album_others));
+        othersAlbum.setDisplay_name(mContext.getString(R.string.default_album_others));
+        othersAlbum.setItem_count(invisibleAlbums.size());
+        showAlbums.add(othersAlbum);
+        return showAlbums;
+    }
+
+    @Override
+    public boolean onPrepareOptionsMenu(Menu menu) {
+        if(albumFolderAdapter.isAlbumSelected()){
+            if(folderNoChecked) {
+                menu.findItem(R.id.menu_add_album).setVisible(false);
+                menu.findItem(R.id.menu_select_album).setVisible(false);
+                menu.findItem(R.id.menu_setting_album).setVisible(false);
+                menu.findItem(R.id.menu_setting_album).setVisible(false);
+                menu.findItem(R.id.menu_sort_album).setVisible(false);
+                menu.findItem(R.id.menu_delete_album).setVisible(false);
+                menu.findItem(R.id.menu_archive_album).setVisible(false);
+            } else {
+                menu.findItem(R.id.menu_add_album).setVisible(false);
+                menu.findItem(R.id.menu_select_album).setVisible(false);
+                menu.findItem(R.id.menu_setting_album).setVisible(false);
+                menu.findItem(R.id.menu_setting_album).setVisible(false);
+                menu.findItem(R.id.menu_sort_album).setVisible(false);
+                menu.findItem(R.id.menu_delete_album).setVisible(true);
+                menu.findItem(R.id.menu_archive_album).setVisible(true);
+            }
+        } else {
+            menu.findItem(R.id.menu_add_album).setVisible(true);
+            menu.findItem(R.id.menu_select_album).setVisible(true);
+            menu.findItem(R.id.menu_setting_album).setVisible(true);
+            menu.findItem(R.id.menu_setting_album).setVisible(true);
+            menu.findItem(R.id.menu_sort_album).setVisible(true);
+            menu.findItem(R.id.menu_delete_album).setVisible(false);
+            menu.findItem(R.id.menu_archive_album).setVisible(false);
+        }
+        return super.onPrepareOptionsMenu(menu);
+    }
+
+    @Override
+    public boolean onCreateOptionsMenu(Menu menu) {
+		menu.clear();
+        getMenuInflater().inflate(R.menu.toolbar_menu,menu);
+        return super.onCreateOptionsMenu(menu);
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        switch (item.getItemId()){
+            case R.id.menu_add_album:
+                Log.i(TAG,"menu add album");
+                return true;
+            case R.id.menu_select_album:
+                Log.i(TAG,"menu select album");
+                albumFolderAdapter.setAlbumSelected(true);
+                toolbar.setTitle("");
+                toolbar.setNavigationIcon(R.drawable.ic_close_24px);
+                toolbar.setNavigationOnClickListener(new View.OnClickListener() {
+                    @Override
+                    public void onClick(View v) {
+                        albumFolderAdapter.setAlbumSelected(false);
+                        for (AlbumTag album:showAlbums) {
+                            album.setChecked(false);
+                        }
+                        albumFolderAdapter.notifyDataSetChanged();
+                        toolbar.setTitle("Album");
+                        toolbar.setNavigationIcon(null);
+                        invalidateOptionsMenu();
+                    }
+                });
+                invalidateOptionsMenu();
+                albumFolderAdapter.notifyDataSetChanged();
+                return true;
+            case R.id.menu_sort_album:
+                Log.i(TAG,"menu sort album");
+                return true;
+            case R.id.menu_setting_album:
+                Log.i(TAG,"menu album settings");
+                return true;
+            default:
+                return super.onOptionsItemSelected(item);
+        }
+    }
+
+    @Override
+    public void onBackPressed() {
+        if (albumFolderAdapter.isAlbumSelected()) {
+            albumFolderAdapter.setAlbumSelected(false);
+            for (AlbumTag album:showAlbums) {
+                album.setChecked(false);
+            }
+            albumFolderAdapter.notifyDataSetChanged();
+            toolbar.setTitle("Album");
+            toolbar.setNavigationIcon(null);
+            invalidateOptionsMenu();
+            toolbar.setVisibility(View.VISIBLE);
+        } else {
+            super.onBackPressed();
+        }
+    }
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/ui/AlbumPhotoActivity.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/ui/AlbumPhotoActivity.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/ui/AlbumPhotoActivity.java	(revision 1020)
@@ -0,0 +1,303 @@
+package com.gallery.tclgallery.ui;
+
+import android.content.Context;
+import android.content.Intent;
+import android.os.Bundle;
+import android.support.annotation.Nullable;
+import android.support.v7.app.AppCompatActivity;
+import android.support.v7.widget.Toolbar;
+import android.util.Log;
+import android.view.Menu;
+import android.view.MenuItem;
+import android.view.View;
+import android.widget.AdapterView;
+import android.widget.GridView;
+
+import com.gallery.tclgallery.R;
+import com.gallery.tclgallery.bean.AlbumTag;
+import com.gallery.tclgallery.bean.LocalMediaBean;
+import com.gallery.tclgallery.ui.adapter.AlbumPhotoAdapter;
+
+import java.util.ArrayList;
+
+/**
+ * Created by liddo on 2017/10/18.
+ */
+
+public class AlbumPhotoActivity extends AppCompatActivity {
+    public static final String TAG = "AlbumPhotoActivity";
+
+    private Toolbar albumPhotoToolBar;
+    private AlbumTag album;
+    private ArrayList<LocalMediaBean> localMedia;
+    private GridView gridView;
+    private AlbumPhotoAdapter photoAdapter;
+    private Context mContext;
+    private int photoCheckedCount;
+    private boolean photoNoChecked = true;
+    private boolean photoCheckedAll = false;
+
+    @Override
+    protected void onCreate(@Nullable Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_album_photo);
+
+        mContext = getApplicationContext();
+        Intent intent = getIntent();
+        album = intent.getParcelableExtra("albumTag");
+        localMedia = new ArrayList<>();
+        if (album.getItem_count()>0){
+            localMedia.addAll(album.getMediaBeans());
+        }
+        albumPhotoToolBar = (Toolbar)findViewById(R.id.album_photo_toolbar);
+        gridView = (GridView)findViewById(R.id.album_photo_gridView);
+        initToolBar();
+        initGridView();
+    }
+
+    private void initToolBar(){
+        albumPhotoToolBar.setTitle(album.getName());
+        albumPhotoToolBar.setNavigationIcon(getDrawable(R.drawable.ic_arrow_back_black_24dp));
+        albumPhotoToolBar.setNavigationOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                AlbumPhotoActivity.this.finish();
+            }
+        });
+        setSupportActionBar(albumPhotoToolBar);
+    }
+
+    private void initGridView() {
+        photoAdapter = new AlbumPhotoAdapter(mContext);
+        photoAdapter.setLocalMediaBeen(localMedia);
+        gridView.setAdapter(photoAdapter);
+
+        gridView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {
+            @Override
+            public boolean onItemLongClick(AdapterView<?> adapterView, View view, int i, long l) {
+                if (!photoAdapter.isAlbumSelected()) {
+                    if (localMedia.size() != 0) {
+                        localMedia.get(i).setChecked(true);
+                        photoAdapter.setAlbumSelected(true);
+                        photoCheckedCount = 1;
+                        albumPhotoToolBar.setTitle(photoCheckedCount + "");
+                        albumPhotoToolBar.setNavigationIcon(R.drawable.ic_close_24px);
+                        albumPhotoToolBar.setNavigationOnClickListener(new View.OnClickListener() {
+                            @Override
+                            public void onClick(View v) {
+                                photoAdapter.setAlbumSelected(false);
+                                for (LocalMediaBean mediaBean : localMedia) {
+                                    mediaBean.setChecked(false);
+                                }
+                                photoAdapter.notifyDataSetChanged();
+                                albumPhotoToolBar.setTitle(album.getName());
+                                albumPhotoToolBar.setNavigationIcon(R.drawable.ic_arrow_back_black_24dp);
+                                albumPhotoToolBar.setNavigationOnClickListener(new View.OnClickListener() {
+                                    @Override
+                                    public void onClick(View view) {
+                                        AlbumPhotoActivity.this.finish();
+                                    }
+                                });
+                                invalidateOptionsMenu();
+                            }
+                        });
+                        invalidateOptionsMenu();
+                        photoAdapter.notifyDataSetChanged();
+                    }
+                }
+                return false;
+            }
+        });
+        gridView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+            @Override
+            public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
+                if (photoAdapter.isAlbumSelected()) {
+                    //界面是选择状态
+                    boolean isSelected = localMedia.get(i).isChecked();
+                    localMedia.get(i).setChecked(!isSelected);
+                    photoAdapter.notifyDataSetChanged();
+                    checkPhotosNoChecked();
+                    if (photoNoChecked) {
+                        albumPhotoToolBar.setTitle(getString(R.string.album_photo_no_selected_toolbar_title));
+                    } else {
+                        albumPhotoToolBar.setTitle(photoCheckedCount + "");
+                    }
+                    if (photoCheckedCount == photoAdapter.getCount()) {
+                        photoCheckedAll = true;
+                    } else {
+                        photoCheckedAll = false;
+                    }
+                    invalidateOptionsMenu();
+                } else {
+                    // 进入画廊
+                }
+            }
+        });
+    }
+
+    @Override
+    public boolean onCreateOptionsMenu(Menu menu) {
+        menu.clear();
+        getMenuInflater().inflate(R.menu.album_photo_menu,menu);
+        return super.onCreateOptionsMenu(menu);
+    }
+
+    @Override
+    public boolean onPrepareOptionsMenu(Menu menu) {
+        if(photoAdapter.isAlbumSelected()){
+            if(photoNoChecked) {
+                // 没有选中
+                menu.findItem(R.id.album_menu_photo_share).setVisible(false);
+                menu.findItem(R.id.album_menu_photo_delete).setVisible(false);
+                menu.findItem(R.id.album_menu_select_items).setVisible(false);
+                menu.findItem(R.id.album_menu_slide_show).setVisible(false);
+                menu.findItem(R.id.album_menu_rename_album).setVisible(false);
+                menu.findItem(R.id.album_menu_delete_album).setVisible(false);
+                menu.findItem(R.id.album_menu_select_all).setVisible(true);
+                menu.findItem(R.id.album_menu_unselect_all).setVisible(false);
+                menu.findItem(R.id.album_menu_copy_to_album).setVisible(false);
+                menu.findItem(R.id.album_menu_move_to_album).setVisible(false);
+                menu.findItem(R.id.album_menu_set_as_private).setVisible(false);
+            } else {
+                if (photoCheckedAll) {
+                    // 全选中
+                    menu.findItem(R.id.album_menu_photo_share).setVisible(true);
+                    menu.findItem(R.id.album_menu_photo_delete).setVisible(true);
+                    menu.findItem(R.id.album_menu_select_items).setVisible(false);
+                    menu.findItem(R.id.album_menu_slide_show).setVisible(false);
+                    menu.findItem(R.id.album_menu_rename_album).setVisible(false);
+                    menu.findItem(R.id.album_menu_delete_album).setVisible(false);
+                    menu.findItem(R.id.album_menu_select_all).setVisible(false);
+                    menu.findItem(R.id.album_menu_unselect_all).setVisible(true);
+                    menu.findItem(R.id.album_menu_copy_to_album).setVisible(true);
+                    menu.findItem(R.id.album_menu_move_to_album).setVisible(true);
+                    menu.findItem(R.id.album_menu_set_as_private).setVisible(true);
+                } else {
+                    // 有选中，非全选中
+                    menu.findItem(R.id.album_menu_photo_share).setVisible(true);
+                    menu.findItem(R.id.album_menu_photo_delete).setVisible(true);
+                    menu.findItem(R.id.album_menu_select_items).setVisible(false);
+                    menu.findItem(R.id.album_menu_slide_show).setVisible(false);
+                    menu.findItem(R.id.album_menu_rename_album).setVisible(false);
+                    menu.findItem(R.id.album_menu_delete_album).setVisible(false);
+                    menu.findItem(R.id.album_menu_select_all).setVisible(true);
+                    menu.findItem(R.id.album_menu_unselect_all).setVisible(false);
+                    menu.findItem(R.id.album_menu_copy_to_album).setVisible(true);
+                    menu.findItem(R.id.album_menu_move_to_album).setVisible(true);
+                    menu.findItem(R.id.album_menu_set_as_private).setVisible(true);
+                }
+            }
+        } else {
+            // 非选择界面
+            menu.findItem(R.id.album_menu_photo_share).setVisible(false);
+            menu.findItem(R.id.album_menu_photo_delete).setVisible(false);
+            menu.findItem(R.id.album_menu_select_items).setVisible(true);
+            menu.findItem(R.id.album_menu_slide_show).setVisible(true);
+            menu.findItem(R.id.album_menu_rename_album).setVisible(true);
+            menu.findItem(R.id.album_menu_delete_album).setVisible(true);
+            menu.findItem(R.id.album_menu_select_all).setVisible(false);
+            menu.findItem(R.id.album_menu_unselect_all).setVisible(false);
+            menu.findItem(R.id.album_menu_copy_to_album).setVisible(false);
+            menu.findItem(R.id.album_menu_move_to_album).setVisible(false);
+            menu.findItem(R.id.album_menu_set_as_private).setVisible(false);
+        }
+        return super.onPrepareOptionsMenu(menu);
+    }
+
+    private void checkPhotosNoChecked () {
+        photoCheckedCount = 0;
+        for (LocalMediaBean mediaBean : localMedia){
+            if (mediaBean.isChecked()) {
+                photoCheckedCount++;
+            }
+        }
+        photoNoChecked = photoCheckedCount > 0? false:true;
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        switch (item.getItemId()){
+            case R.id.album_menu_select_items:
+                // 进入选择界面
+                photoAdapter.setAlbumSelected(true);
+                photoCheckedAll = false;
+                photoCheckedCount = 0;
+                photoNoChecked = true;
+                albumPhotoToolBar.setTitle(getString(R.string.album_toolbar_select_item));
+                photoAdapter.notifyDataSetChanged();
+                albumPhotoToolBar.setNavigationIcon(R.drawable.ic_close_24px);
+                albumPhotoToolBar.setNavigationOnClickListener(new View.OnClickListener() {
+                    @Override
+                    public void onClick(View v) {
+                        photoAdapter.setAlbumSelected(false);
+                        for (LocalMediaBean mediaBean : localMedia) {
+                            mediaBean.setChecked(false);
+                        }
+                        photoAdapter.notifyDataSetChanged();
+                        albumPhotoToolBar.setTitle(album.getName());
+                        albumPhotoToolBar.setNavigationIcon(R.drawable.ic_arrow_back_black_24dp);
+                        albumPhotoToolBar.setNavigationOnClickListener(new View.OnClickListener() {
+                            @Override
+                            public void onClick(View view) {
+                                AlbumPhotoActivity.this.finish();
+                            }
+                        });
+                        invalidateOptionsMenu();
+                    }
+                });
+                invalidateOptionsMenu();
+                return true;
+            case R.id.album_menu_slide_show:
+                // 幻灯片播放相册
+                return true;
+            case R.id.album_menu_rename_album:
+                // 重命名相册
+                return true;
+            case R.id.album_menu_delete_album:
+                // 删除相册
+                return true;
+            case R.id.album_menu_select_all:
+                // 全选
+                photoCheckedCount = photoAdapter.getCount();
+                for (LocalMediaBean mediaBean:localMedia){
+                    mediaBean.setChecked(true);
+                }
+                photoAdapter.notifyDataSetChanged();
+                albumPhotoToolBar.setTitle(photoCheckedCount + "");
+                photoNoChecked = false;
+                photoCheckedAll = true;
+                invalidateOptionsMenu();
+                return true;
+            case R.id.album_menu_unselect_all:
+                // 全不选
+                photoCheckedCount = photoAdapter.getCount();
+                for (LocalMediaBean mediaBean:localMedia){
+                    mediaBean.setChecked(false);
+                }
+                photoAdapter.notifyDataSetChanged();
+                albumPhotoToolBar.setTitle(getString(R.string.album_toolbar_select_item));
+                photoNoChecked = true;
+                photoCheckedAll = false;
+                invalidateOptionsMenu();
+                return true;
+            case R.id.album_menu_copy_to_album:
+                // 复制到相册
+                return true;
+            case R.id.album_menu_move_to_album:
+                // 移动到相册
+                return true;
+            case R.id.album_menu_set_as_private:
+                // 设置为私有
+                return true;
+            case R.id.album_menu_photo_share:
+                // 图片分享
+                return true;
+            case R.id.album_menu_photo_delete:
+                // 图片删除
+                return true;
+            default:
+                return super.onOptionsItemSelected(item);
+        }
+    }
+
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/ui/GalleryBaseActivity.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/ui/GalleryBaseActivity.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/ui/GalleryBaseActivity.java	(revision 1020)
@@ -0,0 +1,245 @@
+package com.gallery.tclgallery.ui;
+
+import android.Manifest;
+import android.app.LocalActivityManager;
+import android.content.Context;
+import android.content.Intent;
+import android.content.pm.PackageManager;
+import android.os.Bundle;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.support.v4.app.ActivityCompat;
+import android.support.v4.content.ContextCompat;
+import android.support.v4.view.ViewPager;
+import android.support.v7.app.AppCompatActivity;
+import android.view.View;
+import android.widget.Toast;
+
+import com.gallery.tclgallery.R;
+import com.gallery.tclgallery.bottomnavbar.BottomNavigationBar;
+import com.gallery.tclgallery.bottomnavbar.BottomNavigationItem;
+import com.gallery.tclgallery.ui.adapter.GalleryBaseViewAdapter;
+import com.gallery.tclgallery.utils.PermissionUtils;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * Created by liddo on 2017/9/27.
+ */
+
+public class GalleryBaseActivity extends AppCompatActivity implements BottomNavigationBar.OnTabSelectedListener{
+    private static final int MY_PERMISSIONS_REQUEST_READ_EXTERNAL_STORAGE = 1;
+    private static final int MY_PERMISSIONS_REQUEST_WRITE_EXTERNAL_STORAGE = 2;
+    private BottomNavigationBar bottomNavigationBar;
+    private ViewPager viewPager;
+
+    private Context mContext;
+    private LocalActivityManager localActivityManager;
+    private GalleryBaseViewAdapter galleryBaseViewAdapter;
+    private ViewPager.OnPageChangeListener onPageChangeListener;
+
+    @Override
+    protected void onCreate(@Nullable Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.gallery_base_activity);
+
+        localActivityManager = new LocalActivityManager(this, true);
+        localActivityManager.dispatchCreate(savedInstanceState);
+        mContext = getApplicationContext();
+        initBottomNavBar();
+    }
+
+    @Override
+    protected void onResume() {
+        if (checkAndRequestForGallery() == 0) {
+            initViewPager();
+        } else {
+            // no read permission
+            if (!PermissionUtils.hasStorageReadPermission(mContext)) {
+                ActivityCompat.requestPermissions(GalleryBaseActivity.this,
+                        new String[]{Manifest.permission.READ_EXTERNAL_STORAGE},
+                        MY_PERMISSIONS_REQUEST_READ_EXTERNAL_STORAGE);
+            }
+
+            // no write permission
+            if (!PermissionUtils.hasStorageWritePermission(mContext)) {
+                ActivityCompat.requestPermissions(GalleryBaseActivity.this,
+                        new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE},
+                        MY_PERMISSIONS_REQUEST_WRITE_EXTERNAL_STORAGE);
+            }
+        }
+        super.onResume();
+    }
+
+    /**
+     * 初始化BottomNavBar
+     */
+    private void initBottomNavBar() {
+        bottomNavigationBar = (BottomNavigationBar) findViewById(R.id.gallery_bottom_nav_bar);
+        BottomNavigationItem navigationItem1 = new BottomNavigationItem(R.drawable.ic_moments_24px_blue, getString(R.string.tab_moments))
+                .setInactiveIconResource(R.drawable.ic_moments_24px_gray).setActiveColorResource(R.color.nav_bar_active_color);
+        BottomNavigationItem navigationItem2 = new BottomNavigationItem(R.drawable.ic_album_24px_blue, getString(R.string.tab_albums))
+                .setInactiveIconResource(R.drawable.ic_album_24px_gray).setActiveColorResource(R.color.nav_bar_active_color);
+        BottomNavigationItem navigationItem3 = new BottomNavigationItem(R.drawable.ic_create_24px_blue, getString(R.string.tab_create))
+                .setInactiveIconResource(R.drawable.ic_create_24px_gray).setActiveColorResource(R.color.nav_bar_active_color);
+        bottomNavigationBar.addItem(navigationItem1)
+                .addItem(navigationItem2)
+                .addItem(navigationItem3)
+                .initialise();
+        bottomNavigationBar.setMode(BottomNavigationBar.MODE_FIXED);
+        bottomNavigationBar.setBackgroundStyle(BottomNavigationBar.BACKGROUND_STYLE_STATIC);
+        bottomNavigationBar.setTabSelectedListener(this);
+    }
+
+    @Override
+    public void onTabSelected(int position) {
+        switch (position) {
+            case 0:
+                viewPager.setCurrentItem(0);
+                break;
+            case 1:
+                viewPager.setCurrentItem(1);
+                break;
+            case 2:
+                viewPager.setCurrentItem(2);
+                break;
+            default:
+                break;
+        }
+    }
+
+    @Override
+    public void onTabUnselected(int position) {
+
+    }
+
+    @Override
+    public void onTabReselected(int position) {
+
+    }
+
+    private void initViewPager(){
+        viewPager = (ViewPager)findViewById(R.id.gallery_base_viewpager);
+        onPageChangeListener = new ViewPager.OnPageChangeListener() {
+            @Override
+            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {
+
+            }
+
+            @Override
+            public void onPageSelected(int position) {
+                switch (position) {
+                    case 0:
+                        bottomNavigationBar.selectTab(0);
+                        break;
+                    case 1:
+                        bottomNavigationBar.selectTab(1);
+                        break;
+                    case 2:
+                        bottomNavigationBar.selectTab(2);
+                        break;
+                    default:
+                        break;
+                }
+            }
+
+            @Override
+            public void onPageScrollStateChanged(int state) {
+
+            }
+        };
+        addActivitiesToViewPager();
+        viewPager.setCurrentItem(0);
+        viewPager.setOnPageChangeListener(onPageChangeListener);
+    }
+
+    /**
+     *  向ViewPager添加Activity
+     */
+    private void addActivitiesToViewPager() {
+        List<View> views = new ArrayList<>();
+        Intent intent = new Intent();
+
+        intent.setClass(this, GooglePhotoActivity.class);
+        intent.putExtra("view_id",1);
+        views.add(getView("Moments", intent));
+
+        intent.setClass(this, GalleryHomeActivity.class);
+        intent.putExtra("view_id",2);
+        views.add(getView("Albums", intent));
+
+        intent.setClass(this, LocalScanActivity.class);
+        intent.putExtra("view_id",3);
+        views.add(getView("Create", intent));
+
+        galleryBaseViewAdapter = new GalleryBaseViewAdapter(views);
+        viewPager.setAdapter(galleryBaseViewAdapter);
+    }
+
+    /**
+     * 通过activity获取视图
+     *
+     * @param id
+     * @param intent
+     * @return
+     */
+    private View getView(String id, Intent intent) {
+        return localActivityManager.startActivity(id, intent).getDecorView();
+    }
+
+    @Override
+    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
+        switch (requestCode) {
+            case MY_PERMISSIONS_REQUEST_READ_EXTERNAL_STORAGE:
+                if (grantResults.length>0 && grantResults[0]== PackageManager.PERMISSION_GRANTED) {
+                    if (checkAndRequestForGallery() == 0) {
+                        initViewPager();
+                    } else {
+                        ActivityCompat.requestPermissions(GalleryBaseActivity.this,
+                                new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE},
+                                MY_PERMISSIONS_REQUEST_WRITE_EXTERNAL_STORAGE);
+                    }
+                } else {
+                    Toast.makeText(mContext,R.string.denied_required_permission, Toast.LENGTH_SHORT).show();
+                    finish();
+                }
+                break;
+            case MY_PERMISSIONS_REQUEST_WRITE_EXTERNAL_STORAGE:
+                if (grantResults.length>0 && grantResults[0]== PackageManager.PERMISSION_GRANTED) {
+                    if (checkAndRequestForGallery() == 0) {
+                        initBottomNavBar();
+                        initViewPager();
+                    } else {
+                        ActivityCompat.requestPermissions(GalleryBaseActivity.this,
+                                new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE},
+                                MY_PERMISSIONS_REQUEST_WRITE_EXTERNAL_STORAGE);
+                    }
+                } else {
+                    Toast.makeText(mContext,R.string.denied_required_permission, Toast.LENGTH_SHORT).show();
+                    finish();
+                }
+                break;
+            default:
+                super.onRequestPermissionsResult(requestCode, permissions, grantResults);
+                break;
+        }
+        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
+    }
+
+    public int checkAndRequestForGallery() {
+        // get permissions needed in current scenario
+        ArrayList<String> permissionsNeeded = new ArrayList<String>();
+        permissionsNeeded.add(Manifest.permission.READ_EXTERNAL_STORAGE);
+        permissionsNeeded.add(Manifest.permission.WRITE_EXTERNAL_STORAGE);
+        // check status of permissions, get which permissions need to request
+        ArrayList<String> permissionsNeedRequest = new ArrayList<String>();
+        for (String permission : permissionsNeeded) {
+            if (ContextCompat.checkSelfPermission(mContext, permission) == PackageManager.PERMISSION_GRANTED) {
+                continue;
+            }
+            permissionsNeedRequest.add(permission);
+        }
+        return permissionsNeedRequest.size();
+    }
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/ui/RolloutBaseActivity.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/ui/RolloutBaseActivity.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/ui/RolloutBaseActivity.java	(revision 1020)
@@ -0,0 +1,290 @@
+package com.gallery.tclgallery.ui;
+
+import android.content.Intent;
+import android.os.Bundle;
+import android.os.Handler;
+import android.support.v7.app.AppCompatActivity;
+import android.view.View;
+import android.widget.FrameLayout;
+import android.widget.ImageView;
+import android.widget.RelativeLayout;
+
+import com.facebook.rebound.Spring;
+import com.facebook.rebound.SpringConfig;
+import com.facebook.rebound.SpringListener;
+import com.facebook.rebound.SpringSystem;
+import com.facebook.rebound.SpringUtil;
+import com.gallery.tclgallery.R;
+import com.gallery.tclgallery.bean.CameraItem;
+import com.gallery.tclgallery.utils.RGlideUtil;
+import com.gallery.tclgallery.utils.RolloutBDInfo;
+import com.gallery.tclgallery.utils.UIUtils;
+import com.nineoldandroids.animation.Animator;
+import com.nineoldandroids.animation.AnimatorSet;
+import com.nineoldandroids.animation.ObjectAnimator;
+
+/**
+ * 站在牛人的肩膀上
+ * 引用的包：
+ * compile 'com.android.support:appcompat-v7:25.1.1' //可以换成v4或降低版本
+ * compile 'com.github.chrisbanes.photoview:library:1.2.3' 图片放大缩小
+ * compile 'com.facebook.rebound:rebound:0.3.8' //facebook的弹性动画
+ * compile 'com.github.bumptech.glide:glide:3.7.0' //图片加载工具
+ * compile 'com.nineoldandroids:library:2.4.0' //大神JakeWharton的动画库
+ */
+public class RolloutBaseActivity extends AppCompatActivity {
+
+    // 屏幕宽度
+    public float Width;
+    // 屏幕高度
+    public float Height;
+    //整个动画过程显示的图片
+    protected ImageView showimg;
+    //弹性库：拉力，摩擦力
+    private final Spring mSpring = SpringSystem
+            .create()
+            .createSpring()
+            .addListener(new ExampleSpringListener());
+
+    private FrameLayout MainView;
+
+    protected RolloutBDInfo bdInfo;
+    protected CameraItem imageInfo;
+    //用于动画的数值
+    private float size, size_h;
+
+    //关于imageView想要有多宽
+    private float img_w;
+    private float img_h;
+
+    //原图高
+    private float y_img_h;
+    //退出时候图片飞向的坐标xy
+    protected float to_x = 0;
+    protected float to_y = 0;
+    //打开时图片的坐标
+    private float tx;
+    private float ty;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        Width = UIUtils.getScreenWidth();
+        Height = UIUtils.getScreenHeight();
+    }
+
+
+    /**
+     * 获取资源
+     */
+    protected void findID() {
+        MainView = (FrameLayout) findViewById(R.id.main_show_view);
+    }
+
+    /**
+     * 监听
+     */
+    protected void Listener() {
+    }
+
+    /**
+     * 初始
+     */
+    public void InData() {
+    }
+
+
+    protected void EndSoring() {
+
+    }
+
+    protected void EndMove() {
+
+    }
+
+    /**
+     * 获取相应的数据
+     */
+    protected void getValue() {
+        showimg = new ImageView(this);
+        showimg.setScaleType(ImageView.ScaleType.CENTER_INSIDE);
+        
+        RGlideUtil.setImage(this, imageInfo.getPath(), showimg);
+        //关于imageView想要有多宽
+        img_w = bdInfo.width;
+        img_h = bdInfo.height;
+        //动画变化值
+        size = Width / img_w;
+        y_img_h = imageInfo.getHeight() * Width / imageInfo.getWidth();
+        size_h = y_img_h / img_h;
+
+        RelativeLayout.LayoutParams p = new RelativeLayout.LayoutParams((int) bdInfo.width, (int) bdInfo.height);
+        showimg.setLayoutParams(p);
+        p.setMargins((int) bdInfo.x, (int) bdInfo.y, (int) (Width - (bdInfo.x + bdInfo.width)), (int) (Height - (bdInfo.y + bdInfo.height)));
+
+        MainView.addView(showimg);
+
+        showimg.setVisibility(View.VISIBLE);
+        new Handler().postDelayed(new Runnable() {
+            public void run() {
+                setShowimage();
+            }
+        }, 300);
+    }
+
+    /**
+     * 根据数据设置展示图
+     */
+    protected void setShowimage() {
+        if (mSpring.getEndValue() == 0) {
+            mSpring.setSpringConfig(SpringConfig.fromOrigamiTensionAndFriction(1, 5));
+            tx = Width / 2 - (bdInfo.x + img_w / 2);
+            ty = Height / 2 - (bdInfo.y + img_h / 2);
+            MoveView();
+            return;
+        }
+        mSpring.setSpringConfig(SpringConfig.fromOrigamiTensionAndFriction(1, 5));
+        mSpring.setEndValue(0);
+        new Handler().postDelayed(new Runnable() {
+            public void run() {
+                //execute the task
+                MoveBackView();
+            }
+        }, 300);
+
+    }
+
+    private class ExampleSpringListener implements SpringListener {
+
+        @Override
+        public void onSpringUpdate(Spring spring) {
+            double CurrentValue = spring.getCurrentValue();
+            float mappedValue = (float) SpringUtil.mapValueFromRangeToRange(CurrentValue, 0, 1, 1, size);
+            float mapy = (float) SpringUtil.mapValueFromRangeToRange(CurrentValue, 0, 1, 1, size_h);
+            showimg.setScaleX(mappedValue);
+            showimg.setScaleY(mapy);
+            if (CurrentValue == 1) {
+                EndSoring();
+            }
+        }
+
+        @Override
+        public void onSpringAtRest(Spring spring) {
+
+        }
+
+        @Override
+        public void onSpringActivate(Spring spring) {
+
+        }
+
+        @Override
+        public void onSpringEndStateChange(Spring spring) {
+
+        }
+    }
+
+    /**
+     * 图片展示前动画
+     */
+    private void MoveView() {
+        //属性动画
+        ObjectAnimator.ofFloat(MainView, "alpha", 0.8f).setDuration(0).start();
+        MainView.setVisibility(View.VISIBLE);
+        //属性动画集合
+        AnimatorSet set = new AnimatorSet();
+        set.playTogether(
+                ObjectAnimator.ofFloat(showimg, "translationX", tx).setDuration(200),
+                ObjectAnimator.ofFloat(showimg, "translationY", ty).setDuration(200),
+                ObjectAnimator.ofFloat(MainView, "alpha", 1).setDuration(200)
+
+        );
+        set.addListener(new Animator.AnimatorListener() {
+            @Override
+            public void onAnimationStart(Animator animator) {
+
+            }
+
+            @Override
+            public void onAnimationEnd(Animator animator) {
+                showimg.setScaleType(ImageView.ScaleType.FIT_XY);
+                mSpring.setEndValue(1);
+                MainView.setBackgroundResource(R.color.rollout_preview_bg);
+            }
+
+            @Override
+            public void onAnimationCancel(Animator animator) {
+
+            }
+
+            @Override
+            public void onAnimationRepeat(Animator animator) {
+
+            }
+        });
+        set.start();
+
+    }
+    /**
+     * 图片退出动画
+     */
+    private void MoveBackView() {
+        AnimatorSet set = new AnimatorSet();
+        set.playTogether(
+                ObjectAnimator.ofFloat(showimg, "translationX", to_x).setDuration(200),
+                ObjectAnimator.ofFloat(showimg, "translationY", to_y).setDuration(200)
+        );
+        set.addListener(new Animator.AnimatorListener() {
+            @Override
+            public void onAnimationStart(Animator animator) {
+                showimg.setScaleType(ImageView.ScaleType.CENTER_INSIDE);
+                MainView.setBackgroundResource(R.color.rollout_trans);
+            }
+
+            @Override
+            public void onAnimationEnd(Animator animator) {
+                EndMove();
+            }
+
+            @Override
+            public void onAnimationCancel(Animator animator) {
+
+            }
+
+            @Override
+            public void onAnimationRepeat(Animator animator) {
+
+            }
+        });
+        set.start();
+    }
+
+    /**
+     * 对跳转的动画可以重新自己定义
+     *
+     * @param intent
+     */
+    @Override
+    public void startActivity(Intent intent) {
+        super.startActivity(intent);
+        overridePendingTransition(R.animator.activity_in, 0);
+    }
+
+    @Override
+    public void onBackPressed() {
+        super.onBackPressed();
+        overridePendingTransition(0, R.animator.activity_out);
+    }
+
+    @Override
+    public void finish() {
+        super.finish();
+        overridePendingTransition(0, R.animator.activity_out);
+    }
+
+    @Override
+    protected void onDestroy() {
+        super.onDestroy();
+        RGlideUtil.clearMemory(this);
+    }
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/ui/LocalScanActivity.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/ui/LocalScanActivity.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/ui/LocalScanActivity.java	(revision 1020)
@@ -0,0 +1,26 @@
+package com.gallery.tclgallery.ui;
+
+import android.app.Activity;
+import android.content.Context;
+import android.os.Bundle;
+import android.view.View;
+
+import com.gallery.tclgallery.R;
+import com.gallery.tclgallery.interfaces.LocalMediaDao;
+import com.gallery.tclgallery.model.LocalMediaDaoImpl;
+
+public class LocalScanActivity extends Activity {
+    private Context mContext;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_main);
+        mContext = getApplicationContext();
+    }
+
+    public void scanLocalMedia(View view) {
+        LocalMediaDao localMediaDao = new LocalMediaDaoImpl(mContext);
+        localMediaDao.initLocalMedia();
+    }
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/ui/AlbumOtherActivity.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/ui/AlbumOtherActivity.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/ui/AlbumOtherActivity.java	(revision 1020)
@@ -0,0 +1,213 @@
+package com.gallery.tclgallery.ui;
+
+import android.content.Context;
+import android.content.Intent;
+import android.os.Bundle;
+import android.support.annotation.Nullable;
+import android.support.v7.app.AppCompatActivity;
+import android.support.v7.widget.Toolbar;
+import android.util.Log;
+import android.view.Menu;
+import android.view.MenuItem;
+import android.view.View;
+import android.widget.AdapterView;
+import android.widget.GridView;
+
+import com.gallery.tclgallery.R;
+import com.gallery.tclgallery.bean.AlbumTag;
+import com.gallery.tclgallery.ui.adapter.AlbumOtherAdapter;
+
+import java.util.ArrayList;
+
+/**
+ * Created by liddo on 2017/10/19.
+ */
+
+public class AlbumOtherActivity extends AppCompatActivity{
+    private ArrayList<AlbumTag> invisibleAlbums;
+    private GridView gridView;
+    private Toolbar other_toolbar;
+    private AlbumOtherAdapter adapter;
+    private Context mContext;
+    private boolean folderNoChecked = true;
+    private int folderCheckedCount;
+
+    @Override
+    protected void onCreate(@Nullable Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activty_album_other);
+        invisibleAlbums = new ArrayList<>();
+        Intent intent = getIntent();
+        ArrayList<AlbumTag> arrayList = intent.getParcelableArrayListExtra("invisible_album");
+        invisibleAlbums.addAll(arrayList);
+        other_toolbar = (Toolbar)findViewById(R.id.other_toolbar);
+        gridView = (GridView) findViewById(R.id.other_grid);
+        mContext = getApplicationContext();
+        initToolbar();
+        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
+        initGridview();
+    }
+
+    /**
+     * 初始化Toolbar
+     */
+    private void initToolbar() {
+        other_toolbar.setNavigationIcon(R.drawable.ic_arrow_back_black_24dp);
+        other_toolbar.setNavigationOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                AlbumOtherActivity.this.finish();
+            }
+        });
+        other_toolbar.setTitle(getString(R.string.album_other_toolbar_title));
+        setSupportActionBar(other_toolbar);
+    }
+
+    /**
+     * 初始化gridView
+     */
+    private void initGridview() {
+        adapter = new AlbumOtherAdapter(mContext);
+        gridView.setAdapter(adapter);
+        adapter.setArrayList(invisibleAlbums);
+        adapter.notifyDataSetChanged();
+        gridView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {
+            @Override
+            public boolean onItemLongClick(AdapterView<?> adapterView, View view, int i, long l) {
+                if (!adapter.isAlbumSelected()) {
+                    if (invisibleAlbums.size() != 0) {
+                        invisibleAlbums.get(i).setChecked(true);
+                        adapter.setAlbumSelected(true);
+                        folderCheckedCount = 1;
+                        other_toolbar.setTitle(folderCheckedCount + "");
+                        other_toolbar.setNavigationIcon(R.drawable.ic_close_24px);
+                        getSupportActionBar().setDisplayHomeAsUpEnabled(false);
+                        other_toolbar.setNavigationOnClickListener(new View.OnClickListener() {
+                            @Override
+                            public void onClick(View v) {
+                                adapter.setAlbumSelected(false);
+                                for (AlbumTag album:invisibleAlbums) {
+                                    album.setChecked(false);
+                                }
+                                adapter.notifyDataSetChanged();
+                                other_toolbar.setTitle(getString(R.string.default_album_others));
+                                other_toolbar.setNavigationIcon(R.drawable.ic_arrow_back_black_24dp);
+                                other_toolbar.setNavigationOnClickListener(new View.OnClickListener() {
+                                    @Override
+                                    public void onClick(View view) {
+                                        AlbumOtherActivity.this.finish();
+                                    }
+                                });
+                                invalidateOptionsMenu();
+                            }
+                        });
+                        invalidateOptionsMenu();
+                        adapter.notifyDataSetChanged();
+                    }
+                }
+                return true;
+            }
+        });
+
+        gridView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+            @Override
+            public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
+                if (adapter.isAlbumSelected()) {
+                    boolean isSelected = invisibleAlbums.get(i).isChecked();
+                    invisibleAlbums.get(i).setChecked(!isSelected);
+                    adapter.notifyDataSetChanged();
+                    checkAlbumFoldersNoChecked();
+                    if (folderNoChecked) {
+                        other_toolbar.setTitle(getString(R.string.album_other_toolbar_select_albums_title));
+                        invalidateOptionsMenu();
+                    } else {
+                        other_toolbar.setTitle(folderCheckedCount + "");
+                        invalidateOptionsMenu();
+                    }
+                } else {
+                    Intent intent = new Intent(AlbumOtherActivity.this, AlbumPhotoActivity.class);
+                    intent.putExtra("albumTag", invisibleAlbums.get(i));
+                    startActivity(intent);
+                }
+            }
+        });
+    }
+
+    private void checkAlbumFoldersNoChecked () {
+        folderCheckedCount = 0;
+        for (AlbumTag album : invisibleAlbums){
+            if (album.isChecked()) {
+                folderCheckedCount++;
+            }
+        }
+        folderNoChecked = folderCheckedCount > 0? false:true;
+    }
+
+    @Override
+    public boolean onPrepareOptionsMenu(Menu menu) {
+        if(adapter.isAlbumSelected()){
+            if(folderNoChecked) {
+                menu.findItem(R.id.menu_unarchive_album).setVisible(false);
+                menu.findItem(R.id.menu_delete_other_album).setVisible(false);
+                menu.findItem(R.id.menu_select_other_album).setVisible(false);
+            } else {
+                menu.findItem(R.id.menu_unarchive_album).setVisible(true);
+                menu.findItem(R.id.menu_delete_other_album).setVisible(true);
+                menu.findItem(R.id.menu_select_other_album).setVisible(false);
+            }
+        } else {
+            menu.findItem(R.id.menu_unarchive_album).setVisible(false);
+            menu.findItem(R.id.menu_delete_other_album).setVisible(false);
+            menu.findItem(R.id.menu_select_other_album).setVisible(true);
+        }
+        return super.onPrepareOptionsMenu(menu);
+    }
+
+    @Override
+    public boolean onCreateOptionsMenu(Menu menu) {
+        menu.clear();
+        getMenuInflater().inflate(R.menu.other_album_menu,menu);
+        return super.onCreateOptionsMenu(menu);
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        switch (item.getItemId()){
+            case R.id.menu_unarchive_album:
+                // 移除other相册
+                return true;
+            case R.id.menu_select_other_album:
+                adapter.setAlbumSelected(true);
+                other_toolbar.setTitle(getString(R.string.album_other_toolbar_select_albums_title));
+                other_toolbar.setNavigationIcon(R.drawable.ic_close_24px);
+                other_toolbar.setNavigationOnClickListener(new View.OnClickListener() {
+                    @Override
+                    public void onClick(View v) {
+                        adapter.setAlbumSelected(false);
+                        for (AlbumTag album:invisibleAlbums) {
+                            album.setChecked(false);
+                        }
+                        adapter.notifyDataSetChanged();
+                        other_toolbar.setTitle(getString(R.string.default_album_others));
+                        other_toolbar.setNavigationIcon(R.drawable.ic_arrow_back_black_24dp);
+                        other_toolbar.setNavigationOnClickListener(new View.OnClickListener() {
+                            @Override
+                            public void onClick(View view) {
+                                AlbumOtherActivity.this.finish();
+                            }
+                        });
+                        invalidateOptionsMenu();
+                    }
+                });
+                invalidateOptionsMenu();
+                adapter.notifyDataSetChanged();
+                return true;
+            case R.id.menu_delete_other_album:
+                // 删除相册
+                return true;
+            default:
+                return super.onOptionsItemSelected(item);
+        }
+    }
+
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/ui/RolloutPreviewActivity.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/ui/RolloutPreviewActivity.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/ui/RolloutPreviewActivity.java	(revision 1020)
@@ -0,0 +1,302 @@
+package com.gallery.tclgallery.ui;
+
+import android.os.Bundle;
+import android.support.v4.view.PagerAdapter;
+import android.support.v4.view.ViewPager;
+import android.support.v7.app.ActionBar;
+import android.support.v7.widget.Toolbar;
+import android.util.Log;
+import android.view.KeyEvent;
+import android.view.Menu;
+import android.view.MenuItem;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.FrameLayout;
+import android.widget.ImageButton;
+import android.widget.LinearLayout;
+
+
+import com.bumptech.glide.Glide;
+import com.gallery.tclgallery.R;
+import com.gallery.tclgallery.bean.CameraItem;
+import com.gallery.tclgallery.utils.RGlideUtil;
+import com.gallery.tclgallery.utils.RolloutBDInfo;
+import com.gallery.tclgallery.utils.UIUtils;
+import com.gallery.tclgallery.viewholder.RolloutViewPager;
+
+import java.util.ArrayList;
+
+import uk.co.senab.photoview.PhotoView;
+import uk.co.senab.photoview.PhotoViewAttacher;
+
+public class RolloutPreviewActivity extends RolloutBaseActivity implements ViewPager.OnPageChangeListener {
+    public static RolloutPreviewActivity mRolloutPreviewActivity;
+    private int index = 0;
+    private int selectIndex = -1;
+
+    private FrameLayout main_show_view;
+    private LinearLayout btn_edit;
+    private Button btn_Fiters, btn_Frame, btn_UcropAndRotate, btn_adjust;
+    private ImageButton btn_Draw;
+    private boolean visible = false;
+    private Toolbar toolbar;
+    private ViewPager viewpager;
+    private SamplePagerAdapter pagerAdapter;
+
+    private ArrayList<CameraItem> ImgList;
+
+    private float moveheight;
+    private int type;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        mRolloutPreviewActivity=this;
+        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);// 全屏
+//        requestWindowFeature(Window.FEATURE_NO_TITLE);
+        setContentView(R.layout.activity_rollout_preview);
+
+        findID();
+        setupToolbar();
+        Listener();
+        InData();
+        getValue();
+
+    }
+
+    @Override
+    public void findID() {
+        super.findID();
+        viewpager = (RolloutViewPager) findViewById(R.id.bi_viewpager);
+        main_show_view = (FrameLayout) findViewById(R.id.main_show_view);
+        btn_edit = (LinearLayout) findViewById(R.id.btn_edit);
+        btn_adjust = (Button) findViewById(R.id.btn_adjust);
+        btn_Draw = (ImageButton) findViewById(R.id.btn_Draw);
+        btn_Fiters = (Button) findViewById(R.id.btn_Fiters);
+        btn_Frame = (Button) findViewById(R.id.btn_Frame);
+        btn_UcropAndRotate = (Button) findViewById(R.id.btn_UcropAndRotate);
+    }
+
+    /**
+     * 初始化Toolbar
+     */
+    private void setupToolbar() {
+        toolbar = (Toolbar) findViewById(R.id.toolbar_edit);
+        toolbar.bringToFront();
+        toolbar.setVisibility(View.GONE);
+        setSupportActionBar(toolbar);
+        ActionBar ab = getSupportActionBar();
+        if (ab != null) ab.setDisplayHomeAsUpEnabled(true);
+       /* toolbar.setNavigationOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                viewpager.setVisibility(View.GONE);
+                showimg.setVisibility(View.VISIBLE);
+                if (selectIndex != -1) {
+                    RGlideUtil.setImage(RolloutPreviewActivity.this, ImgList.get(selectIndex).getPath(), showimg);
+                }
+                setShowimage();
+            }
+        });*/
+
+    }
+
+    @Override
+    public void Listener() {
+        super.Listener();
+        viewpager.setOnPageChangeListener(this);
+    }
+
+    @Override
+    public void InData() {
+        super.InData();
+
+        index = getIntent().getIntExtra("index", 0);
+        type = getIntent().getIntExtra("type", 0);
+        ImgList = (ArrayList<CameraItem>) getIntent().getSerializableExtra("data");
+
+        Log.e("1", ImgList.size() + "数量");
+
+        imageInfo = ImgList.get(index);
+        bdInfo = (RolloutBDInfo) getIntent().getSerializableExtra("bdinfo");
+
+        pagerAdapter = new SamplePagerAdapter();
+        viewpager.setAdapter(pagerAdapter);
+        viewpager.setCurrentItem(index);
+
+        if (type == 1) {
+            moveheight = UIUtils.dip2px(70);
+        } else if (type == 2) {
+            moveheight = (Width - 4 * UIUtils.dip2px(2)) / 4;
+        } else if (type == 3) {
+            moveheight = (Width - UIUtils.dip2px(80) - UIUtils.dip2px(2)) / 4;
+        }
+    }
+
+
+    @Override
+    public void onPageScrollStateChanged(int arg0) {
+
+    }
+
+    @Override
+    public void onPageScrolled(int arg0, float arg1, int arg2) {
+
+    }
+
+    @Override
+    public void onPageSelected(int arg0) {
+        if (showimg == null) {
+            return;
+        }
+        CameraItem info = ImgList.get(arg0);
+        //单张
+        if (type == 0) {
+            RGlideUtil.setImage(RolloutPreviewActivity.this, info.getPath(), showimg);
+        } else if (type == 1) {//listview
+            selectIndex = arg0;
+            int move_index = arg0 - index;
+            to_y = move_index * moveheight;
+        } else if (type == 2) {//gridview，计算图片原始的位置，某行某列
+            selectIndex = arg0;
+            int a = index / 4;
+            int b = index % 4;
+            int a1 = arg0 / 4;
+            int b1 = arg0 % 4;
+            to_y = (a1 - a) * moveheight + (a1 - a) * UIUtils.dip2px(2);
+            to_x = (b1 - b) * moveheight + (b1 - b) * UIUtils.dip2px(2);
+        } else if (type == 3) {//类似与朋友圈
+            selectIndex = arg0;
+            int a = index / 4;
+            int b = index % 4;
+            int a1 = arg0 / 4;
+            int b1 = arg0 % 4;
+            to_y = (a1 - a) * moveheight + (a1 - a) * UIUtils.dip2px(1);
+            to_x = (b1 - b) * moveheight + (b1 - b) * UIUtils.dip2px(1);
+        }
+    }
+
+    class SamplePagerAdapter extends PagerAdapter {
+
+        @Override
+        public int getCount() {
+            return ImgList.size();
+        }
+
+        @Override
+        public View instantiateItem(ViewGroup container, int position) {
+            PhotoView photoView = new PhotoView(container.getContext());
+            String path = ImgList.get(position).getPath();
+            Glide.with(RolloutPreviewActivity.this).load(path).into(photoView);
+            // Now just add PhotoView to ViewPager and return it
+            photoView.setOnViewTapListener(new PhotoViewAttacher.OnViewTapListener() {
+
+                @Override
+                public void onViewTap(View arg0, float arg1, float arg2) {
+
+                    if (!visible) {
+                        btn_edit.setVisibility(View.VISIBLE);
+                        toolbar.setVisibility(View.VISIBLE);
+                        visible = true;
+                    } else {
+                        btn_edit.setVisibility(View.GONE);
+                        toolbar.setVisibility(View.GONE);
+                        visible = false;
+                    }
+                }
+            });
+
+            container.addView(photoView, ViewGroup.LayoutParams.MATCH_PARENT,
+                    ViewGroup.LayoutParams.MATCH_PARENT);
+
+            return photoView;
+        }
+
+        @Override
+        public void destroyItem(ViewGroup container, int position, Object object) {
+            container.removeView((View) object);
+        }
+
+        @Override
+        public boolean isViewFromObject(View view, Object object) {
+            return view == object;
+        }
+    }
+
+    @Override
+    public boolean onKeyDown(int keyCode, KeyEvent event) {
+        if (keyCode == KeyEvent.KEYCODE_BACK) {
+            viewpager.setVisibility(View.GONE);
+            showimg.setVisibility(View.VISIBLE);
+            setShowimage();
+        }
+        return true;
+    }
+
+    @Override
+    protected void EndSoring() {
+        super.EndSoring();
+        viewpager.setVisibility(View.VISIBLE);
+        showimg.setVisibility(View.GONE);
+    }
+
+    @Override
+    protected void EndMove() {
+        super.EndMove();
+        finish();
+    }
+
+    @Override
+    protected void onDestroy() {
+        super.onDestroy();
+        if (selectIndex != -1) {
+            selectIndex = -1;
+        }
+        RGlideUtil.clearMemory(this);
+    }
+
+    @Override
+    public boolean onCreateOptionsMenu(Menu menu) {
+        getMenuInflater().inflate(R.menu.photo_preview, menu);
+        return true;
+    }
+public void  closeActivity(){
+   /* EndMove();
+    onDestroy();*/
+    viewpager.setVisibility(View.GONE);
+    showimg.setVisibility(View.VISIBLE);
+    if (selectIndex != -1) {
+        RGlideUtil.setImage(RolloutPreviewActivity.this, ImgList.get(selectIndex).getPath(), showimg);
+    }
+    setShowimage();
+}
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        switch (item.getItemId()) {
+            case android.R.id.home:
+                viewpager.setVisibility(View.GONE);
+                showimg.setVisibility(View.VISIBLE);
+                if (selectIndex != -1) {
+                    RGlideUtil.setImage(RolloutPreviewActivity.this, ImgList.get(selectIndex).getPath(), showimg);
+                }
+                setShowimage();
+                break;
+            case R.id.menu_Slideshow:break;
+            case R.id.menu_Set_as:break;
+            case R.id.menu_Details:break;
+            case R.id.menu_Print:break;
+            default:
+                break;
+        }
+
+        return super.onOptionsItemSelected(item);
+    }
+
+    @Override
+    public boolean onTouchEvent(MotionEvent event) {
+        return super.onTouchEvent(event);
+    }
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/ui/GalleryCreateActivity.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/ui/GalleryCreateActivity.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/ui/GalleryCreateActivity.java	(revision 1020)
@@ -0,0 +1,21 @@
+package com.gallery.tclgallery.ui;
+
+import android.os.Bundle;
+import android.support.annotation.Nullable;
+import android.support.v7.app.AppCompatActivity;
+
+import com.gallery.tclgallery.R;
+
+
+/**
+ * Created by liddo on 2017/9/27.
+ */
+
+public class GalleryCreateActivity extends AppCompatActivity {
+
+    @Override
+    protected void onCreate(@Nullable Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_create_home);
+    }
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/ui/adapter/DayViewAdapter.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/ui/adapter/DayViewAdapter.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/ui/adapter/DayViewAdapter.java	(revision 1020)
@@ -0,0 +1,69 @@
+package com.gallery.tclgallery.ui.adapter;
+
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+
+import com.gallery.tclgallery.R;
+import com.gallery.tclgallery.bean.CameraItem;
+import com.gallery.tclgallery.ui.adapter.base.BaseViewAdapter;
+import com.gallery.tclgallery.viewholder.item.DayViewItemHolder;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * 日视图Adapter
+ * Created by jiaojie.jia on 2017/3/20.
+ */
+
+public class DayViewAdapter extends BaseViewAdapter<DayViewItemHolder> {
+
+    private List<String> mMonths;       // 月集合
+
+    @Override
+    protected DayViewItemHolder onCreateItemViewHolder(ViewGroup parent, int viewType) {
+        LayoutInflater inflater = LayoutInflater.from(parent.getContext());
+        View view = inflater.inflate(R.layout.holder_month_item, parent, false);
+        view.setOnLongClickListener(longClickListener);
+        view.setOnClickListener(clickListener);
+        return new DayViewItemHolder(view);
+    }
+
+    @Override
+    protected void onBindItemViewHolder(DayViewItemHolder holder, int section, int position) {
+        CameraItem cameraItem = mSectionPhotos.get(section).get(position);
+        holder.setData(cameraItem);
+    }
+
+    @Override
+    public void initOther() {
+        mMonths = new ArrayList<>();
+        List<Float> percents = new ArrayList<>(mTitles.size());
+        for (String title : mTitles) {
+            String month = title.substring(0, 8);
+            if (!mMonths.contains(month)) {
+                mMonths.add(month);
+            }
+        }
+        mPresenter.setTimelineData(percents, mTitles);
+    }
+
+    /**
+     * 由日视图中的 position 得到在月视图中所属 Section
+     *
+     * @param position
+     * @return
+     */
+    public int getSectionInMonthView(int position) {
+        String title = getSectionTitle(position);
+        int section = 0;
+        for (String month : mMonths) {
+            if (title.startsWith(month)) {
+                break;
+            }
+            section++;
+        }
+        return section;
+    }
+}
\ No newline at end of file
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/ui/adapter/PhotoFoldersAdapter.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/ui/adapter/PhotoFoldersAdapter.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/ui/adapter/PhotoFoldersAdapter.java	(revision 1020)
@@ -0,0 +1,55 @@
+package com.gallery.tclgallery.ui.adapter;
+
+import android.support.v7.widget.RecyclerView;
+import android.view.ViewGroup;
+
+import com.gallery.tclgallery.bean.ImageFolder;
+import com.gallery.tclgallery.listener.OnEditItemClickListener;
+import com.gallery.tclgallery.utils.Format;
+import com.gallery.tclgallery.viewholder.item.PhotoFolderItemHolder;
+
+import java.util.List;
+
+/**
+ * 文件夹列表Adapter
+ * Created by jiaojie.jia on 2017/3/23.
+ */
+
+public class PhotoFoldersAdapter extends RecyclerView.Adapter {
+
+    private List<ImageFolder> mFolderList;                      // 文件夹集合
+
+    private OnEditItemClickListener onItemClickListener;
+
+    public void setOnItemClickListener(OnEditItemClickListener onItemClickListener) {
+        this.onItemClickListener = onItemClickListener;
+    }
+
+    public void setData(List<ImageFolder> folders) {
+        mFolderList = folders;
+        notifyDataSetChanged();
+    }
+
+    public ImageFolder getItem(int position) {
+        if(!Format.isEmpty(mFolderList)) {
+            return mFolderList.get(position);
+        }
+        return null;
+    }
+
+    @Override
+    public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
+        return new PhotoFolderItemHolder(parent.getContext(), onItemClickListener);
+    }
+
+    @Override
+    public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
+        PhotoFolderItemHolder itemHolder = (PhotoFolderItemHolder) holder;
+        itemHolder.setData(mFolderList.get(position));
+    }
+
+    @Override
+    public int getItemCount() {
+        return Format.isEmpty(mFolderList) ? 0 : mFolderList.size();
+    }
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/ui/adapter/base/VirtualLayoutAdapter.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/ui/adapter/base/VirtualLayoutAdapter.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/ui/adapter/base/VirtualLayoutAdapter.java	(revision 1020)
@@ -0,0 +1,289 @@
+package com.gallery.tclgallery.ui.adapter.base;
+
+import android.support.annotation.NonNull;
+import android.util.Log;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+
+import com.alibaba.android.vlayout.LayoutHelper;
+import com.alibaba.android.vlayout.VirtualLayoutManager;
+import com.gallery.tclgallery.bean.CameraItem;
+import com.gallery.tclgallery.bean.State;
+import com.gallery.tclgallery.contract.GooglePhotoContract;
+import com.gallery.tclgallery.fastscroll.SectionTitleProvider;
+import com.gallery.tclgallery.listener.PhotoTimelineDataProvider;
+import com.gallery.tclgallery.sectionedrecyclerviewadapter.HeaderViewHolder;
+import com.gallery.tclgallery.sectionedrecyclerviewadapter.SimpleSectionedAdapter;
+import com.gallery.tclgallery.utils.Format;
+import com.gallery.tclgallery.viewholder.item.CollageViewItemHolder;
+
+import java.util.ArrayList;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
+
+/**
+ * 月/日 视图的基类Adapter
+ * Created by jiaojie.jia on 2017/3/20.
+ */
+
+public abstract class VirtualLayoutAdapter<T extends CollageViewItemHolder> extends SimpleSectionedAdapter<T> implements SectionTitleProvider, PhotoTimelineDataProvider {
+public  static VirtualLayoutAdapter baseViewAdapter;
+    private LinkedHashMap<String, List<CameraItem>> mAllPhotos;       // key-日期（月或日), value-该日期下的所有照片
+
+    protected List<String> mTitles;                             // 日期集合
+    protected List<List<CameraItem>> mSectionPhotos;      // 照片集合
+    protected List<CameraItem> items;                       // 把上面照片集合转成一维集合，方便取值
+
+    protected View.OnLongClickListener longClickListener;
+    protected View.OnClickListener clickListener;
+    protected GooglePhotoContract.Presenter mPresenter;
+    @NonNull
+    protected VirtualLayoutManager mLayoutManager;
+
+    public VirtualLayoutAdapter(@NonNull VirtualLayoutManager layoutManager) {
+        this.mLayoutManager = layoutManager;
+    }
+
+    public VirtualLayoutAdapter() {
+
+    }
+
+    public void setLayoutHelpers(List<LayoutHelper> helpers) {
+        this.mLayoutManager.setLayoutHelpers(helpers);
+    }
+
+    @NonNull
+    public List<LayoutHelper> getLayoutHelpers() {
+        return this.mLayoutManager.getLayoutHelpers();
+    }
+
+
+    public void setPresenter(GooglePhotoContract.Presenter presenter) {
+        mPresenter = presenter;
+    }
+
+    public void setAllPhotos(LinkedHashMap<String, List<CameraItem>> allPhotos) {
+        mAllPhotos = allPhotos;
+        mTitles = new ArrayList<>(mAllPhotos.size());
+        mSectionPhotos = new ArrayList<>(mAllPhotos.size());
+        items = new ArrayList<>();
+        for (Map.Entry<String, List<CameraItem>> entry : mAllPhotos.entrySet()) {
+            mTitles.add(entry.getKey());
+            mSectionPhotos.add(entry.getValue());
+        }
+        for (List<CameraItem> photoSection : mSectionPhotos) {
+            for (CameraItem cameraItem : photoSection) {
+                items.add(cameraItem);
+            }
+        }
+        initOther();
+        notifyDataSetChanged();
+    }
+
+    public void initOther() {
+    }
+
+    @Override
+    protected String getSectionHeaderTitle(int section) {
+        return mTitles.get(section);
+    }
+
+    @Override
+    protected int getSectionCount() {
+        return Format.isEmpty(mTitles) ? 0 : mTitles.size();
+    }
+
+    @Override
+    protected int getItemCountForSection(int section) {
+        return Format.isEmpty(mSectionPhotos) ? 0 : mSectionPhotos.get(section).size();
+    }
+
+    public void setLongClickListener(View.OnLongClickListener clickListener) {
+        this.longClickListener = clickListener;
+    }
+
+    public void setClickListener(View.OnClickListener clickListener) {
+        this.clickListener = clickListener;
+    }
+
+    @Override
+    public List<Float> getPercents() {
+        return mPresenter.getPercents();
+    }
+
+    @Override
+    public List<String> getTitles() {
+        return mPresenter.getTimelineTags();
+    }
+
+    /**
+     * 单选
+     */
+    public void setSelected(int position) {
+        CameraItem cameraItem = items.get(getDataPositionByView(position));
+        boolean status = cameraItem.isSelected();
+        cameraItem.setSelected(!status);
+        mPresenter.selectPhoto(cameraItem);
+        notifyItemChanged(position);
+        mPresenter.loadPhotos();
+    }
+
+    /**
+     * 滑动选择
+     */
+    public void selectRangeChange(int start, int end, boolean selected) {
+        if (start < 0 || end >= items.size() + mSectionPhotos.size()) {
+            return;
+        }
+        for (int i = start; i <= end; i++) {
+            if (isSectionItem(i)) {
+                return;
+            }
+            CameraItem model = getItem(getDataPositionByView(i));
+            model.setSelected(selected);
+            mPresenter.selectPhoto(model);
+            notifyItemChanged(i);
+        }
+    }
+
+    /**
+     * 获取数据
+     */
+    public CameraItem getItem(int i) {
+        return items.get(i);
+    }
+
+    /**
+     * 由列表位置得到数据位置
+     */
+    private int getDataPositionByView(int position) {
+        int dataPosition = position - getSection(position) - 1;
+        return dataPosition < 0 ? 0 : dataPosition;
+    }
+
+    /**
+     * 根据列表物理位置返回此位置所属Section
+     */
+    private int getSection(int position) {
+        int section = 0;
+        int sum = 0;
+        for (List<CameraItem> photoSection : mSectionPhotos) {
+            sum += photoSection.size() + 1;
+            if (position < sum) {
+                break;
+            }
+            section++;
+        }
+        return section;
+    }
+
+    /**
+     * 当前位置是否为header
+     */
+    private boolean isSectionItem(int position) {
+        int sum = 0;
+        for (List<CameraItem> photoSection : mSectionPhotos) {
+            sum += photoSection.size() + 1;
+            if (position == sum) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    /**
+     * 获取指定分组header的位置
+     */
+    public int getHeaderPosition(int section) {
+        int sum = 0;
+        for (int i = 0; i < section; i++) {
+            List<CameraItem> photoSection = mSectionPhotos.get(i);
+            sum += photoSection.size() + 1;
+        }
+        return sum;
+    }
+
+    @Override
+    public String getSectionTitle(int position) {
+        return getSectionHeaderTitle(getSection(position));
+    }
+
+    /*判断当前部分是否全选*/
+    public boolean istextSelect(int section) {
+        List<CameraItem> selectSection = mSectionPhotos.get(section);
+        boolean istextSelect = true;
+        if (istextSelect) {
+            for (CameraItem cameraItem : selectSection) {
+                boolean status = cameraItem.isSelected();
+                Log.d("whj", "istextSelect: status" + status);
+                if (!status) istextSelect = false;
+            }
+        }
+        return istextSelect;
+    }
+
+    /*标题选择的处理*/
+    public void selectconctrol(boolean isselect, int section) {
+        List<CameraItem> selectSection = mSectionPhotos.get(section);
+        int sum = 0;//遍历开始的position
+        int select = 0;//遍历的次数
+//        Log.d("whj", "selectconctrol: START");
+        for (int i = 0; i < section; i++) {
+            sum += mSectionPhotos.get(i).size() + 1;
+//            Log.d("whj", "selectconctrol: sum" + sum);
+        }
+        select = selectSection.size();
+//        Log.d("whj", "selectconctrol: select" + select);
+        while (select != 0) {
+            ++sum;
+            CameraItem cameraItem = items.get(getDataPositionByView(sum));
+            cameraItem.setSelected(isselect);
+            mPresenter.selectPhoto(cameraItem);
+            notifyItemChanged(sum);
+            select--;
+//            Log.d("whj", "selectconctrol: sum" + sum + "\tselect" + select);
+        }
+    }
+    /*判断当前部分是否全选*/
+    public boolean istextSelect1(int section) {
+        List<CameraItem> selectSection = mSectionPhotos.get(section);
+        boolean istextSelect = true;
+        if (istextSelect) {
+            for (CameraItem cameraItem : selectSection) {
+                boolean status = cameraItem.isSelected();
+                Log.d("whj", "istextSelect: status" + status);
+                if (!status) istextSelect = false;
+            }
+        }
+        return istextSelect;
+    }
+    @Override
+    protected HeaderViewHolder onCreateSectionHeaderViewHolder(ViewGroup parent, int viewType) {
+        LayoutInflater inflater = LayoutInflater.from(parent.getContext());
+        View view = inflater.inflate(getLayoutResource(), parent, false);
+        final HeaderViewHolder holder = new HeaderViewHolder(view, getTitleTextID(), getTitleTextSelectID());
+        return holder;
+    }
+
+    @Override
+    protected void onBindSectionHeaderViewHolder(final HeaderViewHolder holder, final int section) {
+        final String title = getSectionHeaderTitle(section);
+        holder.render(title);
+        if (State.SelectState) {
+            holder.textSelct.setVisibility(View.VISIBLE);
+            if (istextSelect1(section)) holder.textSelct.setSelected(true);
+            else holder.textSelct.setSelected(false);
+        } else holder.textSelct.setVisibility(View.GONE);
+        holder.textSelct.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                holder.textSelct.setSelected(!holder.textSelct.isSelected());
+                selectconctrol(holder.textSelct.isSelected(), section);
+//                Log.d("whj", "onClick: section" + section + "\t" + !holder.textSelct.isSelected());
+            }
+        });
+    }
+
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/ui/adapter/base/BaseViewAdapter.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/ui/adapter/base/BaseViewAdapter.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/ui/adapter/base/BaseViewAdapter.java	(revision 1020)
@@ -0,0 +1,326 @@
+package com.gallery.tclgallery.ui.adapter.base;
+
+import android.util.Log;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+
+import com.gallery.tclgallery.bean.CameraItem;
+import com.gallery.tclgallery.bean.State;
+import com.gallery.tclgallery.contract.GooglePhotoContract;
+import com.gallery.tclgallery.fastscroll.SectionTitleProvider;
+import com.gallery.tclgallery.listener.PhotoTimelineDataProvider;
+import com.gallery.tclgallery.sectionedrecyclerviewadapter.HeaderViewHolder;
+import com.gallery.tclgallery.sectionedrecyclerviewadapter.SimpleSectionedAdapter;
+import com.gallery.tclgallery.ui.GooglePhotoActivity;
+import com.gallery.tclgallery.utils.Format;
+import com.gallery.tclgallery.viewholder.base.BasePhotoItemHolder;
+
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
+import java.util.ArrayList;
+import java.util.Calendar;
+import java.util.Date;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Locale;
+import java.util.Map;
+
+/**
+ * 月/日 视图的基类Adapter
+ * Created by jiaojie.jia on 2017/3/20.
+ */
+
+public abstract class BaseViewAdapter<T extends BasePhotoItemHolder> extends SimpleSectionedAdapter<T> implements SectionTitleProvider, PhotoTimelineDataProvider {
+public  static BaseViewAdapter baseViewAdapter;
+    private LinkedHashMap<String, List<CameraItem>> mAllPhotos;       // key-日期（月或日), value-该日期下的所有照片
+
+    protected List<String> mTitles;                             // 日期集合
+    protected List<List<CameraItem>> mSectionPhotos;      // 照片集合
+    protected List<CameraItem> items;                       // 把上面照片集合转成一维集合，方便取值
+
+    protected View.OnLongClickListener longClickListener;
+    protected View.OnClickListener clickListener;
+    protected GooglePhotoContract.Presenter mPresenter;
+
+    public void setPresenter(GooglePhotoContract.Presenter presenter) {
+        mPresenter = presenter;
+    }
+
+    public void setAllPhotos(LinkedHashMap<String, List<CameraItem>> allPhotos) {
+        mAllPhotos = allPhotos;
+        mTitles = new ArrayList<>(mAllPhotos.size());
+        mSectionPhotos = new ArrayList<>(mAllPhotos.size());
+        items = new ArrayList<>();
+        for (Map.Entry<String, List<CameraItem>> entry : mAllPhotos.entrySet()) {
+            mTitles.add(entry.getKey());
+            mSectionPhotos.add(entry.getValue());
+        }
+        for (List<CameraItem> photoSection : mSectionPhotos) {
+            for (CameraItem cameraItem : photoSection) {
+                items.add(cameraItem);
+            }
+        }
+        initOther();
+        notifyDataSetChanged();
+    }
+
+    public void initOther() {
+    }
+
+    @Override
+    protected String getSectionHeaderTitle(int section) {
+        return mTitles.get(section);
+    }
+
+    @Override
+    protected int getSectionCount() {
+        return Format.isEmpty(mTitles) ? 0 : mTitles.size();
+    }
+
+    @Override
+    protected int getItemCountForSection(int section) {
+        return Format.isEmpty(mSectionPhotos) ? 0 : mSectionPhotos.get(section).size();
+    }
+
+    public void setLongClickListener(View.OnLongClickListener clickListener) {
+        this.longClickListener = clickListener;
+    }
+
+    public void setClickListener(View.OnClickListener clickListener) {
+        this.clickListener = clickListener;
+    }
+
+    @Override
+    public List<Float> getPercents() {
+        return mPresenter.getPercents();
+    }
+
+    @Override
+    public List<String> getTitles() {
+        return mPresenter.getTimelineTags();
+    }
+
+    /**
+     * 单选
+     */
+    public void setSelected(int position) {
+        CameraItem cameraItem = items.get(getDataPositionByView(position));
+        boolean status = cameraItem.isSelected();
+        cameraItem.setSelected(!status);
+        mPresenter.selectPhoto(cameraItem);
+        notifyItemChanged(position);
+        mPresenter.loadPhotos();
+    }
+
+    /**
+     * 滑动选择
+     */
+    public void selectRangeChange(int start, int end, boolean selected) {
+        if (start < 0 || end >= items.size() + mSectionPhotos.size()) {
+            return;
+        }
+        for (int i = start; i <= end; i++) {
+            if (isSectionItem(i)) {
+                return;
+            }
+            CameraItem model = getItem(getDataPositionByView(i));
+            model.setSelected(selected);
+            mPresenter.selectPhoto(model);
+            notifyItemChanged(i);
+        }
+    }
+
+    /**
+     * 获取数据
+     */
+    public CameraItem getItem(int i) {
+        return items.get(i);
+    }
+
+    /**
+     * 由列表位置得到数据位置
+     */
+    public int getDataPositionByView(int position) {
+        int dataPosition = position - getSection(position) - 1;
+        return dataPosition < 0 ? 0 : dataPosition;
+    }
+
+    /**
+     * 根据列表物理位置返回此位置所属Section
+     */
+    public int getSection(int position) {
+        int section = 0;
+        int sum = 0;
+        for (List<CameraItem> photoSection : mSectionPhotos) {
+            sum += photoSection.size() + 1;
+            if (position < sum) {
+                break;
+            }
+            section++;
+        }
+        return section;
+    }
+
+    /**
+     * 当前位置是否为header
+     */
+    private boolean isSectionItem(int position) {
+        int sum = 0;
+        for (List<CameraItem> photoSection : mSectionPhotos) {
+            sum += photoSection.size() + 1;
+            if (position == sum) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    /**
+     * 获取指定分组header的位置
+     */
+    public int getHeaderPosition(int section) {
+        int sum = 0;
+        for (int i = 0; i < section; i++) {
+            List<CameraItem> photoSection = mSectionPhotos.get(i);
+            sum += photoSection.size() + 1;
+        }
+        return sum;
+    }
+
+    @Override
+    public String getSectionTitle(int position) {
+        return getSectionHeaderTitle(getSection(position));
+    }
+
+    /*判断当前部分是否全选*/
+    public boolean istextSelect2(int section) {
+        List<CameraItem> selectSection = mSectionPhotos.get(section);
+        boolean istextSelect = true;
+        if (istextSelect) {
+            for (CameraItem cameraItem : selectSection) {
+                boolean status = cameraItem.isSelected();
+                Log.d("whj", "istextSelect: status" + status);
+                if (!status) istextSelect = false;
+            }
+        }
+        return istextSelect;
+    }
+
+    /*标题选择的处理*/
+    public void selectconctrol(boolean isselect, int section) {
+        List<CameraItem> selectSection = mSectionPhotos.get(section);
+        int sum = 0;//遍历开始的position
+        int select = 0;//遍历的次数
+//        Log.d("whj", "selectconctrol: START");
+        for (int i = 0; i < section; i++) {
+            sum += mSectionPhotos.get(i).size() + 1;
+//            Log.d("whj", "selectconctrol: sum" + sum);
+        }
+        select = selectSection.size();
+//        Log.d("whj", "selectconctrol: select" + select);
+        while (select != 0) {
+            ++sum;
+            CameraItem cameraItem = items.get(getDataPositionByView(sum));
+            cameraItem.setSelected(isselect);
+            mPresenter.selectPhoto(cameraItem);
+            notifyItemChanged(sum);
+            select--;
+//            Log.d("whj", "selectconctrol: sum" + sum + "\tselect" + select);
+        }
+    }
+   /*判断当前部分是否全选*/
+    public boolean istextSelect(int section) {
+        List<CameraItem> selectSection = mSectionPhotos.get(section);
+        boolean istextSelect = true;
+        if (istextSelect) {
+            for (CameraItem cameraItem : selectSection) {
+                boolean status = cameraItem.isSelected();
+                Log.d("whj", "istextSelect: status" + status);
+                if (!status) istextSelect = false;
+            }
+        }
+        return istextSelect;
+    }
+    @Override
+    protected HeaderViewHolder onCreateSectionHeaderViewHolder(ViewGroup parent, int viewType) {
+        LayoutInflater inflater = LayoutInflater.from(parent.getContext());
+        View view = inflater.inflate(getLayoutResource(), parent, false);
+        final HeaderViewHolder holder = new HeaderViewHolder(view, getTitleTextID(), getTitleTextSelectID());
+        return holder;
+    }
+
+    @Override
+    protected void onBindSectionHeaderViewHolder(final HeaderViewHolder holder, final int section) {
+         String title = getSectionHeaderTitle(section);
+        if(mPresenter.getViewType()== GooglePhotoActivity.ViewType.DAY){
+        if(IsToday(title)){title="ToDay";}else if (IsYesterday(title))title="YesterDay";}
+        holder.render(title);
+        if (State.SelectState) {
+            holder.textSelct.setVisibility(View.VISIBLE);
+            if (istextSelect2(section)) holder.textSelct.setSelected(true);
+            else holder.textSelct.setSelected(false);
+        } else holder.textSelct.setVisibility(View.GONE);
+        holder.textSelct.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                holder.textSelct.setSelected(!holder.textSelct.isSelected());
+                selectconctrol(holder.textSelct.isSelected(), section);
+//                Log.d("whj", "onClick: section" + section + "\t" + !holder.textSelct.isSelected());
+            }
+        });
+    }
+    public static boolean IsToday(String day){
+
+        Calendar pre = Calendar.getInstance();
+        Date predate = new Date(System.currentTimeMillis());
+        pre.setTime(predate);
+        Calendar cal = Calendar.getInstance();
+        try {
+            Date date = getDateFormat().parse(day);
+            cal.setTime(date);
+        }catch (ParseException e){
+            e.printStackTrace();
+        }
+        if (cal.get(Calendar.YEAR) == (pre.get(Calendar.YEAR))) {
+            int diffDay = cal.get(Calendar.DAY_OF_YEAR)
+                    - pre.get(Calendar.DAY_OF_YEAR);
+
+            if (diffDay == 0) {
+                return true;
+            }
+        }
+        return false;
+    }
+    public static boolean IsYesterday(String day) {
+
+        Calendar pre = Calendar.getInstance();
+        Date predate = new Date(System.currentTimeMillis());
+        pre.setTime(predate);
+
+        Calendar cal = Calendar.getInstance();
+        try {
+            Date date = getDateFormat().parse(day);
+            cal.setTime(date);
+        }catch (ParseException e){
+            e.printStackTrace();
+        }
+
+        if (cal.get(Calendar.YEAR) == (pre.get(Calendar.YEAR))) {
+            int diffDay = cal.get(Calendar.DAY_OF_YEAR)
+                    - pre.get(Calendar.DAY_OF_YEAR);
+
+            if (diffDay == -1) {
+                return true;
+            }
+        }
+        return false;
+    }
+    public static SimpleDateFormat getDateFormat() {
+        if (null == DateLocal.get()) {
+            DateLocal.set(new SimpleDateFormat("yyyy-MM-dd", Locale.CHINA));
+        }
+        return DateLocal.get();
+    }
+    private static ThreadLocal<SimpleDateFormat> DateLocal = new ThreadLocal<SimpleDateFormat>();
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/ui/adapter/AlbumPhotoAdapter.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/ui/adapter/AlbumPhotoAdapter.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/ui/adapter/AlbumPhotoAdapter.java	(revision 1020)
@@ -0,0 +1,119 @@
+package com.gallery.tclgallery.ui.adapter;
+
+import android.content.Context;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.BaseAdapter;
+import android.widget.ImageView;
+import android.widget.TextView;
+
+import com.bumptech.glide.Glide;
+import com.gallery.tclgallery.R;
+import com.gallery.tclgallery.bean.LocalMediaBean;
+
+import java.util.ArrayList;
+
+/**
+ * Created by liddo on 2017/10/18.
+ */
+
+public class AlbumPhotoAdapter extends BaseAdapter{
+
+    private Context mContext;
+    private ArrayList<LocalMediaBean> localMediaBeen;
+    private LayoutInflater inflater;
+    private ArrayList<String> videoType;
+    private boolean isAlbumSelected;
+
+    public AlbumPhotoAdapter(Context context){
+        mContext = context;
+        localMediaBeen = new ArrayList<>();
+        inflater = LayoutInflater.from(context);
+        videoType = new ArrayList<>();
+        videoType.add("avi");
+        videoType.add("rmvb");
+        videoType.add("3gp");
+        videoType.add("mp4");
+    }
+
+    @Override
+    public int getCount() {
+        return localMediaBeen.size();
+    }
+
+    @Override
+    public Object getItem(int i) {
+        return localMediaBeen.get(i);
+    }
+
+    @Override
+    public long getItemId(int i) {
+        return i;
+    }
+
+    @Override
+    public View getView(int i, View view, ViewGroup viewGroup) {
+        ViewHolder holder;
+        if (view == null) {
+            holder = new ViewHolder();
+            view = inflater.inflate(R.layout.album_photo_item, viewGroup, false);
+            holder.photo = (ImageView)view.findViewById(R.id.album_photo_image);
+            holder.selectImage = (ImageView)view.findViewById(R.id.album_photo_selected);
+            holder.videoIcon = (ImageView) view.findViewById(R.id.album_video_icon);
+            holder.duration = (TextView)view.findViewById(R.id.video_duration);
+            view.setTag(holder);
+        } else {
+            holder = (ViewHolder) view.getTag();
+        }
+
+        if (videoType.contains(localMediaBeen.get(i).getType())){
+            holder.videoIcon.setVisibility(View.VISIBLE);
+            holder.duration.setText("11:00");
+        } else {
+            holder.videoIcon.setVisibility(View.GONE);
+            holder.duration.setText("");
+        }
+
+        if (isAlbumSelected){
+            holder.selectImage.setVisibility(View.VISIBLE);
+            if (localMediaBeen.get(i).isChecked()) {
+                holder.selectImage.setImageLevel(1);
+            } else {
+                holder.selectImage.setImageLevel(0);
+            }
+        } else {
+            holder.selectImage.setVisibility(View.GONE);
+        }
+        Glide.with(mContext)
+                .load("file://" + localMediaBeen.get(i).getLocal_path())
+                .asBitmap()
+                .thumbnail(0.1f)
+                .into(holder.photo);
+        return view;
+    }
+
+    class ViewHolder {
+        ImageView photo;
+        ImageView selectImage;
+        ImageView videoIcon;
+        TextView duration;
+    }
+
+    public ArrayList<LocalMediaBean> getLocalMediaBeen() {
+        return localMediaBeen;
+    }
+
+    public void setLocalMediaBeen(ArrayList<LocalMediaBean> localMediaBeen) {
+        this.localMediaBeen.clear();
+        this.localMediaBeen.addAll(localMediaBeen);
+    }
+
+    public boolean isAlbumSelected() {
+        return isAlbumSelected;
+    }
+
+    public void setAlbumSelected(boolean albumSelected) {
+        isAlbumSelected = albumSelected;
+    }
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/ui/adapter/YearViewAdapter.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/ui/adapter/YearViewAdapter.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/ui/adapter/YearViewAdapter.java	(revision 1020)
@@ -0,0 +1,142 @@
+package com.gallery.tclgallery.ui.adapter;
+
+import android.support.v7.widget.RecyclerView;
+import android.util.Log;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+
+
+import com.gallery.tclgallery.R;
+import com.gallery.tclgallery.bean.CameraItem;
+import com.gallery.tclgallery.listener.OnGridViewClickListener;
+import com.gallery.tclgallery.sectionedrecyclerviewadapter.SimpleSectionedAdapter;
+import com.gallery.tclgallery.utils.Format;
+import com.gallery.tclgallery.viewholder.item.YearViewItemHolder;
+
+import java.util.ArrayList;
+import java.util.LinkedHashMap;
+import java.util.LinkedList;
+import java.util.List;
+import java.util.Map;
+
+/**
+ * 年视图Adapter
+ * Created by jiaojie.jia on 2017/3/21.
+ */
+
+public class YearViewAdapter extends SimpleSectionedAdapter<YearViewItemHolder> {
+
+    private List<String> mMonths;
+    private LinkedHashMap<String, List<String>> mDayOfMonths;
+    private LinkedHashMap<String, LinkedHashMap<String, List<CameraItem>>> mMonthsPhotos;
+    protected List<List<CameraItem>> mSectionPhotos;
+    protected OnGridViewClickListener clickListener;
+
+    public void setClickListener(OnGridViewClickListener clickListener) {
+        this.clickListener = clickListener;
+    }
+
+    public void setAllPhotos(LinkedHashMap<String, List<CameraItem>> allPhotos) {
+        mMonths = new ArrayList<>();
+        mDayOfMonths = new LinkedHashMap<>();
+        mMonthsPhotos = new LinkedHashMap<>();
+        mSectionPhotos=new LinkedList<>();
+        for (Map.Entry<String, List<CameraItem>> entry : allPhotos.entrySet()) {
+            mSectionPhotos.add(entry.getValue());
+        }
+        for(Map.Entry<String, List<CameraItem>> entry: allPhotos.entrySet()) {
+            String key = entry.getKey();
+            List<CameraItem> value = entry.getValue();
+            String months = key.substring(0,10);
+            if(!mMonthsPhotos.containsKey(months)) {
+                List<String> day = new ArrayList<>();
+                day.add(key);
+                mDayOfMonths.put(months, day);
+                LinkedHashMap<String, List<CameraItem>> oneMonths = new LinkedHashMap<>();
+                oneMonths.put(key, value);
+                mMonths.add(months);
+                mMonthsPhotos.put(months, oneMonths);
+            } else {
+                List<String> day = mDayOfMonths.get(months);
+                day.add(key);
+                LinkedHashMap<String, List<CameraItem>> oneYear = mMonthsPhotos.get(months);
+                oneYear.put(key, value);
+            }
+        }
+        notifyDataSetChanged();
+    }
+
+    public int getMonthPosition(int position) {
+        int section = 0;
+        int sum = 0;
+        for(Map.Entry<String, List<String>> photoSection: mDayOfMonths.entrySet()) {
+            sum += photoSection.getValue().size() + 1;
+            if(position < sum) {
+                break;
+            }
+            section++;
+        }
+        int monthPosition = position - section - 1;
+        monthPosition = monthPosition < 0 ? 0 : monthPosition;
+        return monthPosition;
+    }
+
+    @Override
+    protected String getSectionHeaderTitle(int section) {
+        return mMonths.get(section);//年的titile
+    }
+
+    @Override
+    protected int getSectionCount() {
+        return Format.isEmpty(mMonths) ? 0 : mMonths.size();
+    }
+
+    @Override
+    protected int getItemCountForSection(int section) {
+        String key = mMonths.get(section);
+        int i = Format.isEmpty(mMonthsPhotos) ? 0 : mMonthsPhotos.get(key).size();
+        Log.i("667", "getItemCountForSection: " + i);
+        return 1;
+    }
+
+    @Override
+    protected YearViewItemHolder onCreateItemViewHolder(ViewGroup parent, int viewType) {
+        LayoutInflater inflater = LayoutInflater.from(parent.getContext());
+        View view = inflater.inflate(R.layout.holder_year_item, parent, false);
+        YearViewItemHolder holder = new YearViewItemHolder(view);
+        holder.setClickListener(clickListener);
+        return holder;
+    }
+
+    @Override
+    protected void onBindItemViewHolder(YearViewItemHolder holder, int section, int position) {
+        if(holder.itemView==null){
+            holder.itemView.setTag(position);
+        }else {
+            holder.itemView.getTag();
+        }
+        String MonthsKey = mMonths.get(section);
+        String DayKey = mDayOfMonths.get(MonthsKey).get(position);
+//        List<CameraItem> cameraItems = mMonthsPhotos.get(MonthsKey).get(DayKey);
+        List<CameraItem> cameraItems = mSectionPhotos.get(section);
+        Log.d("ccc", "onBindItemViewHolder: start");
+        for (CameraItem cameraItem1:cameraItems){
+            int i=0;
+            Log.d("ccc", "onBindItemViewHolder: CameraItem"+i+"  =  "+cameraItem1.getPath());
+            i++;
+        }
+        Log.d("ccc", "onBindItemViewHolder: end");
+        holder.setData(DayKey, cameraItems);
+        Log.d("fff", "onBindItemViewHolder: "+cameraItems.size()+"\tMonthsKey = "+MonthsKey+"\t DayKey = "+DayKey+"\tcameraItems = "+cameraItems.size()+"\tsection = "+section+"\tposition"+position+"\ncameraItems"+cameraItems);
+    }
+
+    @Override
+    public void onViewRecycled(RecyclerView.ViewHolder holder) {
+        super.onViewRecycled(holder);
+        if(holder instanceof YearViewItemHolder) {
+            YearViewItemHolder yearViewItemHolder = (YearViewItemHolder) holder;
+            yearViewItemHolder.removeView();
+        }
+    }
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/ui/adapter/AlbumFolderAdapter.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/ui/adapter/AlbumFolderAdapter.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/ui/adapter/AlbumFolderAdapter.java	(revision 1020)
@@ -0,0 +1,135 @@
+package com.gallery.tclgallery.ui.adapter;
+
+import android.content.Context;
+import android.util.Log;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.BaseAdapter;
+import android.widget.ImageView;
+import android.widget.TextView;
+
+
+import com.bumptech.glide.Glide;
+import com.bumptech.glide.load.engine.DiskCacheStrategy;
+import com.gallery.tclgallery.R;
+import com.gallery.tclgallery.bean.AlbumTag;
+
+import java.util.ArrayList;
+
+/**
+ * Created by liddo on 2017/9/22.
+ */
+
+public class AlbumFolderAdapter extends BaseAdapter{
+
+    private final String TAG = "AlbumFolderAdapter";
+    private ArrayList<AlbumTag> arrayList;
+    private ArrayList<AlbumTag> visibleList;
+    private ArrayList<AlbumTag> invisibleList;
+    private AlbumTag othersAlbum;
+    private LayoutInflater inflater;
+    private Context mContext;
+    private boolean isAlbumSelected = false;
+    private boolean isAlbumSelectedNull = false;
+
+    public AlbumFolderAdapter(Context context) {
+        inflater = LayoutInflater.from(context);
+        visibleList = new ArrayList<>();
+        invisibleList = new ArrayList<>();
+        arrayList = new ArrayList<>();
+        othersAlbum = new AlbumTag();
+        mContext = context;
+    }
+
+    @Override
+    public int getCount() {
+        return arrayList.size();
+    }
+
+    @Override
+    public Object getItem(int i) {
+            return arrayList.get(i);
+    }
+
+    @Override
+    public long getItemId(int i) {
+        return i;
+    }
+
+    @Override
+    public View getView(int i, View view, ViewGroup viewGroup) {
+        Holder holder;
+        if (view == null) {
+            holder = new Holder();
+            view = inflater.inflate(R.layout.album_adapter_item, viewGroup, false);
+            holder.image = (ImageView)view.findViewById(R.id.image);
+            holder.selectImage = (ImageView)view.findViewById(R.id.album_selected);
+            holder.name = (TextView)view.findViewById(R.id.album_name);
+            holder.count = (TextView)view.findViewById(R.id.album_image_count);
+            view.setTag(holder);
+        } else {
+            holder = (Holder) view.getTag();
+        }
+
+        holder.name.setText(arrayList.get(i).getName());
+        holder.count.setText(""+arrayList.get(i).getItem_count());
+        if (isAlbumSelected){
+            if (i != arrayList.size()-1) {
+                holder.selectImage.setVisibility(View.VISIBLE);
+                if (arrayList.get(i).isChecked()) {
+                    holder.selectImage.setImageLevel(1);
+                } else {
+                    holder.selectImage.setImageLevel(0);
+                }
+            } else {
+                // other album cannot be selected
+                holder.selectImage.setVisibility(View.GONE);
+            }
+        } else {
+            holder.selectImage.setVisibility(View.GONE);
+        }
+        if (arrayList.get(i).getItem_count() > 0 && i<getCount()-1 && arrayList.get(i).getMediaBeans().size()>0) {
+            Glide.with(mContext)
+                    .load("file://" + arrayList.get(i).getMediaBeans().get(0).getLocal_path())
+                    .thumbnail(0.1f)
+                    .into(holder.image);
+        } else {
+            holder.image.setImageResource(R.drawable.album_default_loading_pic);
+        }
+        return view;
+    }
+
+    public class Holder {
+        ImageView image;
+        ImageView selectImage;
+        TextView name;
+        TextView count;
+    }
+
+    public void setArrayList(ArrayList<AlbumTag> arrayList) {
+        this.arrayList.addAll(arrayList);
+        for (AlbumTag folder: arrayList) {
+            if (folder.isChecked()) {
+                Log.i("dongdong",folder.getName() + "is selected");
+                isAlbumSelected = true;
+            }
+        }
+    }
+
+    public boolean isAlbumSelected() {
+        return isAlbumSelected;
+    }
+
+    public void setAlbumSelected(boolean albumSelected) {
+        isAlbumSelected = albumSelected;
+    }
+
+    public boolean isAlbumSelectedNull() {
+        return isAlbumSelectedNull;
+    }
+
+    public void setAlbumSelectedNull(boolean albumSelectedNull) {
+        isAlbumSelectedNull = albumSelectedNull;
+    }
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/ui/adapter/OtherViewAdapter.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/ui/adapter/OtherViewAdapter.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/ui/adapter/OtherViewAdapter.java	(revision 1020)
@@ -0,0 +1,100 @@
+package com.gallery.tclgallery.ui.adapter;
+
+import android.support.v7.widget.RecyclerView;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+
+
+import com.gallery.tclgallery.R;
+import com.gallery.tclgallery.bean.CameraItem;
+import com.gallery.tclgallery.contract.GooglePhotoContract;
+import com.gallery.tclgallery.fastscroll.SectionTitleProvider;
+import com.gallery.tclgallery.utils.Format;
+import com.gallery.tclgallery.viewholder.item.OtherViewItemHolder;
+
+import java.util.List;
+
+/**
+ * 除相册文件夹的其他Adapter
+ * Created by jiaojie.jia on 2017/3/23.
+ */
+
+public class OtherViewAdapter extends RecyclerView.Adapter implements SectionTitleProvider {
+
+    private List<CameraItem> mCameraItems;             // 照片集合（除相册文件夹，其他不分组）
+
+    private View.OnLongClickListener longClickListener;
+    private View.OnClickListener clickListener;
+
+    private GooglePhotoContract.Presenter mPresenter;
+
+    public void setPresenter(GooglePhotoContract.Presenter presenter) {
+        mPresenter = presenter;
+    }
+
+    public void setData(List<CameraItem> items) {
+        mCameraItems = items;
+        notifyDataSetChanged();
+    }
+
+    @Override
+    public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
+        LayoutInflater inflater = LayoutInflater.from(parent.getContext());
+        View view = inflater.inflate(R.layout.holder_month_item, parent, false);
+        view.setOnLongClickListener(longClickListener);
+        view.setOnClickListener(clickListener);
+        return new OtherViewItemHolder(view);
+    }
+
+    @Override
+    public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
+        OtherViewItemHolder itemHolder = (OtherViewItemHolder) holder;
+        itemHolder.setData(mCameraItems.get(position));
+    }
+
+    @Override
+    public int getItemCount() {
+        return Format.isEmpty(mCameraItems) ? 0 : mCameraItems.size();
+    }
+
+    public void setLongClickListener(View.OnLongClickListener clickListener) {
+        this.longClickListener = clickListener;
+    }
+
+    public void setClickListener(View.OnClickListener clickListener) {
+        this.clickListener = clickListener;
+    }
+
+    /** 单选 */
+    public void setSelected(int position) {
+        CameraItem cameraItem = mCameraItems.get(position);
+        boolean status = cameraItem.isSelected();
+        cameraItem.setSelected(!status);
+        mPresenter.selectPhoto(cameraItem);
+        notifyItemChanged(position);
+    }
+
+    /** 滑动选择 */
+    public void selectRangeChange(int start, int end, boolean selected) {
+        if (start < 0 || end >= mCameraItems.size()) {
+            return;
+        }
+        for (int i = start; i <= end; i++) {
+            CameraItem model = getItem(i);
+            model.setSelected(selected);
+            mPresenter.selectPhoto(model);
+            notifyItemChanged(i);
+        }
+    }
+
+    /** 获取数据 */
+    public CameraItem getItem(int i) {
+        return mCameraItems.get(i);
+    }
+
+    @Override
+    public String getSectionTitle(int position) {
+        return null;
+    }
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/ui/adapter/MonthViewAdapter.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/ui/adapter/MonthViewAdapter.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/ui/adapter/MonthViewAdapter.java	(revision 1020)
@@ -0,0 +1,52 @@
+package com.gallery.tclgallery.ui.adapter;
+
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+
+
+import com.gallery.tclgallery.R;
+import com.gallery.tclgallery.bean.CameraItem;
+import com.gallery.tclgallery.ui.adapter.base.BaseViewAdapter;
+import com.gallery.tclgallery.viewholder.item.MonthViewItemHolder;
+
+import java.util.ArrayList;
+import java.util.List;
+
+
+/**
+ * 月视图Adapter
+ * Created by jiaojie.jia on 2017/3/16.
+ */
+
+public class MonthViewAdapter extends BaseViewAdapter<MonthViewItemHolder> {
+
+    @Override
+    protected MonthViewItemHolder onCreateItemViewHolder(ViewGroup parent, int viewType) {
+        LayoutInflater inflater = LayoutInflater.from(parent.getContext());
+        View view = inflater.inflate(R.layout.holder_month_item, parent, false);
+        view.setOnLongClickListener(longClickListener);
+        view.setOnClickListener(clickListener);
+        return new MonthViewItemHolder(view);
+    }
+
+    @Override
+    protected void onBindItemViewHolder(MonthViewItemHolder holder, int section, int position) {
+        CameraItem cameraItem = mSectionPhotos.get(section).get(position);
+        holder.setData(cameraItem);
+    }
+
+    @Override
+    public void initOther() {
+        int total = items.size() + mTitles.size();
+        float cursor = 0;
+        List<Float> percents = new ArrayList<>(mTitles.size());
+        for(List<CameraItem> photoSection: mSectionPhotos) {
+            percents.add(cursor / total);
+            cursor += photoSection.size() + 1;
+//            Log.d("whj", "initOther: total = "+total+"\tcursor = "+cursor+"\tphotoSection.size() = "+photoSection.size());
+        }
+        mPresenter.setTimelineData(percents, mTitles);
+    }
+
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/ui/adapter/CollageViewAdapter.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/ui/adapter/CollageViewAdapter.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/ui/adapter/CollageViewAdapter.java	(revision 1020)
@@ -0,0 +1,333 @@
+package com.gallery.tclgallery.ui.adapter;
+
+import android.support.annotation.NonNull;
+import android.util.Log;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ImageView;
+import android.widget.RelativeLayout;
+import android.widget.TextView;
+
+import com.alibaba.android.vlayout.LayoutHelper;
+import com.alibaba.android.vlayout.VirtualLayoutManager;
+import com.gallery.tclgallery.R;
+import com.gallery.tclgallery.bean.CameraItem;
+import com.gallery.tclgallery.bean.State;
+import com.gallery.tclgallery.contract.GooglePhotoContract;
+import com.gallery.tclgallery.sectionedrecyclerviewadapter.HeaderViewHolder;
+import com.gallery.tclgallery.ui.adapter.base.BaseViewAdapter;
+import com.gallery.tclgallery.ui.adapter.base.VirtualLayoutAdapter;
+import com.gallery.tclgallery.utils.Format;
+import com.gallery.tclgallery.viewholder.item.CollageViewItemHolder;
+
+import java.util.ArrayList;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
+
+/**
+ * Created by Administrator on 2017/9/27.*/
+
+
+public class CollageViewAdapter extends VirtualLayoutAdapter<CollageViewItemHolder> {
+    private  ImageView imgItem;        // 照片图片
+    private  ImageView imgSelect;      // 右上角选中标识图片
+    private  ImageView imageVideo;
+    private  TextView duration;
+    private LinkedHashMap<String, List<CameraItem>> mAllPhotos;       // key-日期（月或日), value-该日期下的所有照片
+
+    protected List<String> mTitles;                             // 日期集合
+    protected List<List<CameraItem>> mSectionPhotos;      // 照片集合
+    protected List<CameraItem> items;                       // 把上面照片集合转成一维集合，方便取值
+
+    protected View.OnLongClickListener longClickListener;
+    protected View.OnClickListener clickListener;
+
+    protected GooglePhotoContract.Presenter mPresenter;
+        private List<String> mMonths;       // 月集合
+    View view;
+
+    @NonNull
+    protected VirtualLayoutManager mLayoutManager;
+
+    public CollageViewAdapter(@NonNull VirtualLayoutManager layoutManager) {
+        super();
+        Log.d("666", "CollageViewAdapter: 4");
+        this.mLayoutManager = layoutManager;
+    }
+
+    public void setLayoutHelpers(List<LayoutHelper> helpers) {
+        Log.d("666", "CollageViewAdapter: 5");
+        this.mLayoutManager.setLayoutHelpers(helpers);
+    }
+
+    @NonNull
+    public List<LayoutHelper> getLayoutHelpers() {
+        Log.d("666", "CollageViewAdapter: 6");
+        return this.mLayoutManager.getLayoutHelpers();
+    }
+
+
+
+
+    public void setPresenter(GooglePhotoContract.Presenter presenter) {
+        mPresenter = presenter;
+    }
+
+   /* public void setAllPhotos(LinkedHashMap<String, List<CameraItem>> allPhotos) {
+        mAllPhotos = allPhotos;
+        mTitles = new ArrayList<>(mAllPhotos.size());
+        mSectionPhotos = new ArrayList<>(mAllPhotos.size());
+        items = new ArrayList<>();
+        for (Map.Entry<String, List<CameraItem>> entry : mAllPhotos.entrySet()) {
+            mTitles.add(entry.getKey());
+            mSectionPhotos.add(entry.getValue());
+        }
+        for (List<CameraItem> photoSection : mSectionPhotos) {
+            for (CameraItem cameraItem : photoSection) {
+                items.add(cameraItem);
+            }
+        }
+        Log.d("333", "setAllPhotos: ");
+        initOther();
+        notifyDataSetChanged();
+    }*/
+        @Override
+        protected CollageViewItemHolder onCreateItemViewHolder(ViewGroup parent, int viewType) {
+            Log.d("666", "onCreateItemViewHolder: 7");
+            LayoutInflater inflater = LayoutInflater.from(parent.getContext());
+            View view = inflater.inflate(R.layout.holder_month_item, parent, false);
+            view.setOnLongClickListener(longClickListener);
+            view.setOnClickListener(clickListener);
+            imgItem = (ImageView) view.findViewById(R.id.iv_photo);
+            imgSelect = (ImageView) view.findViewById(R.id.iv_select);
+            imageVideo = (ImageView) view.findViewById(R.id.iv_video);
+            duration = (TextView) view.findViewById(R.id.video_duration);
+            return new CollageViewItemHolder(view);
+        }
+
+        @Override
+        protected void onBindItemViewHolder(CollageViewItemHolder holder, int section, int position) {
+           /* Log.d("666", "onBindItemViewHolder: 8");
+            VirtualLayoutManager.LayoutParams layoutParams = new VirtualLayoutManager.LayoutParams(
+                    ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
+            holder.itemView.setLayoutParams(layoutParams);
+            for (Integer a :CollageView.collageView.one){
+                if(a==position){layoutParams.width=UIUtils.getScreenWidth();layoutParams.height=UIUtils.getScreenHeight()/4;}
+            } for (Integer a :CollageView.collageView.two){
+                if(a==position){layoutParams.width=UIUtils.getScreenWidth()*2/3;layoutParams.height=UIUtils.getScreenHeight()/4;}
+            } for (Integer a :CollageView.collageView.three){
+                if(a==position){layoutParams.width=UIUtils.getScreenWidth()/3;layoutParams.height=UIUtils.getScreenHeight()/4;}
+            }
+            Log.d("333", "onBindItemViewHolder: layoutParams.width  ==  "+layoutParams.width+"\tlayoutParams.height  ==  "+layoutParams.height);*/
+            CameraItem cameraItem = mSectionPhotos.get(section).get(position);
+            holder.setData(cameraItem);
+        }
+    @Override
+    public int getItemCount() {
+        Log.d("666", "CollageViewAdapter: 9");
+        List<LayoutHelper> helpers = getLayoutHelpers();
+        if (helpers == null) {
+            return 0;
+        }
+        int count = 0;
+        for (int i = 0, size = helpers.size(); i < size; i++) {
+            count += helpers.get(i).getItemCount();
+        }
+        return count;
+    }
+
+/*@Override
+        public void initOther() {
+            mMonths = new ArrayList<>();
+            List<Float> percents = new ArrayList<>(mTitles.size());
+            for(String title: mTitles) {
+                String month = title.substring(0, 8);
+                if(!mMonths.contains(month)) {
+                    mMonths.add(month);
+                }
+            }
+            mPresenter.setTimelineData(percents, mTitles);
+        }*/
+
+
+/**
+         * 由日视图中的 position 得到在月视图中所属 Section
+         * @param position
+         * @return*/
+
+
+        public int getSectionInMonthView(int position) {
+            Log.d("666", "CollageViewAdapter: 10");
+            String title = getSectionTitle(position);
+            int section = 0;
+            for(String month: mMonths) {
+                if(title.startsWith(month)) {
+                    break;
+                }
+                section++;
+            }
+            return section;
+        }
+
+    @Override
+    public List<Float> getPercents() {
+        return mPresenter.getPercents();
+    }
+
+    @Override
+    public List<String> getTitles() {
+        return mPresenter.getTimelineTags();
+    }
+    @Override
+    protected String getSectionHeaderTitle(int section) {
+        return mTitles.get(section);
+    }
+
+    @Override
+    protected int getSectionCount() {
+        return Format.isEmpty(mTitles) ? 0 : mTitles.size();
+    }
+
+    @Override
+    protected int getItemCountForSection(int section) {
+        return Format.isEmpty(mSectionPhotos) ? 0 : mSectionPhotos.get(section).size();
+    }
+
+    public void setLongClickListener(View.OnLongClickListener clickListener) {
+        this.longClickListener = clickListener;
+    }
+
+    public void setClickListener(View.OnClickListener clickListener) {
+        this.clickListener = clickListener;
+    }
+    @Override
+    public String getSectionTitle(int position) {
+        return getSectionHeaderTitle(getSection(position));
+
+    }
+/**
+     * 单选*/
+
+
+    public void setSelected(int position) {
+        CameraItem cameraItem = items.get(getDataPositionByView(position));
+        boolean status = cameraItem.isSelected();
+        cameraItem.setSelected(!status);
+        mPresenter.selectPhoto(cameraItem);
+        notifyItemChanged(position);
+        mPresenter.loadPhotos();
+    }
+
+/**
+     * 滑动选择*/
+
+
+    public void selectRangeChange(int start, int end, boolean selected) {
+        if (start < 0 || end >= items.size() + mSectionPhotos.size()) {
+            return;
+        }
+        for (int i = start; i <= end; i++) {
+            if (isSectionItem(i)) {
+                return;
+            }
+            CameraItem model = getItem(getDataPositionByView(i));
+            model.setSelected(selected);
+            mPresenter.selectPhoto(model);
+            notifyItemChanged(i);
+        }
+    }
+
+/**
+     * 获取数据*/
+
+
+    public CameraItem getItem(int i) {
+        return items.get(i);
+    }
+
+/**
+     * 由列表位置得到数据位置*/
+
+
+    private int getDataPositionByView(int position) {
+        int dataPosition = position - getSection(position) - 1;
+        return dataPosition < 0 ? 0 : dataPosition;
+    }
+
+/**
+     * 根据列表物理位置返回此位置所属Section*/
+
+
+    private int getSection(int position) {
+        int section = 0;
+        int sum = 0;
+        for (List<CameraItem> photoSection : mSectionPhotos) {
+            sum += photoSection.size() + 1;
+            if (position < sum) {
+                break;
+            }
+            section++;
+        }
+        return section;
+    }
+
+/**
+     * 当前位置是否为header*/
+
+
+    private boolean isSectionItem(int position) {
+        int sum = 0;
+        for (List<CameraItem> photoSection : mSectionPhotos) {
+            sum += photoSection.size() + 1;
+            if (position == sum) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+/**
+     * 获取指定分组header的位置*/
+
+
+    public int getHeaderPosition(int section) {
+        int sum = 0;
+        for (int i = 0; i < section; i++) {
+            List<CameraItem> photoSection = mSectionPhotos.get(i);
+            sum += photoSection.size() + 1;
+        }
+        return sum;
+    }
+    @Override
+    protected HeaderViewHolder onCreateSectionHeaderViewHolder(ViewGroup parent, int viewType) {
+        LayoutInflater inflater = LayoutInflater.from(parent.getContext());
+        View view = inflater.inflate(getLayoutResource(), parent, false);
+        final HeaderViewHolder holder = new HeaderViewHolder(view, getTitleTextID(), getTitleTextSelectID());
+        return holder;
+    }
+
+    @Override
+    protected void onBindSectionHeaderViewHolder(final HeaderViewHolder holder, final int section) {
+        final String title = getSectionHeaderTitle(section);
+        holder.render(title);
+        if ( State.SelectState) {
+            holder.textSelct.setVisibility(View.VISIBLE);
+            if (BaseViewAdapter.baseViewAdapter.istextSelect(section)) holder.textSelct.setSelected(true);
+            else holder.textSelct.setSelected(false);
+        } else holder.textSelct.setVisibility(View.GONE);
+        holder.textSelct.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                holder.textSelct.setSelected(!holder.textSelct.isSelected());
+                BaseViewAdapter.baseViewAdapter.selectconctrol(holder.textSelct.isSelected(), section);
+//                Log.d("whj", "onClick: section" + section + "\t" + !holder.textSelct.isSelected());
+            }
+        });
+    }
+
+
+}
+
+
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/ui/adapter/AlbumOtherAdapter.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/ui/adapter/AlbumOtherAdapter.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/ui/adapter/AlbumOtherAdapter.java	(revision 1020)
@@ -0,0 +1,112 @@
+package com.gallery.tclgallery.ui.adapter;
+
+import android.content.Context;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.BaseAdapter;
+import android.widget.ImageView;
+import android.widget.TextView;
+
+import com.bumptech.glide.Glide;
+import com.gallery.tclgallery.R;
+import com.gallery.tclgallery.bean.AlbumTag;
+
+import java.util.ArrayList;
+
+/**
+ * Created by liddo on 2017/10/19.
+ */
+
+public class AlbumOtherAdapter extends BaseAdapter {
+
+    private ArrayList<AlbumTag> arrayList;
+    private LayoutInflater inflater;
+    private Context mContext;
+    private boolean isAlbumSelected = false;
+
+    public AlbumOtherAdapter(Context context) {
+        mContext = context;
+        inflater = LayoutInflater.from(context);
+        arrayList = new ArrayList<>();
+    }
+
+    @Override
+    public long getItemId(int i) {
+        return i;
+    }
+
+    @Override
+    public int getCount() {
+        return arrayList.size();
+    }
+
+    @Override
+    public Object getItem(int i) {
+        return arrayList.get(i);
+    }
+
+    @Override
+    public View getView(int i, View view, ViewGroup viewGroup) {
+        AlbumOtherAdapter.Holder holder;
+        if (view == null) {
+            holder = new AlbumOtherAdapter.Holder();
+            view = inflater.inflate(R.layout.album_adapter_item, viewGroup, false);
+            holder.image = (ImageView)view.findViewById(R.id.image);
+            holder.selectImage = (ImageView)view.findViewById(R.id.album_selected);
+            holder.name = (TextView)view.findViewById(R.id.album_name);
+            holder.count = (TextView)view.findViewById(R.id.album_image_count);
+            view.setTag(holder);
+        } else {
+            holder = (AlbumOtherAdapter.Holder) view.getTag();
+        }
+
+        holder.name.setText(arrayList.get(i).getName());
+        holder.count.setText(""+arrayList.get(i).getItem_count());
+        if (isAlbumSelected){
+            holder.selectImage.setVisibility(View.VISIBLE);
+            if (arrayList.get(i).isChecked()) {
+                holder.selectImage.setImageLevel(1);
+            } else {
+                holder.selectImage.setImageLevel(0);
+            }
+        } else {
+            holder.selectImage.setVisibility(View.GONE);
+        }
+        if (arrayList.get(i).getItem_count() > 0) {
+            Glide.with(mContext)
+                    .load("file://" + arrayList.get(i).getMediaBeans().get(0).getLocal_path())
+                    .asBitmap()
+                    .thumbnail(0.1f)
+                    .into(holder.image);
+        } else {
+            holder.image.setImageResource(R.drawable.album_default_loading_pic);
+        }
+
+        return view;
+    }
+
+    public class Holder {
+        ImageView image;
+        ImageView selectImage;
+        TextView name;
+        TextView count;
+    }
+
+    public ArrayList<AlbumTag> getArrayList() {
+        return arrayList;
+    }
+
+    public void setArrayList(ArrayList<AlbumTag> arrayList) {
+        this.arrayList.clear();
+        this.arrayList.addAll(arrayList);
+    }
+
+    public boolean isAlbumSelected() {
+        return isAlbumSelected;
+    }
+
+    public void setAlbumSelected(boolean albumSelected) {
+        isAlbumSelected = albumSelected;
+    }
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/ui/adapter/GalleryBaseViewAdapter.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/ui/adapter/GalleryBaseViewAdapter.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/ui/adapter/GalleryBaseViewAdapter.java	(revision 1020)
@@ -0,0 +1,41 @@
+package com.gallery.tclgallery.ui.adapter;
+
+import android.support.v4.view.PagerAdapter;
+import android.view.View;
+import android.view.ViewGroup;
+
+import java.io.Serializable;
+import java.util.List;
+
+/**
+ * Created by liddo on 2017/9/27.
+ */
+
+public class GalleryBaseViewAdapter extends PagerAdapter implements Serializable{
+    List<View> views;
+
+    public GalleryBaseViewAdapter(List<View> views) {
+        this.views = views;
+    }
+
+    @Override
+    public boolean isViewFromObject(View view, Object object) {
+        return view == object;
+    }
+
+    @Override
+    public int getCount() {
+        return views.size();
+    }
+
+    @Override
+    public void destroyItem(ViewGroup container, int position, Object object) {
+        container.removeView(views.get(position));
+    }
+
+    @Override
+    public Object instantiateItem(ViewGroup container, int position) {
+        container.addView(views.get(position),0);
+        return views.get(position);
+    }
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/controller/AlbumController.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/controller/AlbumController.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/controller/AlbumController.java	(revision 1020)
@@ -0,0 +1,178 @@
+package com.gallery.tclgallery.controller;
+
+import android.content.Context;
+
+import com.gallery.tclgallery.bean.AlbumTag;
+import com.gallery.tclgallery.bean.LocalMediaBean;
+import com.gallery.tclgallery.bean.LocalMedia_AlbumTag;
+import com.gallery.tclgallery.interfaces.AlbumDao;
+import com.gallery.tclgallery.interfaces.LocalMediaDao;
+import com.gallery.tclgallery.interfaces.LocalMedia_AlbumTagDao;
+import com.gallery.tclgallery.model.AlbumDaoImpl;
+import com.gallery.tclgallery.model.LocalMediaDaoImpl;
+import com.gallery.tclgallery.model.LocalMedia_AlbumTagDaoImpl;
+
+import java.lang.reflect.Array;
+import java.util.ArrayList;
+
+/**
+ * Created by liddo on 2017/10/13.
+ */
+
+public class AlbumController {
+
+    private Context mContext;
+    private AlbumDao albumDao;
+    private LocalMedia_AlbumTagDao media_albumTagDao;
+    private LocalMediaDao localMediaDao;
+
+    public AlbumController(Context context) {
+        mContext = context;
+        albumDao = new AlbumDaoImpl(mContext);
+        media_albumTagDao = new LocalMedia_AlbumTagDaoImpl(mContext);
+        localMediaDao = new LocalMediaDaoImpl(mContext);
+    }
+
+    /**
+     * 创建相册
+     * @param name 相册名
+     * @param localMediaBeen 选择的数据
+     * @param type move / copy
+     * @param originAlbum 原先的相册
+     */
+    public void createAlbum(String name, ArrayList<LocalMediaBean> localMediaBeen,int type, AlbumTag originAlbum){
+        AlbumTag newAlbum = new AlbumTag();
+        int system_time = (int)System.currentTimeMillis();
+        newAlbum.setTag_id(system_time);
+        newAlbum.setName(name);
+        newAlbum.setDisplay_name(name);
+        newAlbum.setType(100); // 自建相册类型
+        newAlbum.setLocal_path("");
+        newAlbum.setLast_update_time(system_time);
+        newAlbum.setItem_count(0);
+        newAlbum.setVisible(1);
+        newAlbum.setDefault_album(0);
+        albumDao.insertAlbumTag(newAlbum);
+
+        if (type == 0) {
+            // copy to album
+            copyToAlbum(localMediaBeen,newAlbum,originAlbum);
+        } else {
+            // move to album
+            moveToAlbum(localMediaBeen,newAlbum,originAlbum);
+        }
+    }
+
+    /**
+     *  Copy到相册
+     * @param localMediaBeen 选择的数据
+     * @param album 相册
+     */
+    public void copyToAlbum(ArrayList<LocalMediaBean> localMediaBeen, AlbumTag album, AlbumTag originAlbum){
+        //直接创建关系类，写入数据库
+        for (LocalMediaBean localMediaBean:localMediaBeen) {
+            // 更新相册
+            int item_count = album.getItem_count();
+            album.setLast_update_time((int)System.currentTimeMillis());
+            album.setItem_count(item_count+1);
+            albumDao.updateAlbumTag(album);
+            // 创建关系表
+            LocalMedia_AlbumTag copyLocal_Tag = new LocalMedia_AlbumTag(localMediaBean.getLocal_id(),album.getTag_id());
+            media_albumTagDao.insertLocalMediaAlbumTag(copyLocal_Tag);
+        }
+    }
+
+    /**
+     * Move到相册
+     * @param localMediaBeen 选择的数据
+     * @param album 相册
+     */
+    public void moveToAlbum(ArrayList<LocalMediaBean> localMediaBeen, AlbumTag album, AlbumTag originAlbum) {
+        for (LocalMediaBean localMediaBean:localMediaBeen) {
+            // 删除数据库中原来的关系
+            LocalMedia_AlbumTag originLocal_Tag = new LocalMedia_AlbumTag(localMediaBean.getLocal_id(),originAlbum.getTag_id());
+            media_albumTagDao.deleteLocalMediaAlbumTag(originLocal_Tag);
+            // 更新原相册
+            int item_count_origin= originAlbum.getItem_count();
+            originAlbum.setItem_count(item_count_origin-1);
+            originAlbum.setLast_update_time((int)System.currentTimeMillis());
+            albumDao.updateAlbumTag(originAlbum);
+            // 创建关系类，写入数据库
+            LocalMedia_AlbumTag dstLocal_Tag = new LocalMedia_AlbumTag(localMediaBean.getLocal_id(),album.getTag_id());
+            media_albumTagDao.insertLocalMediaAlbumTag(dstLocal_Tag);
+            // 更新新相册
+            int item_count_new = album.getItem_count();
+            album.setLast_update_time((int)System.currentTimeMillis());
+            album.setItem_count(item_count_new+1);
+            albumDao.updateAlbumTag(album);
+        }
+    }
+
+    /**
+     * 将相册移动到Others相册中
+     * @param album 要移动的相册
+     */
+    public void moveToOthers(AlbumTag album) {
+        if (album.getDefault_album()==0) {
+            album.setVisible(0);
+            album.setLast_update_time((int) System.currentTimeMillis());
+            albumDao.updateAlbumTag(album);
+        }
+    }
+
+    /**
+     * 从其他相册中移除
+     * @param album
+     */
+    public void moveBackToAlbum(AlbumTag album) {
+        album.setVisible(1);
+        album.setLast_update_time((int)System.currentTimeMillis());
+        albumDao.updateAlbumTag(album);
+    }
+
+    /**
+     * 重命名相册
+     * @param album
+     * @param newName
+     */
+    public void renameAlbum(AlbumTag album, String newName) {
+        album.setName(newName);
+        album.setDisplay_name(newName);
+        album.setLast_update_time((int)System.currentTimeMillis());
+        albumDao.updateAlbumTag(album);
+    }
+
+    /**
+     * 删除相册
+     * @param album
+     */
+    public void deleteAlbum(AlbumTag album) {
+
+    }
+
+    /**
+     * 通过相册查询所含多媒体文件
+     * @param album
+     * @return
+     */
+    public ArrayList<LocalMediaBean> getLocalMediaByAlbum(AlbumTag album) {
+        ArrayList<LocalMedia_AlbumTag> media_tagList = new ArrayList<>();
+        media_tagList = media_albumTagDao.queryMediaAlbumTagByTag_id(album.getTag_id());
+        ArrayList<LocalMediaBean> medias = new ArrayList<>();
+        for (LocalMedia_AlbumTag media_tag:media_tagList) {
+            LocalMediaBean media = localMediaDao.getLocalMediaBeanByLocalId(media_tag.getLocal_id());
+            medias.add(media);
+        }
+        return medias;
+    }
+
+    /**
+     * 获取所有的相册
+     * @return
+     */
+    public ArrayList<AlbumTag> getAlbum(){
+        ArrayList<AlbumTag> albums = new ArrayList<>();
+        albums = albumDao.queryAllAlbumTag();
+        return albums;
+     }
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/interfaces/AlbumDao.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/interfaces/AlbumDao.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/interfaces/AlbumDao.java	(revision 1020)
@@ -0,0 +1,26 @@
+package com.gallery.tclgallery.interfaces;
+
+import com.gallery.tclgallery.bean.AlbumTag;
+
+import java.util.ArrayList;
+
+/**
+ * Created by liddo on 2017/10/10.
+ */
+
+public interface AlbumDao {
+    void insertAlbumTag(AlbumTag albumTag);
+
+    void deleteAlbumTagById(int tag_id);
+
+    void deleteAlbumTag(AlbumTag albumTag);
+
+    void updateAlbumTag(AlbumTag albumTag);
+
+    ArrayList<AlbumTag> queryAllAlbumTag();
+
+    AlbumTag queryAlbumTagById(int tag_id);
+
+    ArrayList<AlbumTag> queryOtherAlbumTags();
+
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/interfaces/LocalMedia_AlbumTagDao.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/interfaces/LocalMedia_AlbumTagDao.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/interfaces/LocalMedia_AlbumTagDao.java	(revision 1020)
@@ -0,0 +1,27 @@
+package com.gallery.tclgallery.interfaces;
+
+import com.gallery.tclgallery.bean.LocalMedia_AlbumTag;
+
+import java.util.ArrayList;
+
+/**
+ * Created by liddo on 2017/10/13.
+ */
+
+public interface LocalMedia_AlbumTagDao {
+    void insertLocalMediaAlbumTag(LocalMedia_AlbumTag media_albumTag);
+
+    void deleteLocalMediaAlbumTag(LocalMedia_AlbumTag media_albumTag);
+
+    void deleteLocalMediaAlbumTagByLocalId(int local_id);
+
+    void deleteLocalMediaAlbumTagByTagId(int tag_id);
+
+    void updateLocalMediaAlbumTag(LocalMedia_AlbumTag media_albumTag);
+
+    ArrayList<LocalMedia_AlbumTag> queryAllLocalMediaAlbumTag();
+
+    ArrayList<LocalMedia_AlbumTag> queryMediaAlbumTagBylocal_id(int local_id);
+
+    ArrayList<LocalMedia_AlbumTag> queryMediaAlbumTagByTag_id(int tag_id);
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/interfaces/LocalMediaDao.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/interfaces/LocalMediaDao.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/interfaces/LocalMediaDao.java	(revision 1020)
@@ -0,0 +1,49 @@
+package com.gallery.tclgallery.interfaces;
+
+import com.gallery.tclgallery.bean.LocalMediaBean;
+
+import java.util.List;
+
+/**
+ * Created by liddo on 2017/10/10.
+ */
+
+public interface LocalMediaDao {
+
+    /**
+     * get all localMedia
+     * @return
+     */
+    List<LocalMediaBean> getAllLocalMedia();
+
+    /**
+     * init local media when the gallery app first open
+     *
+     */
+    void initLocalMedia();
+
+    /**
+     * insert local media
+     * @param localMediaBean
+     */
+    void insertLocalMedia(LocalMediaBean localMediaBean);
+
+    /**
+     * delete local media
+     * @param localMediaBean
+     */
+    void deleteLocalMedia(LocalMediaBean localMediaBean);
+
+    /**
+     * update local media
+     */
+    void updateLocalMedia(LocalMediaBean localMediaBean);
+
+    /**
+     * get local media by local_id
+     * @param local_id
+     * @return
+     */
+    LocalMediaBean getLocalMediaBeanByLocalId(int local_id);
+
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/anim/SwitchViewAnimHelper.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/anim/SwitchViewAnimHelper.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/anim/SwitchViewAnimHelper.java	(revision 1020)
@@ -0,0 +1,77 @@
+package com.gallery.tclgallery.anim;
+
+import android.view.View;
+import android.view.animation.DecelerateInterpolator;
+
+import com.nineoldandroids.animation.AnimatorSet;
+import com.nineoldandroids.animation.ObjectAnimator;
+
+/**
+ * 视图切换动画
+ * Created by jiaojie.jia on 2017/3/21.
+ */
+
+public class SwitchViewAnimHelper {
+
+    /** 显示动画（缩放）*/
+    private ObjectAnimator mShowScaleX;
+    private ObjectAnimator mShowScaleY;
+    /** 显示动画集合 */
+    private AnimatorSet mShowSet;
+
+    public static SwitchViewAnimHelper instance;
+
+    private SwitchViewAnimHelper() {
+        mShowSet = new AnimatorSet();
+    }
+
+    public static SwitchViewAnimHelper getInstance() {
+        if(instance == null) {
+            synchronized (SwitchViewAnimHelper.class) {
+                if(instance == null) {
+                    instance = new SwitchViewAnimHelper();
+                }
+            }
+        }
+        return instance;
+    }
+
+    /**
+     * 放大动画
+     * @param showView
+     */
+    public void toLargeView(final View showView) {
+        mShowScaleX = ObjectAnimator.ofFloat(showView, "scaleX", 0.95f, 1.0f);
+        mShowScaleY = ObjectAnimator.ofFloat(showView, "scaleY", 0.95f, 1.0f);
+
+        mShowSet.play(mShowScaleX).with(mShowScaleY);
+        mShowSet.setDuration(250);
+        mShowSet.setInterpolator(new DecelerateInterpolator());
+
+        mShowSet.start();
+    }
+
+    /**
+     * 缩小动画
+     * @param showView
+     */
+    public void toSmallView(final View showView) {
+        mShowScaleX = ObjectAnimator.ofFloat(showView, "scaleX", 1.05f, 1.0f);
+        mShowScaleY = ObjectAnimator.ofFloat(showView, "scaleY", 1.05f, 1.0f);
+
+        mShowSet.play(mShowScaleX).with(mShowScaleY);
+        mShowSet.setDuration(250);
+        mShowSet.setInterpolator(new DecelerateInterpolator());
+
+        mShowSet.start();
+    }
+
+    /**
+     * 当前是否有动画正在执行
+     * @return
+     */
+    public boolean isAnimRunning() {
+        return (mShowScaleX != null && mShowScaleY != null && mShowSet != null)
+                && (mShowScaleX.isRunning() || mShowScaleY.isRunning());
+    }
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/listener/OnSwitchViewListener.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/listener/OnSwitchViewListener.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/listener/OnSwitchViewListener.java	(revision 1020)
@@ -0,0 +1,12 @@
+package com.gallery.tclgallery.listener;
+
+/**
+ * Created by jiaojie.jia on 2017/3/21.
+ */
+
+public interface OnSwitchViewListener {
+
+    void onSwitchView(float scaleFactor);
+
+    void onSwitchViewBySection(int section);
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/listener/PhotoTimelineDataProvider.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/listener/PhotoTimelineDataProvider.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/listener/PhotoTimelineDataProvider.java	(revision 1020)
@@ -0,0 +1,14 @@
+package com.gallery.tclgallery.listener;
+
+import java.util.List;
+
+/**
+ * Created by jiaojie.jia on 2017/3/31.
+ */
+
+public interface PhotoTimelineDataProvider {
+
+    List<Float> getPercents();
+
+    List<String> getTitles();
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/listener/DragSelectTouchListener.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/listener/DragSelectTouchListener.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/listener/DragSelectTouchListener.java	(revision 1020)
@@ -0,0 +1,300 @@
+package com.gallery.tclgallery.listener;
+
+import android.content.Context;
+import android.content.res.Resources;
+import android.os.Handler;
+import android.os.Looper;
+import android.support.v4.view.MotionEventCompat;
+import android.support.v4.view.ViewCompat;
+import android.support.v4.widget.ScrollerCompat;
+import android.support.v7.widget.RecyclerView;
+import android.util.Log;
+import android.view.MotionEvent;
+import android.view.ScaleGestureDetector;
+import android.view.View;
+import android.view.animation.LinearInterpolator;
+
+/**
+ * Google相册滑动选择监听器
+ * Created by Administrator on 2016/5/7.
+ */
+public class DragSelectTouchListener implements RecyclerView.OnItemTouchListener {
+
+    private boolean isActive;
+    private int start, end;
+
+    private onSelectListener selectListener;
+
+    private RecyclerView recyclerView;
+
+    private static final int DELAY = 25;
+
+    private int autoScrollDistance = (int) (Resources.getSystem().getDisplayMetrics().density * 56);
+
+    private int mTopBound, mBottomBound;
+
+    private boolean inTopSpot, inBottomSpot;
+
+    private Handler autoScrollHandler = new Handler(Looper.getMainLooper());
+
+    private int scrollDistance;
+
+    private float lastX, lastY;
+
+    private static final int MAX_SCROLL_DISTANCE = 16;
+
+    //这个数越大，滚动的速度增加越慢
+    private static final int SCROLL_FECTOR = 6;
+
+    private int lastStart, lastEnd;
+
+    private ScrollerCompat scroller;
+
+    private Runnable scrollRunnable = new Runnable() {
+        @Override
+        public void run() {
+            if (!inTopSpot && !inBottomSpot) {
+                return;
+            }
+            scrollBy(scrollDistance);
+            autoScrollHandler.postDelayed(this, DELAY);
+        }
+    };
+
+    private ScaleGestureDetector scaleGestureDetector;
+
+    public void setSelectListener(onSelectListener selectListener) {
+        this.selectListener = selectListener;
+    }
+
+    public void setScaleGestureDetector(ScaleGestureDetector scaleGestureDetector) {
+        this.scaleGestureDetector = scaleGestureDetector;
+    }
+
+    public interface onSelectListener{
+        /**
+         * 选择结果的回调
+         * @param start 开始的位置
+         * @param end 结束的位置
+         * @param isSelected 是否选中
+         */
+        void onSelectChange(int start, int end, boolean isSelected);
+    }
+
+    public DragSelectTouchListener() {
+        reset();
+    }
+
+    @Override
+    public boolean onInterceptTouchEvent(RecyclerView rv, MotionEvent e) {
+        if(!isActive && e.getPointerCount() == 2 && scaleGestureDetector != null) {
+            // 切换视图
+            scaleGestureDetector.onTouchEvent(e);
+            return false;
+        }
+        if (!isActive || rv.getAdapter().getItemCount() == 0) {
+            return false;
+        }
+        int action = MotionEventCompat.getActionMasked(e);
+        switch (action) {
+            case MotionEvent.ACTION_POINTER_DOWN:
+                Log.d("weigan", "onInterceptTouchEvent ACTION_POINTER_DOWN");
+            case MotionEvent.ACTION_DOWN:
+                Log.d("weigan", "onInterceptTouchEvent ACTION_DOWN");
+                reset();
+                break;
+        }
+        recyclerView = rv;
+        int height = rv.getHeight();
+        mTopBound = -20;
+        mBottomBound = height - autoScrollDistance;
+        return true;
+    }
+
+    public void startAutoScroll() {
+        if (recyclerView == null) {
+            return;
+        }
+        initScroller(recyclerView.getContext());
+        if (scroller.isFinished()) {
+            recyclerView.removeCallbacks(scrollRun);
+            scroller.startScroll(0, scroller.getCurrY(), 0, 5000, 100000);
+            ViewCompat.postOnAnimation(recyclerView, scrollRun);
+        }
+    }
+
+    private void initScroller(Context context) {
+        if (scroller == null) {
+            scroller = ScrollerCompat.create(context, new LinearInterpolator());
+        }
+    }
+
+    public void stopAutoScroll() {
+        if (scroller != null && !scroller.isFinished()) {
+            recyclerView.removeCallbacks(scrollRun);
+            scroller.abortAnimation();
+        }
+    }
+
+    private Runnable scrollRun = new Runnable() {
+        @Override
+        public void run() {
+            if (scroller != null && scroller.computeScrollOffset()) {
+                Log.d("weigan", "scrollRun called");
+                scrollBy(scrollDistance);
+                ViewCompat.postOnAnimation(recyclerView, scrollRun);
+            }
+        }
+    };
+
+    @Override
+    public void onTouchEvent(RecyclerView rv, MotionEvent e) {
+        if (!isActive) {
+            return;
+        }
+        int action = MotionEventCompat.getActionMasked(e);
+        switch (action) {
+            case MotionEvent.ACTION_MOVE:
+                if (!inTopSpot && !inBottomSpot) {
+                    //更新滑动选择区域
+                    updateSelectedRange(rv, e);
+                }
+                //在顶部或者底部触发自动滑动
+                processAutoScroll(e);
+                break;
+            case MotionEvent.ACTION_CANCEL:
+            case MotionEvent.ACTION_UP:
+            case MotionEvent.ACTION_POINTER_UP:
+                //结束滑动选择，初始化各状态值
+                reset();
+                break;
+        }
+    }
+
+    private void updateSelectedRange(RecyclerView rv, MotionEvent e) {
+        updateSelectedRange(rv, e.getX(), e.getY());
+    }
+
+    private void updateSelectedRange(RecyclerView rv, float x, float y) {
+        View child = rv.findChildViewUnder(x, y);
+        if (child != null) {
+            int position = rv.getChildAdapterPosition(child);
+            if (position != RecyclerView.NO_POSITION && end != position) {
+                end = position;
+                notifySelectRangeChange();
+            }
+        }
+    }
+
+
+    private void processAutoScroll(MotionEvent event) {
+        int y = (int) event.getY();
+        if (y < mTopBound) {
+            lastX = event.getX();
+            lastY = event.getY();
+            scrollDistance = -(mTopBound - y) / SCROLL_FECTOR;
+            if (!inTopSpot) {
+                inTopSpot = true;
+//                autoScrollHandler.removeCallbacks(scrollRunnable);
+//                autoScrollHandler.postDelayed(scrollRunnable, DELAY);
+                startAutoScroll();
+            }
+        }else if (y > mBottomBound) {
+            lastX = event.getX();
+            lastY = event.getY();
+            scrollDistance = (y - mBottomBound) / SCROLL_FECTOR;
+            if (!inBottomSpot) {
+                inBottomSpot = true;
+//                autoScrollHandler.removeCallbacks(scrollRunnable);
+//                autoScrollHandler.postDelayed(scrollRunnable, DELAY);
+                startAutoScroll();
+            }
+        } else {
+//            autoScrollHandler.removeCallbacks(scrollRunnable);
+            inBottomSpot = false;
+            inTopSpot = false;
+            lastX = Float.MIN_VALUE;
+            lastY = Float.MIN_VALUE;
+            stopAutoScroll();
+        }
+    }
+
+    private void notifySelectRangeChange() {
+        if (selectListener == null) {
+            return;
+        }
+        if (start == RecyclerView.NO_POSITION || end == RecyclerView.NO_POSITION) {
+            return;
+        }
+
+        int newStart, newEnd;
+        newStart = Math.min(start, end);
+        newEnd = Math.max(start, end);
+        if (lastStart == RecyclerView.NO_POSITION || lastEnd == RecyclerView.NO_POSITION) {
+            if (newEnd - newStart == 1) {
+                selectListener.onSelectChange(newStart, newStart, true);
+            } else {
+                selectListener.onSelectChange(newStart, newEnd, true);
+            }
+        } else {
+            if (newStart > lastStart) {
+                selectListener.onSelectChange(lastStart, newStart - 1, false);
+            } else if (newStart < lastStart) {
+                selectListener.onSelectChange(newStart, lastStart - 1, true);
+            }
+
+            if (newEnd > lastEnd) {
+                selectListener.onSelectChange(lastEnd + 1, newEnd, true);
+            } else if (newEnd < lastEnd) {
+                selectListener.onSelectChange(newEnd + 1, lastEnd, false);
+            }
+        }
+
+        lastStart = newStart;
+        lastEnd = newEnd;
+    }
+
+    private void reset() {
+        setIsActive(false);
+        start = RecyclerView.NO_POSITION;
+        end = RecyclerView.NO_POSITION;
+        lastStart = RecyclerView.NO_POSITION;
+        lastEnd = RecyclerView.NO_POSITION;
+        autoScrollHandler.removeCallbacks(scrollRunnable);
+        inTopSpot = false;
+        inBottomSpot = false;
+        lastX = Float.MIN_VALUE;
+        lastY = Float.MIN_VALUE;
+        stopAutoScroll();
+    }
+
+    @Override
+    public void onRequestDisallowInterceptTouchEvent(boolean disallowIntercept) {
+
+    }
+
+    private void scrollBy(int distance) {
+        int scrollDistance;
+        if (distance > 0) {
+            scrollDistance = Math.min(distance, MAX_SCROLL_DISTANCE);
+        } else {
+            scrollDistance = Math.max(distance, -MAX_SCROLL_DISTANCE);
+        }
+        recyclerView.scrollBy(0, scrollDistance);
+        if (lastX != Float.MIN_VALUE && lastY != Float.MIN_VALUE) {
+            updateSelectedRange(recyclerView, lastX, lastY);
+        }
+    }
+
+    public void setIsActive(boolean isActive) {
+        this.isActive = isActive;
+    }
+
+    public void setStartSelectPosition(int position) {
+        setIsActive(true);
+        start = position;
+        end = position;
+        lastStart = position;
+        lastEnd = position;
+    }
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/listener/OnGridViewClickListener.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/listener/OnGridViewClickListener.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/listener/OnGridViewClickListener.java	(revision 1020)
@@ -0,0 +1,11 @@
+package com.gallery.tclgallery.listener;
+
+/**
+ * 年视图中的小的图片点击事件
+ * Created by jiaojie.jia on 2017/3/24.
+ */
+
+public interface OnGridViewClickListener {
+
+    void onGridViewClick(int parentPosition);
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/listener/OnEditItemClickListener.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/listener/OnEditItemClickListener.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/listener/OnEditItemClickListener.java	(revision 1020)
@@ -0,0 +1,12 @@
+package com.gallery.tclgallery.listener;
+
+import android.view.View;
+
+/**
+ * Created by jiaojie.jia on 2017/1/11.
+ */
+
+public interface OnEditItemClickListener {
+
+    void onItemClick(View view, int position);
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/bottomnavbar/BottomNavigationTab.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/bottomnavbar/BottomNavigationTab.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/bottomnavbar/BottomNavigationTab.java	(revision 1020)
@@ -0,0 +1,254 @@
+package com.gallery.tclgallery.bottomnavbar;
+
+import android.animation.ValueAnimator;
+import android.annotation.TargetApi;
+import android.content.Context;
+import android.content.res.ColorStateList;
+import android.graphics.drawable.Drawable;
+import android.graphics.drawable.StateListDrawable;
+import android.os.Build;
+import android.support.annotation.CallSuper;
+import android.support.v4.graphics.drawable.DrawableCompat;
+import android.util.AttributeSet;
+import android.view.Gravity;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.FrameLayout;
+import android.widget.ImageView;
+import android.widget.TextView;
+
+/**
+ * Class description
+ *
+ * @author ashokvarma
+ * @version 1.0
+ * @see FrameLayout
+ * @since 19 Mar 2016
+ */
+abstract class BottomNavigationTab extends FrameLayout {
+
+    protected boolean isNoTitleMode;
+
+    protected int paddingTopActive;
+    protected int paddingTopInActive;
+
+    protected int mPosition;
+    protected int mActiveColor;
+    protected int mInActiveColor;
+    protected int mBackgroundColor;
+    protected int mActiveWidth;
+    protected int mInActiveWidth;
+
+    protected Drawable mCompactIcon;
+    protected Drawable mCompactInActiveIcon;
+    protected boolean isInActiveIconSet = false;
+    protected String mLabel;
+
+    protected BadgeItem badgeItem;
+
+    boolean isActive = false;
+
+    View containerView;
+    TextView labelView;
+    ImageView iconView;
+    FrameLayout iconContainerView;
+    BadgeTextView badgeView;
+
+    public BottomNavigationTab(Context context) {
+        this(context, null);
+    }
+
+    public BottomNavigationTab(Context context, AttributeSet attrs) {
+        this(context, attrs, 0);
+    }
+
+    public BottomNavigationTab(Context context, AttributeSet attrs, int defStyleAttr) {
+        super(context, attrs, defStyleAttr);
+        init();
+    }
+
+    @TargetApi(Build.VERSION_CODES.LOLLIPOP)
+    public BottomNavigationTab(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {
+        super(context, attrs, defStyleAttr, defStyleRes);
+        init();
+    }
+
+    void init() {
+        setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.MATCH_PARENT));
+    }
+
+    public void setIsNoTitleMode(boolean isNoTitleMode) {
+        this.isNoTitleMode = isNoTitleMode;
+    }
+
+    public boolean getIsNoTitleMode() {
+        return isNoTitleMode;
+    }
+
+    public void setActiveWidth(int activeWidth) {
+        mActiveWidth = activeWidth;
+    }
+
+    public void setInactiveWidth(int inactiveWidth) {
+        mInActiveWidth = inactiveWidth;
+        ViewGroup.LayoutParams params = getLayoutParams();
+        params.width = mInActiveWidth;
+        setLayoutParams(params);
+    }
+
+    public void setIcon(Drawable icon) {
+        mCompactIcon = DrawableCompat.wrap(icon);
+    }
+
+    public void setInactiveIcon(Drawable icon) {
+        mCompactInActiveIcon = DrawableCompat.wrap(icon);
+        isInActiveIconSet = true;
+    }
+
+    public void setLabel(String label) {
+        mLabel = label;
+        labelView.setText(label);
+    }
+
+    public void setActiveColor(int activeColor) {
+        mActiveColor = activeColor;
+    }
+
+    public int getActiveColor() {
+        return mActiveColor;
+    }
+
+    public void setInactiveColor(int inActiveColor) {
+        mInActiveColor = inActiveColor;
+        labelView.setTextColor(inActiveColor);
+    }
+
+    public void setItemBackgroundColor(int backgroundColor) {
+        mBackgroundColor = backgroundColor;
+    }
+
+    public void setPosition(int position) {
+        mPosition = position;
+    }
+
+    public void setBadgeItem(BadgeItem badgeItem) {
+        this.badgeItem = badgeItem;
+    }
+
+    public int getPosition() {
+        return mPosition;
+    }
+
+    public void select(boolean setActiveColor, int animationDuration) {
+        isActive = true;
+
+        ValueAnimator animator = ValueAnimator.ofInt(containerView.getPaddingTop(), paddingTopActive);
+        animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
+            @Override
+            public void onAnimationUpdate(ValueAnimator valueAnimator) {
+                containerView.setPadding(containerView.getPaddingLeft(),
+                        (Integer) valueAnimator.getAnimatedValue(),
+                        containerView.getPaddingRight(),
+                        containerView.getPaddingBottom());
+            }
+        });
+        animator.setDuration(animationDuration);
+        animator.start();
+
+        iconView.setSelected(true);
+        if (setActiveColor) {
+            labelView.setTextColor(mActiveColor);
+        } else {
+            labelView.setTextColor(mBackgroundColor);
+        }
+
+        if (badgeItem != null) {
+            badgeItem.select();
+        }
+    }
+
+    public void unSelect(boolean setActiveColor, int animationDuration) {
+        isActive = false;
+
+        ValueAnimator animator = ValueAnimator.ofInt(containerView.getPaddingTop(), paddingTopInActive);
+        animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
+            @Override
+            public void onAnimationUpdate(ValueAnimator valueAnimator) {
+                containerView.setPadding(containerView.getPaddingLeft(),
+                        (Integer) valueAnimator.getAnimatedValue(),
+                        containerView.getPaddingRight(),
+                        containerView.getPaddingBottom());
+            }
+        });
+        animator.setDuration(animationDuration);
+        animator.start();
+
+        labelView.setTextColor(mInActiveColor);
+        iconView.setSelected(false);
+
+        if (badgeItem != null) {
+            badgeItem.unSelect();
+        }
+    }
+
+    @CallSuper
+    public void initialise(boolean setActiveColor) {
+        iconView.setSelected(false);
+        if (isInActiveIconSet) {
+            StateListDrawable states = new StateListDrawable();
+            states.addState(new int[]{android.R.attr.state_selected},
+                    mCompactIcon);
+            states.addState(new int[]{-android.R.attr.state_selected},
+                    mCompactInActiveIcon);
+            states.addState(new int[]{},
+                    mCompactInActiveIcon);
+            iconView.setImageDrawable(states);
+        } else {
+            if (setActiveColor) {
+                DrawableCompat.setTintList(mCompactIcon, new ColorStateList(
+                        new int[][]{
+                                new int[]{android.R.attr.state_selected}, //1
+                                new int[]{-android.R.attr.state_selected}, //2
+                                new int[]{}
+                        },
+                        new int[]{
+                                mActiveColor, //1
+                                mInActiveColor, //2
+                                mInActiveColor //3
+                        }
+                ));
+            } else {
+                DrawableCompat.setTintList(mCompactIcon, new ColorStateList(
+                        new int[][]{
+                                new int[]{android.R.attr.state_selected}, //1
+                                new int[]{-android.R.attr.state_selected}, //2
+                                new int[]{}
+                        },
+                        new int[]{
+                                mBackgroundColor, //1
+                                mInActiveColor, //2
+                                mInActiveColor //3
+                        }
+                ));
+            }
+            iconView.setImageDrawable(mCompactIcon);
+        }
+
+        if (isNoTitleMode) {
+            labelView.setVisibility(GONE);
+
+            LayoutParams layoutParams = (LayoutParams) iconContainerView.getLayoutParams();
+            layoutParams.gravity = Gravity.CENTER;
+            setNoTitleIconContainerParams(layoutParams);
+            iconContainerView.setLayoutParams(layoutParams);
+
+            LayoutParams iconLayoutParams = (LayoutParams) iconView.getLayoutParams();
+            setNoTitleIconParams(iconLayoutParams);
+            iconView.setLayoutParams(iconLayoutParams);
+        }
+    }
+
+    protected abstract void setNoTitleIconContainerParams(LayoutParams layoutParams);
+
+    protected abstract void setNoTitleIconParams(LayoutParams layoutParams);
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/bottomnavbar/FixedBottomNavigationTab.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/bottomnavbar/FixedBottomNavigationTab.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/bottomnavbar/FixedBottomNavigationTab.java	(revision 1020)
@@ -0,0 +1,87 @@
+package com.gallery.tclgallery.bottomnavbar;
+
+import android.annotation.TargetApi;
+import android.content.Context;
+import android.os.Build;
+import android.util.AttributeSet;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.widget.FrameLayout;
+import android.widget.ImageView;
+import android.widget.TextView;
+
+import com.gallery.tclgallery.R;
+
+/**
+ * Class description
+ *
+ * @author ashokvarma
+ * @version 1.0
+ * @see BottomNavigationTab
+ * @since 19 Mar 2016
+ */
+class FixedBottomNavigationTab extends BottomNavigationTab {
+
+    float labelScale;
+
+    public FixedBottomNavigationTab(Context context) {
+        super(context);
+    }
+
+    public FixedBottomNavigationTab(Context context, AttributeSet attrs) {
+        super(context, attrs);
+    }
+
+    public FixedBottomNavigationTab(Context context, AttributeSet attrs, int defStyleAttr) {
+        super(context, attrs, defStyleAttr);
+    }
+
+    @TargetApi(Build.VERSION_CODES.LOLLIPOP)
+    public FixedBottomNavigationTab(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {
+        super(context, attrs, defStyleAttr, defStyleRes);
+    }
+
+    @Override
+    void init() {
+        paddingTopActive = (int) getResources().getDimension(R.dimen.fixed_height_top_padding_active);
+        paddingTopInActive = (int) getResources().getDimension(R.dimen.fixed_height_top_padding_inactive);
+
+        LayoutInflater inflater = LayoutInflater.from(getContext());
+        View view = inflater.inflate(R.layout.fixed_bottom_navigation_item, this, true);
+        containerView = view.findViewById(R.id.fixed_bottom_navigation_container);
+        labelView = (TextView) view.findViewById(R.id.fixed_bottom_navigation_title);
+        iconView = (ImageView) view.findViewById(R.id.fixed_bottom_navigation_icon);
+        iconContainerView = (FrameLayout) view.findViewById(R.id.fixed_bottom_navigation_icon_container);
+        badgeView = (BadgeTextView) view.findViewById(R.id.fixed_bottom_navigation_badge);
+
+        labelScale = getResources().getDimension(R.dimen.fixed_label_inactive) / getResources().getDimension(R.dimen.fixed_label_active);
+
+        super.init();
+    }
+
+    @Override
+    public void select(boolean setActiveColor, int animationDuration) {
+        labelView.animate().scaleX(1).scaleY(1).setDuration(animationDuration).start();
+//        labelView.setTextSize(TypedValue.COMPLEX_UNIT_PX, getResources().getDimension(R.dimen.fixed_label_active));
+        super.select(setActiveColor, animationDuration);
+    }
+
+    @Override
+    public void unSelect(boolean setActiveColor, int animationDuration) {
+        labelView.animate().scaleX(labelScale).scaleY(labelScale).setDuration(animationDuration).start();
+//        labelView.setTextSize(TypedValue.COMPLEX_UNIT_PX, getResources().getDimension(R.dimen.fixed_label_inactive));
+        super.unSelect(setActiveColor, animationDuration);
+    }
+
+    @Override
+    protected void setNoTitleIconContainerParams(LayoutParams layoutParams) {
+        layoutParams.height = getContext().getResources().getDimensionPixelSize(R.dimen.fixed_no_title_icon_container_height);
+        layoutParams.width = getContext().getResources().getDimensionPixelSize(R.dimen.fixed_no_title_icon_container_width);
+    }
+
+    @Override
+    protected void setNoTitleIconParams(LayoutParams layoutParams) {
+        layoutParams.height = getContext().getResources().getDimensionPixelSize(R.dimen.fixed_no_title_icon_height);
+        layoutParams.width = getContext().getResources().getDimensionPixelSize(R.dimen.fixed_no_title_icon_width);
+    }
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/bottomnavbar/utils/Utils.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/bottomnavbar/utils/Utils.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/bottomnavbar/utils/Utils.java	(revision 1020)
@@ -0,0 +1,62 @@
+package com.gallery.tclgallery.bottomnavbar.utils;
+
+import android.content.Context;
+import android.content.res.TypedArray;
+import android.graphics.Color;
+import android.graphics.Point;
+import android.util.TypedValue;
+import android.view.WindowManager;
+
+/**
+ * Class description : These are common utils and can be used for other projects as well
+ *
+ * @author ashokvarma
+ * @version 1.0
+ * @since 19 Mar 2016
+ */
+public class Utils {
+
+    public static final int NO_COLOR = Color.TRANSPARENT;
+
+    private Utils() {
+    }
+
+    /**
+     * @param context used to get system services
+     * @return screenWidth in pixels
+     */
+    public static int getScreenWidth(Context context) {
+        WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
+        Point size = new Point();
+        wm.getDefaultDisplay().getSize(size);
+        return size.x;
+    }
+
+    /**
+     * This method can be extended to get all android attributes color, string, dimension ...etc
+     *
+     * @param context          used to fetch android attribute
+     * @param androidAttribute attribute codes like R.attr.colorAccent
+     * @return in this case color of android attribute
+     */
+    public static int fetchContextColor(Context context, int androidAttribute) {
+        TypedValue typedValue = new TypedValue();
+
+        TypedArray a = context.obtainStyledAttributes(typedValue.data, new int[]{androidAttribute});
+        int color = a.getColor(0, 0);
+
+        a.recycle();
+
+        return color;
+    }
+
+    /**
+     * @param context used to fetch display metrics
+     * @param dp      dp value
+     * @return pixel value
+     */
+    public static int dp2px(Context context, float dp) {
+        float px = TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp, context.getResources().getDisplayMetrics());
+        return Math.round(px);
+    }
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/bottomnavbar/BadgeItem.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/bottomnavbar/BadgeItem.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/bottomnavbar/BadgeItem.java	(revision 1020)
@@ -0,0 +1,292 @@
+package com.gallery.tclgallery.bottomnavbar;
+
+import android.support.v4.view.ViewCompat;
+import android.support.v4.view.ViewPropertyAnimatorCompat;
+import android.support.v4.view.ViewPropertyAnimatorListener;
+import android.view.Gravity;
+import android.view.View;
+import android.widget.FrameLayout;
+import android.widget.TextView;
+
+import java.lang.ref.WeakReference;
+
+/**
+ * Class description : Holds and manages data for badges
+ * (i.e data structure which holds all data to paint a badge and updates badges when changes are made)
+ *
+ * @author ashokvarma
+ * @version 1.0
+ * @since 21 Apr 2016
+ */
+abstract class BadgeItem<T extends BadgeItem<T>> {
+
+    private int mGravity = Gravity.TOP | Gravity.END;
+    private boolean mHideOnSelect;
+
+    private WeakReference<BadgeTextView> mTextViewRef;
+
+    private boolean mIsHidden = false;
+
+    private int mAnimationDuration = 200;
+
+    /**
+     * @return subClass to allow Builder pattern
+     */
+    abstract T getSubInstance();
+
+    /**
+     * if any extra binding is required binds all badgeItem, BottomNavigationTab and BadgeTextView
+     *
+     * @param bottomNavigationTab to which badgeItem needs to be attached
+     */
+    abstract void bindToBottomTabInternal(BottomNavigationTab bottomNavigationTab);
+
+    ///////////////////////////////////////////////////////////////////////////
+    // Public setter methods
+    ///////////////////////////////////////////////////////////////////////////
+
+    /**
+     * @param gravity gravity of badge (TOP|LEFT ..etc)
+     * @return this, to allow builder pattern
+     */
+    public T setGravity(int gravity) {
+        this.mGravity = gravity;
+        if (isWeakReferenceValid()) {
+            TextView textView = mTextViewRef.get();
+            FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) textView.getLayoutParams();
+            layoutParams.gravity = gravity;
+            textView.setLayoutParams(layoutParams);
+        }
+        return getSubInstance();
+    }
+
+    /**
+     * @param hideOnSelect if true hides badge on tab selection
+     * @return this, to allow builder pattern
+     */
+    public T setHideOnSelect(boolean hideOnSelect) {
+        this.mHideOnSelect = hideOnSelect;
+        return getSubInstance();
+    }
+
+    /**
+     * @param animationDuration hide and show animation time
+     * @return this, to allow builder pattern
+     */
+    public T setAnimationDuration(int animationDuration) {
+        this.mAnimationDuration = animationDuration;
+        return getSubInstance();
+    }
+
+
+    ///////////////////////////////////////////////////////////////////////////
+    // Library only access method
+    ///////////////////////////////////////////////////////////////////////////
+
+    /**
+     * binds all badgeItem, BottomNavigationTab and BadgeTextView
+     *
+     * @param bottomNavigationTab to which badgeItem needs to be attached
+     */
+    void bindToBottomTab(BottomNavigationTab bottomNavigationTab) {
+        // set initial bindings
+        bottomNavigationTab.badgeView.clearPrevious();
+        if (bottomNavigationTab.badgeItem != null) {
+            // removing old reference
+            bottomNavigationTab.badgeItem.setTextView(null);
+        }
+        bottomNavigationTab.setBadgeItem(this);
+        setTextView(bottomNavigationTab.badgeView);
+
+        // allow sub class to modify the things
+        bindToBottomTabInternal(bottomNavigationTab);
+
+        // make view visible because gone by default
+        bottomNavigationTab.badgeView.setVisibility(View.VISIBLE);
+
+        // set layout params based on gravity
+        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) bottomNavigationTab.badgeView.getLayoutParams();
+        layoutParams.gravity = getGravity();
+        bottomNavigationTab.badgeView.setLayoutParams(layoutParams);
+
+        // if hidden hide
+        if (isHidden()) {
+            // if hide is called before the initialisation of bottom-bar this will handle that
+            // by hiding it.
+            hide();
+        }
+    }
+
+    /**
+     * Internal method used to update view when ever changes are made
+     *
+     * @param mTextView badge textView
+     * @return this, to allow builder pattern
+     */
+    private T setTextView(BadgeTextView mTextView) {
+        this.mTextViewRef = new WeakReference<>(mTextView);
+        return getSubInstance();
+    }
+
+    /**
+     * @return gravity of badge
+     */
+    int getGravity() {
+        return mGravity;
+    }
+
+    /**
+     * @return should hide on selection ?
+     */
+    boolean isHideOnSelect() {
+        return mHideOnSelect;
+    }
+
+    /**
+     * @return reference to text-view
+     */
+    WeakReference<BadgeTextView> getTextView() {
+        return mTextViewRef;
+    }
+
+    ///////////////////////////////////////////////////////////////////////////
+    // Internal Methods
+    ///////////////////////////////////////////////////////////////////////////
+
+    /**
+     * @return returns if BadgeTextView's reference is valid
+     */
+    boolean isWeakReferenceValid() {
+        return mTextViewRef != null && mTextViewRef.get() != null;
+    }
+
+    ///////////////////////////////////////////////////////////////////////////
+    // Internal call back methods
+    ///////////////////////////////////////////////////////////////////////////
+
+    /**
+     * callback from bottom navigation tab when it is selected
+     */
+    void select() {
+        if (mHideOnSelect) {
+            hide(true);
+        }
+    }
+
+    /**
+     * callback from bottom navigation tab when it is un-selected
+     */
+    void unSelect() {
+        if (mHideOnSelect) {
+            show(true);
+        }
+    }
+
+    ///////////////////////////////////////////////////////////////////////////
+    // Public functionality methods
+    ///////////////////////////////////////////////////////////////////////////
+
+    /**
+     * @return this, to allow builder pattern
+     */
+    public T toggle() {
+        return toggle(true);
+    }
+
+    /**
+     * @param animate whether to animate the change
+     * @return this, to allow builder pattern
+     */
+    public T toggle(boolean animate) {
+        if (mIsHidden) {
+            return show(animate);
+        } else {
+            return hide(animate);
+        }
+    }
+
+    /**
+     * @return this, to allow builder pattern
+     */
+    public T show() {
+        return show(true);
+    }
+
+    /**
+     * @param animate whether to animate the change
+     * @return this, to allow builder pattern
+     */
+    public T show(boolean animate) {
+        mIsHidden = false;
+        if (isWeakReferenceValid()) {
+            TextView textView = mTextViewRef.get();
+            if (animate) {
+                textView.setScaleX(0);
+                textView.setScaleY(0);
+                textView.setVisibility(View.VISIBLE);
+                ViewPropertyAnimatorCompat animatorCompat = ViewCompat.animate(textView);
+                animatorCompat.cancel();
+                animatorCompat.setDuration(mAnimationDuration);
+                animatorCompat.scaleX(1).scaleY(1);
+                animatorCompat.setListener(null);
+                animatorCompat.start();
+            } else {
+                textView.setScaleX(1);
+                textView.setScaleY(1);
+                textView.setVisibility(View.VISIBLE);
+            }
+        }
+        return getSubInstance();
+    }
+
+    /**
+     * @return this, to allow builder pattern
+     */
+    public T hide() {
+        return hide(true);
+    }
+
+    /**
+     * @param animate whether to animate the change
+     * @return this, to allow builder pattern
+     */
+    public T hide(boolean animate) {
+        mIsHidden = true;
+        if (isWeakReferenceValid()) {
+            TextView textView = mTextViewRef.get();
+            if (animate) {
+                ViewPropertyAnimatorCompat animatorCompat = ViewCompat.animate(textView);
+                animatorCompat.cancel();
+                animatorCompat.setDuration(mAnimationDuration);
+                animatorCompat.scaleX(0).scaleY(0);
+                animatorCompat.setListener(new ViewPropertyAnimatorListener() {
+                    @Override
+                    public void onAnimationStart(View view) {
+                        // Empty body
+                    }
+
+                    @Override
+                    public void onAnimationEnd(View view) {
+                        view.setVisibility(View.GONE);
+                    }
+
+                    @Override
+                    public void onAnimationCancel(View view) {
+                        view.setVisibility(View.GONE);
+                    }
+                });
+                animatorCompat.start();
+            } else {
+                textView.setVisibility(View.GONE);
+            }
+        }
+        return getSubInstance();
+    }
+
+    /**
+     * @return if the badge is hidden
+     */
+    public boolean isHidden() {
+        return mIsHidden;
+    }
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/bottomnavbar/BadgeTextView.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/bottomnavbar/BadgeTextView.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/bottomnavbar/BadgeTextView.java	(revision 1020)
@@ -0,0 +1,132 @@
+package com.gallery.tclgallery.bottomnavbar;
+
+import android.annotation.SuppressLint;
+import android.content.Context;
+import android.graphics.Canvas;
+import android.support.v7.widget.AppCompatTextView;
+import android.util.AttributeSet;
+
+/**
+ * Class description
+ *
+ * @author ashokvarma
+ * @version 1.0
+ * @since 23 Jun 2017
+ */
+@SuppressLint("Instantiatable")
+class BadgeTextView extends AppCompatTextView {
+
+    private ShapeBadgeItem mShapeBadgeItem;
+
+    private boolean mAreDimensOverridden;
+    private int mDesiredWidth = 100;
+    private int mDesiredHeight = 100;
+
+    public BadgeTextView(Context context) {
+        this(context, null);
+    }
+
+    public BadgeTextView(Context context, AttributeSet attrs) {
+        this(context, attrs, 0);
+    }
+
+    public BadgeTextView(Context context, AttributeSet attrs, int defStyleAttr) {
+        super(context, attrs, defStyleAttr);
+        init();
+    }
+
+    private void init() {
+        // method stub
+    }
+
+    /**
+     * clear's all previous set values
+     */
+    void clearPrevious() {
+        mAreDimensOverridden = false;
+        mShapeBadgeItem = null;
+    }
+
+    /**
+     * @param shapeBadgeItem that can draw on top of the this view
+     */
+    void setShapeBadgeItem(ShapeBadgeItem shapeBadgeItem) {
+        mShapeBadgeItem = shapeBadgeItem;
+    }
+
+    /**
+     * if width and height of the view needs to be changed
+     *
+     * @param width new width that needs to be set
+     * @param height new height that needs to be set
+     */
+    void setDimens(int width, int height) {
+        mAreDimensOverridden = true;
+        mDesiredWidth = width;
+        mDesiredHeight = height;
+        requestLayout();
+    }
+
+    /**
+     * invalidate's view so badgeItem can draw again
+     */
+    void recallOnDraw() {
+        invalidate();
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    protected void onDraw(Canvas canvas) {
+        super.onDraw(canvas);
+        if (mShapeBadgeItem != null) {
+            mShapeBadgeItem.draw(canvas);
+        }
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        if (mAreDimensOverridden) {
+            int widthMode = MeasureSpec.getMode(widthMeasureSpec);
+            int widthSize = MeasureSpec.getSize(widthMeasureSpec);
+            int heightMode = MeasureSpec.getMode(heightMeasureSpec);
+            int heightSize = MeasureSpec.getSize(heightMeasureSpec);
+
+            int width;
+            int height;
+
+            //Measure Width
+            if (widthMode == MeasureSpec.EXACTLY) {
+                //Must be this size
+                width = widthSize;
+            } else if (widthMode == MeasureSpec.AT_MOST) {
+                //Can't be bigger than...
+                width = Math.min(mDesiredWidth, widthSize);
+            } else {
+                //Be whatever you want
+                width = mDesiredWidth;
+            }
+
+            //Measure Height
+            if (heightMode == MeasureSpec.EXACTLY) {
+                //Must be this size
+                height = heightSize;
+            } else if (heightMode == MeasureSpec.AT_MOST) {
+                //Can't be bigger than...
+                height = Math.min(mDesiredHeight, heightSize);
+            } else {
+                //Be whatever you want
+                height = mDesiredHeight;
+            }
+
+            //MUST CALL THIS
+            setMeasuredDimension(width, height);
+        } else {
+            super.onMeasure(widthMeasureSpec, heightMeasureSpec);
+        }
+    }
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/bottomnavbar/ShapeBadgeItem.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/bottomnavbar/ShapeBadgeItem.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/bottomnavbar/ShapeBadgeItem.java	(revision 1020)
@@ -0,0 +1,341 @@
+package com.gallery.tclgallery.bottomnavbar;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Paint;
+import android.graphics.Path;
+import android.graphics.RectF;
+import android.support.annotation.ColorRes;
+import android.support.annotation.IntDef;
+import android.support.annotation.Nullable;
+import android.support.v4.content.ContextCompat;
+import android.text.TextUtils;
+import android.view.ViewGroup;
+
+import com.gallery.tclgallery.bottomnavbar.utils.Utils;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+
+/**
+ * Class description
+ *
+ * @author ashokvarma
+ * @version 1.0
+ * @see BadgeItem
+ * @since 23 Jun 2017
+ */
+public class ShapeBadgeItem extends BadgeItem<ShapeBadgeItem> {
+
+    public static final int SHAPE_OVAL = 0;
+    public static final int SHAPE_RECTANGLE = 1;
+    public static final int SHAPE_HEART = 2;
+    public static final int SHAPE_STAR_3_VERTICES = 3;
+    public static final int SHAPE_STAR_4_VERTICES = 4;
+    public static final int SHAPE_STAR_5_VERTICES = 5;
+    public static final int SHAPE_STAR_6_VERTICES = 6;
+
+    @IntDef({SHAPE_OVAL, SHAPE_RECTANGLE, SHAPE_HEART, SHAPE_STAR_3_VERTICES, SHAPE_STAR_4_VERTICES, SHAPE_STAR_5_VERTICES, SHAPE_STAR_6_VERTICES})
+    @Retention(RetentionPolicy.SOURCE)
+    @interface Shape {
+    }
+
+    private
+    @Shape
+    int mShape = SHAPE_STAR_5_VERTICES;
+
+    private String mShapeColorCode;
+    private int mShapeColorResource;
+    private int mShapeColor = Color.RED;
+
+    // init values set at bindToBottomTabInternal
+    private int mHeightInPixels;
+    private int mWidthInPixels;
+    private int mEdgeMarginInPx;
+
+    private RectF mCanvasRect = new RectF();
+    private Paint mCanvasPaint;
+    private Path mPath = new Path();// used for pathDrawables
+
+    public ShapeBadgeItem() {
+        mCanvasPaint = new Paint();
+        mCanvasPaint.setColor(mShapeColor);
+        // If stroke needed
+//            paint.setStrokeWidth(widthInPx);
+//            paint.setStyle(Paint.Style.STROKE);
+        mCanvasPaint.setAntiAlias(true);
+        mCanvasPaint.setStyle(Paint.Style.FILL);
+    }
+
+    ///////////////////////////////////////////////////////////////////////////
+    // public methods
+    ///////////////////////////////////////////////////////////////////////////
+
+    /**
+     * @param shape new shape that needs to be drawn
+     * @return this, to allow builder pattern
+     */
+    public ShapeBadgeItem setShape(@Shape int shape) {
+        this.mShape = shape;
+        refreshDraw();
+        return this;
+    }
+
+    /**
+     * @param colorResource resource for background color
+     * @return this, to allow builder pattern
+     */
+    public ShapeBadgeItem setShapeColorResource(@ColorRes int colorResource) {
+        this.mShapeColorResource = colorResource;
+        refreshColor();
+        return this;
+    }
+
+    /**
+     * @param colorCode color code for background color
+     * @return this, to allow builder pattern
+     */
+    public ShapeBadgeItem setShapeColor(@Nullable String colorCode) {
+        this.mShapeColorCode = colorCode;
+        refreshColor();
+        return this;
+    }
+
+    /**
+     * @param color background color
+     * @return this, to allow builder pattern
+     */
+    public ShapeBadgeItem setShapeColor(int color) {
+        this.mShapeColor = color;
+        refreshColor();
+        return this;
+    }
+
+    /**
+     * @param context    to convert dp to pixel
+     * @param heightInDp dp size for height of badge item
+     * @param widthInDp  dp size for width of badge item
+     * @return this, to allow builder pattern
+     */
+    public ShapeBadgeItem setSizeInDp(Context context, int heightInDp, int widthInDp) {
+        mHeightInPixels = Utils.dp2px(context, heightInDp);
+        mWidthInPixels = Utils.dp2px(context, widthInDp);
+        if (isWeakReferenceValid()) {
+            getTextView().get().setDimens(mWidthInPixels, mHeightInPixels);
+        }
+        return this;
+    }
+
+    /**
+     * @param heightInPx pixel size for height of badge item
+     * @param widthInPx  pixel size for width of badge item
+     * @return this, to allow builder pattern
+     */
+    public ShapeBadgeItem setSizeInPixels(int heightInPx, int widthInPx) {
+        mHeightInPixels = heightInPx;
+        mWidthInPixels = widthInPx;
+        if (isWeakReferenceValid()) {
+            getTextView().get().setDimens(mWidthInPixels, mHeightInPixels);
+        }
+        return this;
+    }
+
+    /**
+     * @param context        to convert dp to pixel
+     * @param edgeMarginInDp dp size for margin of badge item
+     * @return this, to allow builder pattern
+     */
+    public ShapeBadgeItem setEdgeMarginInDp(Context context, int edgeMarginInDp) {
+        mEdgeMarginInPx = Utils.dp2px(context, edgeMarginInDp);
+        refreshMargin();
+        return this;
+    }
+
+    /**
+     * @param edgeMarginInPx pixel size for margin of badge item
+     * @return this, to allow builder pattern
+     */
+    public ShapeBadgeItem setEdgeMarginInPixels(int edgeMarginInPx) {
+        mEdgeMarginInPx = edgeMarginInPx;
+        refreshMargin();
+        return this;
+    }
+
+    ///////////////////////////////////////////////////////////////////////////
+    // Library internal methods
+    ///////////////////////////////////////////////////////////////////////////
+
+    /**
+     * draw's specified shape
+     *
+     * @param canvas on which shape has to be drawn
+     */
+    void draw(Canvas canvas) {
+        mCanvasRect.set(0.0f, 0.0f, canvas.getWidth(), canvas.getHeight());
+        if (mShape == SHAPE_RECTANGLE) {
+            canvas.drawRect(mCanvasRect, mCanvasPaint);
+        } else if (mShape == SHAPE_OVAL) {
+            canvas.drawOval(mCanvasRect, mCanvasPaint);
+        } else if (mShape == SHAPE_STAR_3_VERTICES || mShape == SHAPE_STAR_4_VERTICES || mShape == SHAPE_STAR_5_VERTICES || mShape == SHAPE_STAR_6_VERTICES) {
+            drawStar(canvas, mShape);
+        } else if (mShape == SHAPE_HEART) {
+            drawHeart(canvas);
+        }
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    ShapeBadgeItem getSubInstance() {
+        return this;
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    void bindToBottomTabInternal(BottomNavigationTab bottomNavigationTab) {
+        if (mHeightInPixels == 0)
+            mHeightInPixels = Utils.dp2px(bottomNavigationTab.getContext(), 12);
+        if (mWidthInPixels == 0)
+            mWidthInPixels = Utils.dp2px(bottomNavigationTab.getContext(), 12);
+        if (mEdgeMarginInPx == 0)
+            mEdgeMarginInPx = Utils.dp2px(bottomNavigationTab.getContext(), 4);
+
+        refreshMargin();
+        refreshColor();// so that user set color will be updated
+
+        bottomNavigationTab.badgeView.setShapeBadgeItem(this);
+
+        bottomNavigationTab.badgeView.setDimens(mWidthInPixels, mHeightInPixels);
+    }
+
+
+    ///////////////////////////////////////////////////////////////////////////
+    // Class only access methods
+    ///////////////////////////////////////////////////////////////////////////
+
+    /**
+     * @return shape color
+     */
+    private int getShapeColor(Context context) {
+        if (this.mShapeColorResource != 0) {
+            return ContextCompat.getColor(context, mShapeColorResource);
+        } else if (!TextUtils.isEmpty(mShapeColorCode)) {
+            return Color.parseColor(mShapeColorCode);
+        } else {
+            return mShapeColor;
+        }
+    }
+
+
+    ///////////////////////////////////////////////////////////////////////////
+    // Internal Methods
+    ///////////////////////////////////////////////////////////////////////////
+
+    /**
+     * refresh's paint color if set and redraw's shape with new color
+     */
+    private void refreshColor() {
+        if (isWeakReferenceValid()) {
+            mCanvasPaint.setColor(getShapeColor(getTextView().get().getContext()));
+        }
+        refreshDraw();
+    }
+
+    /**
+     * notifies BadgeTextView to invalidate so it will draw again and redraws shape
+     */
+    private void refreshDraw() {
+        if (isWeakReferenceValid()) {
+            getTextView().get().recallOnDraw();
+        }
+    }
+
+    /**
+     * refresh's margin if set
+     */
+    private void refreshMargin() {
+        if (isWeakReferenceValid()) {
+            ViewGroup.MarginLayoutParams layoutParams = (ViewGroup.MarginLayoutParams) getTextView().get().getLayoutParams();
+            layoutParams.bottomMargin = mEdgeMarginInPx;
+            layoutParams.topMargin = mEdgeMarginInPx;
+            layoutParams.rightMargin = mEdgeMarginInPx;
+            layoutParams.leftMargin = mEdgeMarginInPx;
+            getTextView().get().setLayoutParams(layoutParams);
+        }
+    }
+
+    /**
+     * @param canvas  on which star needs to be drawn
+     * @param numOfPt no of points a star should have
+     */
+    private void drawStar(Canvas canvas, int numOfPt) {
+        double section = 2.0 * Math.PI / numOfPt;
+        double halfSection = section / 2.0d;
+        double antiClockRotation = getStarAntiClockRotationOffset(numOfPt);
+
+        float x = (float) canvas.getWidth() / 2.0f;
+        float y = (float) canvas.getHeight() / 2.0f;
+        float radius, innerRadius;
+
+        if (canvas.getWidth() > canvas.getHeight()) {
+            radius = canvas.getHeight() * 0.5f;
+            innerRadius = canvas.getHeight() * 0.25f;
+        } else {
+            radius = canvas.getWidth() * 0.5f;
+            innerRadius = canvas.getWidth() * 0.25f;
+        }
+
+        mPath.reset();
+
+        mPath.moveTo(
+                (float) (x + radius * Math.cos(0 - antiClockRotation)),
+                (float) (y + radius * Math.sin(0 - antiClockRotation)));
+        mPath.lineTo(
+                (float) (x + innerRadius * Math.cos(0 + halfSection - antiClockRotation)),
+                (float) (y + innerRadius * Math.sin(0 + halfSection - antiClockRotation)));
+
+        for (int i = 1; i < numOfPt; i++) {
+            mPath.lineTo(
+                    (float) (x + radius * Math.cos(section * i - antiClockRotation)),
+                    (float) (y + radius * Math.sin(section * i - antiClockRotation)));
+            mPath.lineTo(
+                    (float) (x + innerRadius * Math.cos(section * i + halfSection - antiClockRotation)),
+                    (float) (y + innerRadius * Math.sin(section * i + halfSection - antiClockRotation)));
+        }
+
+        mPath.close();
+
+        canvas.drawPath(mPath, mCanvasPaint);
+    }
+
+    /**
+     * offset to make star shape look straight
+     *
+     * @param numOfPt no of points a star should have
+     */
+    private double getStarAntiClockRotationOffset(int numOfPt) {
+        if (numOfPt == 5) {
+            return 2.0 * Math.PI / 20.0d; // quarter of (section angle for 5 point star) = 36 degrees
+        } else if (numOfPt == 6) {
+            return 2.0 * Math.PI / 12.0d; // half the (section angle for 6 point star) = 60 degrees
+        }
+        return 0;
+    }
+
+    private void drawHeart(Canvas canvas) {
+        float curveLength = canvas.getHeight() / 3;
+
+        mPath.reset();
+        mPath.moveTo(canvas.getWidth() / 2, canvas.getHeight());// bottom part
+        mPath.lineTo(curveLength / 3, 7 * curveLength / 4);
+        mPath.arcTo(new RectF(0, 0, canvas.getWidth() / 2, 2 * curveLength), -225, 225);
+        mPath.arcTo(new RectF(canvas.getWidth() / 2, 0, canvas.getWidth(), 2 * curveLength), -180, 225);
+        mPath.close();
+
+        canvas.drawPath(mPath, mCanvasPaint);
+    }
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/bottomnavbar/BottomNavigationItem.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/bottomnavbar/BottomNavigationItem.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/bottomnavbar/BottomNavigationItem.java	(revision 1020)
@@ -0,0 +1,269 @@
+package com.gallery.tclgallery.bottomnavbar;
+
+import android.content.Context;
+import android.graphics.Color;
+import android.graphics.drawable.Drawable;
+import android.support.annotation.ColorRes;
+import android.support.annotation.DrawableRes;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.support.annotation.StringRes;
+import android.support.v4.content.ContextCompat;
+import android.text.TextUtils;
+
+import com.gallery.tclgallery.bottomnavbar.utils.Utils;
+
+
+/**
+ * Class description : Holds data for tabs (i.e data structure which holds all data to paint a tab)
+ *
+ * @author ashokvarma
+ * @version 1.0
+ * @since 19 Mar 2016
+ */
+public class BottomNavigationItem {
+
+    private int mIconResource;
+    private Drawable mIcon;
+
+    private int mInactiveIconResource;
+    private Drawable mInactiveIcon;
+    private boolean inActiveIconAvailable = false;
+
+    private int mTitleResource;
+    private String mTitle;
+
+    private int mActiveColorResource;
+    private String mActiveColorCode;
+    private int mActiveColor;
+
+    private int mInActiveColorResource;
+    private String mInActiveColorCode;
+    private int mInActiveColor;
+
+    private BadgeItem mBadgeItem;
+
+    /**
+     * @param mIconResource resource for the Tab icon.
+     * @param mTitle        title for the Tab.
+     */
+    public BottomNavigationItem(@DrawableRes int mIconResource, @NonNull String mTitle) {
+        this.mIconResource = mIconResource;
+        this.mTitle = mTitle;
+    }
+
+    /**
+     * @param mIcon  drawable icon for the Tab.
+     * @param mTitle title for the Tab.
+     */
+    public BottomNavigationItem(Drawable mIcon, @NonNull String mTitle) {
+        this.mIcon = mIcon;
+        this.mTitle = mTitle;
+    }
+
+    /**
+     * @param mIcon          drawable icon for the Tab.
+     * @param mTitleResource resource for the title.
+     */
+    public BottomNavigationItem(Drawable mIcon, @StringRes int mTitleResource) {
+        this.mIcon = mIcon;
+        this.mTitleResource = mTitleResource;
+    }
+
+    /**
+     * @param mIconResource  resource for the Tab icon.
+     * @param mTitleResource resource for the title.
+     */
+    public BottomNavigationItem(@DrawableRes int mIconResource, @StringRes int mTitleResource) {
+        this.mIconResource = mIconResource;
+        this.mTitleResource = mTitleResource;
+    }
+
+    /**
+     * By default library will switch the color of icon provided (in between active and in-active icons)
+     * This method is used, if people need to set different icons for active and in-active modes.
+     *
+     * @param mInactiveIcon in-active drawable icon
+     * @return this, to allow builder pattern
+     */
+    public BottomNavigationItem setInactiveIcon(Drawable mInactiveIcon) {
+        if (mInactiveIcon != null) {
+            this.mInactiveIcon = mInactiveIcon;
+            inActiveIconAvailable = true;
+        }
+        return this;
+    }
+
+    /**
+     * By default library will switch the color of icon provided (in between active and in-active icons)
+     * This method is used, if people need to set different icons for active and in-active modes.
+     *
+     * @param mInactiveIconResource resource for the in-active icon.
+     * @return this, to allow builder pattern
+     */
+    public BottomNavigationItem setInactiveIconResource(@DrawableRes int mInactiveIconResource) {
+        this.mInactiveIconResource = mInactiveIconResource;
+        inActiveIconAvailable = true;
+        return this;
+    }
+
+
+    /**
+     * @param colorResource resource for active color
+     * @return this, to allow builder pattern
+     */
+    public BottomNavigationItem setActiveColorResource(@ColorRes int colorResource) {
+        this.mActiveColorResource = colorResource;
+        return this;
+    }
+
+    /**
+     * @param colorCode color code for active color
+     * @return this, to allow builder pattern
+     */
+    public BottomNavigationItem setActiveColor(@Nullable String colorCode) {
+        this.mActiveColorCode = colorCode;
+        return this;
+    }
+
+    /**
+     * @param color active color
+     * @return this, to allow builder pattern
+     */
+    public BottomNavigationItem setActiveColor(int color) {
+        this.mActiveColor = color;
+        return this;
+    }
+
+    /**
+     * @param colorResource resource for in-active color
+     * @return this, to allow builder pattern
+     */
+    public BottomNavigationItem setInActiveColorResource(@ColorRes int colorResource) {
+        this.mInActiveColorResource = colorResource;
+        return this;
+    }
+
+    /**
+     * @param colorCode color code for in-active color
+     * @return this, to allow builder pattern
+     */
+    public BottomNavigationItem setInActiveColor(@Nullable String colorCode) {
+        this.mInActiveColorCode = colorCode;
+        return this;
+    }
+
+    /**
+     * @param color in-active color
+     * @return this, to allow builder pattern
+     */
+    public BottomNavigationItem setInActiveColor(int color) {
+        this.mInActiveColor = color;
+        return this;
+    }
+
+    /**
+     * @param badgeItem badge that needs to be displayed for this tab
+     * @return this, to allow builder pattern
+     */
+    public BottomNavigationItem setBadgeItem(@Nullable ShapeBadgeItem badgeItem) {
+        this.mBadgeItem = badgeItem;
+        return this;
+    }
+
+    /**
+     * @param badgeItem badge that needs to be displayed for this tab
+     * @return this, to allow builder pattern
+     */
+    public BottomNavigationItem setBadgeItem(@Nullable TextBadgeItem badgeItem) {
+        this.mBadgeItem = badgeItem;
+        return this;
+    }
+
+    ///////////////////////////////////////////////////////////////////////////
+    // Library only access method
+    ///////////////////////////////////////////////////////////////////////////
+
+    /**
+     * @param context to fetch drawable
+     * @return icon drawable
+     */
+    Drawable getIcon(Context context) {
+        if (this.mIconResource != 0) {
+            return ContextCompat.getDrawable(context, this.mIconResource);
+        } else {
+            return this.mIcon;
+        }
+    }
+
+    /**
+     * @param context to fetch resource
+     * @return title string
+     */
+    String getTitle(Context context) {
+        if (this.mTitleResource != 0) {
+            return context.getString(this.mTitleResource);
+        } else {
+            return this.mTitle;
+        }
+    }
+
+    /**
+     * @param context to fetch resources
+     * @return in-active icon drawable
+     */
+    Drawable getInactiveIcon(Context context) {
+        if (this.mInactiveIconResource != 0) {
+            return ContextCompat.getDrawable(context, this.mInactiveIconResource);
+        } else {
+            return this.mInactiveIcon;
+        }
+    }
+
+    /**
+     * @return if in-active icon is set
+     */
+    boolean isInActiveIconAvailable() {
+        return inActiveIconAvailable;
+    }
+
+    /**
+     * @param context to fetch color
+     * @return active color (or) -1 if no color is specified
+     */
+    int getActiveColor(Context context) {
+        if (this.mActiveColorResource != 0) {
+            return ContextCompat.getColor(context, mActiveColorResource);
+        } else if (!TextUtils.isEmpty(mActiveColorCode)) {
+            return Color.parseColor(mActiveColorCode);
+        } else if (this.mActiveColor != 0) {
+            return mActiveColor;
+        } else {
+            return Utils.NO_COLOR;
+        }
+    }
+
+    /**
+     * @param context to fetch color
+     * @return in-active color (or) -1 if no color is specified
+     */
+    int getInActiveColor(Context context) {
+        if (this.mInActiveColorResource != 0) {
+            return ContextCompat.getColor(context, mInActiveColorResource);
+        } else if (!TextUtils.isEmpty(mInActiveColorCode)) {
+            return Color.parseColor(mInActiveColorCode);
+        } else if (this.mInActiveColor != 0) {
+            return mInActiveColor;
+        } else {
+            return Utils.NO_COLOR;
+        }
+    }
+
+    /**
+     * @return badge item that needs to set to respective view
+     */
+    BadgeItem getBadgeItem() {
+        return mBadgeItem;
+    }
+
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/bottomnavbar/BottomNavigationHelper.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/bottomnavbar/BottomNavigationHelper.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/bottomnavbar/BottomNavigationHelper.java	(revision 1020)
@@ -0,0 +1,204 @@
+package com.gallery.tclgallery.bottomnavbar;
+
+import android.animation.Animator;
+import android.animation.AnimatorListenerAdapter;
+import android.animation.ObjectAnimator;
+import android.content.Context;
+import android.graphics.drawable.Drawable;
+import android.os.Build;
+import android.view.View;
+import android.view.ViewAnimationUtils;
+
+import com.gallery.tclgallery.R;
+import com.gallery.tclgallery.bottomnavbar.utils.Utils;
+
+
+/**
+ * Class description : This is utils class specific for this library, most the common code goes here.
+ *
+ * @author ashokvarma
+ * @version 1.0
+ * @since 19 Mar 2016
+ */
+class BottomNavigationHelper {
+
+    private BottomNavigationHelper() {
+    }
+
+    /**
+     * Used to get Measurements for MODE_FIXED
+     *
+     * @param context     to fetch measurements
+     * @param screenWidth total screen width
+     * @param noOfTabs    no of bottom bar tabs
+     * @param scrollable  is bottom bar scrollable
+     * @return width of each tab
+     */
+    static int[] getMeasurementsForFixedMode(Context context, int screenWidth, int noOfTabs, boolean scrollable) {
+
+        int[] result = new int[2];
+
+        int minWidth = (int) context.getResources().getDimension(R.dimen.fixed_min_width_small_views);
+        int maxWidth = (int) context.getResources().getDimension(R.dimen.fixed_min_width);
+
+        int itemWidth = screenWidth / noOfTabs;
+
+        if (itemWidth < minWidth && scrollable) {
+            itemWidth = (int) context.getResources().getDimension(R.dimen.fixed_min_width);
+        } else if (itemWidth > maxWidth) {
+            itemWidth = maxWidth;
+        }
+
+        result[0] = itemWidth;
+
+        return result;
+    }
+
+    /**
+     * Used to get Measurements for MODE_SHIFTING
+     *
+     * @param context     to fetch measurements
+     * @param screenWidth total screen width
+     * @param noOfTabs    no of bottom bar tabs
+     * @param scrollable  is bottom bar scrollable
+     * @return min and max width of each tab
+     */
+    static int[] getMeasurementsForShiftingMode(Context context, int screenWidth, int noOfTabs, boolean scrollable) {
+
+        int[] result = new int[2];
+
+        int minWidth = (int) context.getResources().getDimension(R.dimen.shifting_min_width_inactive);
+        int maxWidth = (int) context.getResources().getDimension(R.dimen.shifting_max_width_inactive);
+
+        double minPossibleWidth = minWidth * (noOfTabs + 0.5);
+        double maxPossibleWidth = maxWidth * (noOfTabs + 0.75);
+        int itemWidth;
+        int itemActiveWidth;
+
+        if (screenWidth < minPossibleWidth) {
+            if (scrollable) {
+                itemWidth = minWidth;
+                itemActiveWidth = (int) (minWidth * 1.5);
+            } else {
+                itemWidth = (int) (screenWidth / (noOfTabs + 0.5));
+                itemActiveWidth = (int) (itemWidth * 1.5);
+            }
+        } else if (screenWidth > maxPossibleWidth) {
+            itemWidth = maxWidth;
+            itemActiveWidth = (int) (itemWidth * 1.75);
+        } else {
+            double minPossibleWidth1 = minWidth * (noOfTabs + 0.625);
+            double minPossibleWidth2 = minWidth * (noOfTabs + 0.75);
+            itemWidth = (int) (screenWidth / (noOfTabs + 0.5));
+            itemActiveWidth = (int) (itemWidth * 1.5);
+            if (screenWidth > minPossibleWidth1) {
+                itemWidth = (int) (screenWidth / (noOfTabs + 0.625));
+                itemActiveWidth = (int) (itemWidth * 1.625);
+                if (screenWidth > minPossibleWidth2) {
+                    itemWidth = (int) (screenWidth / (noOfTabs + 0.75));
+                    itemActiveWidth = (int) (itemWidth * 1.75);
+                }
+            }
+        }
+
+        result[0] = itemWidth;
+        result[1] = itemActiveWidth;
+
+        return result;
+    }
+
+    /**
+     * Used to get set data to the Tab views from navigation items
+     *
+     * @param bottomNavigationItem holds all the data
+     * @param bottomNavigationTab  view to which data need to be set
+     * @param bottomNavigationBar  view which holds all the tabs
+     */
+    static void bindTabWithData(BottomNavigationItem bottomNavigationItem, BottomNavigationTab bottomNavigationTab, BottomNavigationBar bottomNavigationBar) {
+
+        Context context = bottomNavigationBar.getContext();
+
+        bottomNavigationTab.setLabel(bottomNavigationItem.getTitle(context));
+        bottomNavigationTab.setIcon(bottomNavigationItem.getIcon(context));
+
+        int activeColor = bottomNavigationItem.getActiveColor(context);
+        int inActiveColor = bottomNavigationItem.getInActiveColor(context);
+
+        if (activeColor != Utils.NO_COLOR) {
+            bottomNavigationTab.setActiveColor(activeColor);
+        } else {
+            bottomNavigationTab.setActiveColor(bottomNavigationBar.getActiveColor());
+        }
+
+        if (inActiveColor != Utils.NO_COLOR) {
+            bottomNavigationTab.setInactiveColor(inActiveColor);
+        } else {
+            bottomNavigationTab.setInactiveColor(bottomNavigationBar.getInActiveColor());
+        }
+
+        if (bottomNavigationItem.isInActiveIconAvailable()) {
+            Drawable inactiveDrawable = bottomNavigationItem.getInactiveIcon(context);
+            if (inactiveDrawable != null) {
+                bottomNavigationTab.setInactiveIcon(inactiveDrawable);
+            }
+        }
+
+        bottomNavigationTab.setItemBackgroundColor(bottomNavigationBar.getBackgroundColor());
+
+        BadgeItem badgeItem = bottomNavigationItem.getBadgeItem();
+        if (badgeItem != null) {
+            badgeItem.bindToBottomTab(bottomNavigationTab);
+        }
+    }
+
+    /**
+     * Used to set the ripple animation when a tab is selected
+     *
+     * @param clickedView       the view that is clicked (to get dimens where ripple starts)
+     * @param backgroundView    temporary view to which final background color is set
+     * @param bgOverlay         temporary view which is animated to get ripple effect
+     * @param newColor          the new color i.e ripple color
+     * @param animationDuration duration for which animation runs
+     */
+    static void setBackgroundWithRipple(View clickedView, final View backgroundView,
+                                        final View bgOverlay, final int newColor, int animationDuration) {
+        int centerX = (int) (clickedView.getX() + (clickedView.getMeasuredWidth() / 2));
+        int centerY = clickedView.getMeasuredHeight() / 2;
+        int finalRadius = backgroundView.getWidth();
+
+        backgroundView.clearAnimation();
+        bgOverlay.clearAnimation();
+
+        Animator circularReveal;
+
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
+            circularReveal = ViewAnimationUtils
+                    .createCircularReveal(bgOverlay, centerX, centerY, 0, finalRadius);
+        } else {
+            bgOverlay.setAlpha(0);
+            circularReveal = ObjectAnimator.ofFloat(bgOverlay, "alpha", 0, 1);
+        }
+
+        circularReveal.setDuration(animationDuration);
+        circularReveal.addListener(new AnimatorListenerAdapter() {
+            @Override
+            public void onAnimationEnd(Animator animation) {
+                onCancel();
+            }
+
+            @Override
+            public void onAnimationCancel(Animator animation) {
+                onCancel();
+            }
+
+            private void onCancel() {
+                backgroundView.setBackgroundColor(newColor);
+                bgOverlay.setVisibility(View.GONE);
+            }
+        });
+
+        bgOverlay.setBackgroundColor(newColor);
+        bgOverlay.setVisibility(View.VISIBLE);
+        circularReveal.start();
+    }
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/bottomnavbar/behaviour/VerticalScrollingBehavior.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/bottomnavbar/behaviour/VerticalScrollingBehavior.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/bottomnavbar/behaviour/VerticalScrollingBehavior.java	(revision 1020)
@@ -0,0 +1,202 @@
+package com.gallery.tclgallery.bottomnavbar.behaviour;
+
+
+import android.content.Context;
+import android.support.annotation.IntDef;
+import android.support.design.widget.CoordinatorLayout;
+import android.util.AttributeSet;
+import android.view.View;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+
+/**
+ * Class description
+ *
+ * @author ashokvarma
+ * @version 1.0
+ * @since 25 Mar 2016
+ */
+public abstract class VerticalScrollingBehavior<V extends View> extends CoordinatorLayout.Behavior<V> {
+
+    private int mTotalDyUnconsumed = -1;
+    private int mTotalDyConsumed = -1;
+    private int mTotalDy = -1;
+
+    @ScrollDirection
+    private int mScrollDirection = ScrollDirection.SCROLL_NONE;
+    @ScrollDirection
+    private int mPreScrollDirection = ScrollDirection.SCROLL_NONE;
+    @ScrollDirection
+    private int mConsumedScrollDirection = ScrollDirection.SCROLL_NONE;
+
+    public VerticalScrollingBehavior(Context context, AttributeSet attrs) {
+        super(context, attrs);
+    }
+
+    public VerticalScrollingBehavior() {
+        super();
+    }
+
+    @Retention(RetentionPolicy.SOURCE)
+    @IntDef({ScrollDirection.SCROLL_DIRECTION_UP, ScrollDirection.SCROLL_DIRECTION_DOWN})
+    public @interface ScrollDirection {
+        int SCROLL_DIRECTION_UP = 1;
+        int SCROLL_DIRECTION_DOWN = -1;
+        int SCROLL_NONE = 0;
+    }
+
+
+    /**
+     * @return Scroll direction: SCROLL_DIRECTION_UP, CROLL_DIRECTION_DOWN, SCROLL_NONE
+     */
+    @ScrollDirection
+    public int getScrollDirection() {
+        return mScrollDirection;
+    }
+
+    /**
+     * @return ConsumedScroll direction: SCROLL_DIRECTION_UP, CROLL_DIRECTION_DOWN, SCROLL_NONE
+     */
+    @ScrollDirection
+    public int getConsumedScrollDirection() {
+        return mConsumedScrollDirection;
+    }
+
+
+    /**
+     * @return PreScroll direction: SCROLL_DIRECTION_UP, SCROLL_DIRECTION_DOWN, SCROLL_NONE
+     */
+    @ScrollDirection
+    public int getPreScrollDirection() {
+        return mPreScrollDirection;
+    }
+
+    @Override
+    public boolean onStartNestedScroll(CoordinatorLayout coordinatorLayout, V child, View directTargetChild, View target, int nestedScrollAxes) {
+        return (nestedScrollAxes & View.SCROLL_AXIS_VERTICAL) != 0;
+    }
+
+//    @Override
+//    public void onNestedScrollAccepted(CoordinatorLayout coordinatorLayout, V child, View directTargetChild, View target, int nestedScrollAxes) {
+//        super.onNestedScrollAccepted(coordinatorLayout, child, directTargetChild, target, nestedScrollAxes);
+//    }
+//
+//    @Override
+//    public void onStopNestedScroll(CoordinatorLayout coordinatorLayout, V child, View target) {
+//        super.onStopNestedScroll(coordinatorLayout, child, target);
+//    }
+
+    @Override
+    public void onNestedScroll(CoordinatorLayout coordinatorLayout, V child, View target, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed) {
+        super.onNestedScroll(coordinatorLayout, child, target, dxConsumed, dyConsumed, dxUnconsumed, dyUnconsumed);
+        if (dyUnconsumed > 0 && mTotalDyUnconsumed < 0) {
+            mTotalDyUnconsumed = 0;
+            mScrollDirection = ScrollDirection.SCROLL_DIRECTION_UP;
+            onNestedVerticalScrollUnconsumed(coordinatorLayout, child, mScrollDirection, dyConsumed, mTotalDyUnconsumed);
+        } else if (dyUnconsumed < 0 && mTotalDyUnconsumed > 0) {
+            mTotalDyUnconsumed = 0;
+            mScrollDirection = ScrollDirection.SCROLL_DIRECTION_DOWN;
+            onNestedVerticalScrollUnconsumed(coordinatorLayout, child, mScrollDirection, dyConsumed, mTotalDyUnconsumed);
+        }
+        mTotalDyUnconsumed += dyUnconsumed;
+
+        if (dyConsumed > 0 && mTotalDyConsumed < 0) {
+            mTotalDyConsumed = 0;
+            mConsumedScrollDirection = ScrollDirection.SCROLL_DIRECTION_UP;
+            onNestedVerticalScrollConsumed(coordinatorLayout, child, mConsumedScrollDirection, dyConsumed, mTotalDyConsumed);
+        } else if (dyConsumed < 0 && mTotalDyConsumed > 0) {
+            mTotalDyConsumed = 0;
+            mConsumedScrollDirection = ScrollDirection.SCROLL_DIRECTION_DOWN;
+            onNestedVerticalScrollConsumed(coordinatorLayout, child, mConsumedScrollDirection, dyConsumed, mTotalDyConsumed);
+        }
+        mTotalDyConsumed += dyConsumed;
+    }
+
+    @Override
+    public void onNestedPreScroll(CoordinatorLayout coordinatorLayout, V child, View target, int dx, int dy, int[] consumed) {
+        super.onNestedPreScroll(coordinatorLayout, child, target, dx, dy, consumed);
+        if (dy > 0 && mTotalDy < 0) {
+            mTotalDy = 0;
+            mPreScrollDirection = ScrollDirection.SCROLL_DIRECTION_UP;
+            onNestedVerticalPreScroll(coordinatorLayout, child, target, dx, dy, consumed, mPreScrollDirection);
+        } else if (dy < 0 && mTotalDy > 0) {
+            mTotalDy = 0;
+            mPreScrollDirection = ScrollDirection.SCROLL_DIRECTION_DOWN;
+            onNestedVerticalPreScroll(coordinatorLayout, child, target, dx, dy, consumed, mPreScrollDirection);
+        }
+        mTotalDy += dy;
+    }
+
+
+    @Override
+    public boolean onNestedFling(CoordinatorLayout coordinatorLayout, V child, View target, float velocityX, float velocityY, boolean consumed) {
+        super.onNestedFling(coordinatorLayout, child, target, velocityX, velocityY, consumed);
+        return onNestedDirectionFling(coordinatorLayout, child, target, velocityX, velocityY, consumed
+                , velocityY > 0 ? ScrollDirection.SCROLL_DIRECTION_UP : ScrollDirection.SCROLL_DIRECTION_DOWN);
+    }
+
+    /**
+     * @param coordinatorLayout the CoordinatorLayout parent of the view this Behavior is
+     *                          associated with
+     * @param child             the child view of the CoordinatorLayout this Behavior is associated with
+     * @param scrollDirection   Direction of the scroll: SCROLL_DIRECTION_UP, SCROLL_DIRECTION_DOWN
+     * @param currentOverScroll Unconsumed value, negative or positive based on the direction;
+     * @param totalScroll       Cumulative value for current direction (Unconsumed)
+     */
+    public abstract void onNestedVerticalScrollUnconsumed(CoordinatorLayout coordinatorLayout, V child, @ScrollDirection int scrollDirection, int currentOverScroll, int totalScroll);
+
+    /**
+     * @param coordinatorLayout   the CoordinatorLayout parent of the view this Behavior is
+     *                            associated with
+     * @param child               the child view of the CoordinatorLayout this Behavior is associated with
+     * @param scrollDirection     Direction of the scroll: SCROLL_DIRECTION_UP, SCROLL_DIRECTION_DOWN
+     * @param currentOverScroll   Unconsumed value, negative or positive based on the direction;
+     * @param totalConsumedScroll Cumulative value for current direction (Unconsumed)
+     */
+    public abstract void onNestedVerticalScrollConsumed(CoordinatorLayout coordinatorLayout, V child, @ScrollDirection int scrollDirection, int currentOverScroll, int totalConsumedScroll);
+
+    /**
+     * @param coordinatorLayout the CoordinatorLayout parent of the view this Behavior is
+     *                          associated with
+     * @param child             the child view of the CoordinatorLayout this Behavior is associated with
+     * @param target            the descendant view of the CoordinatorLayout performing the nested scroll
+     * @param dx                the raw horizontal number of pixels that the user attempted to scroll
+     * @param dy                the raw vertical number of pixels that the user attempted to scroll
+     * @param consumed          out parameter. consumed[0] should be set to the distance of dx that
+     *                          was consumed, consumed[1] should be set to the distance of dy that
+     *                          was consumed
+     * @param scrollDirection   Direction of the scroll: SCROLL_DIRECTION_UP, SCROLL_DIRECTION_DOWN
+     */
+    public abstract void onNestedVerticalPreScroll(CoordinatorLayout coordinatorLayout, V child, View target, int dx, int dy, int[] consumed, @ScrollDirection int scrollDirection);
+
+    /**
+     * @param coordinatorLayout the CoordinatorLayout parent of the view this Behavior is
+     *                          associated with
+     * @param child             the child view of the CoordinatorLayout this Behavior is associated with
+     * @param target            the descendant view of the CoordinatorLayout performing the nested scroll
+     * @param velocityX         horizontal velocity of the attempted fling
+     * @param velocityY         vertical velocity of the attempted fling
+     * @param consumed          true if the nested child view consumed the fling
+     * @param scrollDirection   Direction of the scroll: SCROLL_DIRECTION_UP, SCROLL_DIRECTION_DOWN
+     * @return true if the Behavior consumed the fling
+     */
+    protected abstract boolean onNestedDirectionFling(CoordinatorLayout coordinatorLayout, V child, View target, float velocityX, float velocityY, boolean consumed, @ScrollDirection int scrollDirection);
+
+//    @Override
+//    public boolean onNestedPreFling(CoordinatorLayout coordinatorLayout, V child, View target, float velocityX, float velocityY) {
+//        return super.onNestedPreFling(coordinatorLayout, child, target, velocityX, velocityY);
+//    }
+//
+//    @Override
+//    public WindowInsetsCompat onApplyWindowInsets(CoordinatorLayout coordinatorLayout, V child, WindowInsetsCompat insets) {
+//
+//        return super.onApplyWindowInsets(coordinatorLayout, child, insets);
+//    }
+//
+//    @Override
+//    public Parcelable onSaveInstanceState(CoordinatorLayout parent, V child) {
+//        return super.onSaveInstanceState(parent, child);
+//    }
+
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/bottomnavbar/behaviour/BottomNavBarFabBehaviour.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/bottomnavbar/behaviour/BottomNavBarFabBehaviour.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/bottomnavbar/behaviour/BottomNavBarFabBehaviour.java	(revision 1020)
@@ -0,0 +1,177 @@
+package com.gallery.tclgallery.bottomnavbar.behaviour;
+
+import android.support.design.widget.CoordinatorLayout;
+import android.support.design.widget.FloatingActionButton;
+import android.support.design.widget.Snackbar;
+import android.support.v4.view.ViewCompat;
+import android.support.v4.view.ViewPropertyAnimatorCompat;
+import android.support.v4.view.animation.FastOutSlowInInterpolator;
+import android.view.View;
+import android.view.animation.Interpolator;
+
+
+import com.gallery.tclgallery.bottomnavbar.BottomNavigationBar;
+
+import java.util.List;
+
+/**
+ * Class description
+ *
+ * @author ashokvarma
+ * @version 1.0
+ * @since 06 Jun 2016
+ */
+public class BottomNavBarFabBehaviour extends CoordinatorLayout.Behavior<FloatingActionButton> {
+
+    ViewPropertyAnimatorCompat mFabTranslationYAnimator;
+//    @BottomNavigationBar.FabBehaviour
+//    private int mFabBehaviour;
+
+    static final Interpolator FAST_OUT_SLOW_IN_INTERPOLATOR = new FastOutSlowInInterpolator();
+
+    ///////////////////////////////////////////////////////////////////////////
+    // Constructor
+    ///////////////////////////////////////////////////////////////////////////
+
+//    public BottomNavBarFabBehaviour() {
+//        mFabBehaviour = BottomNavigationBar.FAB_BEHAVIOUR_TRANSLATE_AND_STICK;
+//    }
+    ///////////////////////////////////////////////////////////////////////////
+    // Dependencies setup
+    ///////////////////////////////////////////////////////////////////////////
+
+    @Override
+    public boolean layoutDependsOn(CoordinatorLayout parent, FloatingActionButton child, View dependency) {
+        return isDependent(dependency) || super.layoutDependsOn(parent, child, dependency);
+    }
+
+    @Override
+    public boolean onLayoutChild(CoordinatorLayout parent, FloatingActionButton child, int layoutDirection) {
+        // First let the parent lay it out
+        parent.onLayoutChild(child, layoutDirection);
+
+        updateFabTranslationForBottomNavigationBar(parent, child, null);
+
+        return super.onLayoutChild(parent, child, layoutDirection);
+    }
+
+    @Override
+    public boolean onDependentViewChanged(CoordinatorLayout parent, FloatingActionButton child, View dependency) {
+        if (isDependent(dependency)) {
+            updateFabTranslationForBottomNavigationBar(parent, child, dependency);
+            return false;
+        }
+
+        return super.onDependentViewChanged(parent, child, dependency);
+    }
+
+    @Override
+    public void onDependentViewRemoved(CoordinatorLayout parent, FloatingActionButton child,
+                                       View dependency) {
+        if (isDependent(dependency)) {
+            updateFabTranslationForBottomNavigationBar(parent, child, dependency);
+        }
+    }
+
+    private boolean isDependent(View dependency) {
+        return dependency instanceof BottomNavigationBar || dependency instanceof Snackbar.SnackbarLayout;
+    }
+
+    ///////////////////////////////////////////////////////////////////////////
+    // Animating Fab based on Changes
+    ///////////////////////////////////////////////////////////////////////////
+
+    private void updateFabTranslationForBottomNavigationBar(CoordinatorLayout parent, FloatingActionButton fab, View dependency) {
+
+        float snackBarTranslation = getFabTranslationYForSnackBar(parent, fab);
+        float[] bottomBarParameters = getFabTranslationYForBottomNavigationBar(parent, fab);
+        float bottomBarTranslation = bottomBarParameters[0];
+        float bottomBarHeight = bottomBarParameters[1];
+
+        float targetTransY = 0;
+        if (snackBarTranslation >= bottomBarTranslation) {
+            // when snackBar is below BottomBar in translation present.
+            targetTransY = bottomBarTranslation;
+        } else {
+            targetTransY = snackBarTranslation;
+        }
+
+//        if (mFabBehaviour == BottomNavigationBar.FAB_BEHAVIOUR_DISAPPEAR) {
+//            if (targetTransY == 0) {
+//                fab.hide();
+//            } else {
+//                fab.show();
+//            }
+//        }
+
+        final float currentTransY = ViewCompat.getTranslationY(fab);
+
+        // Make sure that any current animation is cancelled
+        ensureOrCancelAnimator(fab);
+
+
+        if (fab.isShown()
+                && Math.abs(currentTransY - targetTransY) > (fab.getHeight() * 0.667f)) {
+            // If the FAB will be travelling by more than 2/3 of it's height, let's animate it instead
+            mFabTranslationYAnimator.translationY(targetTransY).start();
+        } else {
+            // Now update the translation Y
+            ViewCompat.setTranslationY(fab, targetTransY);
+        }
+    }
+
+    ///////////////////////////////////////////////////////////////////////////
+    // Fab Translation due to SnackBar and Due to BottomBar
+    ///////////////////////////////////////////////////////////////////////////
+
+    private float[] getFabTranslationYForBottomNavigationBar(CoordinatorLayout parent,
+                                                             FloatingActionButton fab) {
+        float minOffset = 0;
+        float viewHeight = 0;
+        final List<View> dependencies = parent.getDependencies(fab);
+        for (int i = 0, z = dependencies.size(); i < z; i++) {
+            final View view = dependencies.get(i);
+            if (view instanceof BottomNavigationBar) {
+                viewHeight = view.getHeight();
+                minOffset = Math.min(minOffset,
+                        ViewCompat.getTranslationY(view) - viewHeight);
+            }
+        }
+        float[] returnValues = {minOffset, viewHeight};
+
+        return returnValues;
+    }
+
+    private float getFabTranslationYForSnackBar(CoordinatorLayout parent,
+                                                FloatingActionButton fab) {
+        float minOffset = 0;
+        final List<View> dependencies = parent.getDependencies(fab);
+        for (int i = 0, z = dependencies.size(); i < z; i++) {
+            final View view = dependencies.get(i);
+            if (view instanceof Snackbar.SnackbarLayout && parent.doViewsOverlap(fab, view)) {
+                minOffset = Math.min(minOffset,
+                        ViewCompat.getTranslationY(view) - view.getHeight());
+            }
+        }
+
+        return minOffset;
+    }
+
+//    public void setmFabBehaviour(int mFabBehaviour) {
+//        this.mFabBehaviour = mFabBehaviour;
+//    }
+
+    ///////////////////////////////////////////////////////////////////////////
+    // Animator Initializer
+    ///////////////////////////////////////////////////////////////////////////
+
+    private void ensureOrCancelAnimator(FloatingActionButton fab) {
+        if (mFabTranslationYAnimator == null) {
+            mFabTranslationYAnimator = ViewCompat.animate(fab);
+            mFabTranslationYAnimator.setDuration(400);
+            mFabTranslationYAnimator.setInterpolator(FAST_OUT_SLOW_IN_INTERPOLATOR);
+        } else {
+            mFabTranslationYAnimator.cancel();
+        }
+    }
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/bottomnavbar/behaviour/BottomVerticalScrollBehavior.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/bottomnavbar/behaviour/BottomVerticalScrollBehavior.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/bottomnavbar/behaviour/BottomVerticalScrollBehavior.java	(revision 1020)
@@ -0,0 +1,134 @@
+package com.gallery.tclgallery.bottomnavbar.behaviour;
+
+
+import android.support.design.widget.CoordinatorLayout;
+import android.support.design.widget.Snackbar;
+import android.support.v4.view.ViewCompat;
+import android.support.v4.view.animation.FastOutSlowInInterpolator;
+import android.view.View;
+import android.view.animation.Interpolator;
+
+
+import com.gallery.tclgallery.bottomnavbar.BottomNavigationBar;
+
+import java.lang.ref.WeakReference;
+import java.util.List;
+
+/**
+ * Class description
+ *
+ * @author ashokvarma
+ * @version 1.0
+ * @see VerticalScrollingBehavior
+ * @since 25 Mar 2016
+ */
+public class BottomVerticalScrollBehavior<V extends View> extends VerticalScrollingBehavior<V> {
+    private static final Interpolator INTERPOLATOR = new FastOutSlowInInterpolator();
+    private int mBottomNavHeight;
+    private WeakReference<BottomNavigationBar> mViewRef;
+
+    ///////////////////////////////////////////////////////////////////////////
+    // onBottomBar changes
+    ///////////////////////////////////////////////////////////////////////////
+    @Override
+    public boolean onLayoutChild(CoordinatorLayout parent, final V child, int layoutDirection) {
+        // First let the parent lay it out
+        parent.onLayoutChild(child, layoutDirection);
+        if (child instanceof BottomNavigationBar) {
+            mViewRef = new WeakReference<>((BottomNavigationBar) child);
+        }
+
+        child.post(new Runnable() {
+            @Override
+            public void run() {
+                mBottomNavHeight = child.getHeight();
+            }
+        });
+        updateSnackBarPosition(parent, child, getSnackBarInstance(parent, child));
+
+        return super.onLayoutChild(parent, child, layoutDirection);
+    }
+
+    ///////////////////////////////////////////////////////////////////////////
+    // SnackBar Handling
+    ///////////////////////////////////////////////////////////////////////////
+    @Override
+    public boolean layoutDependsOn(CoordinatorLayout parent, V child, View dependency) {
+        return isDependent(dependency) || super.layoutDependsOn(parent, child, dependency);
+    }
+
+    private boolean isDependent(View dependency) {
+        return dependency instanceof Snackbar.SnackbarLayout;
+    }
+
+    @Override
+    public boolean onDependentViewChanged(CoordinatorLayout parent, V child, View dependency) {
+        if (isDependent(dependency)) {
+            updateSnackBarPosition(parent, child, dependency);
+            return false;
+        }
+
+        return super.onDependentViewChanged(parent, child, dependency);
+    }
+
+    private void updateSnackBarPosition(CoordinatorLayout parent, V child, View dependency) {
+        updateSnackBarPosition(parent, child, dependency, ViewCompat.getTranslationY(child) - child.getHeight());
+    }
+
+    private void updateSnackBarPosition(CoordinatorLayout parent, V child, View dependency, float translationY) {
+        if (dependency != null && dependency instanceof Snackbar.SnackbarLayout) {
+            ViewCompat.animate(dependency).setInterpolator(INTERPOLATOR).setDuration(80).setStartDelay(0).translationY(translationY).start();
+        }
+    }
+
+    private Snackbar.SnackbarLayout getSnackBarInstance(CoordinatorLayout parent, V child) {
+        final List<View> dependencies = parent.getDependencies(child);
+        for (int i = 0, z = dependencies.size(); i < z; i++) {
+            final View view = dependencies.get(i);
+            if (view instanceof Snackbar.SnackbarLayout) {
+                return (Snackbar.SnackbarLayout) view;
+            }
+        }
+        return null;
+    }
+
+    ///////////////////////////////////////////////////////////////////////////
+    // Auto Hide Handling
+    ///////////////////////////////////////////////////////////////////////////
+
+    @Override
+    public void onNestedVerticalScrollUnconsumed(CoordinatorLayout coordinatorLayout, V child, @ScrollDirection int scrollDirection, int currentOverScroll, int totalScroll) {
+        // Empty body
+    }
+
+    @Override
+    public void onNestedVerticalPreScroll(CoordinatorLayout coordinatorLayout, V child, View target, int dx, int dy, int[] consumed, @ScrollDirection int scrollDirection) {
+//        handleDirection(child, scrollDirection);
+    }
+
+    @Override
+    protected boolean onNestedDirectionFling(CoordinatorLayout coordinatorLayout, V child, View target, float velocityX, float velocityY, boolean consumed, @ScrollDirection int scrollDirection) {
+//        if (consumed) {
+//            handleDirection(child, scrollDirection);
+//        }
+        return consumed;
+    }
+
+    @Override
+    public void onNestedVerticalScrollConsumed(CoordinatorLayout coordinatorLayout, V child, @ScrollDirection int scrollDirection, int currentOverScroll, int totalConsumedScroll) {
+        handleDirection(coordinatorLayout, child, scrollDirection);
+    }
+
+    private void handleDirection(CoordinatorLayout parent, V child, int scrollDirection) {
+        BottomNavigationBar bottomNavigationBar = mViewRef.get();
+        if (bottomNavigationBar != null && bottomNavigationBar.isAutoHideEnabled()) {
+            if (scrollDirection == ScrollDirection.SCROLL_DIRECTION_DOWN && bottomNavigationBar.isHidden()) {
+                updateSnackBarPosition(parent, child, getSnackBarInstance(parent, child), -mBottomNavHeight);
+                bottomNavigationBar.show();
+            } else if (scrollDirection == ScrollDirection.SCROLL_DIRECTION_UP && !bottomNavigationBar.isHidden()) {
+                updateSnackBarPosition(parent, child, getSnackBarInstance(parent, child), 0);
+                bottomNavigationBar.hide();
+            }
+        }
+    }
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/bottomnavbar/TextBadgeItem.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/bottomnavbar/TextBadgeItem.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/bottomnavbar/TextBadgeItem.java	(revision 1020)
@@ -0,0 +1,282 @@
+package com.gallery.tclgallery.bottomnavbar;
+
+import android.content.Context;
+import android.graphics.Color;
+import android.graphics.drawable.GradientDrawable;
+import android.support.annotation.ColorRes;
+import android.support.annotation.Nullable;
+import android.support.v4.content.ContextCompat;
+import android.text.TextUtils;
+import android.widget.TextView;
+
+import com.gallery.tclgallery.R;
+
+/**
+ * Class description
+ *
+ * @author ashokvarma
+ * @version 1.0
+ * @see BadgeItem
+ * @since 23 Jun 2017
+ */
+public class TextBadgeItem extends BadgeItem<TextBadgeItem> {
+
+    private int mBackgroundColorResource;
+    private String mBackgroundColorCode;
+    private int mBackgroundColor = Color.RED;
+
+    private int mTextColorResource;
+    private String mTextColorCode;
+    private int mTextColor = Color.WHITE;
+
+    private CharSequence mText;
+
+    private int mBorderColorResource;
+    private String mBorderColorCode;
+    private int mBorderColor = Color.WHITE;
+
+    private int mBorderWidthInPixels = 0;
+
+    ///////////////////////////////////////////////////////////////////////////
+    // Public setter methods
+    ///////////////////////////////////////////////////////////////////////////
+
+    /**
+     * @param colorResource resource for background color
+     * @return this, to allow builder pattern
+     */
+    public TextBadgeItem setBackgroundColorResource(@ColorRes int colorResource) {
+        this.mBackgroundColorResource = colorResource;
+        refreshDrawable();
+        return this;
+    }
+
+    /**
+     * @param colorCode color code for background color
+     * @return this, to allow builder pattern
+     */
+    public TextBadgeItem setBackgroundColor(@Nullable String colorCode) {
+        this.mBackgroundColorCode = colorCode;
+        refreshDrawable();
+        return this;
+    }
+
+    /**
+     * @param color background color
+     * @return this, to allow builder pattern
+     */
+    public TextBadgeItem setBackgroundColor(int color) {
+        this.mBackgroundColor = color;
+        refreshDrawable();
+        return this;
+    }
+
+    /**
+     * @param colorResource resource for text color
+     * @return this, to allow builder pattern
+     */
+    public TextBadgeItem setTextColorResource(@ColorRes int colorResource) {
+        this.mTextColorResource = colorResource;
+        setTextColor();
+        return this;
+    }
+
+    /**
+     * @param colorCode color code for text color
+     * @return this, to allow builder pattern
+     */
+    public TextBadgeItem setTextColor(@Nullable String colorCode) {
+        this.mTextColorCode = colorCode;
+        setTextColor();
+        return this;
+    }
+
+    /**
+     * @param color text color
+     * @return this, to allow builder pattern
+     */
+    public TextBadgeItem setTextColor(int color) {
+        this.mTextColor = color;
+        setTextColor();
+        return this;
+    }
+
+    /**
+     * @param text text to be set in badge (this shouldn't be empty text)
+     * @return this, to allow builder pattern
+     */
+    public TextBadgeItem setText(@Nullable CharSequence text) {
+        this.mText = text;
+        if (isWeakReferenceValid()) {
+            TextView textView = getTextView().get();
+            if (!TextUtils.isEmpty(text)) {
+                textView.setText(text);
+            }
+        }
+        return this;
+    }
+
+    /**
+     * @param colorResource resource for border color
+     * @return this, to allow builder pattern
+     */
+    public TextBadgeItem setBorderColorResource(@ColorRes int colorResource) {
+        this.mBorderColorResource = colorResource;
+        refreshDrawable();
+        return this;
+    }
+
+    /**
+     * @param colorCode color code for border color
+     * @return this, to allow builder pattern
+     */
+    public TextBadgeItem setBorderColor(@Nullable String colorCode) {
+        this.mBorderColorCode = colorCode;
+        refreshDrawable();
+        return this;
+    }
+
+    /**
+     * @param color border color
+     * @return this, to allow builder pattern
+     */
+    public TextBadgeItem setBorderColor(int color) {
+        this.mBorderColor = color;
+        refreshDrawable();
+        return this;
+    }
+
+    /**
+     * @param borderWidthInPixels border width in pixels
+     * @return this, to allow builder pattern
+     */
+    public TextBadgeItem setBorderWidth(int borderWidthInPixels) {
+        this.mBorderWidthInPixels = borderWidthInPixels;
+        refreshDrawable();
+        return this;
+    }
+
+    ///////////////////////////////////////////////////////////////////////////
+    // Library only access method
+    ///////////////////////////////////////////////////////////////////////////
+
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    TextBadgeItem getSubInstance() {
+        return this;
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    void bindToBottomTabInternal(BottomNavigationTab bottomNavigationTab) {
+        Context context = bottomNavigationTab.getContext();
+
+        GradientDrawable shape = getBadgeDrawable(context);
+        bottomNavigationTab.badgeView.setBackgroundDrawable(shape);
+        bottomNavigationTab.badgeView.setTextColor(getTextColor(context));
+        bottomNavigationTab.badgeView.setText(getText());
+    }
+
+    ///////////////////////////////////////////////////////////////////////////
+    // Class only access methods
+    ///////////////////////////////////////////////////////////////////////////
+
+    /**
+     * @param context to fetch color
+     * @return background color
+     */
+    private int getBackgroundColor(Context context) {
+        if (this.mBackgroundColorResource != 0) {
+            return ContextCompat.getColor(context, mBackgroundColorResource);
+        } else if (!TextUtils.isEmpty(mBackgroundColorCode)) {
+            return Color.parseColor(mBackgroundColorCode);
+        } else {
+            return mBackgroundColor;
+        }
+    }
+
+    /**
+     * @param context to fetch color
+     * @return text color
+     */
+    private int getTextColor(Context context) {
+        if (this.mTextColorResource != 0) {
+            return ContextCompat.getColor(context, mTextColorResource);
+        } else if (!TextUtils.isEmpty(mTextColorCode)) {
+            return Color.parseColor(mTextColorCode);
+        } else {
+            return mTextColor;
+        }
+    }
+
+    /**
+     * @return text that needs to be set in badge
+     */
+    private CharSequence getText() {
+        return mText;
+    }
+
+    /**
+     * @param context to fetch color
+     * @return border color
+     */
+    private int getBorderColor(Context context) {
+        if (this.mBorderColorResource != 0) {
+            return ContextCompat.getColor(context, mBorderColorResource);
+        } else if (!TextUtils.isEmpty(mBorderColorCode)) {
+            return Color.parseColor(mBorderColorCode);
+        } else {
+            return mBorderColor;
+        }
+    }
+
+    /**
+     * @return border width
+     */
+    private int getBorderWidth() {
+        return mBorderWidthInPixels;
+    }
+
+
+    ///////////////////////////////////////////////////////////////////////////
+    // Internal Methods
+    ///////////////////////////////////////////////////////////////////////////
+
+    /**
+     * refresh's background drawable
+     */
+    private void refreshDrawable() {
+        if (isWeakReferenceValid()) {
+            TextView textView = getTextView().get();
+            textView.setBackgroundDrawable(getBadgeDrawable(textView.getContext()));
+        }
+    }
+
+    /**
+     * set's new text color
+     */
+    private void setTextColor() {
+        if (isWeakReferenceValid()) {
+            TextView textView = getTextView().get();
+            textView.setTextColor(getTextColor(textView.getContext()));
+        }
+    }
+
+    /**
+     * @param context to fetch color
+     * @return return the background drawable
+     */
+    private GradientDrawable getBadgeDrawable(Context context) {
+        GradientDrawable shape = new GradientDrawable();
+        shape.setShape(GradientDrawable.RECTANGLE);
+        shape.setCornerRadius(context.getResources().getDimensionPixelSize(R.dimen.badge_corner_radius));
+        shape.setColor(getBackgroundColor(context));
+        shape.setStroke(getBorderWidth(), getBorderColor(context));
+        return shape;
+    }
+}
\ No newline at end of file
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/bottomnavbar/ShiftingBottomNavigationTab.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/bottomnavbar/ShiftingBottomNavigationTab.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/bottomnavbar/ShiftingBottomNavigationTab.java	(revision 1020)
@@ -0,0 +1,117 @@
+package com.gallery.tclgallery.bottomnavbar;
+
+import android.annotation.TargetApi;
+import android.content.Context;
+import android.os.Build;
+import android.util.AttributeSet;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.animation.Animation;
+import android.view.animation.Transformation;
+import android.widget.FrameLayout;
+import android.widget.ImageView;
+import android.widget.TextView;
+
+import com.gallery.tclgallery.R;
+
+/**
+ * Class description
+ *
+ * @author ashokvarma
+ * @version 1.0
+ * @see BottomNavigationTab
+ * @since 19 Mar 2016
+ */
+class ShiftingBottomNavigationTab extends BottomNavigationTab {
+
+    public ShiftingBottomNavigationTab(Context context) {
+        super(context);
+    }
+
+    public ShiftingBottomNavigationTab(Context context, AttributeSet attrs) {
+        super(context, attrs);
+    }
+
+    public ShiftingBottomNavigationTab(Context context, AttributeSet attrs, int defStyleAttr) {
+        super(context, attrs, defStyleAttr);
+    }
+
+    @TargetApi(Build.VERSION_CODES.LOLLIPOP)
+    public ShiftingBottomNavigationTab(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {
+        super(context, attrs, defStyleAttr, defStyleRes);
+    }
+
+    @Override
+    void init() {
+        paddingTopActive = (int) getResources().getDimension(R.dimen.shifting_height_top_padding_active);
+        paddingTopInActive = (int) getResources().getDimension(R.dimen.shifting_height_top_padding_inactive);
+
+        LayoutInflater inflater = LayoutInflater.from(getContext());
+        View view = inflater.inflate(R.layout.shifting_bottom_navigation_item, this, true);
+        containerView = view.findViewById(R.id.shifting_bottom_navigation_container);
+        labelView = (TextView) view.findViewById(R.id.shifting_bottom_navigation_title);
+        iconView = (ImageView) view.findViewById(R.id.shifting_bottom_navigation_icon);
+        iconContainerView = (FrameLayout) view.findViewById(R.id.shifting_bottom_navigation_icon_container);
+        badgeView = (BadgeTextView) view.findViewById(R.id.shifting_bottom_navigation_badge);
+
+        super.init();
+    }
+
+    @Override
+    public void select(boolean setActiveColor, int animationDuration) {
+        super.select(setActiveColor, animationDuration);
+
+        ResizeWidthAnimation anim = new ResizeWidthAnimation(this, mActiveWidth);
+        anim.setDuration(animationDuration);
+        this.startAnimation(anim);
+
+        labelView.animate().scaleY(1).scaleX(1).setDuration(animationDuration).start();
+    }
+
+    @Override
+    public void unSelect(boolean setActiveColor, int animationDuration) {
+        super.unSelect(setActiveColor, animationDuration);
+
+        ResizeWidthAnimation anim = new ResizeWidthAnimation(this, mInActiveWidth);
+        anim.setDuration(animationDuration);
+        this.startAnimation(anim);
+
+        labelView.animate().scaleY(0).scaleX(0).setDuration(0).start();
+    }
+
+    @Override
+    protected void setNoTitleIconContainerParams(LayoutParams layoutParams) {
+        layoutParams.height = getContext().getResources().getDimensionPixelSize(R.dimen.shifting_no_title_icon_container_height);
+        layoutParams.width = getContext().getResources().getDimensionPixelSize(R.dimen.shifting_no_title_icon_container_width);
+    }
+
+    @Override
+    protected void setNoTitleIconParams(LayoutParams layoutParams) {
+        layoutParams.height = getContext().getResources().getDimensionPixelSize(R.dimen.shifting_no_title_icon_height);
+        layoutParams.width = getContext().getResources().getDimensionPixelSize(R.dimen.shifting_no_title_icon_width);
+    }
+
+    private class ResizeWidthAnimation extends Animation {
+        private int mWidth;
+        private int mStartWidth;
+        private View mView;
+
+        ResizeWidthAnimation(View view, int width) {
+            mView = view;
+            mWidth = width;
+            mStartWidth = view.getWidth();
+        }
+
+        @Override
+        protected void applyTransformation(float interpolatedTime, Transformation t) {
+            mView.getLayoutParams().width = mStartWidth + (int) ((mWidth - mStartWidth) * interpolatedTime);
+            mView.requestLayout();
+        }
+
+        @Override
+        public boolean willChangeBounds() {
+            return true;
+        }
+    }
+
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/bottomnavbar/BottomNavigationBar.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/bottomnavbar/BottomNavigationBar.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/bottomnavbar/BottomNavigationBar.java	(revision 1020)
@@ -0,0 +1,802 @@
+package com.gallery.tclgallery.bottomnavbar;
+
+import android.annotation.TargetApi;
+import android.content.Context;
+import android.content.res.TypedArray;
+import android.graphics.Color;
+import android.os.Build;
+import android.support.annotation.ColorRes;
+import android.support.annotation.IntDef;
+import android.support.design.widget.CoordinatorLayout;
+import android.support.design.widget.FloatingActionButton;
+import android.support.v4.content.ContextCompat;
+import android.support.v4.view.ViewCompat;
+import android.support.v4.view.ViewPropertyAnimatorCompat;
+import android.support.v4.view.animation.LinearOutSlowInInterpolator;
+import android.util.AttributeSet;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.ViewOutlineProvider;
+import android.view.animation.Interpolator;
+import android.widget.FrameLayout;
+import android.widget.LinearLayout;
+
+
+import com.gallery.tclgallery.R;
+import com.gallery.tclgallery.bottomnavbar.behaviour.BottomNavBarFabBehaviour;
+import com.gallery.tclgallery.bottomnavbar.behaviour.BottomVerticalScrollBehavior;
+import com.gallery.tclgallery.bottomnavbar.utils.Utils;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.util.ArrayList;
+
+/**
+ * Class description : This class is used to draw the layout and this acts like a bridge between
+ * library and app, all details can be modified via this class.
+ *
+ * @author ashokvarma
+ * @version 1.0
+ * @see FrameLayout
+ * @see <a href="https://www.google.com/design/spec/components/bottom-navigation.html">Google Bottom Navigation Component</a>
+ * @since 19 Mar 2016
+ */
+@CoordinatorLayout.DefaultBehavior(BottomVerticalScrollBehavior.class)
+public class BottomNavigationBar extends FrameLayout {
+
+    public static final int MODE_DEFAULT = 0;
+    public static final int MODE_FIXED = 1;
+    public static final int MODE_SHIFTING = 2;
+    public static final int MODE_FIXED_NO_TITLE = 3;
+    public static final int MODE_SHIFTING_NO_TITLE = 4;
+
+    @IntDef({MODE_DEFAULT, MODE_FIXED, MODE_SHIFTING, MODE_FIXED_NO_TITLE, MODE_SHIFTING_NO_TITLE})
+    @Retention(RetentionPolicy.SOURCE)
+    @interface Mode {
+    }
+
+    public static final int BACKGROUND_STYLE_DEFAULT = 0;
+    public static final int BACKGROUND_STYLE_STATIC = 1;
+    public static final int BACKGROUND_STYLE_RIPPLE = 2;
+
+    @IntDef({BACKGROUND_STYLE_DEFAULT, BACKGROUND_STYLE_STATIC, BACKGROUND_STYLE_RIPPLE})
+    @Retention(RetentionPolicy.SOURCE)
+    @interface BackgroundStyle {
+    }
+
+
+    private static final int FAB_BEHAVIOUR_TRANSLATE_AND_STICK = 0;
+    private static final int FAB_BEHAVIOUR_DISAPPEAR = 1;
+    private static final int FAB_BEHAVIOUR_TRANSLATE_OUT = 2;
+
+    @IntDef({FAB_BEHAVIOUR_TRANSLATE_AND_STICK, FAB_BEHAVIOUR_DISAPPEAR, FAB_BEHAVIOUR_TRANSLATE_OUT})
+    @Retention(RetentionPolicy.SOURCE)
+    @interface FabBehaviour {
+    }
+
+    @Mode
+    private int mMode = MODE_DEFAULT;
+    @BackgroundStyle
+    private int mBackgroundStyle = BACKGROUND_STYLE_DEFAULT;
+
+    private static final Interpolator INTERPOLATOR = new LinearOutSlowInInterpolator();
+    private ViewPropertyAnimatorCompat mTranslationAnimator;
+
+    private boolean mScrollable = false;
+
+    private static final int MIN_SIZE = 3;
+    private static final int MAX_SIZE = 5;
+
+    ArrayList<BottomNavigationItem> mBottomNavigationItems = new ArrayList<>();
+    ArrayList<BottomNavigationTab> mBottomNavigationTabs = new ArrayList<>();
+
+    private static final int DEFAULT_SELECTED_POSITION = -1;
+    private int mSelectedPosition = DEFAULT_SELECTED_POSITION;
+    private int mFirstSelectedPosition = 0;
+    private OnTabSelectedListener mTabSelectedListener;
+
+    private int mActiveColor;
+    private int mInActiveColor;
+    private int mBackgroundColor;
+
+    private FrameLayout mBackgroundOverlay;
+    private FrameLayout mContainer;
+    private LinearLayout mTabContainer;
+
+    private static final int DEFAULT_ANIMATION_DURATION = 200;
+    private int mAnimationDuration = DEFAULT_ANIMATION_DURATION;
+    private int mRippleAnimationDuration = (int) (DEFAULT_ANIMATION_DURATION * 2.5);
+
+    private float mElevation;
+
+    private boolean mAutoHideEnabled;
+    private boolean mIsHidden = false;
+
+    ///////////////////////////////////////////////////////////////////////////
+    // View Default Constructors and Methods
+    ///////////////////////////////////////////////////////////////////////////
+
+    public BottomNavigationBar(Context context) {
+        this(context, null);
+    }
+
+    public BottomNavigationBar(Context context, AttributeSet attrs) {
+        this(context, attrs, 0);
+    }
+
+    public BottomNavigationBar(Context context, AttributeSet attrs, int defStyleAttr) {
+        super(context, attrs, defStyleAttr);
+        parseAttrs(context, attrs);
+        init();
+    }
+
+    @TargetApi(Build.VERSION_CODES.LOLLIPOP)
+    public BottomNavigationBar(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {
+        super(context, attrs, defStyleAttr, defStyleRes);
+        parseAttrs(context, attrs);
+        init();
+    }
+
+    /**
+     * This method initiates the bottomNavigationBar properties,
+     * Tries to get them form XML if not preset sets them to their default values.
+     *
+     * @param context context of the bottomNavigationBar
+     * @param attrs   attributes mentioned in the layout XML by user
+     */
+    private void parseAttrs(Context context, AttributeSet attrs) {
+        if (attrs != null) {
+            TypedArray typedArray = context.getTheme().obtainStyledAttributes(attrs, R.styleable.BottomNavigationBar, 0, 0);
+
+            mActiveColor = typedArray.getColor(R.styleable.BottomNavigationBar_bnbActiveColor, Utils.fetchContextColor(context, R.attr.colorAccent));
+            mInActiveColor = typedArray.getColor(R.styleable.BottomNavigationBar_bnbInactiveColor, Color.LTGRAY);
+            mBackgroundColor = typedArray.getColor(R.styleable.BottomNavigationBar_bnbBackgroundColor, Color.WHITE);
+            mAutoHideEnabled = typedArray.getBoolean(R.styleable.BottomNavigationBar_bnbAutoHideEnabled, true);
+            mElevation = typedArray.getDimension(R.styleable.BottomNavigationBar_bnbElevation, getResources().getDimension(R.dimen.bottom_navigation_elevation));
+
+            setAnimationDuration(typedArray.getInt(R.styleable.BottomNavigationBar_bnbAnimationDuration, DEFAULT_ANIMATION_DURATION));
+
+            switch (typedArray.getInt(R.styleable.BottomNavigationBar_bnbMode, MODE_DEFAULT)) {
+                case MODE_FIXED:
+                    mMode = MODE_FIXED;
+                    break;
+
+                case MODE_SHIFTING:
+                    mMode = MODE_SHIFTING;
+                    break;
+
+                case MODE_FIXED_NO_TITLE:
+                    mMode = MODE_FIXED_NO_TITLE;
+                    break;
+
+                case MODE_SHIFTING_NO_TITLE:
+                    mMode = MODE_SHIFTING_NO_TITLE;
+                    break;
+
+                case MODE_DEFAULT:
+                default:
+                    mMode = MODE_DEFAULT;
+                    break;
+            }
+
+            switch (typedArray.getInt(R.styleable.BottomNavigationBar_bnbBackgroundStyle, BACKGROUND_STYLE_DEFAULT)) {
+                case BACKGROUND_STYLE_STATIC:
+                    mBackgroundStyle = BACKGROUND_STYLE_STATIC;
+                    break;
+
+                case BACKGROUND_STYLE_RIPPLE:
+                    mBackgroundStyle = BACKGROUND_STYLE_RIPPLE;
+                    break;
+
+                case BACKGROUND_STYLE_DEFAULT:
+                default:
+                    mBackgroundStyle = BACKGROUND_STYLE_DEFAULT;
+                    break;
+            }
+
+            typedArray.recycle();
+        } else {
+            mActiveColor = Utils.fetchContextColor(context, R.attr.colorAccent);
+            mInActiveColor = Color.LTGRAY;
+            mBackgroundColor = Color.WHITE;
+            mElevation = getResources().getDimension(R.dimen.bottom_navigation_elevation);
+        }
+    }
+
+    /**
+     * This method initiates the bottomNavigationBar and handles layout related values
+     */
+    private void init() {
+
+//        MarginLayoutParams marginParams = new ViewGroup.MarginLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, (int) getContext().getResources().getDimension(R.dimen.bottom_navigation_padded_height)));
+//        marginParams.setMargins(0, (int) getContext().getResources().getDimension(R.dimen.bottom_navigation_top_margin_correction), 0, 0);
+
+        setLayoutParams(new ViewGroup.LayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT)));
+
+        LayoutInflater inflater = LayoutInflater.from(getContext());
+        View parentView = inflater.inflate(R.layout.bottom_navigation_bar_container, this, true);
+        mBackgroundOverlay = (FrameLayout) parentView.findViewById(R.id.bottom_navigation_bar_overLay);
+        mContainer = (FrameLayout) parentView.findViewById(R.id.bottom_navigation_bar_container);
+        mTabContainer = (LinearLayout) parentView.findViewById(R.id.bottom_navigation_bar_item_container);
+
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
+            this.setOutlineProvider(ViewOutlineProvider.BOUNDS);
+        } else {
+            //to do
+        }
+
+        ViewCompat.setElevation(this, mElevation);
+        setClipToPadding(false);
+    }
+
+//    @Override
+//    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+//        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
+//    }
+
+    ///////////////////////////////////////////////////////////////////////////
+    // View Data Setter methods, Called before Initialize method
+    ///////////////////////////////////////////////////////////////////////////
+
+    /**
+     * Used to add a new tab.
+     *
+     * @param item bottom navigation tab details
+     * @return this, to allow builder pattern
+     */
+    public BottomNavigationBar addItem(BottomNavigationItem item) {
+        mBottomNavigationItems.add(item);
+        return this;
+    }
+
+    /**
+     * Used to remove a tab.
+     * you should call initialise() after this to see the results effected.
+     *
+     * @param item bottom navigation tab details
+     * @return this, to allow builder pattern
+     */
+    public BottomNavigationBar removeItem(BottomNavigationItem item) {
+        mBottomNavigationItems.remove(item);
+        return this;
+    }
+
+    /**
+     * @param mode any of the three Modes supported by library
+     * @return this, to allow builder pattern
+     */
+    public BottomNavigationBar setMode(@Mode int mode) {
+        this.mMode = mode;
+        return this;
+    }
+
+    /**
+     * @param backgroundStyle any of the three Background Styles supported by library
+     * @return this, to allow builder pattern
+     */
+    public BottomNavigationBar setBackgroundStyle(@BackgroundStyle int backgroundStyle) {
+        this.mBackgroundStyle = backgroundStyle;
+        return this;
+    }
+
+    /**
+     * @param activeColor res code for the default active color
+     * @return this, to allow builder pattern
+     */
+    public BottomNavigationBar setActiveColor(@ColorRes int activeColor) {
+        this.mActiveColor = ContextCompat.getColor(getContext(), activeColor);
+        return this;
+    }
+
+    /**
+     * @param activeColorCode color code in string format for the default active color
+     * @return this, to allow builder pattern
+     */
+    public BottomNavigationBar setActiveColor(String activeColorCode) {
+        this.mActiveColor = Color.parseColor(activeColorCode);
+        return this;
+    }
+
+    /**
+     * @param inActiveColor res code for the default in-active color
+     * @return this, to allow builder pattern
+     */
+    public BottomNavigationBar setInActiveColor(@ColorRes int inActiveColor) {
+        this.mInActiveColor = ContextCompat.getColor(getContext(), inActiveColor);
+        return this;
+    }
+
+    /**
+     * @param inActiveColorCode color code in string format for the default in-active color
+     * @return this, to allow builder pattern
+     */
+    public BottomNavigationBar setInActiveColor(String inActiveColorCode) {
+        this.mInActiveColor = Color.parseColor(inActiveColorCode);
+        return this;
+    }
+
+    /**
+     * @param backgroundColor res code for the default background color
+     * @return this, to allow builder pattern
+     */
+    public BottomNavigationBar setBarBackgroundColor(@ColorRes int backgroundColor) {
+        this.mBackgroundColor = ContextCompat.getColor(getContext(), backgroundColor);
+        return this;
+    }
+
+    /**
+     * @param backgroundColorCode color code in string format for the default background color
+     * @return this, to allow builder pattern
+     */
+    public BottomNavigationBar setBarBackgroundColor(String backgroundColorCode) {
+        this.mBackgroundColor = Color.parseColor(backgroundColorCode);
+        return this;
+    }
+
+    /**
+     * @param firstSelectedPosition position of tab that needs to be selected by default
+     * @return this, to allow builder pattern
+     */
+    public BottomNavigationBar setFirstSelectedPosition(int firstSelectedPosition) {
+        this.mFirstSelectedPosition = firstSelectedPosition;
+        return this;
+    }
+
+    /**
+     * will be public once all bugs are ressolved.
+     */
+    private BottomNavigationBar setScrollable(boolean scrollable) {
+        mScrollable = scrollable;
+        return this;
+    }
+
+    ///////////////////////////////////////////////////////////////////////////
+    // Initialise Method
+    ///////////////////////////////////////////////////////////////////////////
+
+    /**
+     * This method should be called at the end of all customisation method.
+     * This method will take all changes in to consideration and redraws tabs.
+     */
+    public void initialise() {
+        mSelectedPosition = DEFAULT_SELECTED_POSITION;
+        mBottomNavigationTabs.clear();
+
+        if (!mBottomNavigationItems.isEmpty()) {
+            mTabContainer.removeAllViews();
+            if (mMode == MODE_DEFAULT) {
+                if (mBottomNavigationItems.size() <= MIN_SIZE) {
+                    mMode = MODE_FIXED;
+                } else {
+                    mMode = MODE_SHIFTING;
+                }
+            }
+            if (mBackgroundStyle == BACKGROUND_STYLE_DEFAULT) {
+                if (mMode == MODE_FIXED) {
+                    mBackgroundStyle = BACKGROUND_STYLE_STATIC;
+                } else {
+                    mBackgroundStyle = BACKGROUND_STYLE_RIPPLE;
+                }
+            }
+
+            if (mBackgroundStyle == BACKGROUND_STYLE_STATIC) {
+                mBackgroundOverlay.setVisibility(View.GONE);
+                mContainer.setBackgroundColor(mBackgroundColor);
+            }
+
+            int screenWidth = Utils.getScreenWidth(getContext());
+
+            if (mMode == MODE_FIXED || mMode == MODE_FIXED_NO_TITLE) {
+
+                int[] widths = BottomNavigationHelper.getMeasurementsForFixedMode(getContext(), screenWidth, mBottomNavigationItems.size(), mScrollable);
+                int itemWidth = widths[0];
+
+                for (BottomNavigationItem currentItem : mBottomNavigationItems) {
+                    FixedBottomNavigationTab bottomNavigationTab = new FixedBottomNavigationTab(getContext());
+                    setUpTab(mMode == MODE_FIXED_NO_TITLE, bottomNavigationTab, currentItem, itemWidth, itemWidth);
+                }
+
+            } else if (mMode == MODE_SHIFTING || mMode == MODE_SHIFTING_NO_TITLE) {
+
+                int[] widths = BottomNavigationHelper.getMeasurementsForShiftingMode(getContext(), screenWidth, mBottomNavigationItems.size(), mScrollable);
+
+                int itemWidth = widths[0];
+                int itemActiveWidth = widths[1];
+
+                for (BottomNavigationItem currentItem : mBottomNavigationItems) {
+                    ShiftingBottomNavigationTab bottomNavigationTab = new ShiftingBottomNavigationTab(getContext());
+                    setUpTab(mMode == MODE_SHIFTING_NO_TITLE, bottomNavigationTab, currentItem, itemWidth, itemActiveWidth);
+                }
+            }
+
+            if (mBottomNavigationTabs.size() > mFirstSelectedPosition) {
+                selectTabInternal(mFirstSelectedPosition, true, false, false);
+            } else if (!mBottomNavigationTabs.isEmpty()) {
+                selectTabInternal(0, true, false, false);
+            }
+        }
+    }
+
+    ////////////////////////////////////////////////////////////////////////////////////////////////
+    // Anytime Setter methods that can be called irrespective of whether we call initialise or not
+    ////////////////////////////////////////////////////////////////////////////////////////////////
+
+    /**
+     * @param tabSelectedListener callback listener for tabs
+     * @return this, to allow builder pattern
+     */
+    public BottomNavigationBar setTabSelectedListener(OnTabSelectedListener tabSelectedListener) {
+        this.mTabSelectedListener = tabSelectedListener;
+        return this;
+    }
+
+    /**
+     * ripple animation will be 2.5 times this animation duration.
+     *
+     * @param animationDuration animation duration for tab animations
+     * @return this, to allow builder pattern
+     */
+    public BottomNavigationBar setAnimationDuration(int animationDuration) {
+        this.mAnimationDuration = animationDuration;
+        this.mRippleAnimationDuration = (int) (animationDuration * 2.5);
+        return this;
+    }
+
+    /**
+     * Clears all stored data and this helps to re-initialise tabs from scratch
+     */
+    public void clearAll() {
+        mTabContainer.removeAllViews();
+        mBottomNavigationTabs.clear();
+        mBottomNavigationItems.clear();
+        mBackgroundOverlay.setVisibility(View.GONE);
+        mContainer.setBackgroundColor(Color.TRANSPARENT);
+        mSelectedPosition = DEFAULT_SELECTED_POSITION;
+    }
+
+    ///////////////////////////////////////////////////////////////////////////
+    // Setter methods that should called only after initialise is called
+    ///////////////////////////////////////////////////////////////////////////
+
+    /**
+     * Should be called only after initialization of BottomBar(i.e after calling initialize method)
+     *
+     * @param newPosition to select a tab after bottom navigation bar is initialised
+     */
+    public void selectTab(int newPosition) {
+        selectTab(newPosition, true);
+    }
+
+    /**
+     * Should be called only after initialization of BottomBar(i.e after calling initialize method)
+     *
+     * @param newPosition  to select a tab after bottom navigation bar is initialised
+     * @param callListener should this change call listener callbacks
+     */
+    public void selectTab(int newPosition, boolean callListener) {
+        selectTabInternal(newPosition, false, callListener, callListener);
+    }
+
+    ///////////////////////////////////////////////////////////////////////////
+    // Internal Methods of the class
+    ///////////////////////////////////////////////////////////////////////////
+
+    /**
+     * Internal method to setup tabs
+     *
+     * @param isNoTitleMode       if no title mode is required
+     * @param bottomNavigationTab Tab item
+     * @param currentItem         data structure for tab item
+     * @param itemWidth           tab item in-active width
+     * @param itemActiveWidth     tab item active width
+     */
+    private void setUpTab(boolean isNoTitleMode, BottomNavigationTab bottomNavigationTab, BottomNavigationItem currentItem, int itemWidth, int itemActiveWidth) {
+        bottomNavigationTab.setIsNoTitleMode(isNoTitleMode);
+        bottomNavigationTab.setInactiveWidth(itemWidth);
+        bottomNavigationTab.setActiveWidth(itemActiveWidth);
+        bottomNavigationTab.setPosition(mBottomNavigationItems.indexOf(currentItem));
+
+        bottomNavigationTab.setOnClickListener(new OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                BottomNavigationTab bottomNavigationTabView = (BottomNavigationTab) v;
+                selectTabInternal(bottomNavigationTabView.getPosition(), false, true, false);
+            }
+        });
+
+        mBottomNavigationTabs.add(bottomNavigationTab);
+
+        BottomNavigationHelper.bindTabWithData(currentItem, bottomNavigationTab, this);
+
+        bottomNavigationTab.initialise(mBackgroundStyle == BACKGROUND_STYLE_STATIC);
+
+        mTabContainer.addView(bottomNavigationTab);
+    }
+
+    /**
+     * Internal Method to select a tab
+     *
+     * @param newPosition     to select a tab after bottom navigation bar is initialised
+     * @param firstTab        if firstTab the no ripple animation will be done
+     * @param callListener    is listener callbacks enabled for this change
+     * @param forcedSelection if bottom navigation bar forced to select tab (in this case call on selected irrespective of previous state
+     */
+    private void selectTabInternal(int newPosition, boolean firstTab, boolean callListener, boolean forcedSelection) {
+        int oldPosition = mSelectedPosition;
+        if (mSelectedPosition != newPosition) {
+            if (mBackgroundStyle == BACKGROUND_STYLE_STATIC) {
+                if (mSelectedPosition != -1)
+                    mBottomNavigationTabs.get(mSelectedPosition).unSelect(true, mAnimationDuration);
+                mBottomNavigationTabs.get(newPosition).select(true, mAnimationDuration);
+            } else if (mBackgroundStyle == BACKGROUND_STYLE_RIPPLE) {
+                if (mSelectedPosition != -1)
+                    mBottomNavigationTabs.get(mSelectedPosition).unSelect(false, mAnimationDuration);
+                mBottomNavigationTabs.get(newPosition).select(false, mAnimationDuration);
+
+                final BottomNavigationTab clickedView = mBottomNavigationTabs.get(newPosition);
+                if (firstTab) {
+                    // Running a ripple on the opening app won't be good so on firstTab this won't run.
+                    mContainer.setBackgroundColor(clickedView.getActiveColor());
+                    mBackgroundOverlay.setVisibility(View.GONE);
+                } else {
+                    mBackgroundOverlay.post(new Runnable() {
+                        @Override
+                        public void run() {
+//                            try {
+                            BottomNavigationHelper.setBackgroundWithRipple(clickedView, mContainer, mBackgroundOverlay, clickedView.getActiveColor(), mRippleAnimationDuration);
+//                            } catch (Exception e) {
+//                                mContainer.setBackgroundColor(clickedView.getActiveColor());
+//                                mBackgroundOverlay.setVisibility(View.GONE);
+//                            }
+                        }
+                    });
+                }
+            }
+            mSelectedPosition = newPosition;
+        }
+
+        if (callListener) {
+            sendListenerCall(oldPosition, newPosition, forcedSelection);
+        }
+    }
+
+    /**
+     * Internal method used to send callbacks to listener
+     *
+     * @param oldPosition     old selected tab position, -1 if this is first call
+     * @param newPosition     newly selected tab position
+     * @param forcedSelection if bottom navigation bar forced to select tab (in this case call on selected irrespective of previous state
+     */
+    private void sendListenerCall(int oldPosition, int newPosition, boolean forcedSelection) {
+        if (mTabSelectedListener != null) {
+//                && oldPosition != -1) {
+            if (forcedSelection) {
+                mTabSelectedListener.onTabSelected(newPosition);
+            } else {
+                if (oldPosition == newPosition) {
+                    mTabSelectedListener.onTabReselected(newPosition);
+                } else {
+                    mTabSelectedListener.onTabSelected(newPosition);
+                    if (oldPosition != -1) {
+                        mTabSelectedListener.onTabUnselected(oldPosition);
+                    }
+                }
+            }
+        }
+    }
+
+    ///////////////////////////////////////////////////////////////////////////
+    // Animating methods
+    ///////////////////////////////////////////////////////////////////////////
+
+    /**
+     * show BottomNavigationBar if it is hidden and hide if it is shown
+     */
+    public void toggle() {
+        toggle(true);
+    }
+
+    /**
+     * show BottomNavigationBar if it is hidden and hide if it is shown
+     *
+     * @param animate is animation enabled for toggle
+     */
+    public void toggle(boolean animate) {
+        if (mIsHidden) {
+            show(animate);
+        } else {
+            hide(animate);
+        }
+    }
+
+    /**
+     * hide with animation
+     */
+    public void hide() {
+        hide(true);
+    }
+
+    /**
+     * @param animate is animation enabled for hide
+     */
+    public void hide(boolean animate) {
+        mIsHidden = true;
+        setTranslationY(this.getHeight(), animate);
+    }
+
+    /**
+     * show with animation
+     */
+    public void show() {
+        show(true);
+    }
+
+    /**
+     * @param animate is animation enabled for show
+     */
+    public void show(boolean animate) {
+        mIsHidden = false;
+        setTranslationY(0, animate);
+    }
+
+    /**
+     * @param offset  offset needs to be set
+     * @param animate is animation enabled for translation
+     */
+    private void setTranslationY(int offset, boolean animate) {
+        if (animate) {
+            animateOffset(offset);
+        } else {
+            if (mTranslationAnimator != null) {
+                mTranslationAnimator.cancel();
+            }
+            this.setTranslationY(offset);
+        }
+    }
+
+    /**
+     * Internal Method
+     * <p>
+     * used to set animation and
+     * takes care of cancelling current animation
+     * and sets duration and interpolator for animation
+     *
+     * @param offset translation offset that needs to set with animation
+     */
+    private void animateOffset(final int offset) {
+        if (mTranslationAnimator == null) {
+            mTranslationAnimator = ViewCompat.animate(this);
+            mTranslationAnimator.setDuration(mRippleAnimationDuration);
+            mTranslationAnimator.setInterpolator(INTERPOLATOR);
+        } else {
+            mTranslationAnimator.cancel();
+        }
+        mTranslationAnimator.translationY(offset).start();
+    }
+
+    public boolean isHidden() {
+        return mIsHidden;
+    }
+
+    ///////////////////////////////////////////////////////////////////////////
+    // Behaviour Handing Handling
+    ///////////////////////////////////////////////////////////////////////////
+
+    public boolean isAutoHideEnabled() {
+        return mAutoHideEnabled;
+    }
+
+    public void setAutoHideEnabled(boolean mAutoHideEnabled) {
+        this.mAutoHideEnabled = mAutoHideEnabled;
+    }
+
+    public void setFab(FloatingActionButton fab) {
+        ViewGroup.LayoutParams layoutParams = fab.getLayoutParams();
+        if (layoutParams != null && layoutParams instanceof CoordinatorLayout.LayoutParams) {
+            CoordinatorLayout.LayoutParams coLayoutParams = (CoordinatorLayout.LayoutParams) layoutParams;
+            BottomNavBarFabBehaviour bottomNavBarFabBehaviour = new BottomNavBarFabBehaviour();
+            coLayoutParams.setBehavior(bottomNavBarFabBehaviour);
+        }
+    }
+
+    // scheduled for next
+    private void setFab(FloatingActionButton fab, @FabBehaviour int fabBehaviour) {
+        ViewGroup.LayoutParams layoutParams = fab.getLayoutParams();
+        if (layoutParams != null && layoutParams instanceof CoordinatorLayout.LayoutParams) {
+            CoordinatorLayout.LayoutParams coLayoutParams = (CoordinatorLayout.LayoutParams) layoutParams;
+            BottomNavBarFabBehaviour bottomNavBarFabBehaviour = new BottomNavBarFabBehaviour();
+            coLayoutParams.setBehavior(bottomNavBarFabBehaviour);
+        }
+    }
+
+
+    ///////////////////////////////////////////////////////////////////////////
+    // Getters
+    ///////////////////////////////////////////////////////////////////////////
+
+    /**
+     * @return activeColor
+     */
+    public int getActiveColor() {
+        return mActiveColor;
+    }
+
+    /**
+     * @return in-active color
+     */
+    public int getInActiveColor() {
+        return mInActiveColor;
+    }
+
+    /**
+     * @return background color
+     */
+    public int getBackgroundColor() {
+        return mBackgroundColor;
+    }
+
+    /**
+     * @return current selected position
+     */
+    public int getCurrentSelectedPosition() {
+        return mSelectedPosition;
+    }
+
+    /**
+     * @return animation duration
+     */
+    public int getAnimationDuration() {
+        return mAnimationDuration;
+    }
+
+    ///////////////////////////////////////////////////////////////////////////
+    // Listener interfaces
+    ///////////////////////////////////////////////////////////////////////////
+
+    /**
+     * Callback interface invoked when a tab's selection state changes.
+     */
+    public interface OnTabSelectedListener {
+
+        /**
+         * Called when a tab enters the selected state.
+         *
+         * @param position The position of the tab that was selected
+         */
+        void onTabSelected(int position);
+
+        /**
+         * Called when a tab exits the selected state.
+         *
+         * @param position The position of the tab that was unselected
+         */
+        void onTabUnselected(int position);
+
+        /**
+         * Called when a tab that is already selected is chosen again by the user. Some applications
+         * may use this action to return to the top level of a category.
+         *
+         * @param position The position of the tab that was reselected.
+         */
+        void onTabReselected(int position);
+    }
+
+    /**
+     * Simple implementation of the OnTabSelectedListener interface with stub implementations of each method.
+     * Extend this if you do not intend to override every method of OnTabSelectedListener.
+     */
+    public static class SimpleOnTabSelectedListener implements OnTabSelectedListener {
+        @Override
+        public void onTabSelected(int position) {
+        }
+
+        @Override
+        public void onTabUnselected(int position) {
+        }
+
+        @Override
+        public void onTabReselected(int position) {
+        }
+    }
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/model/AlbumDaoImpl.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/model/AlbumDaoImpl.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/model/AlbumDaoImpl.java	(revision 1020)
@@ -0,0 +1,204 @@
+package com.gallery.tclgallery.model;
+
+import android.content.ContentValues;
+import android.content.Context;
+import android.database.Cursor;
+import android.database.sqlite.SQLiteDatabase;
+import android.util.Log;
+
+import com.gallery.tclgallery.bean.AlbumTag;
+import com.gallery.tclgallery.interfaces.AlbumDao;
+import com.gallery.tclgallery.utils.DateBaseHelper;
+
+import java.util.ArrayList;
+
+/**
+ * Created by liddo on 2017/10/13.
+ */
+
+public class AlbumDaoImpl implements AlbumDao {
+    public static final String TAG = "AlbumDaoImpl";
+
+    private Context mContext;
+
+    public AlbumDaoImpl(Context context) {
+        mContext = context;
+    }
+
+    @Override
+    public void insertAlbumTag(AlbumTag albumTag) {
+        DateBaseHelper dbHelper = new DateBaseHelper(mContext);
+        SQLiteDatabase sqLiteDatabase = dbHelper.getWritableDatabase();
+        ContentValues cv = new ContentValues();
+        cv.put("tag_id",albumTag.getTag_id());
+        cv.put("type",albumTag.getType());
+        cv.put("name",albumTag.getName());
+        cv.put("display_name",albumTag.getDisplay_name());
+        cv.put("local_path",albumTag.getLocal_path());
+        cv.put("visible",albumTag.getVisible());
+        cv.put("item_count",albumTag.getItem_count());
+        cv.put("default_album",albumTag.getDefault_album());
+        cv.put("last_update_time",albumTag.getLast_update_time());
+        long result = sqLiteDatabase.insert(DateBaseHelper.ALBUM_TAG_DB_TABLE,null,cv);
+        if (result>0) {
+            Log.i(TAG,"insert Album tag succeed");
+        }
+        sqLiteDatabase.close();
+        dbHelper.close();
+    }
+
+    @Override
+    public void deleteAlbumTagById(int tag_id) {
+        DateBaseHelper dbHelper = new DateBaseHelper(mContext);
+        SQLiteDatabase sqLiteDatabase = dbHelper.getWritableDatabase();
+        int result = sqLiteDatabase.delete(DateBaseHelper.ALBUM_TAG_DB_TABLE,"tag_id = ?",new String[]{tag_id+""});
+        if (result > 0) {
+            Log.i(TAG, "delete album succeed");
+        }
+        sqLiteDatabase.close();
+        dbHelper.close();
+    }
+
+    @Override
+    public void deleteAlbumTag(AlbumTag albumTag) {
+        DateBaseHelper dbHelper = new DateBaseHelper(mContext);
+        SQLiteDatabase sqLiteDatabase = dbHelper.getWritableDatabase();
+        int result = sqLiteDatabase.delete(DateBaseHelper.ALBUM_TAG_DB_TABLE,"tag_id = ?",new String[]{albumTag.getTag_id()+""});
+        if (result > 0) {
+            Log.i(TAG, "delete album succeed");
+        }
+        sqLiteDatabase.close();
+        dbHelper.close();
+    }
+
+    @Override
+    public void updateAlbumTag(AlbumTag albumTag) {
+        DateBaseHelper dbHelper = new DateBaseHelper(mContext);
+        SQLiteDatabase sqLiteDatabase = dbHelper.getWritableDatabase();
+        ContentValues cv = new ContentValues();
+        cv.put("type",albumTag.getType());
+        cv.put("name",albumTag.getName());
+        cv.put("display_name",albumTag.getDisplay_name());
+        cv.put("local_path",albumTag.getLocal_path());
+        cv.put("visible",albumTag.getVisible());
+        cv.put("item_count",albumTag.getItem_count());
+        cv.put("default_album",albumTag.getDefault_album());
+        cv.put("last_update_time",albumTag.getLast_update_time());
+        int result = sqLiteDatabase.update(DateBaseHelper.ALBUM_TAG_DB_TABLE,cv,"tag_id = ?",new String[]{albumTag.getTag_id()+""});
+        if (result > 0) {
+            Log.i(TAG,"update album succeed");
+        }
+        sqLiteDatabase.close();
+        dbHelper.close();
+    }
+
+    @Override
+    public ArrayList<AlbumTag> queryAllAlbumTag() {
+        ArrayList<AlbumTag> albumList = new ArrayList<>();
+        DateBaseHelper dbHelper = new DateBaseHelper(mContext);
+        SQLiteDatabase sqLiteDatabase = dbHelper.getWritableDatabase();
+        Cursor cursor = sqLiteDatabase.query(DateBaseHelper.ALBUM_TAG_DB_TABLE,DateBaseHelper.ALBUM_TAG_COLUMNS,null,null,null,null,null);
+        if (cursor != null) {
+            while (cursor.moveToNext()) {
+                int tag_id = cursor.getInt(cursor.getColumnIndex(DateBaseHelper.ALBUM_TAG_COLUMNS[0]));
+                int type = cursor.getInt(cursor.getColumnIndex(DateBaseHelper.ALBUM_TAG_COLUMNS[1]));
+                String name = cursor.getString(cursor.getColumnIndex(DateBaseHelper.ALBUM_TAG_COLUMNS[2]));
+                String displayName = cursor.getString(cursor.getColumnIndex(DateBaseHelper.ALBUM_TAG_COLUMNS[3]));
+                String localPath = cursor.getString(cursor.getColumnIndex(DateBaseHelper.ALBUM_TAG_COLUMNS[4]));
+                int visible = cursor.getInt(cursor.getColumnIndex(DateBaseHelper.ALBUM_TAG_COLUMNS[5]));
+                int itemCount = cursor.getInt(cursor.getColumnIndex(DateBaseHelper.ALBUM_TAG_COLUMNS[6]));
+                int defaultAlbum = cursor.getInt(cursor.getColumnIndex(DateBaseHelper.ALBUM_TAG_COLUMNS[7]));
+                int lastUpdateTime = cursor.getInt(cursor.getColumnIndex(DateBaseHelper.ALBUM_TAG_COLUMNS[8]));
+
+                AlbumTag albumTag = new AlbumTag();
+                albumTag.setTag_id(tag_id);
+                albumTag.setType(type);
+                albumTag.setName(name);
+                albumTag.setDisplay_name(displayName);
+                albumTag.setLocal_path(localPath);
+                albumTag.setVisible(visible);
+                albumTag.setItem_count(itemCount);
+                albumTag.setDefault_album(defaultAlbum);
+                albumTag.setLast_update_time(lastUpdateTime);
+
+                albumList.add(albumTag);
+            }
+        }
+        cursor.close();
+        sqLiteDatabase.close();
+        dbHelper.close();
+        return albumList;
+    }
+
+    @Override
+    public AlbumTag queryAlbumTagById(int tag_id) {
+        DateBaseHelper dbHelper = new DateBaseHelper(mContext);
+        SQLiteDatabase sqLiteDatabase = dbHelper.getWritableDatabase();
+        AlbumTag albumTag = new AlbumTag();
+        Cursor cursor = sqLiteDatabase.query(DateBaseHelper.ALBUM_TAG_DB_TABLE,DateBaseHelper.ALBUM_TAG_COLUMNS,"tag_id = ?",new String[]{""+tag_id},null,null,null);
+        if (cursor!=null) {
+            if (cursor.moveToFirst()) {
+                int type = cursor.getInt(cursor.getColumnIndex(DateBaseHelper.ALBUM_TAG_COLUMNS[1]));
+                String name = cursor.getString(cursor.getColumnIndex(DateBaseHelper.ALBUM_TAG_COLUMNS[2]));
+                String displayName = cursor.getString(cursor.getColumnIndex(DateBaseHelper.ALBUM_TAG_COLUMNS[3]));
+                String localPath = cursor.getString(cursor.getColumnIndex(DateBaseHelper.ALBUM_TAG_COLUMNS[4]));
+                int visible = cursor.getInt(cursor.getColumnIndex(DateBaseHelper.ALBUM_TAG_COLUMNS[5]));
+                int itemCount = cursor.getInt(cursor.getColumnIndex(DateBaseHelper.ALBUM_TAG_COLUMNS[6]));
+                int defaultAlbum = cursor.getInt(cursor.getColumnIndex(DateBaseHelper.ALBUM_TAG_COLUMNS[7]));
+                int lastUpdateTime = cursor.getInt(cursor.getColumnIndex(DateBaseHelper.ALBUM_TAG_COLUMNS[8]));
+
+                albumTag.setTag_id(tag_id);
+                albumTag.setType(type);
+                albumTag.setName(name);
+                albumTag.setDisplay_name(displayName);
+                albumTag.setLocal_path(localPath);
+                albumTag.setVisible(visible);
+                albumTag.setItem_count(itemCount);
+                albumTag.setDefault_album(defaultAlbum);
+                albumTag.setLast_update_time(lastUpdateTime);
+            }
+        }
+        cursor.close();
+        sqLiteDatabase.close();
+        dbHelper.close();
+        return albumTag;
+    }
+
+    @Override
+    public ArrayList<AlbumTag> queryOtherAlbumTags() {
+        ArrayList<AlbumTag> albumList = new ArrayList<>();
+        DateBaseHelper dbHelper = new DateBaseHelper(mContext);
+        SQLiteDatabase sqLiteDatabase = dbHelper.getWritableDatabase();
+        Cursor cursor = sqLiteDatabase.query(DateBaseHelper.ALBUM_TAG_DB_TABLE,DateBaseHelper.ALBUM_TAG_COLUMNS,"visible = 0",null,null,null,null);
+        if (cursor != null) {
+            while(cursor.moveToNext()) {
+                int tag_id = cursor.getInt(cursor.getColumnIndex(DateBaseHelper.ALBUM_TAG_COLUMNS[0]));
+                int type = cursor.getInt(cursor.getColumnIndex(DateBaseHelper.ALBUM_TAG_COLUMNS[1]));
+                String name = cursor.getString(cursor.getColumnIndex(DateBaseHelper.ALBUM_TAG_COLUMNS[2]));
+                String displayName = cursor.getString(cursor.getColumnIndex(DateBaseHelper.ALBUM_TAG_COLUMNS[3]));
+                String localPath = cursor.getString(cursor.getColumnIndex(DateBaseHelper.ALBUM_TAG_COLUMNS[4]));
+                int visible = cursor.getInt(cursor.getColumnIndex(DateBaseHelper.ALBUM_TAG_COLUMNS[5]));
+                int itemCount = cursor.getInt(cursor.getColumnIndex(DateBaseHelper.ALBUM_TAG_COLUMNS[6]));
+                int defaultAlbum = cursor.getInt(cursor.getColumnIndex(DateBaseHelper.ALBUM_TAG_COLUMNS[7]));
+                int lastUpdateTime = cursor.getInt(cursor.getColumnIndex(DateBaseHelper.ALBUM_TAG_COLUMNS[8]));
+
+                AlbumTag albumTag = new AlbumTag();
+                albumTag.setTag_id(tag_id);
+                albumTag.setType(type);
+                albumTag.setName(name);
+                albumTag.setDisplay_name(displayName);
+                albumTag.setLocal_path(localPath);
+                albumTag.setVisible(visible);
+                albumTag.setItem_count(itemCount);
+                albumTag.setDefault_album(defaultAlbum);
+                albumTag.setLast_update_time(lastUpdateTime);
+
+                albumList.add(albumTag);
+            }
+        }
+        cursor.close();
+        sqLiteDatabase.close();
+        dbHelper.close();
+        return albumList;
+    }
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/model/LocalMedia_AlbumTagDaoImpl.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/model/LocalMedia_AlbumTagDaoImpl.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/model/LocalMedia_AlbumTagDaoImpl.java	(revision 1020)
@@ -0,0 +1,172 @@
+package com.gallery.tclgallery.model;
+
+import android.content.ContentValues;
+import android.content.Context;
+import android.database.Cursor;
+import android.database.sqlite.SQLiteDatabase;
+import android.util.Log;
+
+import com.gallery.tclgallery.bean.LocalMedia_AlbumTag;
+import com.gallery.tclgallery.interfaces.LocalMedia_AlbumTagDao;
+import com.gallery.tclgallery.utils.DateBaseHelper;
+
+import java.util.ArrayList;
+
+
+/**
+ * Created by liddo on 2017/10/13.
+ */
+
+public class LocalMedia_AlbumTagDaoImpl implements LocalMedia_AlbumTagDao{
+    public static final String TAG = "LocalMedia_AlbumTagDao";
+
+    private Context mContext;
+
+    public static final String[] LOCAL_MEDIA_ALBUM_TAG_COLUMN = {DateBaseHelper.LOCAL_MEDIA_ALBUM_TAG_ID, DateBaseHelper.LOCAL_MEDIA_ALBUM_TAG_LOCAL_ID, DateBaseHelper.LOCAL_MEDIA_ALBUM_TAG_ALBUM_TAG_ID};
+
+    public LocalMedia_AlbumTagDaoImpl(Context context) {
+        mContext = context;
+    }
+
+    @Override
+    public void insertLocalMediaAlbumTag(LocalMedia_AlbumTag media_albumTag) {
+        DateBaseHelper dbHelper = new DateBaseHelper(mContext);
+        SQLiteDatabase sqLiteDatabase = dbHelper.getWritableDatabase();
+        ContentValues cv = new ContentValues();
+        cv.put("local_id",media_albumTag.getLocal_id());
+        cv.put("tag_id",media_albumTag.getAlbum_id());
+        long result = sqLiteDatabase.insert(DateBaseHelper.LOCAL_MEDIA_ALBUM_TAG_TABLE,null,cv);
+        if(result>0) {
+            Log.i(TAG,"insert localMedia_AlbumTag succeed");
+        }
+        sqLiteDatabase.close();
+        dbHelper.close();
+    }
+
+    @Override
+    public void deleteLocalMediaAlbumTag(LocalMedia_AlbumTag media_albumTag) {
+        DateBaseHelper dbHelper = new DateBaseHelper(mContext);
+        SQLiteDatabase sqLiteDatabase = dbHelper.getWritableDatabase();
+        int result = sqLiteDatabase.delete(DateBaseHelper.LOCAL_MEDIA_ALBUM_TAG_TABLE,"local_id = ? and tag_id = ?",new String[]{media_albumTag.getLocal_id()+"",media_albumTag.getAlbum_id()+""});
+        if (result>0) {
+            Log.i(TAG,"delete localMedia_AlbumTag succeed");
+        }
+        sqLiteDatabase.close();
+        dbHelper.close();
+    }
+
+    @Override
+    public void deleteLocalMediaAlbumTagByLocalId(int local_id) {
+        DateBaseHelper dbHelper = new DateBaseHelper(mContext);
+        SQLiteDatabase sqLiteDatabase = dbHelper.getWritableDatabase();
+        int result = sqLiteDatabase.delete(DateBaseHelper.LOCAL_MEDIA_ALBUM_TAG_TABLE,"local_id = ?",new String[]{"" + local_id});
+        if (result>0) {
+            Log.i(TAG,"delete localMedia_AlbumTag succeed");
+        }
+        sqLiteDatabase.close();
+        dbHelper.close();
+    }
+
+    @Override
+    public void deleteLocalMediaAlbumTagByTagId(int tag_id) {
+        DateBaseHelper dbHelper = new DateBaseHelper(mContext);
+        SQLiteDatabase sqLiteDatabase = dbHelper.getWritableDatabase();
+        int result = sqLiteDatabase.delete(DateBaseHelper.LOCAL_MEDIA_ALBUM_TAG_TABLE,"tag_id = ?",new String[]{"" + tag_id});
+        if (result>0) {
+            Log.i(TAG,"delete localMedia_AlbumTag succeed");
+        }
+        sqLiteDatabase.close();
+        dbHelper.close();
+    }
+
+    @Override
+    public void updateLocalMediaAlbumTag(LocalMedia_AlbumTag media_albumTag) {
+        DateBaseHelper dbHelper = new DateBaseHelper(mContext);
+        SQLiteDatabase sqLiteDatabase = dbHelper.getWritableDatabase();
+        ContentValues cv = new ContentValues();
+        cv.put("local_id",media_albumTag.getLocal_id());
+        cv.put("tag_id",media_albumTag.getAlbum_id());
+        int result = sqLiteDatabase.update(DateBaseHelper.LOCAL_MEDIA_ALBUM_TAG_TABLE,cv,"id = ?", new String[]{""+media_albumTag.getId()});
+        if (result > 0) {
+            Log.i(TAG,"update local media album tag succeed");
+        }
+        sqLiteDatabase.close();
+        dbHelper.close();
+    }
+
+    @Override
+    public ArrayList<LocalMedia_AlbumTag> queryAllLocalMediaAlbumTag() {
+        DateBaseHelper dbHelper = new DateBaseHelper(mContext);
+        SQLiteDatabase sqLiteDatabase = dbHelper.getWritableDatabase();
+        ArrayList<LocalMedia_AlbumTag> media_tagList = new ArrayList<>();
+        Cursor cursor = sqLiteDatabase.query(DateBaseHelper.LOCAL_MEDIA_ALBUM_TAG_TABLE, LOCAL_MEDIA_ALBUM_TAG_COLUMN,null,null,null,null,null);
+        if (cursor != null) {
+            while(cursor.moveToNext()) {
+                int id = cursor.getInt(cursor.getColumnIndex(LOCAL_MEDIA_ALBUM_TAG_COLUMN[0]));
+                int local_id = cursor.getInt(cursor.getColumnIndex(LOCAL_MEDIA_ALBUM_TAG_COLUMN[1]));
+                int tag_id = cursor.getInt(cursor.getColumnIndex(LOCAL_MEDIA_ALBUM_TAG_COLUMN[2]));
+
+                LocalMedia_AlbumTag media_tag = new LocalMedia_AlbumTag();
+                media_tag.setId(id);
+                media_tag.setLocal_id(local_id);
+                media_tag.setAlbum_id(tag_id);
+
+                media_tagList.add(media_tag);
+            }
+        }
+        cursor.close();
+        sqLiteDatabase.close();
+        dbHelper.close();
+        return media_tagList;
+    }
+
+    @Override
+    public ArrayList<LocalMedia_AlbumTag> queryMediaAlbumTagBylocal_id(int local_id) {
+        DateBaseHelper dbHelper = new DateBaseHelper(mContext);
+        SQLiteDatabase sqLiteDatabase = dbHelper.getWritableDatabase();
+        ArrayList<LocalMedia_AlbumTag> media_tagList = new ArrayList<>();
+        Cursor cursor = sqLiteDatabase.query(DateBaseHelper.LOCAL_MEDIA_ALBUM_TAG_TABLE, LOCAL_MEDIA_ALBUM_TAG_COLUMN,"local_id = ?",new String[]{local_id+""},null,null,null);
+        if (cursor != null) {
+            while(cursor.moveToNext()) {
+                int id = cursor.getInt(cursor.getColumnIndex(LOCAL_MEDIA_ALBUM_TAG_COLUMN[0]));
+                int tag_id = cursor.getInt(cursor.getColumnIndex(LOCAL_MEDIA_ALBUM_TAG_COLUMN[2]));
+
+                LocalMedia_AlbumTag media_tag = new LocalMedia_AlbumTag();
+                media_tag.setId(id);
+                media_tag.setLocal_id(local_id);
+                media_tag.setAlbum_id(tag_id);
+
+                media_tagList.add(media_tag);
+            }
+        }
+        cursor.close();
+        sqLiteDatabase.close();
+        dbHelper.close();
+        return media_tagList;
+    }
+
+    @Override
+    public ArrayList<LocalMedia_AlbumTag> queryMediaAlbumTagByTag_id(int tag_id) {
+        DateBaseHelper dbHelper = new DateBaseHelper(mContext);
+        SQLiteDatabase sqLiteDatabase = dbHelper.getWritableDatabase();
+        ArrayList<LocalMedia_AlbumTag> media_tagList = new ArrayList<>();
+        Cursor cursor = sqLiteDatabase.query(DateBaseHelper.LOCAL_MEDIA_ALBUM_TAG_TABLE, LOCAL_MEDIA_ALBUM_TAG_COLUMN,"tag_id = ?",new String[]{tag_id+""},null,null,null);
+        if (cursor != null) {
+            while(cursor.moveToNext()) {
+                int id = cursor.getInt(cursor.getColumnIndex(LOCAL_MEDIA_ALBUM_TAG_COLUMN[0]));
+                int local_id = cursor.getInt(cursor.getColumnIndex(LOCAL_MEDIA_ALBUM_TAG_COLUMN[1]));
+
+                LocalMedia_AlbumTag media_tag = new LocalMedia_AlbumTag();
+                media_tag.setId(id);
+                media_tag.setLocal_id(local_id);
+                media_tag.setAlbum_id(tag_id);
+
+                media_tagList.add(media_tag);
+            }
+        }
+        cursor.close();
+        sqLiteDatabase.close();
+        dbHelper.close();
+        return media_tagList;
+    }
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/model/LocalMediaDaoImpl.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/model/LocalMediaDaoImpl.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/model/LocalMediaDaoImpl.java	(revision 1020)
@@ -0,0 +1,472 @@
+package com.gallery.tclgallery.model;
+
+import android.content.ContentValues;
+import android.content.Context;
+import android.database.Cursor;
+import android.database.sqlite.SQLiteDatabase;
+import android.provider.MediaStore;
+import android.util.Log;
+import android.widget.ArrayAdapter;
+
+import com.gallery.tclgallery.R;
+import com.gallery.tclgallery.bean.AlbumTag;
+import com.gallery.tclgallery.bean.LocalMediaBean;
+import com.gallery.tclgallery.bean.LocalMedia_AlbumTag;
+import com.gallery.tclgallery.interfaces.AlbumDao;
+import com.gallery.tclgallery.interfaces.LocalMediaDao;
+import com.gallery.tclgallery.interfaces.LocalMedia_AlbumTagDao;
+import com.gallery.tclgallery.utils.DateBaseHelper;
+import com.gallery.tclgallery.utils.LocalMediaScanTask;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * Created by liddo on 2017/10/10.
+ */
+
+public class LocalMediaDaoImpl implements LocalMediaDao {
+    private static final String TAG = "LocalMediaDao";
+
+    private Context mContext;
+    private ArrayList<LocalMediaBean> localMedia;
+    private ArrayList<AlbumTag> albumTags;
+    private ArrayList<LocalMedia_AlbumTag> localMedia_TagList;
+    private AlbumDao albumDao;
+    private LocalMedia_AlbumTagDao localMedia_albumTagDao;
+
+    private static final String[] LOCAL_MEDIA = {
+            DateBaseHelper.LOCAL_MEDIA_DB_ID,
+            DateBaseHelper.LOCAL_MEDIA_DB_TYPE,
+            DateBaseHelper.LOCAL_MEDIA_DB_MIME_TYPE,
+            DateBaseHelper.LOCAL_MEDIA_DB_CREATE_AT,
+            DateBaseHelper.LOCAL_MEDIA_DB_GENERATED_AT,
+            DateBaseHelper.LOCAL_MEDIA_DB_LOCAL_PATH,
+            DateBaseHelper.LOCAL_MEDIA_DB_THUMBNAIL_PATH,
+            DateBaseHelper.LOCAL_MEDIA_DB_SIZE,
+            DateBaseHelper.LOCAL_MEDIA_DB_TAKEN_AT,
+            DateBaseHelper.LOCAL_MEDIA_DB_LATITUDE,
+            DateBaseHelper.LOCAL_MEDIA_DB_LONGITUDE,
+            DateBaseHelper.LOCAL_MEDIA_DB_LOCATION,
+            DateBaseHelper.LOCAL_MEDIA_DB_DURATION,
+            DateBaseHelper.LOCAL_MEDIA_DB_SECRET,
+            DateBaseHelper.LOCAL_MEDIA_DB_WIDTH,
+            DateBaseHelper.LOCAL_MEDIA_DB_HEIGHT,
+            DateBaseHelper.LOCAL_MEDIA_DB_ORIENTATION,
+            DateBaseHelper.LOCAL_MEDIA_DB_VISIBLE
+    };
+
+    public LocalMediaDaoImpl(Context context) {
+        mContext = context;
+        albumDao = new AlbumDaoImpl(mContext);
+        localMedia_albumTagDao = new LocalMedia_AlbumTagDaoImpl(mContext);
+    }
+
+    @Override
+    public List<LocalMediaBean> getAllLocalMedia() {
+        List<LocalMediaBean> allLocalMedia = new ArrayList<>();
+        DateBaseHelper dbHelper = new DateBaseHelper(mContext);
+        SQLiteDatabase sqLiteDatabase = dbHelper.getWritableDatabase();
+        String sql = "select * from Local_media";
+        Cursor cursor = sqLiteDatabase.query(DateBaseHelper.LOCAL_MEDIA_DB_TABLE,LOCAL_MEDIA,null,null,null,null,null);
+        if (cursor != null) {
+            while(cursor.moveToNext()){
+                int local_id = cursor.getInt(cursor.getColumnIndex(LOCAL_MEDIA[0]));
+                String type = cursor.getString(cursor.getColumnIndex(LOCAL_MEDIA[1]));
+                String mime_type = cursor.getString(cursor.getColumnIndex(LOCAL_MEDIA[2]));
+                int created_at = cursor.getInt(cursor.getColumnIndex(LOCAL_MEDIA[3]));
+                int generated_at = cursor.getInt(cursor.getColumnIndex(LOCAL_MEDIA[4]));
+                String local_path = cursor.getString(cursor.getColumnIndex(LOCAL_MEDIA[5]));
+                String thumbnail_path = cursor.getString(cursor.getColumnIndex(LOCAL_MEDIA[6]));
+                int size = cursor.getInt(cursor.getColumnIndex(LOCAL_MEDIA[7]));
+                int taken_at = cursor.getInt(cursor.getColumnIndex(LOCAL_MEDIA[8]));
+                float latitude = cursor.getFloat(cursor.getColumnIndex(LOCAL_MEDIA[9]));
+                float longitude = cursor.getFloat(cursor.getColumnIndex(LOCAL_MEDIA[10]));
+                String location = cursor.getString(cursor.getColumnIndex(LOCAL_MEDIA[11]));
+                int duration = cursor.getInt(cursor.getColumnIndex(LOCAL_MEDIA[12]));
+                int secret  = cursor.getInt(cursor.getColumnIndex(LOCAL_MEDIA[13]));
+                int width = cursor.getInt(cursor.getColumnIndex(LOCAL_MEDIA[14]));
+                int height = cursor.getInt(cursor.getColumnIndex(LOCAL_MEDIA[15]));
+                int orientation = cursor.getInt(cursor.getColumnIndex(LOCAL_MEDIA[16]));
+                int visible = cursor.getInt(cursor.getColumnIndex(LOCAL_MEDIA[17]));
+
+                LocalMediaBean localMedia = new LocalMediaBean();
+                localMedia.setLocal_id(local_id);
+                localMedia.setType(type);
+                localMedia.setMime_type(mime_type);
+                localMedia.setCreated_at(created_at);
+                localMedia.setGenerated_at(generated_at);
+                localMedia.setLocal_path(local_path);
+                localMedia.setThumbPath(thumbnail_path);
+                localMedia.setSize(size);
+                localMedia.setTaken_at(taken_at);
+                localMedia.setLatitude(latitude);
+                localMedia.setLongitude(longitude);
+                localMedia.setLocation(location);
+                localMedia.setDuration(duration);
+                localMedia.setSecret(secret);
+                localMedia.setWidth(width);
+                localMedia.setHeight(height);
+                localMedia.setOrientation(orientation);
+                localMedia.setVisible(visible);
+
+                allLocalMedia.add(localMedia);
+            }
+            cursor.close();
+        }
+        return allLocalMedia;
+    }
+
+    @Override
+    public void initLocalMedia() {
+        //检索系统原生数据库中的音乐视频文件
+        localMedia = new ArrayList<>();
+        LocalMediaScanTask scanTask = new LocalMediaScanTask(mContext, new LocalMediaScanTask.Callback() {
+            @Override
+            public void onScanCallback(ArrayList<LocalMediaBean> localMediaList) {
+                localMedia = localMediaList;
+                // 将检索到的数据写入到本地数据表Local_media中
+                for (LocalMediaBean localMediaBean:localMedia) {
+                    insertLocalMedia(localMediaBean);
+                }
+                initAlbum();
+                // 相册表，（每个相册包含图片）
+                for(AlbumTag albumTag:albumTags){
+                    Log.i("dongdong",albumTag.getTag_id()+"  "+albumTag.getName()+"   "+albumTag.getLocal_path());
+                    ArrayList<LocalMediaBean> medias = albumTag.getMediaBeans();
+                    for (LocalMediaBean albumMedias:medias) {
+                        Log.i("dongdong","    "+albumMedias.getName());
+                    }
+                }
+                // 计算最后修改时间和相册显示
+                for (AlbumTag albumTag:albumTags) {
+                    ArrayList<LocalMediaBean> medias = albumTag.getMediaBeans();
+                    albumTag.setLast_update_time(getLastUpdateTime(medias));
+                    if (albumTag.getTag_id()>0) {
+                        albumTag.setVisible(1);
+                    } else {
+                        albumTag.setVisible(0);
+                    }
+                    albumTag.setItem_count(medias.size());
+                    albumDao.insertAlbumTag(albumTag);
+                }
+
+                // 关系表
+                for (LocalMedia_AlbumTag media_albumTag:localMedia_TagList) {
+                    Log.i("dongdongli", media_albumTag.getId()+"  "+media_albumTag.getLocal_id()+"   "+media_albumTag.getAlbum_id());
+                    localMedia_albumTagDao.insertLocalMediaAlbumTag(media_albumTag);
+                }
+            }
+        });
+        scanTask.execute();
+    }
+
+    /**
+     *  type: 1.表示实际存在的相册，4，表示虚拟的相册��Favourites,CinemaGraph），101.私密相册，100，自建相册（无实际路径）
+     *
+     */
+    private void initAlbum(){
+
+        int tag_id = 0;
+        int localMedia_AlbumTag_id = 0;
+        albumTags = new ArrayList<>();
+        localMedia_TagList = new ArrayList<>();
+        ArrayList<String> album_local_path_list = new ArrayList<>();
+        String[] default_album_local_path = mContext.getResources().getStringArray(R.array.default_album);
+
+        // Camera
+        AlbumTag albumDefaultCamera = new AlbumTag();
+        albumDefaultCamera.setTag_id(1);
+        albumDefaultCamera.setType(1);
+        albumDefaultCamera.setName(mContext.getString(R.string.default_album_camera));
+        albumDefaultCamera.setDisplay_name(mContext.getString(R.string.default_album_camera));
+        albumDefaultCamera.setLocal_path(default_album_local_path[0]);
+        albumDefaultCamera.setMediaBeans(new ArrayList<LocalMediaBean>());
+        albumDefaultCamera.setDefault_album(1);
+        albumTags.add(albumDefaultCamera);
+        album_local_path_list.add(default_album_local_path[0]);
+        //Favourites
+        AlbumTag albumDefaultFavourite = new AlbumTag();
+        albumDefaultFavourite.setTag_id(2);
+        albumDefaultFavourite.setType(4);
+        albumDefaultFavourite.setName(mContext.getString(R.string.default_album_favourites));
+        albumDefaultFavourite.setDisplay_name(mContext.getString(R.string.default_album_favourites));
+        albumDefaultFavourite.setMediaBeans(new ArrayList<LocalMediaBean>());
+        albumDefaultFavourite.setLocal_path("");
+        albumDefaultFavourite.setDefault_album(1);
+        albumTags.add(albumDefaultFavourite);
+        //Selfies
+        AlbumTag albumDefaultSelfies = new AlbumTag();
+        albumDefaultSelfies.setTag_id(3);
+        albumDefaultSelfies.setType(1);
+        albumDefaultSelfies.setName(mContext.getString(R.string.default_album_self));
+        albumDefaultSelfies.setDisplay_name(mContext.getString(R.string.default_album_self));
+        albumDefaultSelfies.setLocal_path(default_album_local_path[1]);
+        albumDefaultSelfies.setMediaBeans(new ArrayList<LocalMediaBean>());
+        albumDefaultSelfies.setDefault_album(1);
+        albumTags.add(albumDefaultSelfies);
+        album_local_path_list.add(default_album_local_path[1]);
+        //Videos
+        AlbumTag albumDefaultVideos = new AlbumTag();
+        albumDefaultVideos.setTag_id(4);
+        albumDefaultVideos.setType(1);
+        albumDefaultVideos.setName(mContext.getString(R.string.default_album_videos));
+        albumDefaultVideos.setDisplay_name(mContext.getString(R.string.default_album_videos));
+        albumDefaultVideos.setLocal_path(default_album_local_path[2]);
+        albumDefaultVideos.setMediaBeans(new ArrayList<LocalMediaBean>());
+        albumDefaultVideos.setDefault_album(1);
+        albumTags.add(albumDefaultVideos);
+        album_local_path_list.add(default_album_local_path[2]);
+        //ScreenShots
+        AlbumTag albumDefaultScreenshots = new AlbumTag();
+        albumDefaultScreenshots.setTag_id(5);
+        albumDefaultScreenshots.setType(1);
+        albumDefaultScreenshots.setName(mContext.getString(R.string.default_album_screenshots));
+        albumDefaultScreenshots.setDisplay_name(mContext.getString(R.string.default_album_screenshots));
+        albumDefaultScreenshots.setLocal_path(default_album_local_path[3]);
+        albumDefaultScreenshots.setMediaBeans(new ArrayList<LocalMediaBean>());
+        albumDefaultScreenshots.setDefault_album(1);
+        albumTags.add(albumDefaultScreenshots);
+        album_local_path_list.add(default_album_local_path[3]);
+        //MyCreation
+        AlbumTag albumDefaultMyCreation = new AlbumTag();
+        albumDefaultMyCreation.setTag_id(6);
+        albumDefaultMyCreation.setType(1);
+        albumDefaultMyCreation.setName(mContext.getString(R.string.default_album_my_creation));
+        albumDefaultMyCreation.setDisplay_name(mContext.getString(R.string.default_album_my_creation));
+        albumDefaultMyCreation.setLocal_path(default_album_local_path[4]);
+        albumDefaultMyCreation.setMediaBeans(new ArrayList<LocalMediaBean>());
+        albumDefaultMyCreation.setDefault_album(1);
+        albumTags.add(albumDefaultMyCreation);
+        album_local_path_list.add(default_album_local_path[4]);
+        //Cinema Graph
+        AlbumTag albumDefaultCinemaGraph = new AlbumTag();
+        albumDefaultCinemaGraph.setTag_id(7);
+        albumDefaultCinemaGraph.setType(4);
+        albumDefaultCinemaGraph.setName(mContext.getString(R.string.default_album_cinema_graph));
+        albumDefaultCinemaGraph.setDisplay_name(mContext.getString(R.string.default_album_cinema_graph));
+        albumDefaultCinemaGraph.setMediaBeans(new ArrayList<LocalMediaBean>());
+        albumDefaultCinemaGraph.setLocal_path("");
+        albumDefaultCinemaGraph.setDefault_album(1);
+        albumTags.add(albumDefaultCinemaGraph);
+        //Private
+        AlbumTag albumDefaultPrivate = new AlbumTag();
+        albumDefaultPrivate.setTag_id(8);
+        albumDefaultPrivate.setType(101);
+        albumDefaultPrivate.setName(mContext.getString(R.string.default_album_private));
+        albumDefaultPrivate.setDisplay_name(mContext.getString(R.string.default_album_private));
+        albumDefaultPrivate.setMediaBeans(new ArrayList<LocalMediaBean>());
+        albumDefaultPrivate.setLocal_path("");
+        albumDefaultPrivate.setDefault_album(1);
+        albumTags.add(albumDefaultPrivate);
+
+        //localMedia_TagList
+        for (LocalMediaBean localMediaBean: localMedia){
+            String[] local_path_dir = localMediaBean.getLocal_path().split("\\/");
+            StringBuilder sb = new StringBuilder();
+            for (int i=0;i<local_path_dir.length-1;i++){
+                if (i!=local_path_dir.length-2) {
+                    sb.append(local_path_dir[i] + "/");
+                }else {
+                    sb.append(local_path_dir[i]);
+                }
+            }
+            String local_path = sb.toString();
+            if (album_local_path_list.contains(local_path)){
+                // 已存在的相册
+                AlbumTag existAlbum = getAlbumTagByLocalPath(local_path);
+                albumTags.remove(existAlbum);
+                ArrayList<LocalMediaBean> localMedias = new ArrayList<>();
+                localMedias.addAll(existAlbum.getMediaBeans());
+                localMedias.add(localMediaBean);
+                existAlbum.setMediaBeans(localMedias);
+                int item_count = existAlbum.getItem_count();
+                albumTags.add(existAlbum);
+                LocalMedia_AlbumTag localMedia_albumTag = new LocalMedia_AlbumTag();
+                localMedia_albumTag.setId(++localMedia_AlbumTag_id);
+                localMedia_albumTag.setLocal_id(localMediaBean.getLocal_id());
+                localMedia_albumTag.setAlbum_id(existAlbum.getTag_id());
+                localMedia_TagList.add(localMedia_albumTag);
+            } else {
+                // 新相册
+                AlbumTag newAlbum = new AlbumTag();
+                newAlbum.setTag_id(--tag_id);
+                newAlbum.setType(1);
+                newAlbum.setName(localMediaBean.getBucketName());
+                newAlbum.setDisplay_name(localMediaBean.getBucketName());
+                newAlbum.setLocal_path(local_path);
+                ArrayList<LocalMediaBean> localMediaList = new ArrayList<>();
+                localMediaList.add(localMediaBean);
+                newAlbum.setMediaBeans(localMediaList);
+                album_local_path_list.add(local_path);
+                albumTags.add(newAlbum);
+                LocalMedia_AlbumTag localMedia_albumTag = new LocalMedia_AlbumTag();
+                localMedia_albumTag.setId(++localMedia_AlbumTag_id);
+                localMedia_albumTag.setLocal_id(localMediaBean.getLocal_id());
+                localMedia_albumTag.setAlbum_id(newAlbum.getTag_id());
+                localMedia_TagList.add(localMedia_albumTag);
+            }
+        }
+    }
+
+    /**
+     * 通过Local_path查询现存数据表中的AlbumTag对象
+     * @param local_path
+     * @return
+     */
+    private AlbumTag getAlbumTagByLocalPath(String local_path) {
+        for (AlbumTag albumTag:albumTags) {
+            if (albumTag.getLocal_path()!=null) {
+                if (albumTag.getLocal_path().equals(local_path)) {
+                    return albumTag;
+                }
+            }
+        }
+        return null;
+    }
+
+    private int getLastUpdateTime(ArrayList<LocalMediaBean> localMedias){
+        int lastUpdateTime = 0;
+        if (localMedias.size()!=0) {
+            lastUpdateTime = localMedias.get(0).getGenerated_at();
+            for (LocalMediaBean localMediaBean : localMedias) {
+                int tmp = localMediaBean.getGenerated_at();
+                if (lastUpdateTime<tmp) {
+                    lastUpdateTime = tmp;
+                }
+            }
+        }
+        return lastUpdateTime;
+    }
+
+    @Override
+    public void insertLocalMedia(LocalMediaBean localMediaBean) {
+        DateBaseHelper dbHelper = new DateBaseHelper(mContext);
+        SQLiteDatabase sqLiteDatabase = dbHelper.getWritableDatabase();
+        ContentValues cv = new ContentValues();
+        cv.put("local_id",localMediaBean.getLocal_id());
+        cv.put("name",localMediaBean.getName());
+        cv.put("bucket_name",localMediaBean.getBucketName());
+        cv.put("type",localMediaBean.getType());
+        cv.put("mime_type",localMediaBean.getMime_type());
+        cv.put("create_at",localMediaBean.getCreated_at());
+        cv.put("generated_at",localMediaBean.getGenerated_at());
+        cv.put("local_path",localMediaBean.getLocal_path());
+        cv.put("thumbnail_path",localMediaBean.getThumbPath());
+        cv.put("size",localMediaBean.getSize());
+        cv.put("taken_at",localMediaBean.getTaken_at());
+        cv.put("latitude",localMediaBean.getLatitude());
+        cv.put("longitude",localMediaBean.getLongitude());
+        cv.put("location",localMediaBean.getLocation());
+        cv.put("duration",localMediaBean.getDuration());
+        cv.put("secret",localMediaBean.getSecret());
+        cv.put("width",localMediaBean.getWidth());
+        cv.put("height",localMediaBean.getHeight());
+        cv.put("orientation",localMediaBean.getOrientation());
+        cv.put("visible",localMediaBean.getVisible());
+        long result = sqLiteDatabase.insert(DateBaseHelper.LOCAL_MEDIA_DB_TABLE,null,cv);
+        if (result>0){
+            Log.i(TAG,"insert local media succeed");
+        }
+        sqLiteDatabase.close();
+        dbHelper.close();
+    }
+
+    @Override
+    public void deleteLocalMedia(LocalMediaBean localMediaBean) {
+        DateBaseHelper dbHelper = new DateBaseHelper(mContext);
+        SQLiteDatabase sqLiteDatabase = dbHelper.getWritableDatabase();
+        int result = sqLiteDatabase.delete(DateBaseHelper.LOCAL_MEDIA_DB_TABLE,"local_id = ?", new String[]{localMediaBean.getLocal_id()+""});
+        if (result>0) {
+            Log.i(TAG,"delete local media succeed");
+        }
+        sqLiteDatabase.close();
+        dbHelper.close();
+    }
+
+    @Override
+    public void updateLocalMedia(LocalMediaBean localMediaBean) {
+        DateBaseHelper dateBaseHelper = new DateBaseHelper(mContext);
+        SQLiteDatabase sqLiteDatabase = dateBaseHelper.getWritableDatabase();
+        ContentValues cv = new ContentValues();
+        cv.put("name",localMediaBean.getName());
+        cv.put("bucket_name",localMediaBean.getBucketName());
+        cv.put("type",localMediaBean.getType());
+        cv.put("mime_type",localMediaBean.getMime_type());
+        cv.put("create_at",localMediaBean.getCreated_at());
+        cv.put("generated_at",localMediaBean.getGenerated_at());
+        cv.put("local_path",localMediaBean.getLocal_path());
+        cv.put("thumbnail_path",localMediaBean.getThumbPath());
+        cv.put("size",localMediaBean.getSize());
+        cv.put("taken_at",localMediaBean.getTaken_at());
+        cv.put("latitude",localMediaBean.getLatitude());
+        cv.put("longitude",localMediaBean.getLongitude());
+        cv.put("location",localMediaBean.getLocation());
+        cv.put("duration",localMediaBean.getDuration());
+        cv.put("secret",localMediaBean.getSecret());
+        cv.put("width",localMediaBean.getWidth());
+        cv.put("height",localMediaBean.getHeight());
+        cv.put("orientation",localMediaBean.getOrientation());
+        cv.put("visible",localMediaBean.getVisible());
+
+        int result = sqLiteDatabase.update(DateBaseHelper.LOCAL_MEDIA_DB_TABLE,cv,"local_id = ?",new String[]{localMediaBean.getLocal_id()+""});
+        if (result>0) {
+            Log.i(TAG,"update local media succeed");
+        }
+        sqLiteDatabase.close();
+        dateBaseHelper.close();
+    }
+
+    @Override
+    public LocalMediaBean getLocalMediaBeanByLocalId(int local_id) {
+        DateBaseHelper dbHelper = new DateBaseHelper(mContext);
+        SQLiteDatabase sqLiteDatabase = dbHelper.getWritableDatabase();
+        LocalMediaBean media = new LocalMediaBean();
+        Cursor cursor = sqLiteDatabase.query(DateBaseHelper.LOCAL_MEDIA_DB_TABLE,LOCAL_MEDIA,"local_id = ?",new String[]{local_id+""},null,null,null);
+        if (cursor != null) {
+            if (cursor.moveToFirst()) {
+                String type = cursor.getString(cursor.getColumnIndex(LOCAL_MEDIA[1]));
+                String mime_type = cursor.getString(cursor.getColumnIndex(LOCAL_MEDIA[2]));
+                int created_at = cursor.getInt(cursor.getColumnIndex(LOCAL_MEDIA[3]));
+                int generated_at = cursor.getInt(cursor.getColumnIndex(LOCAL_MEDIA[4]));
+                String local_path = cursor.getString(cursor.getColumnIndex(LOCAL_MEDIA[5]));
+                String thumbnail_path = cursor.getString(cursor.getColumnIndex(LOCAL_MEDIA[6]));
+                int size = cursor.getInt(cursor.getColumnIndex(LOCAL_MEDIA[7]));
+                int taken_at = cursor.getInt(cursor.getColumnIndex(LOCAL_MEDIA[8]));
+                float latitude = cursor.getFloat(cursor.getColumnIndex(LOCAL_MEDIA[9]));
+                float longitude = cursor.getFloat(cursor.getColumnIndex(LOCAL_MEDIA[10]));
+                String location = cursor.getString(cursor.getColumnIndex(LOCAL_MEDIA[11]));
+                int duration = cursor.getInt(cursor.getColumnIndex(LOCAL_MEDIA[12]));
+                int secret  = cursor.getInt(cursor.getColumnIndex(LOCAL_MEDIA[13]));
+                int width = cursor.getInt(cursor.getColumnIndex(LOCAL_MEDIA[14]));
+                int height = cursor.getInt(cursor.getColumnIndex(LOCAL_MEDIA[15]));
+                int orientation = cursor.getInt(cursor.getColumnIndex(LOCAL_MEDIA[16]));
+                int visible = cursor.getInt(cursor.getColumnIndex(LOCAL_MEDIA[17]));
+
+                media.setType(type);
+                media.setMime_type(mime_type);
+                media.setCreated_at(created_at);
+                media.setGenerated_at(generated_at);
+                media.setLocal_path(local_path);
+                media.setThumbPath(thumbnail_path);
+                media.setSize(size);
+                media.setTaken_at(taken_at);
+                media.setLatitude(latitude);
+                media.setLongitude(longitude);
+                media.setLocation(location);
+                media.setDuration(duration);
+                media.setSecret(secret);
+                media.setWidth(width);
+                media.setHeight(height);
+                media.setOrientation(orientation);
+                media.setVisible(visible);
+
+            }
+        }
+        cursor.close();
+        sqLiteDatabase.close();
+        dbHelper.close();
+        return media;
+    }
+
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/utils/LocalMediaScanTask.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/utils/LocalMediaScanTask.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/utils/LocalMediaScanTask.java	(revision 1020)
@@ -0,0 +1,50 @@
+package com.gallery.tclgallery.utils;
+
+import android.content.Context;
+import android.os.AsyncTask;
+
+import com.gallery.tclgallery.bean.LocalMediaBean;
+
+import java.util.ArrayList;
+
+/**
+ * Created by liddo on 2017/10/11.
+ */
+
+public class LocalMediaScanTask extends AsyncTask<ArrayList<LocalMediaBean>, Void, ArrayList<LocalMediaBean>>{
+
+    public interface Callback {
+        /**
+         * Album scan result
+         * @param localMediaList
+         */
+        void onScanCallback(ArrayList<LocalMediaBean> localMediaList);
+    }
+
+    private Context mContext;
+    private Callback callback;
+
+    public LocalMediaScanTask(Context context, Callback callback){
+        mContext = context;
+        this.callback = callback;
+    }
+
+    @Override
+    protected void onPreExecute() {
+        super.onPreExecute();
+    }
+
+    @Override
+    protected ArrayList<LocalMediaBean> doInBackground(ArrayList<LocalMediaBean>... arrayLists) {
+        ArrayList<LocalMediaBean> localMediaList = new ArrayList<>();
+        localMediaList.addAll(new MediaReader2(mContext).getAllMedia());
+        return localMediaList;
+    }
+
+    @Override
+    protected void onPostExecute(ArrayList<LocalMediaBean> localMediaBean) {
+        super.onPostExecute(localMediaBean);
+        callback.onScanCallback(localMediaBean);
+    }
+
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/utils/RolloutBDInfo.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/utils/RolloutBDInfo.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/utils/RolloutBDInfo.java	(revision 1020)
@@ -0,0 +1,15 @@
+package com.gallery.tclgallery.utils;
+
+import java.io.Serializable;
+
+/**
+ * Created by Administrator on 2017/10/13.
+ */
+public class RolloutBDInfo implements Serializable {
+    //坐标
+    public float x;
+    public float y;
+    //在容器中显示的image的宽 高
+    public float width;
+    public float height;
+}
\ No newline at end of file
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/utils/MediaReader2.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/utils/MediaReader2.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/utils/MediaReader2.java	(revision 1020)
@@ -0,0 +1,251 @@
+package com.gallery.tclgallery.utils;
+
+import android.content.ContentResolver;
+import android.content.Context;
+import android.database.Cursor;
+import android.provider.MediaStore;
+
+import com.gallery.tclgallery.bean.LocalMediaBean;
+
+import java.io.File;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.List;
+
+/**
+ * Created by liddo on 2017/10/11.
+ */
+
+public class MediaReader2 {
+
+    private static final String TAG = "MediaReader2";
+    private Context mContext;
+
+    public MediaReader2(Context context) {
+        mContext = context;
+    }
+
+    /**
+     *  Image attribute.
+     */
+    private static final String[] IMAGES = {
+            MediaStore.Images.Media._ID,
+            MediaStore.Images.Media.DATA,
+            MediaStore.Images.Media.DISPLAY_NAME,
+            MediaStore.Images.Media.BUCKET_DISPLAY_NAME,
+            MediaStore.Images.Media.MIME_TYPE,
+            MediaStore.Images.Media.DATE_ADDED,
+            MediaStore.Images.Media.DATE_MODIFIED,
+            MediaStore.Images.Media.LATITUDE,
+            MediaStore.Images.Media.LONGITUDE,
+            MediaStore.Images.Media.SIZE,
+            MediaStore.Images.Media.WIDTH,
+            MediaStore.Images.Media.HEIGHT,
+            MediaStore.Images.Media.ORIENTATION
+    };
+
+    /**
+     * Image Thumb.
+     */
+    private static final String[] IMAGE_THUMB = {
+            MediaStore.Images.Thumbnails.DATA
+    };
+
+    /**
+     * Videos attribute.
+     */
+    private static final String[] VIDEOS = {
+            MediaStore.Video.Media._ID,
+            MediaStore.Video.Media.DATA,
+            MediaStore.Video.Media.DISPLAY_NAME,
+            MediaStore.Video.Media.BUCKET_DISPLAY_NAME,
+            MediaStore.Video.Media.MIME_TYPE,
+            MediaStore.Video.Media.DATE_ADDED,
+            MediaStore.Video.Media.DATE_MODIFIED,
+            MediaStore.Video.Media.LATITUDE,
+            MediaStore.Video.Media.LONGITUDE,
+            MediaStore.Video.Media.SIZE,
+            MediaStore.Video.Media.DURATION,
+            MediaStore.Video.Media.WIDTH,
+            MediaStore.Video.Media.HEIGHT
+    };
+
+    /**
+     * Video thumb.
+     */
+    private static final String[] VIDEOS_THUMB = {
+            MediaStore.Video.Thumbnails.DATA
+    };
+
+    /**
+     * Scan for image File
+     * @param localMediaList
+     */
+    private void scanImageFiles(List<LocalMediaBean> localMediaList) {
+        ContentResolver resolver = mContext.getContentResolver();
+        Cursor cursor = resolver.query(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,
+                IMAGES,
+                null,
+                null,
+                MediaStore.Images.Media.DATE_ADDED);
+        if (cursor != null) {
+            while (cursor.moveToNext()) {
+                int id = cursor.getInt(cursor.getColumnIndex(IMAGES[0]));               // local_id
+                String path = cursor.getString(cursor.getColumnIndex(IMAGES[1]));       // local_path
+                File file = new File(path);
+                if(!file.exists() || !file.canRead()) continue;
+
+                String name = cursor.getString(cursor.getColumnIndex(IMAGES[2]));
+                String bucketName = cursor.getString(cursor.getColumnIndex(IMAGES[3]));
+                String mimeType = cursor.getString(cursor.getColumnIndex(IMAGES[4]));   // mime_type (image/jpeg)
+                String type = mimeType.split("\\/")[1];                                 // type (jpeg)
+                int addDate = cursor.getInt(cursor.getColumnIndex(IMAGES[5]));        // created_at
+                int modifyDate = cursor.getInt(cursor.getColumnIndex(IMAGES[6]));     // generated_at taken_at
+                float latitude = cursor.getFloat(cursor.getColumnIndex(IMAGES[7]));     // latitude
+                float longitude = cursor.getFloat(cursor.getColumnIndex(IMAGES[8]));   // longitude
+                int size = cursor.getInt(cursor.getColumnIndex(IMAGES[9]));          // size
+                int width = cursor.getInt(cursor.getColumnIndex(IMAGES[10]));           // width
+                int height = cursor.getInt(cursor.getColumnIndex(IMAGES[11]));          // height
+                int orientation = cursor.getInt(cursor.getColumnIndex(IMAGES[12]));     // orientation
+                int duration = 0;                                                       // duration Image默认为0
+                String location = "";                                                   // location 暂无Location
+                int secret = 0;                                                         // secret   secret默认为0
+                int visible = 1;                                                        // visible  visible默认为1
+
+                LocalMediaBean localMedia = new LocalMediaBean();
+                localMedia.setLocal_id(id);
+                localMedia.setName(name);
+                localMedia.setBucketName(bucketName);
+                localMedia.setType(type);
+                localMedia.setMime_type(mimeType);
+                localMedia.setCreated_at(addDate);
+                localMedia.setGenerated_at(modifyDate);
+                localMedia.setLocal_path(path);
+                localMedia.setSize(size);
+                localMedia.setTaken_at(modifyDate);
+                localMedia.setLatitude(latitude);
+                localMedia.setLongitude(longitude);
+                localMedia.setWidth(width);
+                localMedia.setHeight(height);
+                localMedia.setOrientation(orientation);
+                localMedia.setDuration(duration);
+                localMedia.setLocation(location);
+                localMedia.setSecret(secret);
+                localMedia.setVisible(visible);
+
+                Cursor thumbCursor = resolver.query(MediaStore.Images.Thumbnails.EXTERNAL_CONTENT_URI,
+                        IMAGE_THUMB,
+                        MediaStore.Images.Thumbnails.IMAGE_ID + "=" + id,
+                        null,
+                        null);
+                if (thumbCursor != null ) {
+                    if (thumbCursor.moveToFirst()){
+                        String thumbPath = thumbCursor.getString(thumbCursor.getColumnIndex(IMAGE_THUMB[0]));      // thumbPath
+                        localMedia.setThumbPath(thumbPath);
+                    }
+                    thumbCursor.close();
+                }
+                localMediaList.add(localMedia);
+            }
+            cursor.close();
+        }
+    }
+
+    /**
+     * scan for video file
+     * @param localMediaList
+     */
+    private void scanVideoFile(List<LocalMediaBean> localMediaList) {
+        ContentResolver resolver = mContext.getContentResolver();
+        Cursor cursor = resolver.query(MediaStore.Video.Media.EXTERNAL_CONTENT_URI,
+                VIDEOS,
+                null,
+                null,
+                MediaStore.Video.Media.DATE_ADDED);
+
+        if (cursor != null) {
+            while (cursor.moveToNext()) {
+                int id = cursor.getInt(cursor.getColumnIndex(VIDEOS[0]));               //local_id
+                String path = cursor.getString(cursor.getColumnIndex(VIDEOS[1]));       //local_path
+
+                File file = new File(path);
+                if (!file.exists() || !file.canRead()) continue;
+
+                String name = cursor.getString(cursor.getColumnIndex(VIDEOS[2]));
+                String bucketName = cursor.getString(cursor.getColumnIndex(VIDEOS[3]));
+                String mimeType = cursor.getString(cursor.getColumnIndex(VIDEOS[4]));   // mimeType (video/avi)
+                String type = mimeType.split("\\/")[1];                                 // type (avi)
+                int addDate = cursor.getInt(cursor.getColumnIndex(VIDEOS[5]));          // created_at
+                int modifyDate = cursor.getInt(cursor.getColumnIndex(VIDEOS[6]));       // generated_at taken_at
+                float latitude = cursor.getFloat(cursor.getColumnIndex(VIDEOS[7]));     // latitude
+                float longitude = cursor.getFloat(cursor.getColumnIndex(VIDEOS[8]));   // longitude
+                String location = "";                                                   // location
+                int size = cursor.getInt(cursor.getColumnIndex(VIDEOS[9]));            // size
+                int duration = cursor.getInt(cursor.getColumnIndex(VIDEOS[10]));        // duration
+                int width = cursor.getInt(cursor.getColumnIndex(VIDEOS[11]));           // width
+                int height = cursor.getInt(cursor.getColumnIndex(VIDEOS[12]));          // height
+                int orientation = width > height ? 0 : 1;                                // orientation
+                int secret = 0;                                                         // secret
+                int visible = 1;                                                        // visible
+
+                LocalMediaBean localMedia = new LocalMediaBean();
+                localMedia.setLocal_id(id);
+                localMedia.setName(name);
+                localMedia.setBucketName(bucketName);
+                localMedia.setType(type);
+                localMedia.setMime_type(mimeType);
+                localMedia.setCreated_at(addDate);
+                localMedia.setGenerated_at(modifyDate);
+                localMedia.setLocal_path(path);
+                localMedia.setSize(size);
+                localMedia.setTaken_at(modifyDate);
+                localMedia.setLatitude(latitude);
+                localMedia.setLongitude(longitude);
+                localMedia.setWidth(width);
+                localMedia.setHeight(height);
+                localMedia.setOrientation(orientation);
+                localMedia.setDuration(duration);
+                localMedia.setLocation(location);
+                localMedia.setSecret(secret);
+                localMedia.setVisible(visible);
+
+                Cursor thumbCursor = resolver.query(MediaStore.Video.Thumbnails.EXTERNAL_CONTENT_URI,
+                        VIDEOS_THUMB,
+                        MediaStore.Video.Thumbnails.VIDEO_ID + "=" + id,
+                        null,
+                        null);
+                if (thumbCursor != null) {
+                    if (thumbCursor.moveToFirst()) {
+                        String thumbPath = thumbCursor.getString(thumbCursor.getColumnIndex(VIDEOS_THUMB[0]));
+                        localMedia.setThumbPath(thumbPath);
+                    }
+                    thumbCursor.close();
+                }
+                localMediaList.add(localMedia);
+            }
+            cursor.close();
+        }
+    }
+
+    /**
+     * Get all the multimedia files, including videos and pictures.
+     */
+    public ArrayList<LocalMediaBean> getAllMedia() {
+        ArrayList<LocalMediaBean> localMediaList = new ArrayList<>();
+        scanImageFiles(localMediaList);
+        scanVideoFile(localMediaList);
+        Collections.sort(localMediaList, new Comparator<LocalMediaBean>() {
+            @Override
+            public int compare(LocalMediaBean localMediaBean, LocalMediaBean t1) {
+                if (localMediaBean.getLocal_id() > t1.getLocal_id()){
+                    return -1;
+                } else {
+                    return 1;
+                }
+            }
+        });
+
+        return localMediaList;
+    }
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/utils/RGlideUtil.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/utils/RGlideUtil.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/utils/RGlideUtil.java	(revision 1020)
@@ -0,0 +1,31 @@
+package com.gallery.tclgallery.utils;
+
+import android.content.Context;
+import android.widget.ImageView;
+
+import com.bumptech.glide.Glide;
+
+/**
+ * Created by arthur on 2017/3/13.
+ * glide 工具
+ */
+
+public class RGlideUtil {
+    /**
+     * 加载图片
+     *
+     * @param context   上下文
+     * @param url       路径
+     * @param imageView view
+     */
+    public static void setImage(Context context, String url, ImageView imageView) {
+        Glide.with(context).load(url).centerCrop().into(imageView);
+    }
+
+    /**
+     * 清楚内存缓存,必须在UI线程调用
+     */
+    public static void clearMemory(Context context) {
+        Glide.get(context).clearMemory();
+    }
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/utils/DateBaseHelper.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/utils/DateBaseHelper.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/utils/DateBaseHelper.java	(revision 1020)
@@ -0,0 +1,139 @@
+package com.gallery.tclgallery.utils;
+
+import android.content.Context;
+import android.database.sqlite.SQLiteDatabase;
+import android.database.sqlite.SQLiteOpenHelper;
+import android.util.Log;
+
+/**
+ * Created by liddo on 2017/9/30.
+ */
+
+public class DateBaseHelper extends SQLiteOpenHelper {
+
+    private static final int VERSION = 1;
+    private static final String GALLERY_TCL_DB_NAME = "gallery_tcl.db";
+
+    public static final String LOCAL_MEDIA_DB_TABLE = "Local_media";
+    public static final String LOCAL_MEDIA_DB_ID = "local_id";
+    public static final String LOCAL_MEDIA_DB_NAME = "name";
+    public static final String LOCAL_MEDIA_DB_BUCKET_ID = "bucket_name";
+    public static final String LOCAL_MEDIA_DB_TYPE = "type";
+    public static final String LOCAL_MEDIA_DB_MIME_TYPE = "mime_type";
+    public static final String LOCAL_MEDIA_DB_CREATE_AT = "create_at";
+    public static final String LOCAL_MEDIA_DB_GENERATED_AT = "generated_at";
+    public static final String LOCAL_MEDIA_DB_LOCAL_PATH = "local_path";
+    public static final String LOCAL_MEDIA_DB_THUMBNAIL_PATH = "thumbnail_path";
+    public static final String LOCAL_MEDIA_DB_SIZE = "size";
+    public static final String LOCAL_MEDIA_DB_TAKEN_AT = "taken_at";
+    public static final String LOCAL_MEDIA_DB_LATITUDE = "latitude";
+    public static final String LOCAL_MEDIA_DB_LONGITUDE = "longitude";
+    public static final String LOCAL_MEDIA_DB_LOCATION = "location";
+    public static final String LOCAL_MEDIA_DB_DURATION = "duration";
+    public static final String LOCAL_MEDIA_DB_SECRET = "secret";
+    public static final String LOCAL_MEDIA_DB_WIDTH = "width";
+    public static final String LOCAL_MEDIA_DB_HEIGHT = "height";
+    public static final String LOCAL_MEDIA_DB_ORIENTATION = "orientation";
+    public static final String LOCAL_MEDIA_DB_VISIBLE = "visible";
+
+    public static final String ALBUM_TAG_DB_TABLE = "Album_tag";
+    public static final String ALBUM_TAG_DB_TAG_ID = "tag_id";
+    public static final String ALBUM_TAG_DB_TYPE = "type";
+    public static final String ALBUM_TAG_DB_NAME = "name";
+    public static final String ALBUM_TAG_DB_DISPLAY_NAME = "display_name";
+    public static final String ALBUM_TAG_DB_LOCAL_PATH = "local_path";
+    public static final String ALBUM_TAG_DB_VISIBLE = "visible";
+    public static final String ALBUM_TAG_DB_ITEM_COUNT = "item_count";
+    public static final String ALBUM_TAG_DB_DEFAULT = "default_album";
+    public static final String ALBUM_TAG_DB_LAST_UPDATE_TIME = "last_update_time";
+
+    public static final String[] ALBUM_TAG_COLUMNS = {ALBUM_TAG_DB_TAG_ID, ALBUM_TAG_DB_TYPE, ALBUM_TAG_DB_NAME, ALBUM_TAG_DB_DISPLAY_NAME,
+            ALBUM_TAG_DB_LOCAL_PATH, ALBUM_TAG_DB_VISIBLE, ALBUM_TAG_DB_ITEM_COUNT, ALBUM_TAG_DB_DEFAULT, ALBUM_TAG_DB_LAST_UPDATE_TIME };
+
+    public static final String LOCAL_MEDIA_ALBUM_TAG_TABLE = "local_media_album_tag";
+    public static final String LOCAL_MEDIA_ALBUM_TAG_ID = "id";
+    public static final String LOCAL_MEDIA_ALBUM_TAG_LOCAL_ID = "local_id";
+    public static final String LOCAL_MEDIA_ALBUM_TAG_ALBUM_TAG_ID = "tag_id";
+
+    public DateBaseHelper(Context context, String name, SQLiteDatabase.CursorFactory factory, int version) {
+        super(context, name, factory, version);
+    }
+
+    public DateBaseHelper(Context context, String name, int version) {
+        this(context, name, null, version);
+    }
+
+    public DateBaseHelper(Context context, String name) {
+        this(context, name, null,VERSION);
+    }
+
+    public DateBaseHelper(Context context) {
+        this(context, GALLERY_TCL_DB_NAME, null, VERSION);
+    }
+
+    @Override
+    public void onCreate(SQLiteDatabase db) {
+        StringBuilder sbLocalMedia = new StringBuilder();
+        sbLocalMedia.append("create table if not exists ");
+        sbLocalMedia.append(LOCAL_MEDIA_DB_TABLE);
+        sbLocalMedia.append("(");
+        sbLocalMedia.append(LOCAL_MEDIA_DB_ID).append(" integer primary key not null,");
+        sbLocalMedia.append(LOCAL_MEDIA_DB_NAME).append(" text not null,");
+        sbLocalMedia.append(LOCAL_MEDIA_DB_BUCKET_ID).append(" text not null,");
+        sbLocalMedia.append(LOCAL_MEDIA_DB_TYPE).append(" text not null,");
+        sbLocalMedia.append(LOCAL_MEDIA_DB_MIME_TYPE).append(" text,");
+        sbLocalMedia.append(LOCAL_MEDIA_DB_CREATE_AT).append(" integer not null,");
+        sbLocalMedia.append(LOCAL_MEDIA_DB_GENERATED_AT).append(" integer not null,");
+        sbLocalMedia.append(LOCAL_MEDIA_DB_LOCAL_PATH).append(" text,");
+        sbLocalMedia.append(LOCAL_MEDIA_DB_THUMBNAIL_PATH).append(" text,");
+        sbLocalMedia.append(LOCAL_MEDIA_DB_SIZE).append(" integer not null,");
+        sbLocalMedia.append(LOCAL_MEDIA_DB_TAKEN_AT).append(" integer not null,");
+        sbLocalMedia.append(LOCAL_MEDIA_DB_LATITUDE).append(" real not null,");
+        sbLocalMedia.append(LOCAL_MEDIA_DB_LONGITUDE).append(" real not null,");
+        sbLocalMedia.append(LOCAL_MEDIA_DB_LOCATION).append(" text,");
+        sbLocalMedia.append(LOCAL_MEDIA_DB_DURATION).append(" integer not null,");
+        sbLocalMedia.append(LOCAL_MEDIA_DB_SECRET).append(" integer not null,");
+        sbLocalMedia.append(LOCAL_MEDIA_DB_WIDTH).append(" integer,");
+        sbLocalMedia.append(LOCAL_MEDIA_DB_HEIGHT).append(" integer,");
+        sbLocalMedia.append(LOCAL_MEDIA_DB_ORIENTATION).append(" integer,");
+        sbLocalMedia.append(LOCAL_MEDIA_DB_VISIBLE).append(" integer not null");
+        sbLocalMedia.append(")");
+
+        db.execSQL(sbLocalMedia.toString());
+
+        StringBuilder sbAlbumTag = new StringBuilder();
+        sbAlbumTag.append("create table if not exists ");
+        sbAlbumTag.append(ALBUM_TAG_DB_TABLE);
+        sbAlbumTag.append("(");
+        sbAlbumTag.append(ALBUM_TAG_DB_TAG_ID).append(" integer primary key not null,");
+        sbAlbumTag.append(ALBUM_TAG_DB_TYPE).append(" integer not null,");
+        sbAlbumTag.append(ALBUM_TAG_DB_NAME).append(" text,");
+        sbAlbumTag.append(ALBUM_TAG_DB_DISPLAY_NAME).append(" text,");
+        sbAlbumTag.append(ALBUM_TAG_DB_LOCAL_PATH).append(" text,");
+        sbAlbumTag.append(ALBUM_TAG_DB_VISIBLE).append(" integer not null,");
+        sbAlbumTag.append(ALBUM_TAG_DB_ITEM_COUNT).append(" integer not null,");
+        sbAlbumTag.append(ALBUM_TAG_DB_DEFAULT).append(" integer not null,");
+        sbAlbumTag.append(ALBUM_TAG_DB_LAST_UPDATE_TIME).append(" integer not null");
+        sbAlbumTag.append(")");
+
+        db.execSQL(sbAlbumTag.toString());
+
+        StringBuilder sbLocalMediaAlbumTag = new StringBuilder();
+        sbLocalMediaAlbumTag.append("create table if not exists ");
+        sbLocalMediaAlbumTag.append(LOCAL_MEDIA_ALBUM_TAG_TABLE);
+        sbLocalMediaAlbumTag.append("(");
+        sbLocalMediaAlbumTag.append(LOCAL_MEDIA_ALBUM_TAG_ID).append(" integer primary key autoincrement,");
+        sbLocalMediaAlbumTag.append(LOCAL_MEDIA_ALBUM_TAG_LOCAL_ID).append(" integer not null,");
+        sbLocalMediaAlbumTag.append(LOCAL_MEDIA_ALBUM_TAG_ALBUM_TAG_ID).append(" integer not null");
+        sbLocalMediaAlbumTag.append(")");
+
+        db.execSQL(sbLocalMediaAlbumTag.toString());
+
+    }
+
+
+    @Override
+    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
+
+    }
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/utils/Format.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/utils/Format.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/utils/Format.java	(revision 1020)
@@ -0,0 +1,90 @@
+package com.gallery.tclgallery.utils;
+
+import android.util.SparseArray;
+
+import java.util.List;
+import java.util.Map;
+
+
+public class Format {
+
+    /**
+     * 判断是否为空
+     *
+     * @param list
+     * @return
+     */
+    public static boolean isEmpty(List list) {
+        if (list == null) {
+            return true;
+        }
+        return list.isEmpty();
+    }
+
+    /**
+     * 判断是否为空
+     *
+     * @param map
+     * @return
+     */
+    public static boolean isEmpty(Map map) {
+        if (map == null) {
+            return true;
+        }
+        return map.isEmpty();
+    }
+
+    /**
+     * 判断是否为空
+     *
+     * @param array
+     * @return
+     */
+    public static boolean isEmpty(SparseArray array) {
+        if (array == null) {
+            return true;
+        }
+        return array.size() <= 0;
+    }
+
+    /**
+     * 判断是否为空
+     *
+     * @param str
+     * @return
+     */
+    public static boolean isEmpty(String str) {
+        if (str == null) {
+            return true;
+        }
+        return str.isEmpty();
+
+    }
+
+    /**
+     * 判断是否为空
+     *
+     * @param objs
+     * @return
+     */
+    public static boolean isEmpty(Object[] objs) {
+        if (objs == null) {
+            return true;
+        }
+        return objs.length <= 0;
+    }
+
+    /**
+     * 判断是否为空
+     *
+     * @param bytes
+     * @return
+     */
+    public static boolean isEmpty(byte[] bytes) {
+        if (bytes == null) {
+            return true;
+        }
+        return bytes.length <= 0;
+    }
+
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/utils/ImageLoader.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/utils/ImageLoader.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/utils/ImageLoader.java	(revision 1020)
@@ -0,0 +1,60 @@
+package com.gallery.tclgallery.utils;
+
+import android.app.Activity;
+import android.content.Context;
+import android.net.Uri;
+import android.os.Build;
+import android.widget.ImageView;
+
+import com.bumptech.glide.Glide;
+import com.bumptech.glide.load.engine.DiskCacheStrategy;
+
+/**
+ * Created by jiaojie.jia on 16/6/8.
+ */
+public class ImageLoader {
+
+    public static final String FILE_PROTOCAL = "file://";
+
+
+    public static void loadGalleryImage(Context context, String url, final ImageView imageView) {
+        if (isActivityDestory(context)) return;
+        Uri uri = Uri.parse(FILE_PROTOCAL + url);
+        Glide.with(context)
+                .load(uri)
+//                .asBitmap()
+                .centerCrop()
+                .diskCacheStrategy(DiskCacheStrategy.ALL)
+                .into(imageView);
+    }
+
+    /**
+     * 清除当前页面内存缓存(需要在主线程中执行)
+     */
+    public static void clearMemory() {
+        Glide.get(UIUtils.getContext()).clearMemory();
+    }
+
+    /**
+     * 清除硬盘缓存(需要在子线程中执行)
+     */
+    public static void clearDiskCache() {
+        //Glide.get(UIUtils.getContext()).clearDiskCache();
+    }
+
+    /**
+     * 当前 Activity 是否可用
+     * @param context
+     * @return
+     */
+    private static boolean isActivityDestory(Context context) {
+        if (context instanceof Activity) {
+            if (((Activity) context).isFinishing() ||
+                    (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1 && ((Activity) context).isDestroyed())) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/utils/PermissionUtils.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/utils/PermissionUtils.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/utils/PermissionUtils.java	(revision 1020)
@@ -0,0 +1,33 @@
+package com.gallery.tclgallery.utils;
+
+import android.Manifest;
+import android.app.Activity;
+import android.content.Context;
+import android.content.pm.PackageManager;
+
+public class PermissionUtils {
+    private static final String TAG = "PermissionUtil";
+    public static boolean hasStorageWritePermission(Context ctx) {
+        return (ctx.checkSelfPermission(Manifest.permission.
+                WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED);
+    }
+
+    public static boolean hasStorageReadPermission(Context ctx) {
+        return (ctx.checkSelfPermission(Manifest.permission.
+                READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED);
+    }
+
+    public static void requestPermission(Activity ctx, String permission, int requestCode){
+        ctx.requestPermissions(new String[]{permission}, requestCode);
+    }
+
+    public static boolean showWriteRational(Activity ctx){
+        return ctx.shouldShowRequestPermissionRationale(
+                Manifest.permission.WRITE_EXTERNAL_STORAGE);
+    }
+
+    public static boolean showReadRational(Activity ctx){
+        return ctx.shouldShowRequestPermissionRationale(
+                Manifest.permission.READ_EXTERNAL_STORAGE);
+    }
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/utils/DateUtil.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/utils/DateUtil.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/utils/DateUtil.java	(revision 1020)
@@ -0,0 +1,69 @@
+package com.gallery.tclgallery.utils;
+
+import android.support.annotation.IntRange;
+import android.support.annotation.NonNull;
+
+import java.util.Calendar;
+import java.util.Date;
+
+public class DateUtil {
+
+    private static String[] WEEKS = {"星期日","星期一","星期二","星期三","星期四","星期五","星期六"};
+
+
+    /** 获取指定日期为星期几 */
+    public static String getWeek(Date date){
+        Calendar cal = Calendar.getInstance();
+        cal.setTime(date);
+        int week_index = cal.get(Calendar.DAY_OF_WEEK) - 1;
+        if(week_index<0){
+            week_index = 0;
+        }
+        return WEEKS[week_index];
+    }
+    /**
+     * Time conversion.
+     *
+     * @param duration ms.
+     * @return such as: {@code 00:00:00}, {@code 00:00}.
+     */
+    @NonNull
+    public static String convertDuration(@IntRange(from = 1, to = Long.MAX_VALUE) long duration) {
+        duration /= 1000;
+        int hour = (int) (duration / 3600);
+        int minute = (int) ((duration - hour * 3600) / 60);
+        int second = (int) (duration - hour * 3600 - minute * 60);
+
+        String hourValue = "";
+        String minuteValue;
+        String secondValue;
+        if (hour > 0) {
+            if (hour > 10) {
+                hourValue = Integer.toString(hour);
+            } else {
+                hourValue = "0" + hour;
+            }
+            hourValue += ":";
+        }
+        if (minute > 0) {
+            if (minute > 10) {
+                minuteValue = Integer.toString(minute);
+            } else {
+                minuteValue = "0" + minute;
+            }
+        } else {
+            minuteValue = "00";
+        }
+        minuteValue += ":";
+        if (second > 0) {
+            if (second > 10) {
+                secondValue = Integer.toString(second);
+            } else {
+                secondValue = "0" + second;
+            }
+        } else {
+            secondValue = "00";
+        }
+        return hourValue + minuteValue + secondValue;
+    }
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/utils/UIUtils.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/utils/UIUtils.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/utils/UIUtils.java	(revision 1020)
@@ -0,0 +1,156 @@
+package com.gallery.tclgallery.utils;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.res.Configuration;
+import android.content.res.Resources;
+import android.util.DisplayMetrics;
+import android.view.View;
+import android.view.WindowManager;
+
+
+import com.gallery.tclgallery.application.GooglePhotoApplication;
+
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+
+public class UIUtils extends Activity{
+
+    private static int screenHeight;
+    private static int screenWidth;
+
+    public static Context getContext() {
+        return GooglePhotoApplication.getContext();
+    }
+
+    /**
+     * dip转换px
+     */
+    public static int dip2px(int dip) {
+        final float scale = getContext().getResources().getDisplayMetrics().density;
+        return (int) (dip * scale + 0.5f);
+    }
+
+    /**
+     * px转换dip
+     */
+    public static int px2dip(int px) {
+        final float scale = getContext().getResources().getDisplayMetrics().density;
+        return (int) (px / scale + 0.5f);
+    }
+
+    /**
+     * sp值转换为px值
+     */
+    public static int sp2px(float spValue) {
+        final float fontScale = UIUtils.getContext().getResources().getDisplayMetrics().scaledDensity;
+        return (int) (spValue * fontScale + 0.5f);
+    }
+
+    /**
+     * 设置view显示or隐藏
+     *
+     * @param v
+     * @param visibility
+     */
+    public static void updateVisibility(View v, int visibility) {
+        if (v != null && v.getVisibility() != visibility) {
+            v.setVisibility(visibility);
+        }
+    }
+
+    /**
+     * 获取屏幕高（像素）
+     * @return
+     */
+    public static int getScreenHeight() {
+
+        if (screenHeight <= 0) {
+            WindowManager wm = (WindowManager) getContext().getSystemService(Context.WINDOW_SERVICE);
+            DisplayMetrics outMetrics = new DisplayMetrics();
+            wm.getDefaultDisplay().getMetrics(outMetrics);
+            screenHeight = outMetrics.heightPixels;
+            screenWidth = outMetrics.widthPixels;
+        }
+        return screenHeight;
+    }
+
+    /**
+     * 获取屏幕宽（像素）
+     * @return
+     */
+    public static int getScreenWidth() {
+
+        if (screenWidth <= 0) {
+            WindowManager wm = (WindowManager) getContext().getSystemService(Context.WINDOW_SERVICE);
+            DisplayMetrics outMetrics = new DisplayMetrics();
+            wm.getDefaultDisplay().getMetrics(outMetrics);
+            screenHeight = outMetrics.heightPixels;
+            screenWidth = outMetrics.widthPixels;
+        }
+        return screenWidth;
+    }
+
+    /**
+     * 判断是否有虚拟按键
+     */
+    public static boolean checkDeviceHasNavigationBar(Context context) {
+        boolean hasNavigationBar = false;
+        Resources rs = context.getResources();
+        int id = rs.getIdentifier("config_showNavigationBar", "bool", "android");
+        if (id > 0) {
+            hasNavigationBar = rs.getBoolean(id);
+        }
+        try {
+            Class systemPropertiesClass = Class.forName("android.os.SystemProperties");
+            Method m = systemPropertiesClass.getMethod("get", String.class);
+            String navBarOverride = (String) m.invoke(systemPropertiesClass, "qemu.hw.mainkeys");
+            if ("1".equals(navBarOverride)) {
+                hasNavigationBar = false;
+            } else if ("0".equals(navBarOverride)) {
+                hasNavigationBar = true;
+            }
+        } catch (NoSuchMethodException e) {
+            e.printStackTrace();
+        } catch (IllegalAccessException e) {
+            e.printStackTrace();
+        } catch (InvocationTargetException e) {
+            e.printStackTrace();
+        } catch (ClassNotFoundException e) {
+            e.printStackTrace();
+        }
+        return hasNavigationBar;
+
+    }
+
+    /**
+     * 获取NavigationBar的高度
+     */
+    public static int getNavigationBarHeight(Context context) {
+        int navigationBarHeight = 0;
+        Resources rs = context.getResources();
+        int id = rs.getIdentifier("navigation_bar_height", "dimen", "android");
+        if (id > 0 && checkDeviceHasNavigationBar(context)) {
+            navigationBarHeight = rs.getDimensionPixelSize(id);
+        }
+        return navigationBarHeight;
+    }
+
+    /**
+     * 获取StatusBar的高度
+     */
+    public static int getStatusBarHeight() {
+        int result = 0;
+        int resourceId = getContext().getResources().getIdentifier("status_bar_height", "dimen", "android");
+        if (resourceId > 0) {
+            result = getContext().getResources().getDimensionPixelSize(resourceId);
+        }
+        return result;
+    }
+
+}
+
+
+
+
+
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/sectionedrecyclerviewadapter/HeaderViewHolder.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/sectionedrecyclerviewadapter/HeaderViewHolder.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/sectionedrecyclerviewadapter/HeaderViewHolder.java	(revision 1020)
@@ -0,0 +1,43 @@
+/*
+ * Copyright (C) 2015 Tomás Ruiz-López.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.gallery.tclgallery.sectionedrecyclerviewadapter;
+
+import android.support.annotation.IdRes;
+import android.support.v7.widget.RecyclerView;
+import android.view.View;
+import android.widget.ImageView;
+import android.widget.TextView;
+
+/**
+ * Created by tomas on 01/06/15.
+ */
+public class HeaderViewHolder extends RecyclerView.ViewHolder {
+
+    protected TextView titleText = null;
+    public ImageView textSelct;
+
+    public HeaderViewHolder(View itemView, @IdRes int titleID, @IdRes int titleSrlectID) {
+        super(itemView);
+        titleText = (TextView) itemView.findViewById(titleID);
+        textSelct = (ImageView) itemView.findViewById(titleSrlectID);
+
+    }
+
+    public void render(String title) {
+        titleText.setText(title);
+    }
+
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/sectionedrecyclerviewadapter/SectionedRecyclerViewAdapter.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/sectionedrecyclerviewadapter/SectionedRecyclerViewAdapter.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/sectionedrecyclerviewadapter/SectionedRecyclerViewAdapter.java	(revision 1020)
@@ -0,0 +1,275 @@
+/*
+ * Copyright (C) 2015 Tomás Ruiz-López.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.gallery.tclgallery.sectionedrecyclerviewadapter;
+
+import android.support.v7.widget.RecyclerView;
+import android.view.ViewGroup;
+
+/**
+ * An extension to RecyclerView.Adapter to provide sections with headers and footers to a
+ * RecyclerView. Each section can have an arbitrary number of items.
+ *
+ * @param <H> Class extending RecyclerView.ViewHolder to hold and bind the header view
+ * @param <VH> Class extending RecyclerView.ViewHolder to hold and bind the items view
+ * @param <F> Class extending RecyclerView.ViewHolder to hold and bind the footer view
+ */
+public abstract class SectionedRecyclerViewAdapter<H extends RecyclerView.ViewHolder,
+        VH extends RecyclerView.ViewHolder,
+        F extends RecyclerView.ViewHolder>
+        extends RecyclerView.Adapter<RecyclerView.ViewHolder> {
+
+    protected static final int TYPE_SECTION_HEADER = -1;
+    protected static final int TYPE_SECTION_FOOTER = -2;
+    protected static final int TYPE_ITEM = -3;
+
+    private int[] sectionForPosition = null;
+    private int[] positionWithinSection = null;
+    private boolean[] isHeader = null;
+    private boolean[] isFooter = null;
+    private int count = 0;
+
+    public SectionedRecyclerViewAdapter() {
+        super();
+        registerAdapterDataObserver(new SectionDataObserver());
+    }
+
+    @Override
+    public void onAttachedToRecyclerView(RecyclerView recyclerView) {
+        super.onAttachedToRecyclerView(recyclerView);
+        setupIndices();
+    }
+    
+    /**
+     * Returns the sum of number of items for each section plus headers and footers if they
+     * are provided.
+     */
+    @Override
+    public int getItemCount() {
+        return count;
+    }
+
+    private void setupIndices(){
+        count = countItems();
+        allocateAuxiliaryArrays(count);
+        precomputeIndices();
+    }
+
+    private int countItems() {
+        int count = 0;
+        int sections = getSectionCount();
+
+        for(int i = 0; i < sections; i++){
+            count += 1 + getItemCountForSection(i) + (hasFooterInSection(i) ? 1 : 0);
+        }
+        return count;
+    }
+
+    private void precomputeIndices(){
+        int sections = getSectionCount();
+        int index = 0;
+
+        for(int i = 0; i < sections; i++){
+            setPrecomputedItem(index, true, false, i, 0);
+            index++;
+
+            for(int j = 0; j < getItemCountForSection(i); j++){
+                setPrecomputedItem(index, false, false, i, j);
+                index++;
+            }
+
+            if(hasFooterInSection(i)){
+                setPrecomputedItem(index, false, true, i, 0);
+                index++;
+            }
+        }
+    }
+
+    private void allocateAuxiliaryArrays(int count) {
+        sectionForPosition = new int[count];
+        positionWithinSection = new int[count];
+        isHeader = new boolean[count];
+        isFooter = new boolean[count];
+    }
+
+    private void setPrecomputedItem(int index, boolean isHeader, boolean isFooter, int section, int position) {
+        this.isHeader[index] = isHeader;
+        this.isFooter[index] = isFooter;
+        sectionForPosition[index] = section;
+        positionWithinSection[index] = position;
+    }
+
+    @Override
+    public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
+        RecyclerView.ViewHolder viewHolder;
+
+        if(isSectionHeaderViewType(viewType)){
+            viewHolder = onCreateSectionHeaderViewHolder(parent, viewType);
+        }else if(isSectionFooterViewType(viewType)){
+            viewHolder = onCreateSectionFooterViewHolder(parent, viewType);
+        }else{
+            viewHolder = onCreateItemViewHolder(parent, viewType);
+        }
+
+        return viewHolder;
+    }
+
+    @Override
+    public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
+        int section = sectionForPosition[position];
+        int index = positionWithinSection[position];
+
+        if(isSectionHeaderPosition(position)){
+            onBindSectionHeaderViewHolder((H) holder, section);
+        }else if(isSectionFooterPosition(position)){
+            onBindSectionFooterViewHolder((F) holder, section);
+        }else{
+            onBindItemViewHolder((VH) holder, section, index);
+        }
+
+    }
+
+    @Override
+    public int getItemViewType(int position) {
+
+        if(sectionForPosition == null){
+            setupIndices();
+        }
+
+        int section = sectionForPosition[position];
+        int index = positionWithinSection[position];
+
+        if(isSectionHeaderPosition(position)){
+            return getSectionHeaderViewType(section);
+        }else if(isSectionFooterPosition(position)){
+            return getSectionFooterViewType(section);
+        }else{
+            return getSectionItemViewType(section, index);
+        }
+
+    }
+
+    protected int getSectionHeaderViewType(int section){
+        return TYPE_SECTION_HEADER;
+    }
+
+    protected int getSectionFooterViewType(int section){
+        return TYPE_SECTION_FOOTER;
+    }
+
+    protected int getSectionItemViewType(int section, int position){
+        return TYPE_ITEM;
+    }
+
+    /**
+     * Returns true if the argument position corresponds to a header
+     */
+    public boolean isSectionHeaderPosition(int position){
+        if(isHeader == null){
+            setupIndices();
+        }
+        return isHeader[position];
+    }
+
+    /**
+     * Returns true if the argument position corresponds to a footer
+     */
+    public boolean isSectionFooterPosition(int position){
+        if(isFooter == null){
+            setupIndices();
+        }
+        return isFooter[position];
+    }
+
+    protected boolean isSectionHeaderViewType(int viewType){
+        return viewType == TYPE_SECTION_HEADER;
+    }
+
+    protected boolean isSectionFooterViewType(int viewType){
+        return viewType == TYPE_SECTION_FOOTER;
+    }
+
+    /**
+     * Returns the number of sections in the RecyclerView
+     */
+    protected abstract int getSectionCount();
+
+    /**
+     * Returns the number of items for a given section
+     */
+    protected abstract int getItemCountForSection(int section);
+
+    /**
+     * Returns true if a given section should have a footer
+     */
+    protected abstract boolean hasFooterInSection(int section);
+
+    /**
+     * Creates a ViewHolder of class H for a Header
+     */
+    protected abstract H  onCreateSectionHeaderViewHolder(ViewGroup parent, int viewType);
+
+    /**
+     * Creates a ViewHolder of class F for a Footer
+     */
+    protected abstract F  onCreateSectionFooterViewHolder(ViewGroup parent, int viewType);
+
+    /**
+     * Creates a ViewHolder of class VH for an Item
+     */
+    protected abstract VH  onCreateItemViewHolder(ViewGroup parent, int viewType);
+
+    /**
+     * Binds data to the header view of a given section
+     */
+    protected abstract void onBindSectionHeaderViewHolder(H holder, int section);
+
+    /**
+     * Binds data to the footer view of a given section
+     */
+    protected abstract void onBindSectionFooterViewHolder(F holder, int section);
+
+    /**
+     * Binds data to the item view for a given position within a section
+     */
+    protected abstract void onBindItemViewHolder(VH holder, int section, int position);
+
+    class SectionDataObserver extends RecyclerView.AdapterDataObserver{
+        @Override
+        public void onChanged() {
+            setupIndices();
+        }
+
+        @Override
+        public void onItemRangeChanged(int positionStart, int itemCount) {
+            setupIndices();
+        }
+
+        @Override
+        public void onItemRangeInserted(int positionStart, int itemCount) {
+            setupIndices();
+        }
+
+        @Override
+        public void onItemRangeRemoved(int positionStart, int itemCount) {
+            setupIndices();
+        }
+
+        @Override
+        public void onItemRangeMoved(int fromPosition, int toPosition, int itemCount) {
+            setupIndices();
+        }
+    }
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/sectionedrecyclerviewadapter/mYHandler.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/sectionedrecyclerviewadapter/mYHandler.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/sectionedrecyclerviewadapter/mYHandler.java	(revision 1020)
@@ -0,0 +1,15 @@
+package com.gallery.tclgallery.sectionedrecyclerviewadapter;
+
+import android.os.Handler;
+import android.os.Message;
+
+/**
+ * Created by Administrator on 2017/9/14.
+ */
+public class mYHandler extends Handler {
+    @Override
+    public void handleMessage(Message msg) {
+        super.handleMessage(msg);
+
+    }
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/sectionedrecyclerviewadapter/SectionedSpanSizeLookup.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/sectionedrecyclerviewadapter/SectionedSpanSizeLookup.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/sectionedrecyclerviewadapter/SectionedSpanSizeLookup.java	(revision 1020)
@@ -0,0 +1,44 @@
+/*
+ * Copyright (C) 2015 Tomás Ruiz-López.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.gallery.tclgallery.sectionedrecyclerviewadapter;
+
+import android.support.v7.widget.GridLayoutManager;
+
+/**
+ * A SpanSizeLookup to draw section headers or footer spanning the whole width of the RecyclerView
+ * when using a GridLayoutManager
+ */
+public class SectionedSpanSizeLookup extends GridLayoutManager.SpanSizeLookup {
+
+    protected SectionedRecyclerViewAdapter<?, ?, ?> adapter = null;
+    protected GridLayoutManager layoutManager = null;
+
+    public SectionedSpanSizeLookup(SectionedRecyclerViewAdapter<?, ?, ?> adapter, GridLayoutManager layoutManager) {
+        this.adapter = adapter;
+        this.layoutManager = layoutManager;
+    }
+
+    @Override
+    public int getSpanSize(int position) {
+
+        if(adapter.isSectionHeaderPosition(position) || adapter.isSectionFooterPosition(position)){
+            return layoutManager.getSpanCount();
+        }else{
+            return 1;
+        }
+
+    }
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/sectionedrecyclerviewadapter/DataSynEvent.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/sectionedrecyclerviewadapter/DataSynEvent.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/sectionedrecyclerviewadapter/DataSynEvent.java	(revision 1020)
@@ -0,0 +1,26 @@
+package com.gallery.tclgallery.sectionedrecyclerviewadapter;
+
+import java.io.BufferedOutputStream;
+
+/**
+ * Created by Administrator on 2017/9/14.
+ */
+public class DataSynEvent {
+    private int section;
+//    private  boolean isSelect;
+    public int getSection() {
+        return section;
+    }
+
+    public  DataSynEvent(int section) {
+        this.section = section;
+    }
+
+    /*public  boolean getIsSelect(){
+        return isSelect;
+    }
+
+    public  void setIsSelect(boolean isSelect){
+        this.isSelect=isSelect;
+    }*/
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/sectionedrecyclerviewadapter/SimpleSectionedAdapter.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/sectionedrecyclerviewadapter/SimpleSectionedAdapter.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/sectionedrecyclerviewadapter/SimpleSectionedAdapter.java	(revision 1020)
@@ -0,0 +1,111 @@
+/*
+ * Copyright (C) 2015 Tomás Ruiz-López.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.gallery.tclgallery.sectionedrecyclerviewadapter;
+
+import android.support.annotation.IdRes;
+import android.support.annotation.LayoutRes;
+import android.support.v7.widget.RecyclerView;
+import android.util.Log;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+
+import com.gallery.tclgallery.R;
+
+/**
+ * An extension of SectionedRecyclerViewAdapter for simple sectioned RecyclerViews. In most cases,
+ * you will not need a footer for your sections and your header will consist only of a TextView.
+ * SimpleSectionedAdapter simplifies the creation of such sectioned collections where you only
+ * need to provide header titles and implement the rendering of your items.
+ */
+public abstract class SimpleSectionedAdapter<VH extends RecyclerView.ViewHolder> extends SectionedRecyclerViewAdapter<HeaderViewHolder,
+        VH, RecyclerView.ViewHolder> {
+
+    @Override
+    protected boolean hasFooterInSection(int section) {
+        return false;
+    }
+
+    @Override
+    protected HeaderViewHolder onCreateSectionHeaderViewHolder(ViewGroup parent, int viewType) {
+        LayoutInflater inflater = LayoutInflater.from(parent.getContext());
+        View view = inflater.inflate(getLayoutResource(), parent, false);
+        final HeaderViewHolder holder = new HeaderViewHolder(view, getTitleTextID(), getTitleTextSelectID());
+//        EventBus.getDefault().register(this);
+//        holder.textSelct.setVisibility(View.GONE);
+//        holder.titleText.setVisibility(View.GONE);
+        return holder;
+    }
+
+    @Override
+    protected RecyclerView.ViewHolder onCreateSectionFooterViewHolder(ViewGroup parent, int viewType) {
+        return null;
+    }
+
+    @Override
+    protected void onBindSectionHeaderViewHolder(final HeaderViewHolder holder, final int section) {
+        final String title = getSectionHeaderTitle(section);
+        holder.render(title);
+//        if (/*System.getProperty("isLongSelect", "false").equals("true")*/State.SelectState) {
+//            holder.textSelct.setVisibility(View.VISIBLE);
+//            if (BaseViewAdapter.baseViewAdapter.istextSelect(section)) holder.textSelct.setSelected(true);
+//            else holder.textSelct.setSelected(false);
+//        } else holder.textSelct.setVisibility(View.GONE);
+//        holder.textSelct.setOnClickListener(new View.OnClickListener() {
+//            @Override
+//            public void onClick(View v) {
+//                holder.textSelct.setSelected(!holder.textSelct.isSelected());
+//                BaseViewAdapter.baseViewAdapter.selectconctrol(holder.textSelct.isSelected(), section);
+////                Log.d("whj", "onClick: section" + section + "\t" + !holder.textSelct.isSelected());
+//            }
+//        });
+    }
+    //protected abstract String getSectionHeaderTitle(int section);
+    @Override
+    protected void onBindSectionFooterViewHolder(RecyclerView.ViewHolder holder, int section) {
+    }
+
+    /**
+     * Provides a layout identifier for the header. Override it to change the appearance of the
+     * header view.
+     */
+    protected
+    @LayoutRes
+    int getLayoutResource() {
+        return R.layout.view_header;
+    }
+
+    /**
+     * Provides the identifier of the TextView to render the section header title. Override it if
+     * you provide a custom layout for a header.
+     */
+    protected
+    @IdRes
+    int getTitleTextID() {
+        return R.id.title_text;
+    }
+
+    protected
+    @IdRes
+    int getTitleTextSelectID() {
+        return R.id.text_select;
+    }
+
+    /**
+     * Returns the title for a given section
+     */
+    protected abstract String getSectionHeaderTitle(int section);
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/application/GooglePhotoApplication.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/application/GooglePhotoApplication.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/application/GooglePhotoApplication.java	(revision 1020)
@@ -0,0 +1,24 @@
+package com.gallery.tclgallery.application;
+
+import android.app.Application;
+import android.content.Context;
+
+/**
+ * Application
+ * Created by jiaojie.jia on 2017/3/24.
+ */
+
+public class GooglePhotoApplication extends Application {
+
+    private static Context mContext;
+
+    public static Context getContext() {
+        return mContext;
+    }
+
+    @Override
+    public void onCreate() {
+        super.onCreate();
+        mContext = this;
+    }
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/custom_view/ScrollViewGridView.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/custom_view/ScrollViewGridView.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/custom_view/ScrollViewGridView.java	(revision 1020)
@@ -0,0 +1,34 @@
+package com.gallery.tclgallery.custom_view;
+
+import android.annotation.SuppressLint;
+import android.content.Context;
+import android.util.AttributeSet;
+import android.widget.GridView;
+
+/**
+ * 列表中嵌套的GridView
+ * Created by jiaojie.jia on 2017/3/24.
+ */
+
+public class ScrollViewGridView extends GridView {
+
+    public ScrollViewGridView(Context context) {
+        super(context);
+    }
+    public ScrollViewGridView(Context context, AttributeSet attrs) {
+        super(context, attrs);
+    }
+
+    @SuppressLint("NewApi")
+    public ScrollViewGridView(Context context, AttributeSet attrs,
+                              int defStyleAttr, int defStyleRes) {
+        super(context, attrs, defStyleAttr, defStyleRes);
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        int expandSpec = MeasureSpec.makeMeasureSpec(Integer.MAX_VALUE >> 2,
+                MeasureSpec.AT_MOST);
+        super.onMeasure(widthMeasureSpec, expandSpec);
+    }
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/bean/LocalMedia_AlbumTag.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/bean/LocalMedia_AlbumTag.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/bean/LocalMedia_AlbumTag.java	(revision 1020)
@@ -0,0 +1,85 @@
+package com.gallery.tclgallery.bean;
+
+import android.os.Parcel;
+import android.os.Parcelable;
+
+/**
+ * Created by liddo on 2017/10/12.
+ * 多媒体文件对应相册的关系类
+ */
+
+public class LocalMedia_AlbumTag implements Parcelable{
+    /**
+     * id
+     */
+    private int id;
+    /**
+     * local_media id
+     */
+    private int local_id;
+    /**
+     * album_tag id
+     */
+    private int album_id;
+
+    public LocalMedia_AlbumTag() {}
+
+    public LocalMedia_AlbumTag(int local_id,int album_id) {
+        this.local_id = local_id;
+        this.album_id = album_id;
+    }
+
+    public int getId() {
+        return id;
+    }
+
+    public void setId(int id) {
+        this.id = id;
+    }
+
+    public int getLocal_id() {
+        return local_id;
+    }
+
+    public void setLocal_id(int local_id) {
+        this.local_id = local_id;
+    }
+
+    public int getAlbum_id() {
+        return album_id;
+    }
+
+    public void setAlbum_id(int album_id) {
+        this.album_id = album_id;
+    }
+
+    protected LocalMedia_AlbumTag(Parcel in) {
+        id = in.readInt();
+        local_id = in.readInt();
+        album_id = in.readInt();
+    }
+
+    @Override
+    public int describeContents() {
+        return 0;
+    }
+
+    @Override
+    public void writeToParcel(Parcel parcel, int i) {
+        parcel.writeInt(id);
+        parcel.writeInt(local_id);
+        parcel.writeInt(album_id);
+    }
+
+    public static final Creator<LocalMedia_AlbumTag> CREATOR = new Creator<LocalMedia_AlbumTag>() {
+        @Override
+        public LocalMedia_AlbumTag createFromParcel(Parcel parcel) {
+            return new LocalMedia_AlbumTag(parcel);
+        }
+
+        @Override
+        public LocalMedia_AlbumTag[] newArray(int i) {
+            return new LocalMedia_AlbumTag[i];
+        }
+    };
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/bean/CameraItem.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/bean/CameraItem.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/bean/CameraItem.java	(revision 1020)
@@ -0,0 +1,185 @@
+package com.gallery.tclgallery.bean;
+
+import android.support.annotation.IntDef;
+
+import java.io.Serializable;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+
+/**
+ * Created by Administrator on 2017/9/20.
+ */
+public class CameraItem implements Serializable {
+    public static final int TYPE_INVALID = 0;
+    public static final int TYPE_IMAGE = 1;
+    public static final int TYPE_VIDEO = 2;
+
+    @Retention(RetentionPolicy.SOURCE)
+    @IntDef({TYPE_INVALID, TYPE_IMAGE, TYPE_VIDEO})
+    public @interface MediaType {
+    }
+
+    private String mName;
+    private String path;                    // 路径
+    private String thumbnail;               // 缩略图
+    private int Id;                    // ID
+    private int Width;                 // 宽度
+    private int Height;                // 高度
+    private int size;                       // 图片大小
+    private int tokenDate;                  // 拍摄时间
+    private long modified;                  // 修改时间
+    private int orientation;                // 照片方向
+    private double latitude;                // 纬度
+    private double longitude;               // 经度
+    private double altitude;                // 海拔
+    private long duration;                //时长
+    private String mime_type;                     //类型
+    private boolean isSelected;
+
+    public void setId(int id) {
+        this.Id = id;
+    }
+
+    public boolean isSelected() {
+        return isSelected;
+    }
+
+    public void setSelected(boolean selected) {
+        isSelected = selected;
+    }
+
+    public int getWidth() {
+        return Width;
+    }
+
+    public void setWidth(int width) {
+        Width = width;
+    }
+
+    public int getHeight() {
+        return Height;
+    }
+
+    public void setHeight(int height) {
+        Height = height;
+    }
+
+    public int getSize() {
+        return size;
+    }
+
+    public void setSize(int size) {
+        this.size = size;
+    }
+
+    public int getTokenDate() {
+        return tokenDate;
+    }
+
+    public void setTokenDate(int tokenDate) {
+        this.tokenDate = tokenDate;
+    }
+
+    public long getModified() {
+        return modified;
+    }
+
+    public void setModified(long modified) {
+        this.modified = modified;
+    }
+
+    public int getOrientation() {
+        return orientation;
+    }
+
+    public void setOrientation(int orientation) {
+        this.orientation = orientation;
+    }
+
+    public double getLatitude() {
+        return latitude;
+    }
+
+    public void setLatitude(double latitude) {
+        this.latitude = latitude;
+    }
+
+    public double getLongitude() {
+        return longitude;
+    }
+
+    public void setLongitude(double longitude) {
+        this.longitude = longitude;
+    }
+
+    public double getAltitude() {
+        return altitude;
+    }
+
+    public void setAltitude(double altitude) {
+        this.altitude = altitude;
+    }
+
+    public long getDuration() {
+        return duration;
+    }
+
+    public void setDuration(long duration) {
+        this.duration = duration;
+    }
+
+    public String getMime_type() {
+        return mime_type;
+    }
+
+    public void setMime_type(String mime_type) {
+        this.mime_type = mime_type;
+    }
+
+    public String getmName() {
+        return mName;
+    }
+
+    public void setmName(String mName) {
+        this.mName = mName;
+    }
+
+    public String getPath() {
+        return path;
+    }
+
+    public void setPath(String path) {
+        this.path = path;
+    }
+
+    public String getThumbnail() {
+        return thumbnail;
+    }
+
+    public void setThumbnail(String thumbnail) {
+        this.thumbnail = thumbnail;
+    }
+
+    public int getId() {
+
+        return Id;
+    }
+
+    public CameraItem(/*String mName,*/int id, String path, int width, int height, int size,double latitude, double longitude, double altitude, int orientation,int tokenDate, long modified,  long duration, String mime_type) {
+        this.mName = mName;
+        this.path = path;
+        Id = id;
+        Width = width;
+        Height = height;
+        this.size = size;
+        this.tokenDate = tokenDate;
+        this.modified = modified;
+        this.orientation = orientation;
+        this.latitude = latitude;
+        this.longitude = longitude;
+        this.altitude = altitude;
+        this.duration = duration;
+        this.mime_type = mime_type;
+        this.isSelected = isSelected;
+    }
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/bean/AlbumTag.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/bean/AlbumTag.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/bean/AlbumTag.java	(revision 1020)
@@ -0,0 +1,198 @@
+package com.gallery.tclgallery.bean;
+
+import android.os.Parcel;
+import android.os.Parcelable;
+
+import java.util.ArrayList;
+
+/**
+ * Created by liddo on 2017/10/9.
+ */
+
+public class AlbumTag implements Parcelable {
+
+    /**
+     * tag_id
+     */
+    private int tag_id;
+    /**
+     * type
+     */
+    private int type;
+    /**
+     * name
+     */
+    private String name;
+    /**
+     * display_name
+     */
+    private String display_name;
+    /**
+     * local_path
+     */
+    private String local_path;
+    /**
+     * visible
+     */
+    private int visible;
+    /**
+     * item_count
+     */
+    private int item_count;
+    /**
+     * default album
+     */
+    private int default_album;
+    /**
+     * last update time
+     */
+    private int last_update_time;
+    /**
+     * media list in album
+     */
+    private ArrayList<LocalMediaBean> mediaBeans;
+    /**
+     * checked
+     */
+    private boolean isChecked;
+
+    public AlbumTag() {
+        mediaBeans = new ArrayList<>();
+    }
+
+    public int getTag_id() {
+        return tag_id;
+    }
+
+    public void setTag_id(int tag_id) {
+        this.tag_id = tag_id;
+    }
+
+    public int getType() {
+        return type;
+    }
+
+    public void setType(int type) {
+        this.type = type;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public String getDisplay_name() {
+        return display_name;
+    }
+
+    public void setDisplay_name(String display_name) {
+        this.display_name = display_name;
+    }
+
+    public String getLocal_path() {
+        return local_path;
+    }
+
+    public void setLocal_path(String local_path) {
+        this.local_path = local_path;
+    }
+
+    public int getVisible() {
+        return visible;
+    }
+
+    public void setVisible(int visible) {
+        this.visible = visible;
+    }
+
+    public int getItem_count() {
+        return item_count;
+    }
+
+    public void setItem_count(int item_count) {
+        this.item_count = item_count;
+    }
+
+    public int getDefault_album() {
+        return default_album;
+    }
+
+    public void setDefault_album(int default_album) {
+        this.default_album = default_album;
+    }
+
+    public int getLast_update_time() {
+        return last_update_time;
+    }
+
+    public void setLast_update_time(int last_update_time) {
+        this.last_update_time = last_update_time;
+    }
+
+    public ArrayList<LocalMediaBean> getMediaBeans() {
+        if (mediaBeans==null) {
+            mediaBeans = new ArrayList<>();
+        }
+        return mediaBeans;
+    }
+
+    public void setMediaBeans(ArrayList<LocalMediaBean> mediaBeans) {
+        this.mediaBeans = new ArrayList<>();
+        this.mediaBeans.addAll(mediaBeans);
+    }
+
+    public boolean isChecked() {
+        return isChecked;
+    }
+
+    public void setChecked(boolean checked) {
+        isChecked = checked;
+    }
+
+    protected AlbumTag(Parcel in){
+        tag_id = in.readInt();
+        type = in.readInt();
+        name = in.readString();
+        display_name = in.readString();
+        visible = in.readInt();
+        item_count = in.readInt();
+        default_album = in.readInt();
+        last_update_time = in.readInt();
+        mediaBeans = in.createTypedArrayList(LocalMediaBean.CREATOR);
+        isChecked = in.readByte() != 0;
+    }
+
+    @Override
+    public int describeContents() {
+        return 0;
+    }
+
+    @Override
+    public void writeToParcel(Parcel dest, int flags) {
+        dest.writeInt(tag_id);
+        dest.writeInt(type);
+        dest.writeString(name);
+        dest.writeString(display_name);
+        dest.writeInt(visible);
+        dest.writeInt(item_count);
+        dest.writeInt(default_album);
+        dest.writeInt(last_update_time);
+        dest.writeTypedList(mediaBeans);
+        dest.writeByte((byte)(isChecked ? 1:0));
+    }
+
+    public static final Creator<AlbumTag> CREATOR = new Creator<AlbumTag>() {
+        @Override
+        public AlbumTag createFromParcel(Parcel source) {
+            return new AlbumTag(source);
+        }
+
+        @Override
+        public AlbumTag[] newArray(int size) {
+            return new AlbumTag[size];
+        }
+    };
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/bean/ImageFolder.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/bean/ImageFolder.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/bean/ImageFolder.java	(revision 1020)
@@ -0,0 +1,93 @@
+package com.gallery.tclgallery.bean;
+
+import java.io.Serializable;
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * 图片文件夹数据类
+ * <p/>
+ * Created by windsander on 2016/9/1.
+ */
+public class ImageFolder implements Serializable {
+
+
+    public static final String CAMERA_PATH_ROOT = "/DCIM/Camera";
+    public static final String CAMERA_PATH_ROOT_NAME = "相机照片";
+    public static final String WEIXIN_PATH_ROOT = "/WeiXin";
+    public static final String WEIXIN_PATH_ROOT_NAME = "微信";
+    public static final String SCREENSHOTS_PATH_ROOT = "/Screenshots";
+    public static final String SCREENSHOTS_PATH_ROOT_NAME = "截图";
+
+
+    private String dir;                         // 文件夹位置路径
+    private String firstImagePath;              // 第一张图片路径
+    private String name;                        // 文件夹的名称
+    private int count;                          // 文件夹图片数量
+    private List<CameraItem> list;               // 文件夹图片集合
+    private boolean isPhoto;                    // 是否是相册标识
+
+    public String getDir() {
+        return dir;
+    }
+
+    public String getFirstImagePath() {
+        return firstImagePath;
+    }
+
+    public void setFirstImagePath(String firstImagePath) {
+        this.firstImagePath = firstImagePath;
+    }
+
+    public int getCount() {
+        return list.size();
+    }
+
+    public void setCount(int count) {
+        this.count = count;
+    }
+
+    public List<CameraItem> getList() {
+        return list;
+    }
+
+    public void setList(List<CameraItem> list) {
+        this.list = list;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+
+    public ImageFolder() {
+        list = new ArrayList<>();
+    }
+
+    /** 设定文件夹地址，同时截取文件夹名称 */
+    public void setDir(String dir) {
+        this.dir = dir;
+        this.name = initName();
+    }
+
+    /** 截取文件夹姓名 */
+    private String initName() {
+        if (dir != null && !dir.isEmpty()) {
+            if (dir.contains(CAMERA_PATH_ROOT)) {
+                return CAMERA_PATH_ROOT_NAME;
+            } else if (dir.contains(WEIXIN_PATH_ROOT)) {
+                return WEIXIN_PATH_ROOT_NAME;
+            } else if (dir.contains(SCREENSHOTS_PATH_ROOT)) {
+                return SCREENSHOTS_PATH_ROOT_NAME;
+            }
+        }
+        int lastIndexOf = this.dir.lastIndexOf("/");
+        return this.dir.substring(lastIndexOf + 1);
+    }
+
+    /** 获取当前相册标识 */
+    public boolean isPhoto() {
+        return name != null && CAMERA_PATH_ROOT_NAME.equals(name);
+    }
+
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/bean/LocalMediaBean.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/bean/LocalMediaBean.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/bean/LocalMediaBean.java	(revision 1020)
@@ -0,0 +1,356 @@
+package com.gallery.tclgallery.bean;
+
+import android.os.Parcel;
+import android.os.Parcelable;
+
+/**
+ * Created by liddo on 2017/10/9.
+ */
+
+public class LocalMediaBean implements Parcelable {
+
+    /**
+     * local_id
+     */
+    private int local_id;
+
+    /**
+     * name
+     */
+    private String name;
+
+    /**
+     * bucketName
+     */
+    private String bucketName;
+
+    /**
+     * type
+     */
+    private String type;
+
+    /**
+     * mime_type
+     */
+    private String mime_type;
+
+    /**
+     * create_at
+     */
+    private int created_at;
+
+    /**
+     * generated_at
+     */
+    private int generated_at;
+
+    /**
+     * local_path
+     */
+    private String local_path;
+
+    /**
+     * thumbnail path
+     */
+    private String thumbPath;
+
+    /**
+     * size
+     */
+    private int size;
+
+    /**
+     * taken_at
+     */
+    private int taken_at;
+
+    /**
+     * latitude
+     */
+    private float latitude;
+
+    /**
+     * longitude
+     */
+    private float longitude;
+
+    /**
+     * location
+     */
+    private String location;
+
+    /**
+     * duration
+     */
+    private int duration;
+
+    /**
+     * secret
+     */
+    private int secret;
+
+    /**
+     * width
+     */
+    private int width;
+
+    /**
+     * height
+     */
+    private int height;
+
+    /**
+     * orientation
+     * 0 横向
+     * 1 纵向
+     */
+    private int orientation;
+
+    /**
+     * visible
+     * 0 不显示
+     * 1 显示
+     */
+    private int visible;
+
+    /**
+     * checked
+     */
+    private boolean isChecked;
+
+    public LocalMediaBean() {}
+
+    public int getLocal_id() {
+        return local_id;
+    }
+
+    public void setLocal_id(int local_id) {
+        this.local_id = local_id;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public String getBucketName() {
+        return bucketName;
+    }
+
+    public void setBucketName(String bucketName) {
+        this.bucketName = bucketName;
+    }
+
+    public String getType() {
+        return type;
+    }
+
+    public void setType(String type) {
+        this.type = type;
+    }
+
+    public String getMime_type() {
+        return mime_type;
+    }
+
+    public void setMime_type(String mime_type) {
+        this.mime_type = mime_type;
+    }
+
+    public int getCreated_at() {
+        return created_at;
+    }
+
+    public void setCreated_at(int created_at) {
+        this.created_at = created_at;
+    }
+
+    public int getGenerated_at() {
+        return generated_at;
+    }
+
+    public void setGenerated_at(int generated_at) {
+        this.generated_at = generated_at;
+    }
+
+    public String getLocal_path() {
+        return local_path;
+    }
+
+    public void setLocal_path(String local_path) {
+        this.local_path = local_path;
+    }
+
+    public String getThumbPath() {
+        return thumbPath;
+    }
+
+    public void setThumbPath(String thumbPath) {
+        this.thumbPath = thumbPath;
+    }
+
+    public int getSize() {
+        return size;
+    }
+
+    public void setSize(int size) {
+        this.size = size;
+    }
+
+    public int getTaken_at() {
+        return taken_at;
+    }
+
+    public void setTaken_at(int taken_at) {
+        this.taken_at = taken_at;
+    }
+
+    public float getLatitude() {
+        return latitude;
+    }
+
+    public void setLatitude(float latitude) {
+        this.latitude = latitude;
+    }
+
+    public float getLongitude() {
+        return longitude;
+    }
+
+    public void setLongitude(float longitude) {
+        this.longitude = longitude;
+    }
+
+    public String getLocation() {
+        return location;
+    }
+
+    public void setLocation(String location) {
+        this.location = location;
+    }
+
+    public int getDuration() {
+        return duration;
+    }
+
+    public void setDuration(int duration) {
+        this.duration = duration;
+    }
+
+    public int getSecret() {
+        return secret;
+    }
+
+    public void setSecret(int secret) {
+        this.secret = secret;
+    }
+
+    public int getWidth() {
+        return width;
+    }
+
+    public void setWidth(int width) {
+        this.width = width;
+    }
+
+    public int getHeight() {
+        return height;
+    }
+
+    public void setHeight(int height) {
+        this.height = height;
+    }
+
+    public int getOrientation() {
+        return orientation;
+    }
+
+    public void setOrientation(int orientation) {
+        this.orientation = orientation;
+    }
+
+    public int getVisible() {
+        return visible;
+    }
+
+    public void setVisible(int visible) {
+        this.visible = visible;
+    }
+
+    public boolean isChecked() {
+        return isChecked;
+    }
+
+    public void setChecked(boolean checked) {
+        isChecked = checked;
+    }
+
+    protected LocalMediaBean(Parcel in) {
+        local_id = in.readInt();
+        name = in.readString();
+        bucketName = in.readString();
+        type = in.readString();
+        mime_type = in.readString();
+        created_at = in.readInt();
+        generated_at = in.readInt();
+        local_path = in.readString();
+        thumbPath = in.readString();
+        size = in.readInt();
+        taken_at = in.readInt();
+        latitude = in.readFloat();
+        longitude = in.readFloat();
+        location = in.readString();
+        duration = in.readInt();
+        secret = in.readInt();
+        width = in.readInt();
+        height = in.readInt();
+        orientation = in.readInt();
+        visible = in.readInt();
+        isChecked = in.readByte() != 0;
+    }
+
+    @Override
+    public int describeContents() {
+        return 0;
+    }
+
+    @Override
+    public void writeToParcel(Parcel dest, int flags) {
+        dest.writeInt(local_id);
+        dest.writeString(name);
+        dest.writeString(bucketName);
+        dest.writeString(type);
+        dest.writeString(mime_type);
+        dest.writeInt(created_at);
+        dest.writeInt(generated_at);
+        dest.writeString(local_path);
+        dest.writeString(thumbPath);
+        dest.writeInt(size);
+        dest.writeInt(taken_at);
+        dest.writeFloat(latitude);
+        dest.writeFloat(longitude);
+        dest.writeString(location);
+        dest.writeInt(duration);
+        dest.writeInt(secret);
+        dest.writeInt(width);
+        dest.writeInt(height);
+        dest.writeInt(orientation);
+        dest.writeInt(visible);
+        dest.writeByte((byte)(isChecked? 1 : 0));
+    }
+
+    public static final Creator<LocalMediaBean> CREATOR = new Creator<LocalMediaBean>() {
+        @Override
+        public LocalMediaBean createFromParcel(Parcel source) {
+            return new LocalMediaBean(source);
+        }
+
+        @Override
+        public LocalMediaBean[] newArray(int size) {
+            return new LocalMediaBean[size];
+        }
+    };
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/bean/State.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/bean/State.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/bean/State.java	(revision 1020)
@@ -0,0 +1,23 @@
+package com.gallery.tclgallery.bean;
+
+import android.app.Service;
+import android.util.Log;
+
+import com.gallery.tclgallery.contract.GooglePhotoContract;
+
+/**
+ * Created by Administrator on 2017/9/26.
+ */
+public class State  {
+    public  static  boolean SelectState =false;
+    public  static  int  orientation =0;//屏幕方向 1位竖屏 2为横屏
+    public  static  int num = 0;
+    public static GooglePhotoContract.Presenter mPresenter;
+   /* public static int getNum() {
+        if (mPresenter.getViewType()== GooglePhotoActivity.ViewType.DAY){if (orientation==1)num=4;else if (orientation==2)num=6;else num=4;
+            Log.d("mm", "getNum: ViewType.DAY = "+num);}
+        else if (mPresenter.getViewType()== GooglePhotoActivity.ViewType.MONTH){if (orientation==1)num=6;else if (orientation==2)num=8;else num=6;
+            Log.d("mm", "getNum: ViewType.MONTH = "+num);}
+        return num;
+    }*/
+}
Index: packages/apps/GalleryTcl/src/com/gallery/tclgallery/presenter/GooglePhotoPresenter.java
===================================================================
--- packages/apps/GalleryTcl/src/com/gallery/tclgallery/presenter/GooglePhotoPresenter.java	(revision 0)
+++ packages/apps/GalleryTcl/src/com/gallery/tclgallery/presenter/GooglePhotoPresenter.java	(revision 1020)
@@ -0,0 +1,195 @@
+package com.gallery.tclgallery.presenter;
+
+import android.net.Uri;
+import android.os.AsyncTask;
+import android.util.Log;
+
+import com.gallery.tclgallery.bean.CameraItem;
+import com.gallery.tclgallery.contract.GooglePhotoContract;
+import com.gallery.tclgallery.data.GooglePhotoScanner;
+import com.gallery.tclgallery.ui.GooglePhotoActivity;
+import com.gallery.tclgallery.utils.Format;
+
+import java.io.File;
+import java.util.ArrayList;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
+
+/**
+ * Created by jiaojie.jia on 2017/3/15.
+ */
+
+public class GooglePhotoPresenter implements GooglePhotoContract.Presenter {
+
+    private GooglePhotoActivity.ViewType mViewType;         // 当前视图类型
+
+    private GooglePhotoContract.View mView;                 // view
+
+    private List<CameraItem> mSelectedPhotos;                // 选中的照片集合
+
+    private List<Float> mPercents;
+    private List<String> mTimelineTags;
+
+    public GooglePhotoPresenter(GooglePhotoContract.View view) {
+        mView = view;
+        mSelectedPhotos = new ArrayList<>();
+    }
+
+    @Override
+    public void setViewType(GooglePhotoActivity.ViewType viewType) {
+        mViewType = viewType;
+    }
+
+    @Override
+    public GooglePhotoActivity.ViewType getViewType() {
+        return mViewType;
+    }
+
+    @Override
+    public void loadPhotos() {
+        if (!Format.isEmpty(getPhotoData())/* && !Format.isEmpty(GooglePhotoScanner.getImageFloders())*/) {
+            mView.fullData(getPhotoData());
+//            mView.fullFolders(GooglePhotoScanner.getImageFloders());
+        } else {
+            new AsyncTask<Void, Void, Void>() {
+
+                @Override
+                protected Void doInBackground(Void... params) {
+                    GooglePhotoScanner.startScan();
+                    return null;
+                }
+
+                @Override
+                protected void onPostExecute(Void aVoid) {
+                    mView.fullData(getPhotoData());
+//                    mView.fullFolders(GooglePhotoScanner.getImageFloders());
+                }
+            }.execute();
+        }
+    }
+
+    public void scanPhotos() {
+        clear();
+        GooglePhotoScanner.startScan();
+        mView.fullData(getPhotoData());
+//        mView.fullFolders(GooglePhotoScanner.getImageFloders());
+    }
+
+    @Override
+    public void selectPhoto(CameraItem cameraItem) {
+        if (cameraItem.isSelected() && !mSelectedPhotos.contains(cameraItem)) {
+            mSelectedPhotos.add(cameraItem);
+        } else if (!cameraItem.isSelected() && mSelectedPhotos.contains(cameraItem)) {
+            mSelectedPhotos.remove(cameraItem);
+        }
+    }
+
+    /**
+     * 全选图片
+     */
+    public void selectPhotoAll() {
+//        Log.d("whj", "selectPhotoAll: start");
+        List<List<CameraItem>> mPhotos;
+        mPhotos = new ArrayList<>(getPhotoData().size());
+        for (Map.Entry<String, List<CameraItem>> entry : getPhotoData().entrySet()) {
+            mPhotos.add(entry.getValue());
+        }
+        for (List<CameraItem> photoSection : mPhotos) {
+            for (CameraItem cameraItem : photoSection) {
+                cameraItem.setSelected(true);
+                selectPhoto(cameraItem);
+            }
+        }
+    }
+
+    /**
+     * 遍历是否全选
+     */
+    public boolean isAllSelect() {
+//        Log.d("whj", "isAllSelect: start");
+        List<List<CameraItem>> mPhotos;
+        mPhotos = new ArrayList<>(getPhotoData().size());
+        for (Map.Entry<String, List<CameraItem>> entry : getPhotoData().entrySet()) {
+            mPhotos.add(entry.getValue());
+        }
+        for (List<CameraItem> photoSection : mPhotos) {
+            for (CameraItem cameraItem : photoSection) {
+                if (!cameraItem.isSelected()) return false;
+            }
+        }
+        return true;
+    }
+
+    @Override
+    public boolean isSelectedEmpty() {
+        return Format.isEmpty(mSelectedPhotos);
+    }
+
+    @Override
+    public void cancleAllSelected() {
+        if (!Format.isEmpty(mSelectedPhotos)) {
+            for (CameraItem cameraItem : mSelectedPhotos) {
+                cameraItem.setSelected(false);
+            }
+            mSelectedPhotos.clear();
+        }
+    }
+
+    @Override
+    public void setTimelineData(List<Float> percents, List<String> timelineTags) {
+        this.mPercents = percents;
+        this.mTimelineTags = timelineTags;
+    }
+
+    @Override
+    public List<Float> getPercents() {
+        return mPercents;
+    }
+
+    @Override
+    public List<String> getTimelineTags() {
+        return mTimelineTags;
+    }
+
+    @Override
+    public void clear() {
+        mSelectedPhotos.clear();
+        GooglePhotoScanner.clear();
+    }
+
+    /**
+     * 获取与视图对应的数据
+     */
+    private LinkedHashMap<String, List<CameraItem>> getPhotoData() {
+        return GooglePhotoScanner.getPhotoSections(mViewType);
+    }
+
+    /*选中的图片数量*/
+    public int SelectPictrueNumber() {
+        Log.d("www", "SelectPictrueNumber: " + mSelectedPhotos.size());
+        return mSelectedPhotos.size();
+    }
+
+    public ArrayList<Uri> ShareFile() {
+        ArrayList<Uri> filelist = new ArrayList<Uri>();
+        for (CameraItem cameraItem : mSelectedPhotos) {
+            File file1 = new File(cameraItem.getPath());
+            Log.d("www", "ShareFile: path" + cameraItem.getPath().toString());
+            filelist.add(Uri.fromFile(file1));
+        }
+        return filelist;
+    }
+
+    public ArrayList<String> DeleteFile() {
+        Log.d("www", "DeleteFile: Start");
+        ArrayList<String> filelist = new ArrayList<String>();
+        for (CameraItem cameraItem : mSelectedPhotos) {
+            File file = new File(cameraItem.getPath());
+            Log.d("www", "DeleteFile: path" + cameraItem.getPath().toString());
+            filelist.add(cameraItem.getPath());
+            file.delete();
+        }
+        return filelist;
+    }
+}
Index: packages/apps/GalleryTcl/libs/rebound-0.3.8.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/GalleryTcl/libs/rebound-0.3.8.jar
===================================================================
--- packages/apps/GalleryTcl/libs/rebound-0.3.8.jar	(revision 0)
+++ packages/apps/GalleryTcl/libs/rebound-0.3.8.jar	(revision 1020)

Property changes on: packages/apps/GalleryTcl/libs/rebound-0.3.8.jar
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/GalleryTcl/libs/library-2.4.0.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/GalleryTcl/libs/library-2.4.0.jar
===================================================================
--- packages/apps/GalleryTcl/libs/library-2.4.0.jar	(revision 0)
+++ packages/apps/GalleryTcl/libs/library-2.4.0.jar	(revision 1020)

Property changes on: packages/apps/GalleryTcl/libs/library-2.4.0.jar
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/GalleryTcl/libs/uk-co-senab-photoview.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/GalleryTcl/libs/uk-co-senab-photoview.jar
===================================================================
--- packages/apps/GalleryTcl/libs/uk-co-senab-photoview.jar	(revision 0)
+++ packages/apps/GalleryTcl/libs/uk-co-senab-photoview.jar	(revision 1020)

Property changes on: packages/apps/GalleryTcl/libs/uk-co-senab-photoview.jar
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/GalleryTcl/libs/vlayout-1.2.1.aar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/GalleryTcl/libs/vlayout-1.2.1.aar
===================================================================
--- packages/apps/GalleryTcl/libs/vlayout-1.2.1.aar	(revision 0)
+++ packages/apps/GalleryTcl/libs/vlayout-1.2.1.aar	(revision 1020)

Property changes on: packages/apps/GalleryTcl/libs/vlayout-1.2.1.aar
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/GalleryTcl/res/menu/other_album_menu.xml
===================================================================
--- packages/apps/GalleryTcl/res/menu/other_album_menu.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/menu/other_album_menu.xml	(revision 1020)
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="utf-8"?>
+<menu xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto">
+
+    <item
+        android:id="@+id/menu_unarchive_album"
+        android:title="@string/album_other_menu_unarchive"
+        android:icon="@drawable/ic_unarchive_24px"
+        app:showAsAction="always"
+        />
+
+    <item
+        android:id="@+id/menu_delete_other_album"
+        android:title="@string/toolbar_album_delete"
+        android:icon="@drawable/ic_delete_24px"
+        app:showAsAction="always"
+        />
+
+    <item
+        android:id="@+id/menu_select_other_album"
+        android:title="@string/toolbar_select_albums"
+        android:icon="@drawable/ic_add_24px"
+        app:showAsAction="never"
+        />
+
+</menu>
\ No newline at end of file
Index: packages/apps/GalleryTcl/res/menu/toolbar_menu.xml
===================================================================
--- packages/apps/GalleryTcl/res/menu/toolbar_menu.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/menu/toolbar_menu.xml	(revision 1020)
@@ -0,0 +1,47 @@
+<?xml version="1.0" encoding="utf-8"?>
+<menu xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto">
+
+    <item
+        android:id="@+id/menu_archive_album"
+        android:title="@string/toolbar_album_archive"
+        android:icon="@drawable/ic_archive_24px"
+        app:showAsAction="always"
+        />
+
+    <item
+        android:id="@+id/menu_delete_album"
+        android:title="@string/toolbar_album_delete"
+        android:icon="@drawable/ic_delete_24px"
+        app:showAsAction="always"
+        />
+
+    <item
+        android:id="@+id/menu_add_album"
+        android:title="@string/toolbar_album_add"
+        android:icon="@drawable/ic_add_24px"
+        app:showAsAction="always"
+        />
+
+    <item
+        android:id="@+id/menu_select_album"
+        android:title="@string/toolbar_select_albums"
+        android:icon="@drawable/ic_add_24px"
+        app:showAsAction="never"
+        />
+
+    <item
+        android:id="@+id/menu_sort_album"
+        android:title="@string/toolbar_sort_albums"
+        android:icon="@drawable/ic_add_24px"
+        app:showAsAction="never"
+        />
+
+    <item
+        android:id="@+id/menu_setting_album"
+        android:title="@string/toolbar_album_settings"
+        android:icon="@drawable/ic_add_24px"
+        app:showAsAction="never"
+        />
+
+</menu>
\ No newline at end of file
Index: packages/apps/GalleryTcl/res/menu/photo_view_menu.xml
===================================================================
--- packages/apps/GalleryTcl/res/menu/photo_view_menu.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/menu/photo_view_menu.xml	(revision 1020)
@@ -0,0 +1,57 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  ~ Copyright (C) 2015 The Android Open Source Project
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<menu xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto">
+    <item
+        android:id="@+id/year_view"
+        android:title="@string/year_view"
+        app:showAsAction="never" />
+
+    <!--android:icon="@drawable/ic_filter_list"-->
+
+    <item
+        android:id="@+id/month_view"
+        android:title="@string/month_view"
+        app:showAsAction="never" />
+    <item
+        android:id="@+id/day_view"
+        android:title="@string/day_view"
+        app:showAsAction="never" />
+
+    <!--<item
+        android:id="@+id/other_view"
+        android:title="@string/other_view"
+        app:showAsAction="never" />-->
+    <item
+        android:id="@+id/delete"
+        android:title="@string/delete"
+        app:showAsAction="always"/>
+    <item
+        android:id="@+id/share"
+        android:title="@string/share"
+        app:showAsAction="always"/>
+    <item
+        android:id="@+id/camera"
+        android:title="@string/camera"
+        app:showAsAction="always"/>
+    <item
+        android:id="@+id/selectall"
+        android:title="@string/selectall"
+        app:showAsAction="never"/>
+
+</menu>
\ No newline at end of file
Index: packages/apps/GalleryTcl/res/menu/photo_preview.xml
===================================================================
--- packages/apps/GalleryTcl/res/menu/photo_preview.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/menu/photo_preview.xml	(revision 1020)
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="utf-8"?>
+<menu xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto">
+    <item
+        android:id="@+id/menu_Slideshow"
+        android:title="Slideshow"
+        app:showAsAction="never"
+        />
+
+    <item
+        android:id="@+id/menu_Set_as"
+        android:title="Set as ..."
+        app:showAsAction="never"
+        />
+
+    <item
+        android:id="@+id/menu_Details"
+        android:title="Details"
+        app:showAsAction="never"
+        />
+
+    <item
+        android:id="@+id/menu_Print"
+        android:title="Print"
+        app:showAsAction="never"
+        />
+
+</menu>
\ No newline at end of file
Index: packages/apps/GalleryTcl/res/menu/album_photo_menu.xml
===================================================================
--- packages/apps/GalleryTcl/res/menu/album_photo_menu.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/menu/album_photo_menu.xml	(revision 1020)
@@ -0,0 +1,71 @@
+<?xml version="1.0" encoding="utf-8"?>
+<menu xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto">
+
+    <item
+        android:id="@+id/album_menu_photo_share"
+        android:title="@string/album_toolbar_share_photo"
+        android:icon="@drawable/ic_share_black_24dp"
+        app:showAsAction="always" />
+
+    <item
+        android:id="@+id/album_menu_photo_delete"
+        android:title="@string/album_toolbar_share_photo"
+        android:icon="@drawable/ic_delete_24px"
+        app:showAsAction="always" />
+
+    <item
+        android:id="@+id/album_menu_select_all"
+        android:title="@string/album_toolbar_select_all"
+        app:showAsAction="never"
+        />
+
+    <item
+        android:id="@+id/album_menu_unselect_all"
+        android:title="@string/album_toolbar_unselect_all"
+        app:showAsAction="never"
+        />
+
+    <item
+        android:id="@+id/album_menu_copy_to_album"
+        android:title="@string/album_toolbar_copy_to_album"
+        app:showAsAction="never"
+        />
+
+    <item
+        android:id="@+id/album_menu_move_to_album"
+        android:title="@string/album_toolbar_move_to_album"
+        app:showAsAction="never"
+        />
+
+    <item
+        android:id="@+id/album_menu_set_as_private"
+        android:title="@string/album_toolbar_set_as_private"
+        app:showAsAction="never"
+        />
+
+    <item
+        android:id="@+id/album_menu_select_items"
+        android:title="@string/album_toolbar_select_item"
+        app:showAsAction="never"
+        />
+
+    <item
+        android:id="@+id/album_menu_slide_show"
+        android:title="@string/album_toolbar_slide_show"
+        app:showAsAction="never"
+        />
+
+    <item
+        android:id="@+id/album_menu_rename_album"
+        android:title="@string/album_toolbar_rename_album"
+        app:showAsAction="never"
+        />
+
+    <item
+        android:id="@+id/album_menu_delete_album"
+        android:title="@string/album_toolbar_delete_album"
+        app:showAsAction="never"
+        />
+
+</menu>
\ No newline at end of file
Index: packages/apps/GalleryTcl/res/menu/base_menu.xml
===================================================================
--- packages/apps/GalleryTcl/res/menu/base_menu.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/menu/base_menu.xml	(revision 1020)
@@ -0,0 +1,45 @@
+<?xml version="1.0" encoding="utf-8"?>
+<menu xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto">
+    <item
+        android:id="@+id/menu_archive_album"
+        android:title="@string/toolbar_album_archive"
+        android:icon="@drawable/ic_archive_24px"
+        app:showAsAction="always"
+        />
+
+    <item
+        android:id="@+id/menu_delete_album"
+        android:title="@string/toolbar_album_delete"
+        android:icon="@drawable/ic_delete_24px"
+        app:showAsAction="always"
+        />
+
+    <item
+        android:id="@+id/menu_add_album"
+        android:title="@string/toolbar_album_add"
+        android:icon="@drawable/ic_add_24px"
+        app:showAsAction="always"
+        />
+
+    <item
+        android:id="@+id/menu_select_album"
+        android:title="@string/toolbar_select_albums"
+        android:icon="@drawable/ic_add_24px"
+        app:showAsAction="never"
+        />
+
+    <item
+        android:id="@+id/menu_sort_album"
+        android:title="@string/toolbar_sort_albums"
+        android:icon="@drawable/ic_add_24px"
+        app:showAsAction="never"
+        />
+
+    <item
+        android:id="@+id/menu_setting_album"
+        android:title="@string/toolbar_album_settings"
+        android:icon="@drawable/ic_add_24px"
+        app:showAsAction="never"
+        />
+</menu>
\ No newline at end of file
Index: packages/apps/GalleryTcl/res/mipmap-hdpi/ic_launcher.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/GalleryTcl/res/mipmap-hdpi/ic_launcher.png
===================================================================
--- packages/apps/GalleryTcl/res/mipmap-hdpi/ic_launcher.png	(revision 0)
+++ packages/apps/GalleryTcl/res/mipmap-hdpi/ic_launcher.png	(revision 1020)

Property changes on: packages/apps/GalleryTcl/res/mipmap-hdpi/ic_launcher.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/GalleryTcl/res/mipmap-hdpi/ic_launcher_round.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/GalleryTcl/res/mipmap-hdpi/ic_launcher_round.png
===================================================================
--- packages/apps/GalleryTcl/res/mipmap-hdpi/ic_launcher_round.png	(revision 0)
+++ packages/apps/GalleryTcl/res/mipmap-hdpi/ic_launcher_round.png	(revision 1020)

Property changes on: packages/apps/GalleryTcl/res/mipmap-hdpi/ic_launcher_round.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/GalleryTcl/res/mipmap-xxhdpi/ic_launcher.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/GalleryTcl/res/mipmap-xxhdpi/ic_launcher.png
===================================================================
--- packages/apps/GalleryTcl/res/mipmap-xxhdpi/ic_launcher.png	(revision 0)
+++ packages/apps/GalleryTcl/res/mipmap-xxhdpi/ic_launcher.png	(revision 1020)

Property changes on: packages/apps/GalleryTcl/res/mipmap-xxhdpi/ic_launcher.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/GalleryTcl/res/mipmap-xxhdpi/ic_launcher_round.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/GalleryTcl/res/mipmap-xxhdpi/ic_launcher_round.png
===================================================================
--- packages/apps/GalleryTcl/res/mipmap-xxhdpi/ic_launcher_round.png	(revision 0)
+++ packages/apps/GalleryTcl/res/mipmap-xxhdpi/ic_launcher_round.png	(revision 1020)

Property changes on: packages/apps/GalleryTcl/res/mipmap-xxhdpi/ic_launcher_round.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/GalleryTcl/res/animator/fastscroll__default_show.xml
===================================================================
--- packages/apps/GalleryTcl/res/animator/fastscroll__default_show.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/animator/fastscroll__default_show.xml	(revision 1020)
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="utf-8"?>
+<set xmlns:android="http://schemas.android.com/apk/res/android"
+     android:interpolator="@android:anim/decelerate_interpolator"
+     android:ordering="together">
+
+    <objectAnimator
+        android:duration="100"
+        android:propertyName="translationX"
+        android:valueFrom="32dp"
+        android:valueTo="0"
+        android:valueType="floatType"/>
+
+</set>
\ No newline at end of file
Index: packages/apps/GalleryTcl/res/animator/activity_in.xml
===================================================================
--- packages/apps/GalleryTcl/res/animator/activity_in.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/animator/activity_in.xml	(revision 1020)
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="utf-8"?>
+<set xmlns:android="http://schemas.android.com/apk/res/android"
+    android:duration="200"
+    >
+    <scale
+        android:fromXScale="0.8"
+        android:fromYScale="0.8"
+        android:toXScale="1.0"
+        android:toYScale="1.0"
+        android:pivotX="50%"
+        android:pivotY="50%"
+        android:fillAfter="true"
+        />
+    <alpha android:fromAlpha="0.0"
+           android:toAlpha="1.0"
+        />
+</set>
\ No newline at end of file
Index: packages/apps/GalleryTcl/res/animator/activity_out.xml
===================================================================
--- packages/apps/GalleryTcl/res/animator/activity_out.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/animator/activity_out.xml	(revision 1020)
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="utf-8"?>
+<set xmlns:android="http://schemas.android.com/apk/res/android"
+    android:duration="100"
+    >
+    <scale
+        android:fromXScale="1.0"
+        android:fromYScale="1.0"
+        android:toXScale="1.0"
+        android:toYScale="1.0"
+        android:pivotX="50%"
+        android:pivotY="50%"
+        android:fillAfter="true"
+        />
+    <alpha
+        android:fromAlpha="1.0"
+        android:toAlpha="0.0"
+        />
+</set>
\ No newline at end of file
Index: packages/apps/GalleryTcl/res/animator/custom_grab.xml
===================================================================
--- packages/apps/GalleryTcl/res/animator/custom_grab.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/animator/custom_grab.xml	(revision 1020)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<set
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:ordering="together">
+
+    <objectAnimator
+        android:propertyName="alpha"
+        android:valueFrom="1.0"
+        android:valueTo="0.8"/>
+
+</set>
\ No newline at end of file
Index: packages/apps/GalleryTcl/res/animator/fastscroll__default_hide.xml
===================================================================
--- packages/apps/GalleryTcl/res/animator/fastscroll__default_hide.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/animator/fastscroll__default_hide.xml	(revision 1020)
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="utf-8"?>
+<set xmlns:android="http://schemas.android.com/apk/res/android"
+     android:interpolator="@android:anim/accelerate_interpolator"
+     android:ordering="together">
+
+    <objectAnimator
+        android:duration="200"
+        android:propertyName="translationX"
+        android:valueFrom="0"
+        android:valueTo="32dp"
+        android:valueType="floatType"/>
+
+</set>
\ No newline at end of file
Index: packages/apps/GalleryTcl/res/animator/custom_release.xml
===================================================================
--- packages/apps/GalleryTcl/res/animator/custom_release.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/animator/custom_release.xml	(revision 1020)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<set
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:ordering="together">
+
+    <objectAnimator
+        android:propertyName="alpha"
+        android:valueFrom="0.8"
+        android:valueTo="1.0"/>
+
+</set>
\ No newline at end of file
Index: packages/apps/GalleryTcl/res/mipmap-mdpi/ic_launcher_round.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/GalleryTcl/res/mipmap-mdpi/ic_launcher_round.png
===================================================================
--- packages/apps/GalleryTcl/res/mipmap-mdpi/ic_launcher_round.png	(revision 0)
+++ packages/apps/GalleryTcl/res/mipmap-mdpi/ic_launcher_round.png	(revision 1020)

Property changes on: packages/apps/GalleryTcl/res/mipmap-mdpi/ic_launcher_round.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/GalleryTcl/res/mipmap-mdpi/ic_launcher.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/GalleryTcl/res/mipmap-mdpi/ic_launcher.png
===================================================================
--- packages/apps/GalleryTcl/res/mipmap-mdpi/ic_launcher.png	(revision 0)
+++ packages/apps/GalleryTcl/res/mipmap-mdpi/ic_launcher.png	(revision 1020)

Property changes on: packages/apps/GalleryTcl/res/mipmap-mdpi/ic_launcher.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/GalleryTcl/res/layout/activity_home.xml
===================================================================
--- packages/apps/GalleryTcl/res/layout/activity_home.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/layout/activity_home.xml	(revision 1020)
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    xmlns:app="http://schemas.android.com/apk/res-auto">
+
+    <android.support.v7.widget.Toolbar
+        android:id="@+id/gallery_toolbar"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:elevation="@dimen/elevation_toolbar"
+        android:background="@color/toolbar_bg"
+        app:popupTheme="@style/OverflowMenuStyle">
+    </android.support.v7.widget.Toolbar>
+
+    <FrameLayout
+        android:id="@+id/container"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:layout_below="@id/gallery_toolbar">
+        <include layout="@layout/album_gradview" />
+    </FrameLayout>
+
+
+</RelativeLayout>
\ No newline at end of file
Index: packages/apps/GalleryTcl/res/layout/gallery_base_activity.xml
===================================================================
--- packages/apps/GalleryTcl/res/layout/gallery_base_activity.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/layout/gallery_base_activity.xml	(revision 1020)
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent">
+
+    <android.support.v4.view.ViewPager
+        android:id="@+id/gallery_base_viewpager"
+        android:layout_above="@+id/gallery_bottom_nav_bar"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent">
+
+    </android.support.v4.view.ViewPager>
+
+    <com.gallery.tclgallery.bottomnavbar.BottomNavigationBar
+        android:id="@+id/gallery_bottom_nav_bar"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentBottom="true"
+        android:elevation="@dimen/bottom_navigation_elevation">
+    </com.gallery.tclgallery.bottomnavbar.BottomNavigationBar>
+</RelativeLayout>
\ No newline at end of file
Index: packages/apps/GalleryTcl/res/layout/fastscroll_default_timeline.xml
===================================================================
--- packages/apps/GalleryTcl/res/layout/fastscroll_default_timeline.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/layout/fastscroll_default_timeline.xml	(revision 1020)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+             android:layout_width="wrap_content"
+             android:layout_height="match_parent"
+             android:visibility="invisible">
+
+</FrameLayout>
\ No newline at end of file
Index: packages/apps/GalleryTcl/res/layout/base_layout.xml
===================================================================
--- packages/apps/GalleryTcl/res/layout/base_layout.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/layout/base_layout.xml	(revision 1020)
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    xmlns:app="http://schemas.android.com/apk/res-auto">
+
+    <android.support.v7.widget.Toolbar
+        android:id="@+id/base_toolbar"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:elevation="@dimen/elevation_toolbar"
+        android:background="@color/toolbar_bg"
+        app:popupTheme="@style/OverflowMenuStyle">
+    </android.support.v7.widget.Toolbar>
+
+    <android.support.v4.view.ViewPager
+        android:id="@+id/content_viewpager"
+        android:layout_below="@+id/base_toolbar"
+        android:layout_above="@+id/base_bottom_nav_bar"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent">
+    </android.support.v4.view.ViewPager>
+
+    <com.example.whf.gallery.bottomnavigationbar.BottomNavigationBar
+        android:id="@+id/base_bottom_nav_bar"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentBottom="true"
+        android:elevation="@dimen/bottom_navigation_elevation">
+    </com.example.whf.gallery.bottomnavigationbar.BottomNavigationBar>
+</RelativeLayout>
\ No newline at end of file
Index: packages/apps/GalleryTcl/res/layout/bottom_navigation_bar_container.xml
===================================================================
--- packages/apps/GalleryTcl/res/layout/bottom_navigation_bar_container.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/layout/bottom_navigation_bar_container.xml	(revision 1020)
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"-->
+    <!--android:layout_width="match_parent"-->
+    <!--android:layout_height="@dimen/bottom_navigation_padded_height">-->
+
+    <FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+        android:id="@+id/bottom_navigation_bar_container"
+        android:layout_width="match_parent"
+        android:layout_height="@dimen/bottom_navigation_height"
+        android:layout_gravity="bottom">
+
+        <FrameLayout
+            android:id="@+id/bottom_navigation_bar_overLay"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent" />
+
+        <LinearLayout
+            android:id="@+id/bottom_navigation_bar_item_container"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:gravity="center"
+            android:orientation="horizontal" />
+
+    </FrameLayout>
+<!--</FrameLayout>-->
\ No newline at end of file
Index: packages/apps/GalleryTcl/res/layout/imageview.xml
===================================================================
--- packages/apps/GalleryTcl/res/layout/imageview.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/layout/imageview.xml	(revision 1020)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+              android:orientation="vertical"
+              android:layout_width="match_parent"
+              android:layout_height="match_parent">
+
+    <ImageView
+        android:id="@+id/iv_image"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"/>
+
+</LinearLayout>
\ No newline at end of file
Index: packages/apps/GalleryTcl/res/layout/album_adapter_item.xml
===================================================================
--- packages/apps/GalleryTcl/res/layout/album_adapter_item.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/layout/album_adapter_item.xml	(revision 1020)
@@ -0,0 +1,61 @@
+<?xml version="1.0" encoding="utf-8"?>
+<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:padding="@dimen/dimen_5dp">
+
+    <ImageView
+        android:id="@+id/image"
+        android:layout_width="160dp"
+        android:layout_height="160dp"
+        android:layout_gravity="center"
+        android:scaleType="centerCrop"
+        android:contentDescription="@string/app_name"
+        android:elevation="2dp"
+        >
+    </ImageView>
+
+    <ImageView
+        android:id="@+id/album_selected"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_marginTop="@dimen/dimen_5dp"
+        android:layout_marginRight="@dimen/dimen_5dp"
+        android:layout_gravity="end"
+        android:contentDescription="@string/app_name"
+        android:elevation="@dimen/dimen_5dp"
+        android:src="@drawable/album_selected"
+        />
+
+    <ImageView
+        android:layout_width="match_parent"
+        android:layout_height="@dimen/dimen_50dp"
+        android:layout_gravity="bottom"
+        android:background="@drawable/gridview_item_bg"
+        android:elevation="5dp"
+        />
+
+    <LinearLayout
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_marginBottom="@dimen/dimen_5dp"
+        android:layout_marginLeft="@dimen/dimen_20dp"
+        android:layout_gravity="bottom"
+        android:orientation="vertical"
+        android:elevation="@dimen/dimen_5dp">
+
+        <TextView
+            android:id="@+id/album_name"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:ellipsize="end"
+            android:gravity="left" />
+
+        <TextView
+            android:id="@+id/album_image_count"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:gravity="left" />
+    </LinearLayout>
+
+</FrameLayout>
\ No newline at end of file
Index: packages/apps/GalleryTcl/res/layout/fixed_bottom_navigation_item.xml
===================================================================
--- packages/apps/GalleryTcl/res/layout/fixed_bottom_navigation_item.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/layout/fixed_bottom_navigation_item.xml	(revision 1020)
@@ -0,0 +1,48 @@
+<?xml version="1.0" encoding="utf-8"?>
+<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/fixed_bottom_navigation_container"
+    android:layout_width="match_parent"
+    android:layout_height="@dimen/fixed_height"
+    android:background="?selectableItemBackgroundBorderless"
+    android:paddingBottom="@dimen/fixed_height_bottom_padding"
+    android:paddingLeft="@dimen/fixed_width_padding"
+    android:paddingRight="@dimen/fixed_width_padding"
+    android:paddingTop="@dimen/fixed_height_top_padding_inactive">
+
+    <FrameLayout
+        android:id="@+id/fixed_bottom_navigation_icon_container"
+        android:layout_width="@dimen/fixed_icon_badge_grid_width"
+        android:layout_height="@dimen/fixed_icon_badge_grid_height"
+        android:layout_gravity="center_horizontal|top">
+
+        <ImageView
+            android:id="@+id/fixed_bottom_navigation_icon"
+            android:layout_width="@dimen/fixed_icon_grid"
+            android:layout_height="@dimen/fixed_icon_grid"
+            android:contentDescription="@string/icon"
+            android:layout_gravity="center"
+            android:gravity="center"
+            android:scaleType="fitXY" />
+
+        <com.gallery.tclgallery.bottomnavbar.BadgeTextView
+            android:id="@+id/fixed_bottom_navigation_badge"
+            style="@style/BadgeText"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="top|end"
+            android:gravity="center" />
+    </FrameLayout>
+
+    <TextView
+        android:id="@+id/fixed_bottom_navigation_title"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_gravity="center_horizontal|bottom"
+        android:gravity="center"
+        android:includeFontPadding="false"
+        android:lines="1"
+        android:scaleX="@dimen/fixed_label_active_to_inactive_ratio"
+        android:scaleY="@dimen/fixed_label_active_to_inactive_ratio"
+        android:textSize="@dimen/fixed_label_active" />
+
+</FrameLayout>
\ No newline at end of file
Index: packages/apps/GalleryTcl/res/layout/activity_album_photo.xml
===================================================================
--- packages/apps/GalleryTcl/res/layout/activity_album_photo.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/layout/activity_album_photo.xml	(revision 1020)
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:orientation="vertical"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent">
+
+    <android.support.v7.widget.Toolbar
+        android:id="@+id/album_photo_toolbar"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:elevation="@dimen/elevation_toolbar"
+        android:background="@color/toolbar_bg"
+        app:popupTheme="@style/OverflowMenuStyle">
+    </android.support.v7.widget.Toolbar>
+
+    <GridView
+        android:id="@+id/album_photo_gridView"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:numColumns="4"
+        android:columnWidth="270px"
+         />
+</LinearLayout>
\ No newline at end of file
Index: packages/apps/GalleryTcl/res/layout/rollout_list_view.xml
===================================================================
--- packages/apps/GalleryTcl/res/layout/rollout_list_view.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/layout/rollout_list_view.xml	(revision 1020)
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    >
+
+    <RelativeLayout
+        android:layout_width="fill_parent"
+        android:layout_height="70dp"
+        android:paddingLeft="10dp"
+        >
+
+    <ImageView
+        android:id="@+id/list_img"
+        android:layout_width="60dp"
+        android:layout_height="60dp"
+        android:layout_centerVertical="true"
+        android:background="@android:color/black"
+        android:scaleType="centerCrop"
+        />
+
+    </RelativeLayout>
+
+</LinearLayout>
Index: packages/apps/GalleryTcl/res/layout/album_photo_item.xml
===================================================================
--- packages/apps/GalleryTcl/res/layout/album_photo_item.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/layout/album_photo_item.xml	(revision 1020)
@@ -0,0 +1,41 @@
+<?xml version="1.0" encoding="utf-8"?>
+<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="85dp"
+    android:layout_height="80dp">
+
+    <ImageView
+        android:id="@+id/album_photo_image"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:scaleType="fitXY"
+        android:src="@drawable/album_default_loading_pic"/>
+
+    <ImageView
+        android:id="@+id/album_video_icon"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:src="@drawable/ic_video_black_24dp"
+        android:layout_gravity="bottom"
+        android:layout_marginBottom="@dimen/dimen_10dp"
+        android:layout_marginLeft="@dimen/dimen_10dp"/>
+
+    <TextView
+        android:id="@+id/video_duration"
+        android:layout_width="@dimen/dimen_30dp"
+        android:layout_height="@dimen/dimen_15dp"
+        android:layout_gravity="bottom"
+        android:layout_marginBottom="8dp"
+        android:layout_marginLeft="@dimen/dimen_30dp"
+        android:textSize="10sp"/>
+
+    <ImageView
+        android:id="@+id/album_photo_selected"
+        android:layout_width="@dimen/dimen_15dp"
+        android:layout_height="@dimen/dimen_15dp"
+        android:layout_gravity="end"
+        android:layout_marginRight="@dimen/dimen_5dp"
+        android:layout_marginTop="@dimen/dimen_5dp"
+        android:elevation="@dimen/dimen_5dp"
+        android:src="@drawable/album_selected"
+        />
+</FrameLayout>
\ No newline at end of file
Index: packages/apps/GalleryTcl/res/layout/activity_create_home.xml
===================================================================
--- packages/apps/GalleryTcl/res/layout/activity_create_home.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/layout/activity_create_home.xml	(revision 1020)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:orientation="vertical"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent">
+
+    <TextView
+        android:layout_gravity="center"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="@string/tab_create"/>
+</LinearLayout>
\ No newline at end of file
Index: packages/apps/GalleryTcl/res/layout/holder_year_view.xml
===================================================================
--- packages/apps/GalleryTcl/res/layout/holder_year_view.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/layout/holder_year_view.xml	(revision 1020)
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+              android:orientation="vertical"
+              android:layout_width="match_parent"
+              android:layout_height="match_parent">
+
+    <android.support.v7.widget.RecyclerView
+        xmlns:android="http://schemas.android.com/apk/res/android"
+        android:id="@+id/rv_month"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        />
+
+</LinearLayout>
\ No newline at end of file
Index: packages/apps/GalleryTcl/res/layout/edit_btn.xml
===================================================================
--- packages/apps/GalleryTcl/res/layout/edit_btn.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/layout/edit_btn.xml	(revision 1020)
@@ -0,0 +1,53 @@
+<?xml version="1.0" encoding="utf-8"?>
+    <LinearLayout
+        xmlns:android="http://schemas.android.com/apk/res/android"
+        android:orientation="horizontal"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_toEndOf="@+id/bi_viewpager"
+        android:id="@+id/btn_edit"
+        android:visibility="gone"
+        android:weightSum="5"
+        >
+        <Button
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            android:text="@string/btn_Fiters"
+            android:id="@+id/btn_Fiters"
+            android:layout_weight="1"
+            style="@style/Widget.AppCompat.Button.Borderless"
+            />
+        <Button
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            android:text="@string/btn_Frame"
+            android:id="@+id/btn_Frame"
+            android:layout_weight="1"
+            style="@style/Widget.AppCompat.Button.Borderless"
+            />
+        <Button
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            android:text="@string/btn_UcropAndRotate"
+            android:id="@+id/btn_UcropAndRotate"
+            android:layout_weight="1"
+            style="@style/Widget.AppCompat.Button.Borderless"
+            />
+        <Button
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            android:text="@string/btn_adjust"
+            android:id="@+id/btn_adjust"
+            android:layout_weight="1"
+            style="@style/Widget.AppCompat.Button.Borderless"
+            />
+        <ImageButton
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            android:text="@string/btn_Draw"
+            android:id="@+id/btn_Draw"
+            android:layout_weight="1"
+            android:src="@drawable/select_photo"
+            android:background="@drawable/ripple_bg_buttom"
+            />
+    </LinearLayout>
\ No newline at end of file
Index: packages/apps/GalleryTcl/res/layout/album_gradview.xml
===================================================================
--- packages/apps/GalleryTcl/res/layout/album_gradview.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/layout/album_gradview.xml	(revision 1020)
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:orientation="vertical" 
+    android:layout_width="match_parent"
+    android:layout_height="match_parent">
+
+    <GridView
+        android:id="@+id/album_gridview"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:horizontalSpacing="8dp"
+        android:numColumns="auto_fit">
+    </GridView>
+</LinearLayout>
\ No newline at end of file
Index: packages/apps/GalleryTcl/res/layout/fastscroll__default_bubble.xml
===================================================================
--- packages/apps/GalleryTcl/res/layout/fastscroll__default_bubble.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/layout/fastscroll__default_bubble.xml	(revision 1020)
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="utf-8"?>
+<TextView xmlns:android="http://schemas.android.com/apk/res/android"
+          xmlns:tools="http://schemas.android.com/tools"
+          android:layout_width="wrap_content"
+          android:layout_height="wrap_content"
+          android:layout_margin="1dp"
+          android:background="@drawable/fastscroll__default_bubble"
+          android:elevation="2dp"
+          android:gravity="center"
+          android:paddingLeft="10dp"
+          android:paddingRight="10dp"
+          android:paddingTop="5dp"
+          android:paddingBottom="5dp"
+          android:textSize="14sp"
+          android:visibility="invisible"
+          tools:text="A"
+          tools:visibility="visible"/>
Index: packages/apps/GalleryTcl/res/layout/shifting_bottom_navigation_item.xml
===================================================================
--- packages/apps/GalleryTcl/res/layout/shifting_bottom_navigation_item.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/layout/shifting_bottom_navigation_item.xml	(revision 1020)
@@ -0,0 +1,49 @@
+<?xml version="1.0" encoding="utf-8"?>
+<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/shifting_bottom_navigation_container"
+    android:layout_width="match_parent"
+    android:layout_height="@dimen/shifting_height"
+    android:background="?selectableItemBackgroundBorderless"
+    android:orientation="vertical"
+    android:paddingBottom="@dimen/shifting_height_bottom_padding_active"
+    android:paddingLeft="@dimen/shifting_width_custom_padding"
+    android:paddingRight="@dimen/shifting_width_custom_padding"
+    android:paddingTop="@dimen/shifting_height_top_padding_inactive">
+
+    <FrameLayout
+        android:id="@+id/shifting_bottom_navigation_icon_container"
+        android:layout_width="@dimen/shifting_icon_badge_grid_width"
+        android:layout_height="@dimen/shifting_icon_badge_grid_height"
+        android:layout_gravity="center_horizontal|top">
+
+        <ImageView
+            android:id="@+id/shifting_bottom_navigation_icon"
+            android:layout_width="@dimen/shifting_icon_grid"
+            android:layout_height="@dimen/shifting_icon_grid"
+            android:layout_gravity="center"
+            android:contentDescription="@string/icon"
+            android:gravity="center"
+            android:scaleType="fitXY" />
+
+        <com.gallery.tclgallery.bottomnavbar.BadgeTextView
+            android:id="@+id/shifting_bottom_navigation_badge"
+            style="@style/BadgeText"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="top|end"
+            android:gravity="center" />
+    </FrameLayout>
+
+    <TextView
+        android:id="@+id/shifting_bottom_navigation_title"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_gravity="center_horizontal|bottom"
+        android:gravity="center"
+        android:includeFontPadding="false"
+        android:lines="1"
+        android:scaleX="0"
+        android:scaleY="0"
+        android:textSize="@dimen/shifting_label" />
+
+</FrameLayout>
\ No newline at end of file
Index: packages/apps/GalleryTcl/res/layout/rollout_grid_view.xml
===================================================================
--- packages/apps/GalleryTcl/res/layout/rollout_grid_view.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/layout/rollout_grid_view.xml	(revision 1020)
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent">
+
+    <com.arthur.rollout.view.RSquareLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content">
+
+        <ImageView
+            android:id="@+id/grid_image"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:background="@android:color/black"
+            android:scaleType="centerCrop"
+            />
+
+    </com.arthur.rollout.view.RSquareLayout>
+
+</LinearLayout>
Index: packages/apps/GalleryTcl/res/layout/main_activity.xml
===================================================================
--- packages/apps/GalleryTcl/res/layout/main_activity.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/layout/main_activity.xml	(revision 1020)
@@ -0,0 +1,90 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical">
+
+    <android.support.v4.view.ViewPager
+        android:id="@+id/viewpage"
+        android:layout_width="match_parent"
+        android:layout_height="0dp"
+        android:layout_weight="1" />
+
+    <LinearLayout
+        android:id="@+id/linearLayout1"
+        android:layout_width="fill_parent"
+        android:layout_height="40dp"
+        android:background="#EEEEEE"
+        android:orientation="horizontal">
+
+        <LinearLayout
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            android:layout_weight="1"
+            android:orientation="vertical">
+
+            <ImageView
+                android:id="@+id/tab_moments"
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                android:src="@drawable/ic_moments_24px_blue" />
+
+            <TextView
+                android:id="@+id/text1"
+                android:layout_width="fill_parent"
+                android:layout_height="fill_parent"
+                android:gravity="center"
+                android:text="@string/tab_moments"
+                android:textColor="#0099ff"
+                android:textSize="14sp" />
+        </LinearLayout>
+
+        <LinearLayout
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            android:layout_weight="1"
+            android:orientation="vertical">
+
+            <ImageView
+                android:id="@+id/tab_albums"
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                android:src="@drawable/ic_album_24px_gray" />
+
+            <TextView
+                android:id="@+id/text2"
+                android:layout_width="fill_parent"
+                android:layout_height="fill_parent"
+                android:gravity="center"
+                android:text="@string/tab_albums"
+                android:textColor="#444444"
+                android:textSize="14sp" />
+        </LinearLayout>
+
+        <LinearLayout
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            android:layout_weight="1"
+            android:orientation="vertical">
+
+            <ImageView
+                android:id="@+id/tab_create"
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                android:src="@drawable/ic_create_24px" />
+
+            <TextView
+                android:id="@+id/text3"
+                android:layout_width="fill_parent"
+                android:layout_height="fill_parent"
+                android:layout_weight="1.0"
+                android:gravity="center"
+                android:src="@drawable/ic_create_24px"
+                android:text="@string/tab_create"
+                android:textColor="#444444"
+                android:textSize="14sp" />
+        </LinearLayout>
+
+    </LinearLayout>
+
+</LinearLayout>
\ No newline at end of file
Index: packages/apps/GalleryTcl/res/layout/holder_gallery_folder_list_item.xml
===================================================================
--- packages/apps/GalleryTcl/res/layout/holder_gallery_folder_list_item.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/layout/holder_gallery_folder_list_item.xml	(revision 1020)
@@ -0,0 +1,52 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+                xmlns:app="http://schemas.android.com/apk/res-auto"
+                xmlns:tools="http://schemas.android.com/tools"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:paddingBottom="5dp"
+                android:paddingLeft="10dp"
+                android:paddingRight="10dp"
+                android:paddingTop="5dp">
+
+    <ImageView
+        android:id="@+id/iv_folder_thumbnail"
+        android:layout_width="60dp"
+        android:layout_height="60dp"
+        android:layout_centerVertical="true"/>
+
+    <LinearLayout
+        android:layout_width="wrap_content"
+        android:layout_height="match_parent"
+        android:layout_marginLeft="10dp"
+        android:layout_toRightOf="@id/iv_folder_thumbnail"
+        android:gravity="center_vertical"
+        android:orientation="vertical">
+
+        <TextView
+            android:id="@+id/tv_folder_name"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:textColor="@color/dark_text"
+            android:textSize="14dp"
+            tools:text="所有照片"/>
+
+        <TextView
+            android:id="@+id/tv_picture_num"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_marginTop="5dp"
+            android:textColor="@color/dark_text"
+            android:textSize="12dp"
+            tools:text="1798"/>
+
+    </LinearLayout>
+
+    <ImageView
+        android:layout_width="15dp"
+        android:layout_height="15dp"
+        android:layout_alignParentRight="true"
+        android:layout_centerVertical="true"
+        android:src="@drawable/arrow_right_small"/>
+
+</RelativeLayout>
\ No newline at end of file
Index: packages/apps/GalleryTcl/res/layout/activity_main.xml
===================================================================
--- packages/apps/GalleryTcl/res/layout/activity_main.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/layout/activity_main.xml	(revision 1020)
@@ -0,0 +1,15 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    tools:context="com.gallery.tclgallery.ui.LocalScanActivity">
+
+    <Button
+        android:id="@+id/init_button"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="@string/scan_local_media"
+        android:onClick="scanLocalMedia"/>
+
+</RelativeLayout>
Index: packages/apps/GalleryTcl/res/layout/collage_view.xml
===================================================================
--- packages/apps/GalleryTcl/res/layout/collage_view.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/layout/collage_view.xml	(revision 1020)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:orientation="vertical" android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:id="@+id/lll">
+
+    <ListView
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:id="@+id/list"/>
+</LinearLayout>
\ No newline at end of file
Index: packages/apps/GalleryTcl/res/layout/activity_google_photo.xml
===================================================================
--- packages/apps/GalleryTcl/res/layout/activity_google_photo.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/layout/activity_google_photo.xml	(revision 1020)
@@ -0,0 +1,90 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--<android.support.design.widget.CoordinatorLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:layout_width="match_parent" android:layout_height="match_parent"
+    android:orientation="vertical">-->
+
+<LinearLayout android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:orientation="vertical"
+    xmlns:android="http://schemas.android.com/apk/res/android">
+
+        <android.support.design.widget.AppBarLayout
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content">
+
+            <android.support.v7.widget.Toolbar
+                android:id="@+id/toolbar"
+                android:layout_width="match_parent"
+                android:layout_height="@dimen/dimen_50dp"
+                android:background="?attr/colorPrimary"
+                android:minHeight="?attr/actionBarSize"
+                app:popupTheme="@style/ThemeOverlay.AppCompat.Light"
+                app:theme="@style/Toolbar" />
+        </android.support.design.widget.AppBarLayout>
+
+        <RelativeLayout
+            android:layout_width="match_parent"
+            android:layout_height="0dp"
+            android:layout_weight="1">
+
+            <!-- 图片集合容器 -->
+            <FrameLayout
+                android:id="@+id/fl_container"
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"/>
+
+            <ImageView
+                android:layout_width="match_parent"
+                android:layout_height="6dp"
+                android:layout_alignParentBottom="true"
+                android:src="@drawable/shadow"/>
+
+        </RelativeLayout>
+
+    </LinearLayout>
+
+    <!--&lt;!&ndash; 文件夹菜单 &ndash;&gt;
+    <LinearLayout
+        android:id="@+id/design_bottom_sheet"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:orientation="vertical"
+        app:behavior_hideable="true"
+        app:behavior_peekHeight="300dp"
+        app:elevation="4dp"
+        app:layout_behavior="@string/bottom_sheet_behavior">
+
+        <ImageView
+            android:layout_width="match_parent"
+            android:layout_height="6dp"
+            android:src="@drawable/shadow"/>
+
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:background="@color/white"
+            android:orientation="vertical"
+            android:paddingLeft="16dp"
+            android:paddingRight="16dp">
+
+            <ImageView
+                android:layout_width="18dp"
+                android:layout_height="8dp"
+                android:layout_gravity="center_horizontal"
+                android:layout_margin="10dp"
+                android:src="@drawable/drag_up"/>
+
+            <android.support.v7.widget.RecyclerView
+                android:id="@+id/rv_filedir"
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"/>
+
+        </LinearLayout>-->
+
+   <!-- </LinearLayout>-->
+
+<!--
+</android.support.design.widget.CoordinatorLayout>-->
Index: packages/apps/GalleryTcl/res/layout/activty_album_other.xml
===================================================================
--- packages/apps/GalleryTcl/res/layout/activty_album_other.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/layout/activty_album_other.xml	(revision 1020)
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    xmlns:app="http://schemas.android.com/apk/res-auto">
+
+    <android.support.v7.widget.Toolbar
+        android:id="@+id/other_toolbar"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:elevation="@dimen/elevation_toolbar"
+        android:background="@color/toolbar_bg"
+        app:popupTheme="@style/OverflowMenuStyle"
+        >
+    </android.support.v7.widget.Toolbar>
+
+    <GridView
+        android:id="@+id/other_grid"
+        android:layout_below="@+id/other_toolbar"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:numColumns="2"
+        android:horizontalSpacing="8dp" />
+
+</RelativeLayout>
\ No newline at end of file
Index: packages/apps/GalleryTcl/res/layout/holder_year_item.xml
===================================================================
--- packages/apps/GalleryTcl/res/layout/holder_year_item.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/layout/holder_year_item.xml	(revision 1020)
@@ -0,0 +1,33 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+              android:layout_width="match_parent"
+              android:layout_height="wrap_content"
+    android:orientation="vertical"
+    android:baselineAligned="false"
+    >
+
+    <TextView
+        android:id="@+id/tv_month"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:gravity="center"
+        android:textSize="14sp"/>
+
+    <android.support.v7.widget.RecyclerView
+        android:id="@+id/gv_photos"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:clipToPadding="true"
+        android:paddingLeft="0dp"
+        android:paddingRight="0dp"
+        android:requiresFadingEdge="none"
+        android:scrollbars="vertical"
+        />
+    <!--<com.example.whf.gallery.custom_view.ScrollViewGridView
+        android:id="@+id/gv_photos"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:numColumns="7"
+        android:scrollbars="none"/>-->
+
+</LinearLayout>
\ No newline at end of file
Index: packages/apps/GalleryTcl/res/layout/holder_month_view.xml
===================================================================
--- packages/apps/GalleryTcl/res/layout/holder_month_view.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/layout/holder_month_view.xml	(revision 1020)
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+              xmlns:app="http://schemas.android.com/apk/res-auto"
+              android:orientation="vertical" android:layout_width="match_parent"
+              android:layout_height="match_parent">
+
+    <android.support.v7.widget.RecyclerView
+        xmlns:android="http://schemas.android.com/apk/res/android"
+        android:id="@+id/rv_month"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"/>
+
+    <com.gallery.tclgallery.fastscroll.FastScroller
+        android:id="@+id/fastscroll"
+        android:orientation="vertical"
+        android:layout_width="wrap_content"
+        android:layout_height="match_parent"
+        android:layout_alignParentEnd="true"
+        android:layout_alignParentRight="true"/>
+
+</RelativeLayout>
\ No newline at end of file
Index: packages/apps/GalleryTcl/res/layout/activity_rollout_preview.xml
===================================================================
--- packages/apps/GalleryTcl/res/layout/activity_rollout_preview.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/layout/activity_rollout_preview.xml	(revision 1020)
@@ -0,0 +1,30 @@
+<?xml version="1.0" encoding="utf-8"?>
+<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:id="@+id/main_show_view"
+    android:layout_width="fill_parent"
+    android:layout_height="fill_parent"
+    android:background="@color/rollout_trans"
+    tools:context=".ui.RolloutPreviewActivity">
+    <android.support.v7.widget.Toolbar
+        android:id="@+id/toolbar_edit"
+        android:layout_width="match_parent"
+        android:layout_height="@dimen/dimen_50dp"
+        android:background="@android:color/transparent"
+        android:minHeight="?attr/actionBarSize"
+        app:popupTheme="@style/ThemeOverlay.AppCompat.Light"
+        app:theme="@style/Toolbar" />
+    <com.gallery.tclgallery.viewholder.RolloutViewPager
+        android:id="@+id/bi_viewpager"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:visibility="gone"
+        >
+    </com.gallery.tclgallery.viewholder.RolloutViewPager>
+
+    <include layout="@layout/edit_btn"
+        android:layout_gravity="center_horizontal|bottom"
+        android:layout_height="wrap_content"
+        android:layout_width="match_parent"/>
+</FrameLayout>
Index: packages/apps/GalleryTcl/res/layout/item1.xml
===================================================================
--- packages/apps/GalleryTcl/res/layout/item1.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/layout/item1.xml	(revision 1020)
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:orientation="vertical" android:layout_width="match_parent"
+    android:layout_height="match_parent">
+<ImageView
+    android:layout_width="wrap_content"
+    android:layout_height="wrap_content"
+    android:id="@+id/image_item"/>
+</LinearLayout>
\ No newline at end of file
Index: packages/apps/GalleryTcl/res/layout/view_header.xml
===================================================================
--- packages/apps/GalleryTcl/res/layout/view_header.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/layout/view_header.xml	(revision 1020)
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:orientation="horizontal"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content">
+    <ImageView
+        android:id="@+id/text_select"
+        android:layout_width="20dp"
+        android:layout_height="20dp"
+        android:layout_marginTop="10dp"
+        android:layout_marginBottom="@dimen/dimen_10dp"
+        android:visibility="gone"
+        android:src="@drawable/selector_gallery_item"/>
+    <TextView
+        android:id="@+id/title_text"
+        android:layout_width="match_parent"
+        android:layout_height="@dimen/dimen_20dp"
+        android:textColor="@color/black"
+        android:layout_gravity="center_vertical"
+        android:paddingLeft="16dp"
+        android:paddingRight="16dp"
+        android:maxLines="1"
+        android:ellipsize="end"
+        android:layout_marginBottom="@dimen/dimen_10dp"
+        android:layout_marginTop="@dimen/dimen_10dp"
+        />
+
+</LinearLayout>
\ No newline at end of file
Index: packages/apps/GalleryTcl/res/layout/collage_item.xml
===================================================================
--- packages/apps/GalleryTcl/res/layout/collage_item.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/layout/collage_item.xml	(revision 1020)
@@ -0,0 +1,34 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical">
+
+    <TextView
+        android:id="@+id/collage_text"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:visibility="gone"/>
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal">
+
+
+        <ImageView
+            android:id="@+id/collage_image1"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content" />
+
+        <ImageView
+            android:id="@+id/collage_image2"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content" />
+
+        <ImageView
+            android:id="@+id/collage_image3"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content" />
+    </LinearLayout>
+</LinearLayout>
\ No newline at end of file
Index: packages/apps/GalleryTcl/res/layout/holder_month_item.xml
===================================================================
--- packages/apps/GalleryTcl/res/layout/holder_month_item.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/layout/holder_month_item.xml	(revision 1020)
@@ -0,0 +1,60 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- 图片列表图片项Holder布局 -->
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+                android:id="@+id/rl_container"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:padding="2dp">
+
+    <!-- 浅灰色背景 -->
+    <View
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:background="@color/gray_background"/>
+
+    <!-- 图片 -->
+    <ImageView
+        android:id="@+id/iv_photo"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:adjustViewBounds="true"/>
+
+    <!-- 选中标记 -->
+    <ImageView
+        android:id="@+id/iv_select"
+        android:layout_width="20dp"
+        android:layout_height="20dp"
+        android:layout_alignParentRight="true"
+        android:layout_marginRight="5dp"
+        android:layout_marginTop="5dp"
+        android:visibility="gone"
+        android:src="@drawable/selector_gallery_item"/>
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="@dimen/dimen_30dp"
+        android:orientation="horizontal"
+        android:layout_alignParentBottom="true"
+
+        >
+        <ImageView
+            android:paddingStart="@dimen/dimen_5dp"
+            android:layout_gravity="center"
+            android:id="@+id/iv_video"
+            android:layout_width="30dp"
+            android:layout_height="20dp"
+            android:background="#66444444"
+            android:src="@drawable/album_tag_video_white"/>
+        <TextView
+            android:paddingStart="@dimen/dimen_10dp"
+            android:id="@+id/video_duration"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:textSize="14sp"
+            android:layout_gravity="center"
+            android:hint="duration"
+            android:textColor="#000000"
+            android:background="#66444444"/>
+
+    </LinearLayout>
+
+</RelativeLayout>
\ No newline at end of file
Index: packages/apps/GalleryTcl/res/layout/activity_google_home.xml
===================================================================
--- packages/apps/GalleryTcl/res/layout/activity_google_home.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/layout/activity_google_home.xml	(revision 1020)
@@ -0,0 +1,112 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent">
+
+    <android.support.v7.widget.Toolbar
+        android:id="@+id/gallery_toolbar"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:background="@color/toolbar_bg"
+        android:popupTheme="@style/OverflowMenuStyle"
+        >
+    </android.support.v7.widget.Toolbar>
+
+    <View
+        android:id="@+id/toolbar_shadow"
+        android:layout_below="@id/gallery_toolbar"
+        android:layout_width="match_parent"
+        android:layout_height="5dp"
+        android:background= "@drawable/toolbar_shadow"/>
+
+    <FrameLayout
+        android:id="@+id/container"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_marginBottom="@dimen/dimen_65dp"
+        android:layout_below="@id/toolbar_shadow">
+        <include layout="@layout/album_gradview" />
+    </FrameLayout>
+
+    <FrameLayout
+        android:id="@+id/tab_layout"
+        android:layout_marginTop="@dimen/dimen_65dp"
+        android:layout_width="match_parent"
+        android:layout_height="@dimen/dimen_60dp"
+        android:layout_alignParentBottom="true">
+
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:orientation="vertical">
+
+            <ImageView
+                android:layout_width="match_parent"
+                android:layout_height="5dp"
+                android:src="@drawable/toolbar_shadow"
+                />
+
+            <LinearLayout
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                android:orientation="horizontal">
+                <LinearLayout
+                    android:id="@+id/tab_moments"
+                    android:layout_width="0dp"
+                    android:layout_height="match_parent"
+                    android:layout_weight="1"
+                    android:orientation="vertical">
+                    <ImageView
+                        android:layout_marginTop="@dimen/dimen_10dp"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:layout_gravity="center_horizontal"
+                        android:src="@drawable/ic_moments_24px"/>
+                    <TextView
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:layout_gravity="center_horizontal"
+                        android:text="@string/tab_moments"/>
+                </LinearLayout>
+
+                <LinearLayout
+                    android:id="@+id/tab_albums"
+                    android:layout_width="0dp"
+                    android:layout_height="match_parent"
+                    android:layout_weight="1"
+                    android:orientation="vertical">
+                    <ImageView
+                        android:layout_marginTop="@dimen/dimen_10dp"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:layout_gravity="center_horizontal"
+                        android:src="@drawable/ic_album_24px"/>
+                    <TextView
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:layout_gravity="center_horizontal"
+                        android:text="@string/tab_albums"/>
+                </LinearLayout>
+
+                <LinearLayout
+                    android:id="@+id/tab_create"
+                    android:layout_width="0dp"
+                    android:layout_height="match_parent"
+                    android:layout_weight="1"
+                    android:orientation="vertical">
+                    <ImageView
+                        android:layout_marginTop="@dimen/dimen_10dp"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:layout_gravity="center_horizontal"
+                        android:src="@drawable/ic_create_24px"/>
+                    <TextView
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:layout_gravity="center_horizontal"
+                        android:text="@string/tab_create"/>
+                </LinearLayout>
+            </LinearLayout>
+        </LinearLayout>
+    </FrameLayout>
+</RelativeLayout>
\ No newline at end of file
Index: packages/apps/GalleryTcl/res/mipmap-xhdpi/ic_launcher_round.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/GalleryTcl/res/mipmap-xhdpi/ic_launcher_round.png
===================================================================
--- packages/apps/GalleryTcl/res/mipmap-xhdpi/ic_launcher_round.png	(revision 0)
+++ packages/apps/GalleryTcl/res/mipmap-xhdpi/ic_launcher_round.png	(revision 1020)

Property changes on: packages/apps/GalleryTcl/res/mipmap-xhdpi/ic_launcher_round.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/GalleryTcl/res/mipmap-xhdpi/ic_launcher.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/GalleryTcl/res/mipmap-xhdpi/ic_launcher.png
===================================================================
--- packages/apps/GalleryTcl/res/mipmap-xhdpi/ic_launcher.png	(revision 0)
+++ packages/apps/GalleryTcl/res/mipmap-xhdpi/ic_launcher.png	(revision 1020)

Property changes on: packages/apps/GalleryTcl/res/mipmap-xhdpi/ic_launcher.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/GalleryTcl/res/mipmap-xxxhdpi/ic_launcher.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/GalleryTcl/res/mipmap-xxxhdpi/ic_launcher.png
===================================================================
--- packages/apps/GalleryTcl/res/mipmap-xxxhdpi/ic_launcher.png	(revision 0)
+++ packages/apps/GalleryTcl/res/mipmap-xxxhdpi/ic_launcher.png	(revision 1020)

Property changes on: packages/apps/GalleryTcl/res/mipmap-xxxhdpi/ic_launcher.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/GalleryTcl/res/mipmap-xxxhdpi/ic_launcher_round.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/GalleryTcl/res/mipmap-xxxhdpi/ic_launcher_round.png
===================================================================
--- packages/apps/GalleryTcl/res/mipmap-xxxhdpi/ic_launcher_round.png	(revision 0)
+++ packages/apps/GalleryTcl/res/mipmap-xxxhdpi/ic_launcher_round.png	(revision 1020)

Property changes on: packages/apps/GalleryTcl/res/mipmap-xxxhdpi/ic_launcher_round.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/GalleryTcl/res/values/strings.xml
===================================================================
--- packages/apps/GalleryTcl/res/values/strings.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/values/strings.xml	(revision 1020)
@@ -0,0 +1,90 @@
+<resources>
+    <string name="app_name">GalleryTcl</string>
+
+    <string name="year_view">Year View</string>
+    <string name="month_view">Month View</string>
+    <string name="day_view">Day View</string>
+    <string name="other_view">其他视图</string>
+    <string name="delete_photo">Delete Photo ?</string>
+    <string name="delete_photos">Delete Photos ?</string>
+    <string name="btn_ok">DELETE</string>
+    <string name="btn_cancel">CANCEL</string>
+    <string name="delete">Delete</string>
+    <string name="share">Share</string>
+    <string name="camera">Camera</string>
+
+
+    <!-- add -->
+    <string name="tab_moments">Moments</string>
+    <string name="tab_albums">Albums</string>
+    <string name="tab_create">Create</string>
+
+    <string name="toolbar_select_albums">Select albums</string>
+    <string name="toolbar_sort_albums">Sort albums</string>
+    <string name="toolbar_album_settings">Settings</string>
+    <string name="toolbar_album_add">Add Album</string>
+    <string name="toolbar_album_close">Close SelectView</string>
+    <string name="toolbar_album_archive">Archive Album</string>
+    <string name="toolbar_album_delete">Album Delete</string>
+
+    <string name="album_toolbar_select_item">Select items</string>
+    <string name="album_toolbar_slide_show">Slideshow</string>
+    <string name="album_toolbar_rename_album">Rename Album</string>
+    <string name="album_toolbar_delete_album">Delete Album</string>
+    <string name="album_toolbar_share_photo">Share Photo</string>
+    <string name="album_toolbar_delete_photo">Delete Photo</string>
+    <string name="album_toolbar_select_all">Select all</string>
+    <string name="album_toolbar_unselect_all">Unselect all</string>
+    <string name="album_toolbar_copy_to_album">copy to album</string>
+    <string name="album_toolbar_move_to_album">Move to album</string>
+    <string name="album_toolbar_set_as_private">Set as private</string>
+
+    <string name="album_photo_no_selected_toolbar_title">Select item</string>
+
+    <string name="album_other_menu_unarchive">Move back to album</string>
+    <string name="album_other_toolbar_title">Others</string>
+    <string name="album_other_toolbar_select_albums_title">Select albums</string>
+
+    <string name="album_all_images">All Images</string>
+    <string name="album_all_videos">All Videos</string>
+    <string name="album_all_images_videos">All Images/Videos</string>
+
+    <string name="menu_title_moment">Moment</string>
+    <string name="menu_title_album">Album</string>
+    <string name="menu_title_create">Create</string>
+
+    <string name="denied_required_permission">Permissions denied. You can change them in Settings &gt; Apps.</string>
+
+    <!-- bottomNavigationBar -->
+    <string name="icon">icon</string>
+    <!-- bottomNavigationBar -->
+
+    <string-array name="default_album">
+        <item>/storage/emulated/0/DCIM/Camera</item>
+        <item>/storage/emulated/0/DCIM/Selfies</item>
+        <item>/storage/emulated/0/Movies</item>
+        <item>/storage/emulated/0/Pictures/Screenshots</item>
+        <item>/storage/emulated/0/DCIM/MyCreation</item>
+    </string-array>
+
+    <string name="default_album_camera">Camera</string>
+    <string name="default_album_favourites">Favourites</string>
+    <string name="default_album_self">Selfies</string>
+    <string name="default_album_videos">Videos</string>
+    <string name="default_album_screenshots">Screenshots</string>
+    <string name="default_album_my_creation">MyCreation</string>
+    <string name="default_album_cinema_graph">CinemaGraph</string>
+    <string name="default_album_private">Private</string>
+    <string name="default_album_others">Others</string>
+
+    <string name="selectall">Select All</string>
+    <string name="unselectall">UnSelect All</string>
+	
+	<string name="scan_local_media">scan local media</string>
+	<string name="btn_Fiters">btn_Fiters</string>
+	<string name="btn_Frame">btn_Frame</string>
+	<string name="btn_UcropAndRotate">btn_UcropAndRotate</string>
+	<string name="btn_adjust">btn_adjust</string>
+	<string name="btn_Draw">btn_Draw</string>
+
+</resources>
Index: packages/apps/GalleryTcl/res/values/attrs.xml
===================================================================
--- packages/apps/GalleryTcl/res/values/attrs.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/values/attrs.xml	(revision 1020)
@@ -0,0 +1,27 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+
+    <attr name="fastscroll__style" format="reference" />
+    <declare-styleable name="fastscroll__fastScroller">
+        <attr name="fastscroll__bubbleColor" format="color" />
+        <attr name="fastscroll__handleColor" format="color" />
+        <attr name="fastscroll__bubbleTextAppearance" format="reference" />
+    </declare-styleable>
+
+    <declare-styleable name="BottomNavigationBar">
+        <attr format="dimension" name="bnbElevation"/><attr format="color" name="bnbActiveColor"/><attr format="color" name="bnbInactiveColor"/><attr format="color" name="bnbBackgroundColor"/><attr format="integer" name="bnbAnimationDuration"/><attr format="enum" name="bnbMode">
+            <enum name="mode_default" value="0"/>
+            <enum name="mode_fixed" value="1"/>
+            <enum name="mode_shifting" value="2"/>
+            <enum name="mode_fixed_no_title" value="3"/>
+            <enum name="mode_shifting_no_title" value="4"/>
+        </attr>
+        <attr format="enum" name="bnbBackgroundStyle">
+            <enum name="background_style_default" value="0"/>
+            <enum name="background_style_static" value="1"/>
+            <enum name="background_style_ripple" value="2"/>
+        </attr>
+        <attr format="boolean" name="bnbAutoHideEnabled"/>
+    </declare-styleable>
+
+</resources>
\ No newline at end of file
Index: packages/apps/GalleryTcl/res/values/dimens.xml
===================================================================
--- packages/apps/GalleryTcl/res/values/dimens.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/values/dimens.xml	(revision 1020)
@@ -0,0 +1,93 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <dimen name="badge_corner_radius">13dp</dimen>
+    <dimen name="badge_height_padding">1dp</dimen>
+    <dimen name="badge_text_size">12sp</dimen>
+    <dimen name="badge_top_margin">2dp</dimen>
+    <dimen name="badge_width_padding">4dp</dimen>
+    <dimen name="bottom_navigation_elevation">8dp</dimen>
+    <dimen name="bottom_navigation_height">56dp</dimen>
+    <dimen name="bottom_navigation_padded_height">64dp</dimen>
+    <dimen name="bottom_navigation_top_margin_correction">-8dp</dimen>
+    <dimen name="fixed_height">56dp</dimen>
+    <dimen name="fixed_height_bottom_padding">10dp</dimen>
+    <dimen name="fixed_height_top_padding_active">0dp
+    </dimen>
+    <dimen name="fixed_height_top_padding_inactive">2dp
+    </dimen>
+    <dimen name="fixed_icon_badge_grid_height">36dp
+    </dimen>
+    <dimen name="fixed_icon_badge_grid_width">48dp
+    </dimen>
+    <dimen name="fixed_icon_grid">24dp</dimen>
+    <dimen name="fixed_label_active">14sp</dimen>
+    <item format="float" name="fixed_label_active_to_inactive_ratio" type="dimen">0.857</item>
+    <dimen name="fixed_label_inactive">12sp</dimen>
+    <dimen name="fixed_max_width">168dp</dimen>
+    <dimen name="fixed_min_width">120dp</dimen>
+    <dimen name="fixed_min_width_small_views">104dp</dimen>
+    <dimen name="fixed_no_title_icon_container_height">42dp</dimen>
+    <dimen name="fixed_no_title_icon_container_width">56dp</dimen>
+    <dimen name="fixed_no_title_icon_height">32dp</dimen>
+    <dimen name="fixed_no_title_icon_width">32dp</dimen>
+    <dimen name="fixed_width_padding">12dp</dimen>
+    <dimen name="shifting_height">56dp</dimen>
+    <dimen name="shifting_height_bottom_padding_active">10dp</dimen>
+    <dimen name="shifting_height_bottom_padding_inactive">16dp
+    </dimen>
+    <dimen name="shifting_height_top_padding_active">0dp
+    </dimen>
+    <dimen name="shifting_height_top_padding_inactive">10dp
+    </dimen>
+    <dimen name="shifting_icon_badge_grid_height">36dp</dimen>
+    <dimen name="shifting_icon_badge_grid_width">48dp</dimen>
+    <dimen name="shifting_icon_grid">24dp</dimen>
+    <dimen name="shifting_label">14sp</dimen>
+    <dimen name="shifting_max_width_active">168dp</dimen>
+    <dimen name="shifting_max_width_inactive">96dp</dimen>
+    <dimen name="shifting_min_width_active">96dp</dimen>
+    <dimen name="shifting_min_width_inactive">64dp</dimen>
+    <dimen name="shifting_no_title_icon_container_height">42dp</dimen>
+    <dimen name="shifting_no_title_icon_container_width">56dp</dimen>
+    <dimen name="shifting_no_title_icon_height">32dp</dimen>
+    <dimen name="shifting_no_title_icon_width">32dp</dimen>
+    <dimen name="shifting_width_custom_padding">6dp</dimen>
+
+    <dimen name="elevation_toolbar">2dp</dimen>
+    <dimen name="elevation_bottom_navigation_bar">8dp</dimen>
+
+
+    <dimen name="dimen_5dp">5dp</dimen>
+    <dimen name="dimen_10dp">10dp</dimen>
+    <dimen name="dimen_15dp">25dp</dimen>
+    <dimen name="dimen_20dp">20dp</dimen>
+    <dimen name="dimen_25dp">25dp</dimen>
+    <dimen name="dimen_30dp">30dp</dimen>
+    <dimen name="dimen_35dp">35dp</dimen>
+    <dimen name="dimen_40dp">40dp</dimen>
+    <dimen name="dimen_45dp">45dp</dimen>
+    <dimen name="dimen_50dp">50dp</dimen>
+    <dimen name="dimen_55dp">55dp</dimen>
+    <dimen name="dimen_60dp">60dp</dimen>
+    <dimen name="dimen_64dp">64dp</dimen>
+    <dimen name="dimen_65dp">65dp</dimen>
+    <dimen name="dimen_70dp">70dp</dimen>
+    <dimen name="dimen_75dp">75dp</dimen>
+    <dimen name="dimen_80dp">80dp</dimen>
+    <dimen name="dimen_85dp">85dp</dimen>
+    <dimen name="dimen_90dp">90dp</dimen>
+    <dimen name="dimen_95dp">95dp</dimen>
+    <dimen name="dimen_100dp">100dp</dimen>
+    <dimen name="dimen_150dp">150dp</dimen>
+    <dimen name="dimen_200dp">200dp</dimen>
+
+    <dimen name="fastscroll__bubble_corner">20dp</dimen>
+    <dimen name="fastscroll__bubble_size">50dp</dimen>
+    <dimen name="fastscroll__handle_corner">3dp</dimen>
+    <dimen name="fastscroll__handle_height">55dp</dimen>
+    <dimen name="fastscroll__handle_width">6dp</dimen>
+    <dimen name="fastscroll__handle_inset">9dp</dimen>
+    <dimen name="fastscroll__handle_clickable_width">32dp</dimen>
+    <dimen name="fastscroll__handle_padding">2dp</dimen>
+
+</resources>
\ No newline at end of file
Index: packages/apps/GalleryTcl/res/values/colors.xml
===================================================================
--- packages/apps/GalleryTcl/res/values/colors.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/values/colors.xml	(revision 1020)
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <color name="colorPrimary">#3F51B5</color>
+    <color name="colorPrimaryDark">#303F9F</color>
+    <color name="colorAccent">#FF4081</color>
+
+    <color name="white">#ffffff</color>
+    <color name="black">#000000</color>
+    <color name="glay_font">#97989A</color>
+    <color name="dark_text">#1c3041</color>
+    <color name="gray_background">#eeeff5</color>
+    <color name="gray_text">#858892</color>
+
+    <color name="nav_bar_active_color">#0099ff</color>
+    <color name="nav_bar_inactive_color">#444444</color>
+
+    <!--add -->
+    <color name="toolbar_bg">#EEFFFFFF</color>
+
+    <color name="rollout_colorPrimary">#3F51B5</color>
+    <color name="rollout_colorPrimaryDark">#303F9F</color>
+    <color name="rollout_colorAccent">#FF4081</color>
+    <color name="rollout_preview_bg" >#191919</color>
+    <color name="rollout_trans" >@android:color/transparent</color>
+</resources>
Index: packages/apps/GalleryTcl/res/values/styles.xml
===================================================================
--- packages/apps/GalleryTcl/res/values/styles.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/values/styles.xml	(revision 1020)
@@ -0,0 +1,31 @@
+<resources>
+
+    <!-- Base application theme. -->
+    <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
+        <!-- Customize your theme here. -->
+        <item name="colorPrimary">@color/colorPrimary</item>
+        <item name="colorPrimaryDark">@color/colorPrimaryDark</item>
+        <item name="colorAccent">@color/colorAccent</item>
+        <item name="windowActionBar">false</item>
+        <item name="windowNoTitle">true</item>
+    </style>
+
+    <!--  toolbar-->
+    <style name="OverflowMenuStyle" parent="@style/ThemeOverlay.AppCompat">
+        <item name="overlapAnchor">false</item>
+    </style>
+    <style name="Toolbar" parent="ThemeOverlay.AppCompat.Dark.ActionBar" />
+    <!--  toolbar-->
+
+    <style name="BadgeText" parent="TextAppearance.AppCompat.Body2">
+        <item name="android:textSize">@dimen/badge_text_size</item>
+        <item name="android:includeFontPadding">false</item>
+        <item name="android:maxLines">1</item>
+        <item name="android:layout_marginTop">@dimen/badge_top_margin</item>
+        <item name="android:paddingRight">@dimen/badge_width_padding</item>
+        <item name="android:paddingLeft">@dimen/badge_width_padding</item>
+        <item name="android:paddingBottom">@dimen/badge_height_padding</item>
+        <item name="android:paddingTop">@dimen/badge_height_padding</item>
+        <item name="android:visibility">gone</item>
+    </style>
+</resources>
Index: packages/apps/GalleryTcl/res/drawable/arrow_right_small.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/GalleryTcl/res/drawable/arrow_right_small.png
===================================================================
--- packages/apps/GalleryTcl/res/drawable/arrow_right_small.png	(revision 0)
+++ packages/apps/GalleryTcl/res/drawable/arrow_right_small.png	(revision 1020)

Property changes on: packages/apps/GalleryTcl/res/drawable/arrow_right_small.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/GalleryTcl/res/drawable/album_tag_video_white.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/GalleryTcl/res/drawable/album_tag_video_white.png
===================================================================
--- packages/apps/GalleryTcl/res/drawable/album_tag_video_white.png	(revision 0)
+++ packages/apps/GalleryTcl/res/drawable/album_tag_video_white.png	(revision 1020)

Property changes on: packages/apps/GalleryTcl/res/drawable/album_tag_video_white.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/GalleryTcl/res/drawable/gridview_item_bg.xml
===================================================================
--- packages/apps/GalleryTcl/res/drawable/gridview_item_bg.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/drawable/gridview_item_bg.xml	(revision 1020)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<shape xmlns:android="http://schemas.android.com/apk/res/android"
+    android:shape="rectangle">
+    <!--angle 渐变角度,0:左到右;90:下到上;180:右到左;270:上到下-->
+    <gradient
+        android:startColor="#55000000"
+        android:endColor="#00000000"
+        android:angle="90">
+    </gradient>
+
+</shape>
\ No newline at end of file
Index: packages/apps/GalleryTcl/res/drawable/shadow.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/GalleryTcl/res/drawable/shadow.png
===================================================================
--- packages/apps/GalleryTcl/res/drawable/shadow.png	(revision 0)
+++ packages/apps/GalleryTcl/res/drawable/shadow.png	(revision 1020)

Property changes on: packages/apps/GalleryTcl/res/drawable/shadow.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/GalleryTcl/res/drawable/ic_archive_24px.xml
===================================================================
--- packages/apps/GalleryTcl/res/drawable/ic_archive_24px.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/drawable/ic_archive_24px.xml	(revision 1020)
@@ -0,0 +1,16 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24">
+
+    <path
+        android:fillColor="#000000"
+        android:pathData="M20.54 5.23l-1.39-1.68C18.88 3.21 18.47 3 18 3H6c-.47 0-.88 .21 -1.16 .55 L3.46
+5.23C3.17 5.57 3 6.02 3 6.5V19c0 1.1 .9 2 2 2h14c1.1 0 2-.9
+2-2V6.5c0-.48-.17-.93-.46-1.27zM12 17.5L6.5 12H10v-2h4v2h3.5L12 17.5zM5.12
+5l.81-1h12l.94 1H5.12z" />
+    <path
+        android:pathData="M0 0h24v24H0z" />
+</vector>
Index: packages/apps/GalleryTcl/res/drawable/ic_arrow_back_black_24dp.xml
===================================================================
--- packages/apps/GalleryTcl/res/drawable/ic_arrow_back_black_24dp.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/drawable/ic_arrow_back_black_24dp.xml	(revision 1020)
@@ -0,0 +1,9 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+        android:width="24dp"
+        android:height="24dp"
+        android:viewportWidth="24.0"
+        android:viewportHeight="24.0">
+    <path
+        android:fillColor="#FF000000"
+        android:pathData="M20,11H7.83l5.59,-5.59L12,4l-8,8 8,8 1.41,-1.41L7.83,13H20v-2z"/>
+</vector>
Index: packages/apps/GalleryTcl/res/drawable/ic_album_24px_gray.xml
===================================================================
--- packages/apps/GalleryTcl/res/drawable/ic_album_24px_gray.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/drawable/ic_album_24px_gray.xml	(revision 1020)
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24">
+
+    <path
+        android:pathData="M0 0h24v24H0V0z" />
+    <path
+        android:fillColor="#cacaca"
+        android:pathData="M4 6H2v14c0 1.1 .9 2 2 2h14v-2H4V6z" />
+    <path
+        android:pathData="M0 0h24v24H0V0z" />
+    <path
+        android:fillColor="#cacaca"
+        android:pathData="M20 2H8c-1.1 0-2 .9-2 2v12c0 1.1 .9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm0
+10l-2.5-1.5L15 12V4h5v8z" />
+</vector>
\ No newline at end of file
Index: packages/apps/GalleryTcl/res/drawable/ic_moments_24px.xml
===================================================================
--- packages/apps/GalleryTcl/res/drawable/ic_moments_24px.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/drawable/ic_moments_24px.xml	(revision 1020)
@@ -0,0 +1,35 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24">
+
+    <group
+        android:name="Page-1">
+        <group
+            android:name="ic_moments_24px">
+            <path
+                android:name="Shape"
+                android:strokeWidth="1"
+                android:pathData="M 0 0 L 24 0 L 24 24 L 0 24 Z" />
+            <path
+                android:name="Shape"
+                android:fillColor="#000000"
+                android:strokeWidth="1"
+                android:pathData="M20,2 L4,2 C2.9,2 2,2.9 2,4 L2,20 C2,21.1 2.9,22 4,22 L20,22 C21.1,22 22,21.1
+22,20 L22,4 C22,2.9 21.1,2 20,2 L20,2 Z M20,20 L4,20 L4,4 L20,4 L20,20 L20,20 Z" />
+            <path
+                android:name="Shape"
+                android:fillColor="#000000"
+                android:strokeWidth="1"
+                android:pathData="M17,8.5 C17,7.7 16.3,7 15.5,7 C14.7,7 14,7.7 14,8.5 C14,9.3 14.7,10 15.5,10
+C16.3,10 17,9.3 17,8.5 L17,8.5 L17,8.5 Z" />
+            <path
+                android:name="Shape"
+                android:fillColor="#000000"
+                android:strokeWidth="1"
+                android:pathData="M 10 13 L 6 18 L 18 18 L 15 14 L 13 16.7 Z" />
+        </group>
+    </group>
+</vector>
\ No newline at end of file
Index: packages/apps/GalleryTcl/res/drawable/image_checked.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/GalleryTcl/res/drawable/image_checked.png
===================================================================
--- packages/apps/GalleryTcl/res/drawable/image_checked.png	(revision 0)
+++ packages/apps/GalleryTcl/res/drawable/image_checked.png	(revision 1020)

Property changes on: packages/apps/GalleryTcl/res/drawable/image_checked.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/GalleryTcl/res/drawable/ic_unarchive_24px.xml
===================================================================
--- packages/apps/GalleryTcl/res/drawable/ic_unarchive_24px.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/drawable/ic_unarchive_24px.xml	(revision 1020)
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24">
+
+    <path
+        android:fillColor="#000000"
+        android:pathData="M20.55 5.22l-1.39-1.68C18.88 3.21 18.47 3 18 3H6c-.47 0-.88 .21 -1.15 .55 L3.46
+5.22C3.17 5.57 3 6.01 3 6.5V19c0 1.1 .89 2 2 2h14c1.1 0 2-.9
+2-2V6.5c0-.49-.17-.93-.45-1.28zM12 9.5l5.5 5.5H14v2h-4v-2H6.5L12 9.5zM5.12
+5l.82-1h12l.93 1H5.12z" />
+</vector>
\ No newline at end of file
Index: packages/apps/GalleryTcl/res/drawable/select_photo.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/GalleryTcl/res/drawable/select_photo.png
===================================================================
--- packages/apps/GalleryTcl/res/drawable/select_photo.png	(revision 0)
+++ packages/apps/GalleryTcl/res/drawable/select_photo.png	(revision 1020)

Property changes on: packages/apps/GalleryTcl/res/drawable/select_photo.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/GalleryTcl/res/drawable/ic_create_24px_gray.xml
===================================================================
--- packages/apps/GalleryTcl/res/drawable/ic_create_24px_gray.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/drawable/ic_create_24px_gray.xml	(revision 1020)
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24">
+
+    <path
+        android:fillColor="#cacaca"
+        android:pathData="M13 13v8h8v-8h-8zM3 21h8v-8H3v8zM3 3v8h8V3H3zm13.66-1.31L11 7.34 16.66
+13l5.66-5.66-5.66-5.65z" />
+    <path
+        android:pathData="M0 0h24v24H0z" />
+</vector>
\ No newline at end of file
Index: packages/apps/GalleryTcl/res/drawable/selector_gallery_item.xml
===================================================================
--- packages/apps/GalleryTcl/res/drawable/selector_gallery_item.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/drawable/selector_gallery_item.xml	(revision 1020)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <item android:drawable="@drawable/image_checked" android:state_selected="true"/>
+    <item android:drawable="@drawable/select_photo" android:state_selected="false"/>
+</selector>
\ No newline at end of file
Index: packages/apps/GalleryTcl/res/drawable/wirite_right_arrows.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/GalleryTcl/res/drawable/wirite_right_arrows.png
===================================================================
--- packages/apps/GalleryTcl/res/drawable/wirite_right_arrows.png	(revision 0)
+++ packages/apps/GalleryTcl/res/drawable/wirite_right_arrows.png	(revision 1020)

Property changes on: packages/apps/GalleryTcl/res/drawable/wirite_right_arrows.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/GalleryTcl/res/drawable/photo_handle.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/GalleryTcl/res/drawable/photo_handle.png
===================================================================
--- packages/apps/GalleryTcl/res/drawable/photo_handle.png	(revision 0)
+++ packages/apps/GalleryTcl/res/drawable/photo_handle.png	(revision 1020)

Property changes on: packages/apps/GalleryTcl/res/drawable/photo_handle.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/GalleryTcl/res/drawable/ic_check_box_outline_blank_black_24dp.xml
===================================================================
--- packages/apps/GalleryTcl/res/drawable/ic_check_box_outline_blank_black_24dp.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/drawable/ic_check_box_outline_blank_black_24dp.xml	(revision 1020)
@@ -0,0 +1,9 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+        android:width="24dp"
+        android:height="24dp"
+        android:viewportWidth="24.0"
+        android:viewportHeight="24.0">
+    <path
+        android:fillColor="#FF000000"
+        android:pathData="M19,5v14H5V5h14m0,-2H5c-1.1,0 -2,0.9 -2,2v14c0,1.1 0.9,2 2,2h14c1.1,0 2,-0.9 2,-2V5c0,-1.1 -0.9,-2 -2,-2z"/>
+</vector>
Index: packages/apps/GalleryTcl/res/drawable/ic_create_24px.xml
===================================================================
--- packages/apps/GalleryTcl/res/drawable/ic_create_24px.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/drawable/ic_create_24px.xml	(revision 1020)
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24">
+
+    <path
+        android:fillColor="#000000"
+        android:pathData="M13 13v8h8v-8h-8zM3 21h8v-8H3v8zM3 3v8h8V3H3zm13.66-1.31L11 7.34 16.66
+13l5.66-5.66-5.66-5.65z" />
+    <path
+        android:pathData="M0 0h24v24H0z" />
+</vector>
\ No newline at end of file
Index: packages/apps/GalleryTcl/res/drawable/ic_moments_24px_gray.xml
===================================================================
--- packages/apps/GalleryTcl/res/drawable/ic_moments_24px_gray.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/drawable/ic_moments_24px_gray.xml	(revision 1020)
@@ -0,0 +1,35 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24">
+
+    <group
+        android:name="Page-1">
+        <group
+            android:name="ic_moments_24px_gray">
+            <path
+                android:name="Shape"
+                android:strokeWidth="1"
+                android:pathData="M 0 0 L 24 0 L 24 24 L 0 24 Z" />
+            <path
+                android:name="Shape"
+                android:fillColor="#cacaca"
+                android:strokeWidth="1"
+                android:pathData="M20,2 L4,2 C2.9,2 2,2.9 2,4 L2,20 C2,21.1 2.9,22 4,22 L20,22 C21.1,22 22,21.1
+22,20 L22,4 C22,2.9 21.1,2 20,2 L20,2 Z M20,20 L4,20 L4,4 L20,4 L20,20 L20,20 Z" />
+            <path
+                android:name="Shape"
+                android:fillColor="#cacaca"
+                android:strokeWidth="1"
+                android:pathData="M17,8.5 C17,7.7 16.3,7 15.5,7 C14.7,7 14,7.7 14,8.5 C14,9.3 14.7,10 15.5,10
+C16.3,10 17,9.3 17,8.5 L17,8.5 L17,8.5 Z" />
+            <path
+                android:name="Shape"
+                android:fillColor="#cacaca"
+                android:strokeWidth="1"
+                android:pathData="M 10 13 L 6 18 L 18 18 L 15 14 L 13 16.7 Z" />
+        </group>
+    </group>
+</vector>
\ No newline at end of file
Index: packages/apps/GalleryTcl/res/drawable/ic_close_24px.xml
===================================================================
--- packages/apps/GalleryTcl/res/drawable/ic_close_24px.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/drawable/ic_close_24px.xml	(revision 1020)
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24">
+
+    <path
+        android:fillColor="#000000"
+        android:pathData="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59
+19 19 17.59 13.41 12z" />
+    <path
+        android:pathData="M0 0h24v24H0z" />
+</vector>
\ No newline at end of file
Index: packages/apps/GalleryTcl/res/drawable/ripple_bg_buttom.xml
===================================================================
--- packages/apps/GalleryTcl/res/drawable/ripple_bg_buttom.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/drawable/ripple_bg_buttom.xml	(revision 1020)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<ripple xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:color="@android:color/holo_blue_bright"
+    tools:targetApi="lollipop">
+
+    <item android:drawable="@drawable/ripple_bg_editbutton_drawable" />
+</ripple>
\ No newline at end of file
Index: packages/apps/GalleryTcl/res/drawable/ic_album_24px_blue.xml
===================================================================
--- packages/apps/GalleryTcl/res/drawable/ic_album_24px_blue.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/drawable/ic_album_24px_blue.xml	(revision 1020)
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24">
+
+    <path
+        android:pathData="M0 0h24v24H0V0z" />
+    <path
+        android:fillColor="#0099ff"
+        android:pathData="M4 6H2v14c0 1.1 .9 2 2 2h14v-2H4V6z" />
+    <path
+        android:pathData="M0 0h24v24H0V0z" />
+    <path
+        android:fillColor="#0099ff"
+        android:pathData="M20 2H8c-1.1 0-2 .9-2 2v12c0 1.1 .9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm0
+10l-2.5-1.5L15 12V4h5v8z" />
+</vector>
\ No newline at end of file
Index: packages/apps/GalleryTcl/res/drawable/fastscroll_default_timeline_tag.xml
===================================================================
--- packages/apps/GalleryTcl/res/drawable/fastscroll_default_timeline_tag.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/drawable/fastscroll_default_timeline_tag.xml	(revision 1020)
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="utf-8"?>
+<shape xmlns:android="http://schemas.android.com/apk/res/android"
+       android:shape="rectangle">
+    <corners
+        android:topLeftRadius="@dimen/fastscroll__bubble_corner"
+        android:topRightRadius="@dimen/fastscroll__bubble_corner"
+        android:bottomLeftRadius="@dimen/fastscroll__bubble_corner"
+        android:bottomRightRadius="@dimen/fastscroll__bubble_corner" />
+    <solid android:color="#ddeaeaea" />
+</shape>
\ No newline at end of file
Index: packages/apps/GalleryTcl/res/drawable/ic_create_24px_blue.xml
===================================================================
--- packages/apps/GalleryTcl/res/drawable/ic_create_24px_blue.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/drawable/ic_create_24px_blue.xml	(revision 1020)
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24">
+
+    <path
+        android:fillColor="#0099ff"
+        android:pathData="M13 13v8h8v-8h-8zM3 21h8v-8H3v8zM3 3v8h8V3H3zm13.66-1.31L11 7.34 16.66
+13l5.66-5.66-5.66-5.65z" />
+    <path
+        android:pathData="M0 0h24v24H0z" />
+</vector>
\ No newline at end of file
Index: packages/apps/GalleryTcl/res/drawable/ic_share_black_24dp.xml
===================================================================
--- packages/apps/GalleryTcl/res/drawable/ic_share_black_24dp.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/drawable/ic_share_black_24dp.xml	(revision 1020)
@@ -0,0 +1,9 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+        android:width="24dp"
+        android:height="24dp"
+        android:viewportWidth="24.0"
+        android:viewportHeight="24.0">
+    <path
+        android:fillColor="#FF000000"
+        android:pathData="M18,16.08c-0.76,0 -1.44,0.3 -1.96,0.77L8.91,12.7c0.05,-0.23 0.09,-0.46 0.09,-0.7s-0.04,-0.47 -0.09,-0.7l7.05,-4.11c0.54,0.5 1.25,0.81 2.04,0.81 1.66,0 3,-1.34 3,-3s-1.34,-3 -3,-3 -3,1.34 -3,3c0,0.24 0.04,0.47 0.09,0.7L8.04,9.81C7.5,9.31 6.79,9 6,9c-1.66,0 -3,1.34 -3,3s1.34,3 3,3c0.79,0 1.5,-0.31 2.04,-0.81l7.12,4.16c-0.05,0.21 -0.08,0.43 -0.08,0.65 0,1.61 1.31,2.92 2.92,2.92 1.61,0 2.92,-1.31 2.92,-2.92s-1.31,-2.92 -2.92,-2.92z"/>
+</vector>
Index: packages/apps/GalleryTcl/res/drawable/ripple_bg_editbutton_drawable.xml
===================================================================
--- packages/apps/GalleryTcl/res/drawable/ripple_bg_editbutton_drawable.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/drawable/ripple_bg_editbutton_drawable.xml	(revision 1020)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<shape xmlns:android="http://schemas.android.com/apk/res/android"
+    android:shape="rectangle">
+    <solid android:color="#10000000" />
+    <corners android:radius="4dp" />
+</shape>
\ No newline at end of file
Index: packages/apps/GalleryTcl/res/drawable/drag_up.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/GalleryTcl/res/drawable/drag_up.png
===================================================================
--- packages/apps/GalleryTcl/res/drawable/drag_up.png	(revision 0)
+++ packages/apps/GalleryTcl/res/drawable/drag_up.png	(revision 1020)

Property changes on: packages/apps/GalleryTcl/res/drawable/drag_up.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/GalleryTcl/res/drawable/ic_video_black_24dp.xml
===================================================================
--- packages/apps/GalleryTcl/res/drawable/ic_video_black_24dp.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/drawable/ic_video_black_24dp.xml	(revision 1020)
@@ -0,0 +1,4 @@
+<vector android:height="15dp" android:viewportHeight="24.0"
+    android:viewportWidth="24.0" android:width="15dp" xmlns:android="http://schemas.android.com/apk/res/android">
+    <path android:fillColor="#FF000000" android:pathData="M17,10.5V7c0,-0.55 -0.45,-1 -1,-1H4c-0.55,0 -1,0.45 -1,1v10c0,0.55 0.45,1 1,1h12c0.55,0 1,-0.45 1,-1v-3.5l4,4v-11l-4,4z"/>
+</vector>
Index: packages/apps/GalleryTcl/res/drawable/toolbar_shadow.xml
===================================================================
--- packages/apps/GalleryTcl/res/drawable/toolbar_shadow.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/drawable/toolbar_shadow.xml	(revision 1020)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<shape xmlns:android="http://schemas.android.com/apk/res/android"
+    android:shape="rectangle">
+    <gradient
+        android:startColor="@android:color/transparent"
+        android:endColor="#88333333"
+        android:angle="90"/>
+</shape>
\ No newline at end of file
Index: packages/apps/GalleryTcl/res/drawable/album_selected.xml
===================================================================
--- packages/apps/GalleryTcl/res/drawable/album_selected.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/drawable/album_selected.xml	(revision 1020)
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<level-list xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:maxLevel="0" android:drawable="@drawable/ic_check_box_outline_blank_black_24dp" />
+    <item android:maxLevel="1" android:drawable="@drawable/ic_check_box_black_24dp" />
+</level-list>
\ No newline at end of file
Index: packages/apps/GalleryTcl/res/drawable/select_image_dir_tip.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/GalleryTcl/res/drawable/select_image_dir_tip.png
===================================================================
--- packages/apps/GalleryTcl/res/drawable/select_image_dir_tip.png	(revision 0)
+++ packages/apps/GalleryTcl/res/drawable/select_image_dir_tip.png	(revision 1020)

Property changes on: packages/apps/GalleryTcl/res/drawable/select_image_dir_tip.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/GalleryTcl/res/drawable/album_default_loading_pic.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/GalleryTcl/res/drawable/album_default_loading_pic.png
===================================================================
--- packages/apps/GalleryTcl/res/drawable/album_default_loading_pic.png	(revision 0)
+++ packages/apps/GalleryTcl/res/drawable/album_default_loading_pic.png	(revision 1020)

Property changes on: packages/apps/GalleryTcl/res/drawable/album_default_loading_pic.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/GalleryTcl/res/drawable/ic_add_24px.xml
===================================================================
--- packages/apps/GalleryTcl/res/drawable/ic_add_24px.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/drawable/ic_add_24px.xml	(revision 1020)
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24">
+
+    <path
+        android:fillColor="#000000"
+        android:pathData="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z" />
+    <path
+        android:pathData="M0 0h24v24H0z" />
+</vector>
\ No newline at end of file
Index: packages/apps/GalleryTcl/res/drawable/ic_moments_24px_blue.xml
===================================================================
--- packages/apps/GalleryTcl/res/drawable/ic_moments_24px_blue.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/drawable/ic_moments_24px_blue.xml	(revision 1020)
@@ -0,0 +1,35 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24">
+
+    <group
+        android:name="Page-1">
+        <group
+            android:name="ic_moments_24px_blue">
+            <path
+                android:name="Shape"
+                android:strokeWidth="1"
+                android:pathData="M 0 0 L 24 0 L 24 24 L 0 24 Z" />
+            <path
+                android:name="Shape"
+                android:fillColor="#0099ff"
+                android:strokeWidth="1"
+                android:pathData="M20,2 L4,2 C2.9,2 2,2.9 2,4 L2,20 C2,21.1 2.9,22 4,22 L20,22 C21.1,22 22,21.1
+22,20 L22,4 C22,2.9 21.1,2 20,2 L20,2 Z M20,20 L4,20 L4,4 L20,4 L20,20 L20,20 Z" />
+            <path
+                android:name="Shape"
+                android:fillColor="#0099ff"
+                android:strokeWidth="1"
+                android:pathData="M17,8.5 C17,7.7 16.3,7 15.5,7 C14.7,7 14,7.7 14,8.5 C14,9.3 14.7,10 15.5,10
+C16.3,10 17,9.3 17,8.5 L17,8.5 L17,8.5 Z" />
+            <path
+                android:name="Shape"
+                android:fillColor="#0099ff"
+                android:strokeWidth="1"
+                android:pathData="M 10 13 L 6 18 L 18 18 L 15 14 L 13 16.7 Z" />
+        </group>
+    </group>
+</vector>
\ No newline at end of file
Index: packages/apps/GalleryTcl/res/drawable/ic_check_box_black_24dp.xml
===================================================================
--- packages/apps/GalleryTcl/res/drawable/ic_check_box_black_24dp.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/drawable/ic_check_box_black_24dp.xml	(revision 1020)
@@ -0,0 +1,9 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+        android:width="24dp"
+        android:height="24dp"
+        android:viewportWidth="24.0"
+        android:viewportHeight="24.0">
+    <path
+        android:fillColor="#FF000000"
+        android:pathData="M19,3L5,3c-1.11,0 -2,0.9 -2,2v14c0,1.1 0.89,2 2,2h14c1.11,0 2,-0.9 2,-2L21,5c0,-1.1 -0.89,-2 -2,-2zM10,17l-5,-5 1.41,-1.41L10,14.17l7.59,-7.59L19,8l-9,9z"/>
+</vector>
Index: packages/apps/GalleryTcl/res/drawable/ic_album_24px.xml
===================================================================
--- packages/apps/GalleryTcl/res/drawable/ic_album_24px.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/drawable/ic_album_24px.xml	(revision 1020)
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24">
+
+    <path
+        android:pathData="M0 0h24v24H0V0z" />
+    <path
+        android:fillColor="#000000"
+        android:pathData="M4 6H2v14c0 1.1 .9 2 2 2h14v-2H4V6z" />
+    <path
+        android:pathData="M0 0h24v24H0V0z" />
+    <path
+        android:fillColor="#000000"
+        android:pathData="M20 2H8c-1.1 0-2 .9-2 2v12c0 1.1 .9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm0
+10l-2.5-1.5L15 12V4h5v8z" />
+</vector>
\ No newline at end of file
Index: packages/apps/GalleryTcl/res/drawable/fastscroll__default_handle.xml
===================================================================
--- packages/apps/GalleryTcl/res/drawable/fastscroll__default_handle.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/drawable/fastscroll__default_handle.xml	(revision 1020)
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<shape  xmlns:android="http://schemas.android.com/apk/res/android" android:shape="rectangle">
+    <corners android:radius="@dimen/fastscroll__handle_corner" />
+    <solid android:color="@android:color/darker_gray" />
+</shape>
\ No newline at end of file
Index: packages/apps/GalleryTcl/res/drawable/fastscroll__default_bubble.xml
===================================================================
--- packages/apps/GalleryTcl/res/drawable/fastscroll__default_bubble.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/drawable/fastscroll__default_bubble.xml	(revision 1020)
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="utf-8"?>
+<shape xmlns:android="http://schemas.android.com/apk/res/android"
+    android:shape="rectangle">
+    <corners
+        android:topLeftRadius="@dimen/fastscroll__bubble_corner"
+        android:topRightRadius="@dimen/fastscroll__bubble_corner"
+        android:bottomLeftRadius="@dimen/fastscroll__bubble_corner"
+        android:bottomRightRadius="@dimen/fastscroll__bubble_corner" />
+    <solid android:color="@android:color/white" />
+</shape>
\ No newline at end of file
Index: packages/apps/GalleryTcl/res/drawable/ic_delete_24px.xml
===================================================================
--- packages/apps/GalleryTcl/res/drawable/ic_delete_24px.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/drawable/ic_delete_24px.xml	(revision 1020)
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24">
+
+    <path
+        android:fillColor="#000000"
+        android:pathData="M6 19c0 1.1 .9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z" />
+    <path
+        android:pathData="M0 0h24v24H0z" />
+</vector>
\ No newline at end of file
Index: packages/apps/GalleryTcl/res/drawable/ic_moments_select.xml
===================================================================
--- packages/apps/GalleryTcl/res/drawable/ic_moments_select.xml	(revision 0)
+++ packages/apps/GalleryTcl/res/drawable/ic_moments_select.xml	(revision 1020)
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+<item android:state_selected="true" android:drawable="@drawable/ic_moments_24px_gray"></item>
+<item android:state_selected="false" android:drawable="@drawable/ic_moments_24px_blue"></item>
+</selector>
\ No newline at end of file
