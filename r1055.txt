Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/raw/tada.ogg
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/raw/tada.ogg
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/raw/tada.ogg	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/raw/tada.ogg	(revision 1055)

Property changes on: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/raw/tada.ogg
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/ble_test.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/ble_test.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/ble_test.xml	(revision 1055)
@@ -0,0 +1,15 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <ScrollView android:layout_width="fill_parent" android:layout_height="250.0dip" android:fadeScrollbars="false">
+        <LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent">
+            <TextView android:textSize="20.0dip" android:id="@id/ble_state_id" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+            <TextView android:textSize="15.0dip" android:id="@id/ble_result_id" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+            <TextView android:textSize="20.0dip" android:id="@id/ble_con_id" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+        </LinearLayout>
+    </ScrollView>
+    <LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent">
+        <Button android:textSize="25.0dip" android:id="@id/ble_bt_ok" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Success" android:layout_weight="0.5" />
+        <Button android:textSize="25.0dip" android:id="@id/ble_bt_failed" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Failed" android:layout_weight="0.2" />
+    </LinearLayout>
+</LinearLayout>
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/microphone.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/microphone.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/microphone.xml	(revision 1055)
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout android:orientation="vertical" 
+    android:layout_width="fill_parent" 
+    android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <TextView android:textSize="20.0dip" 
+        android:id="@id/mic_tv_status" 
+        android:layout_width="fill_parent" 
+        android:layout_height="wrap_content" />
+    <Button android:id="@id/mic_bt_ok" 
+        android:textSize="30.0dip" 
+        android:layout_width="fill_parent" 
+        android:layout_height="fill_parent" 
+        android:text="@string/Success" 
+        android:layout_weight="0.3" />
+    <Button android:id="@id/mic_bt_failed"
+        android:textSize="30.0dip" 
+        android:layout_width="fill_parent"
+        android:layout_height="fill_parent" 
+        android:text="@string/Failed"
+        android:layout_weight="0.7" />
+</LinearLayout>
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/nfc_test.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/nfc_test.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/nfc_test.xml	(revision 1055)
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent">
+        <Button android:textSize="25.0dip" 
+                android:id="@id/nfc_bt_ok" 
+                android:layout_width="fill_parent" 
+                android:layout_height="wrap_content" 
+                android:text="@string/Success" 
+                android:layout_weight="0.8" />
+        <Button android:textSize="25.0dip" 
+                android:id="@id/nfc_bt_failed" 
+                android:layout_width="fill_parent" 
+                android:layout_height="wrap_content" 
+                android:text="@string/Failed" 
+                android:layout_weight="0.2" />
+    </LinearLayout>
+</LinearLayout>
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/memory.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/memory.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/memory.xml	(revision 1055)
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <TextView android:textSize="20.0dip" android:id="@id/comm_info" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+    <LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent">
+        <Button android:textSize="25.0dip" android:id="@id/memory_bt_ok" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Success" android:layout_weight="0.8" />
+        <Button android:textSize="25.0dip" android:id="@id/memory_bt_failed" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Failed" android:layout_weight="0.2" />
+    </LinearLayout>
+</LinearLayout>
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/submicrecorder.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/submicrecorder.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/submicrecorder.xml	(revision 1055)
@@ -0,0 +1,65 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="fill_parent"
+    android:layout_height="fill_parent"
+    android:orientation="vertical" >
+
+    <LinearLayout
+        android:layout_width="fill_parent"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal" >
+
+        <Button
+            android:id="@id/mic_bt_start"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_weight="0.5"
+            android:text="@string/Mic_start"
+            android:textSize="20.0dip" />
+    </LinearLayout>
+
+    <RelativeLayout
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="center_horizontal" >
+
+        <com.mediatek.factorymode.VUMeter
+            android:id="@id/uvMeter"
+            android:layout_width="150.0px"
+            android:layout_height="60.0px"
+            android:layout_centerInParent="true" />
+    </RelativeLayout>
+
+    <TextView
+        android:id="@id/mic_tips"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="center_horizontal"
+        android:text="@string/submicrophone_name"
+        android:textColor="@color/Green"
+        android:textSize="20.0dip" />
+
+    <LinearLayout
+        android:layout_width="fill_parent"
+        android:layout_height="fill_parent"
+        android:orientation="vertical" >
+
+        <Button
+            android:id="@id/mic_bt_ok"
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content"
+            android:layout_weight="0.8"
+            android:text="@string/Success"
+            android:textSize="25.0dip" />
+
+        <Button
+            android:id="@id/mic_bt_failed"
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content"
+            android:layout_weight="0.2"
+            android:text="@string/Failed"
+            android:textSize="25.0dip" />
+    </LinearLayout>
+
+
+</LinearLayout>
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/finger.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/finger.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/finger.xml	(revision 1055)
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <TextView android:textSize="22.0dip" android:textColor="@color/Green" android:id="@id/finger_tips" android:layout_width="wrap_content" android:layout_height="wrap_content" android:text="@string/finger_tips" />
+    <LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent">
+        <Button android:textSize="25.0dip" android:id="@id/finger_bt_ok" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Success" android:layout_weight="0.8" />
+        <Button android:textSize="25.0dip" android:id="@id/finger_bt_failed" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Failed" android:layout_weight="0.2" />
+    </LinearLayout>
+</LinearLayout>
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/report.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/report.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/report.xml	(revision 1055)
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<ScrollView android:layout_width="fill_parent" android:layout_height="fill_parent" android:fadeScrollbars="false"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent">
+        <TextView android:textSize="20.0dip" android:textColor="@color/Green" android:id="@id/report_success" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+        <TextView android:textSize="20.0dip" android:textColor="@color/Red" android:id="@id/report_failed" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+        <TextView android:textSize="20.0dip" android:textColor="@color/gray" android:id="@id/report_default" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+    </LinearLayout>
+</ScrollView>
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/signal.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/signal.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/signal.xml	(revision 1055)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent">
+        <Button android:textSize="25.0dip" android:id="@id/signal_bt_ok" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Success" android:layout_weight="0.8" />
+        <Button android:textSize="25.0dip" android:id="@id/signal_bt_failed" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Failed" android:layout_weight="0.2" />
+    </LinearLayout>
+</LinearLayout>
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/lsensorcali.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/lsensorcali.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/lsensorcali.xml	(revision 1055)
@@ -0,0 +1,37 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout android:orientation="vertical" 
+    android:layout_width="fill_parent" 
+    android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <LinearLayout
+        android:layout_width="fill_parent"
+        android:layout_height="wrap_content"
+        android:orientation="vertical" >
+        <Button
+            android:id="@+id/lsensor_cali_start"
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content"
+            android:layout_weight="0.5"
+            android:text="@string/lsensor_cali_start"
+            android:textSize="20.0dip" />
+        <TextView
+            android:id="@+id/lsensor_cali_showCaliVal"
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content"
+            android:gravity="center"
+            android:layout_weight="0.5"
+            android:textSize="25.0dip" />
+    </LinearLayout>
+    <LinearLayout
+        android:layout_width="fill_parent"
+        android:layout_height="fill_parent"
+        android:orientation="vertical" >
+        <TextView
+            android:id="@+id/lsensor_cali_showResult"
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content"
+            android:gravity="center"
+            android:layout_weight="0.5"
+            android:textSize="25.0dip" />
+    </LinearLayout>
+</LinearLayout>
\ No newline at end of file
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/gsensor.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/gsensor.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/gsensor.xml	(revision 1055)
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <TextView android:textSize="20.0dip" 
+        android:id="@id/gsensor_tv_info" 
+        android:layout_width="wrap_content" 
+        android:layout_height="wrap_content" />
+     <TextView android:textSize="20.0dip" 
+        android:id="@+id/gsensor_xyz" 
+        android:layout_width="wrap_content" 
+        android:layout_height="wrap_content" />
+    <LinearLayout android:orientation="vertical" 
+        android:layout_width="fill_parent" 
+        android:layout_height="fill_parent">
+
+        <Button
+            android:id="@id/gsensor_bt_ok"
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content"
+            android:layout_weight="0.57"
+            android:text="@string/Success"
+            android:textSize="25.0dip" />
+
+        <Button android:textSize="25.0dip" 
+            android:id="@id/gsensor_bt_failed" 
+            android:layout_width="fill_parent" 
+            android:layout_height="wrap_content" 
+            android:text="@string/Failed" 
+            android:layout_weight="0.2" />
+    </LinearLayout>
+</LinearLayout>
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/hall.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/hall.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/hall.xml	(revision 1055)
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <TextView android:textSize="22.0dip" android:textColor="@color/Green" android:id="@id/hall_tips" android:layout_width="wrap_content" android:layout_height="wrap_content" android:text="@string/Hall_tips" />
+    <LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent">
+        <Button android:textSize="25.0dip" android:id="@id/hall_bt_ok" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Success" android:layout_weight="0.8" />
+        <Button android:textSize="25.0dip" android:id="@id/hall_bt_failed" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Failed" android:layout_weight="0.2" />
+    </LinearLayout>
+</LinearLayout>
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/fmradio.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/fmradio.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/fmradio.xml	(revision 1055)
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent">
+        <Button android:textSize="25.0dip" 
+                android:id="@id/fm_bt_ok" 
+                android:layout_width="fill_parent" 
+                android:layout_height="wrap_content" 
+                android:text="@string/Success" 
+                android:layout_weight="0.8" />
+        <Button android:textSize="25.0dip" 
+                android:id="@id/fm_bt_failed" 
+                android:layout_width="fill_parent" 
+                android:layout_height="wrap_content" 
+                android:text="@string/Failed" 
+                android:layout_weight="0.2" />
+    </LinearLayout>
+</LinearLayout>
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/ygps.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/ygps.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/ygps.xml	(revision 1055)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout android:orientation="horizontal" android:layout_width="fill_parent" android:layout_height="wrap_content"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <Button android:id="@id/ygps_bt_ok" android:layout_width="wrap_content" android:layout_height="wrap_content" android:text="@string/Success" android:layout_weight="0.5" />
+    <Button android:id="@id/ygps_bt_failed" android:layout_width="wrap_content" android:layout_height="wrap_content" android:text="@string/Failed" android:layout_weight="0.5" />
+</LinearLayout>
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/main.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/main.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/main.xml	(revision 1055)
@@ -0,0 +1,41 @@
+<?xml version="1.0" encoding="utf-8"?>
+<ScrollView
+  android:orientation="vertical"
+  android:layout_width="fill_parent"
+  android:layout_height="match_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+  <LinearLayout 
+    android:orientation="vertical" 
+    android:layout_width="match_parent" 
+    android:layout_height="wrap_content">
+    <Button
+      android:textSize="24.0dip" 
+      android:id="@id/main_bt_autotest"
+      android:layout_width="match_parent"
+      android:layout_height="wrap_content"
+      android:text="@string/AutoTest" />
+    <GridView 
+      android:id="@id/main_grid"
+      android:layout_width="fill_parent"
+      android:layout_height="540dip"
+      android:columnWidth="101.0dip"
+      android:gravity="center"
+      android:horizontalSpacing="0.2dip"
+      android:numColumns="auto_fit"
+      android:padding="0.0dip"
+      android:stretchMode="columnWidth"
+      android:verticalSpacing="0.0dip" />
+    <Button 
+      android:textSize="24.0dip" 
+      android:id="@+id/main_bt_report" 
+      android:layout_width="fill_parent" 
+      android:layout_height="wrap_content" 
+      android:text="@string/SingleTestReport" />
+    <Button 
+    android:textSize="24.0dip" 
+      android:id="@+id/main_auto_report" 
+      android:layout_width="fill_parent" 
+      android:layout_height="wrap_content" 
+      android:text="@string/AutoTestReport" />
+  </LinearLayout>
+</ScrollView>
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/flashlight.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/flashlight.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/flashlight.xml	(revision 1055)
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <TextView android:textSize="22.0dip" android:textColor="@color/Green" android:id="@id/flashlight_tips" android:layout_width="wrap_content" android:layout_height="wrap_content" android:text="@string/flashlight_tips" />
+    <LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent">
+        <Button android:textSize="25.0dip" android:id="@id/flashlight_bt_ok" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Success" android:layout_weight="0.8" />
+        <Button android:textSize="25.0dip" android:id="@id/flashlight_bt_failed" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Failed" android:layout_weight="0.2" />
+    </LinearLayout>
+</LinearLayout>
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/battery_info.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/battery_info.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/battery_info.xml	(revision 1055)
@@ -0,0 +1,54 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout style="@style/info_layout"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <LinearLayout style="@style/entry_layout">
+        <TextView android:text="@string/battery_info_status_label" style="@style/info_label" />
+        <TextView android:id="@id/status" style="@style/info_value" />
+    </LinearLayout>
+    <LinearLayout style="@style/entry_layout">
+        <TextView android:text="@string/battery_info_level_label" style="@style/info_label" />
+        <TextView android:id="@id/level" style="@style/info_value" />
+    </LinearLayout>
+    <LinearLayout style="@style/entry_layout" android:visibility="gone">
+        <TextView android:text="@string/battery_info_scale_label" style="@style/info_label" />
+        <TextView android:id="@id/scale" style="@style/info_value" />
+    </LinearLayout>
+    <LinearLayout style="@style/entry_layout">
+        <TextView android:text="@string/battery_info_health_label" style="@style/info_label" />
+        <TextView android:id="@id/health" style="@style/info_value" />
+    </LinearLayout>
+    <LinearLayout style="@style/entry_layout">
+        <TextView android:text="@string/battery_info_voltage_label" style="@style/info_label" />
+        <TextView android:id="@id/voltage" style="@style/info_value" />
+    </LinearLayout>
+    <LinearLayout style="@style/entry_layout">
+        <TextView android:text="@string/battery_info_temperature_label" style="@style/info_label" />
+        <TextView android:id="@id/temperature" style="@style/info_value" />
+    </LinearLayout>
+
+    <LinearLayout style="@style/entry_layout">
+        <TextView android:text="@string/charger_electronic" style="@style/info_label" />
+        <TextView android:id="@id/electronic" style="@style/info_value" />
+    </LinearLayout>
+    <LinearLayout style="@style/entry_layout">
+        <TextView android:text="@string/charger_type" style="@style/info_label" />
+        <TextView android:id="@id/charger_type" style="@style/info_value" />
+    </LinearLayout>
+
+    <LinearLayout style="@style/entry_layout">
+        <TextView android:text="@string/battery_info_technology_label" style="@style/info_label" />
+        <TextView android:id="@id/technology" style="@style/info_value" />
+    </LinearLayout>
+    <LinearLayout style="@style/entry_layout" android:visibility="gone">
+        <TextView android:text="@string/battery_info_uptime" style="@style/info_label" />
+        <TextView android:id="@id/uptime" style="@style/info_value" />
+    </LinearLayout>
+    <LinearLayout style="@style/entry_layout">
+        <TextView android:text="@string/charger_result" style="@style/info_label" />
+        <TextView android:id="@id/charger_result" style="@style/info_value" />
+    </LinearLayout>
+    <LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent">
+        <Button android:textSize="25.0dip" android:id="@id/battery_bt_ok" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Success" android:layout_weight="0.8" />
+        <Button android:textSize="25.0dip" android:id="@id/battery_bt_failed" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Failed" android:layout_weight="0.2" />
+    </LinearLayout>
+</LinearLayout>
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/lsensor.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/lsensor.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/lsensor.xml	(revision 1055)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <TextView android:textSize="20.0dip" android:id="@id/lsensor_accuracy" android:layout_width="wrap_content" android:layout_height="wrap_content" android:text="@string/LSensor_default_text" />
+    <TextView android:textSize="20.0dip" android:id="@id/lsensor_value" android:layout_width="wrap_content" android:layout_height="wrap_content" android:text="@string/LSensor_default_text" />
+    <TextView android:textSize="22.0dip" android:textColor="@color/Green" android:id="@id/lsensor_tips" android:layout_width="wrap_content" android:layout_height="wrap_content" android:text="@string/LSensor_tips" />
+    <LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent">
+        <Button android:textSize="25.0dip" android:id="@id/lsensor_bt_ok" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Success" android:layout_weight="0.8" />
+        <Button android:textSize="25.0dip" android:id="@id/lsensor_bt_failed" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Failed" android:layout_weight="0.2" />
+    </LinearLayout>
+</LinearLayout>
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/msensor.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/msensor.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/msensor.xml	(revision 1055)
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <TextView android:textSize="20.0dip" 
+        android:id="@id/msensor_tv_info" 
+        android:layout_width="wrap_content" 
+        android:layout_height="wrap_content" />
+     <TextView android:textSize="20.0dip" 
+        android:id="@+id/msensor_xyz" 
+        android:layout_width="wrap_content" 
+        android:layout_height="wrap_content" />
+    <LinearLayout android:orientation="vertical" 
+        android:layout_width="fill_parent" 
+        android:layout_height="fill_parent">
+
+        <Button
+            android:id="@id/msensor_bt_ok"
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content"
+            android:layout_weight="0.57"
+            android:text="@string/Success"
+            android:textSize="25.0dip" />
+
+        <Button android:textSize="25.0dip" 
+            android:id="@id/msensor_bt_failed" 
+            android:layout_width="fill_parent" 
+            android:layout_height="wrap_content" 
+            android:text="@string/Failed" 
+            android:layout_weight="0.2" />
+    </LinearLayout>
+</LinearLayout>
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/vibrator.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/vibrator.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/vibrator.xml	(revision 1055)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <Button android:textSize="25.0dip" android:id="@id/vibrator_bt_ok" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Success" android:layout_weight="0.8" />
+    <Button android:textSize="25.0dip" android:id="@id/vibrator_bt_failed" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Failed" android:layout_weight="0.2" />
+</LinearLayout>
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/camera.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/camera.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/camera.xml	(revision 1055)
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent">
+        <Button android:textSize="25.0dip" 
+                android:id="@id/camera_btok" 
+                android:layout_width="fill_parent" 
+                android:layout_height="wrap_content" 
+                android:text="@string/Success" 
+                android:layout_weight="0.8" />
+        <Button android:textSize="25.0dip" 
+                android:id="@id/camera_btfailed" 
+                android:layout_width="fill_parent" 
+                android:layout_height="wrap_content" 
+                android:text="@string/Failed" 
+                android:layout_weight="0.2" />
+    </LinearLayout>
+</LinearLayout>
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/backlight.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/backlight.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/backlight.xml	(revision 1055)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <LinearLayout android:orientation="horizontal" android:id="@id/LinearLayout" android:layout_width="fill_parent" android:layout_height="wrap_content">
+        <Button android:id="@id/Display_lcd_on" android:layout_width="wrap_content" android:layout_height="100.0dip" android:text="@string/LCD_increase" android:layout_weight="0.5" />
+        <Button android:id="@id/Display_lcd_off" android:layout_width="wrap_content" android:layout_height="100.0dip" android:text="@string/LCD_weaken" android:layout_weight="0.5" />
+    </LinearLayout>
+    <LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent">
+        <Button android:textSize="25.0dip" android:id="@id/display_bt_ok" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Success" android:layout_weight="0.8" />
+        <Button android:textSize="25.0dip" android:id="@id/display_bt_failed" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Failed" android:layout_weight="0.2" />
+    </LinearLayout>
+</LinearLayout>
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/keycode_grid.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/keycode_grid.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/keycode_grid.xml	(revision 1055)
@@ -0,0 +1,3 @@
+<?xml version="1.0" encoding="utf-8"?>
+<ImageView android:textSize="19.0dip" android:id="@id/imgview" android:background="@drawable/btn_default" android:layout_width="fill_parent" android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android" />
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/osensor.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/osensor.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/osensor.xml	(revision 1055)
@@ -0,0 +1,27 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+     <TextView android:textSize="20.0dip" 
+        android:id="@+id/osensor_degree" 
+        android:layout_width="wrap_content" 
+        android:layout_height="wrap_content" />
+    <LinearLayout android:orientation="vertical" 
+        android:layout_width="fill_parent" 
+        android:layout_height="fill_parent">
+
+        <Button
+            android:id="@+id/osensor_bt_ok"
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content"
+            android:layout_weight="0.57"
+            android:text="@string/Success"
+            android:textSize="25.0dip" />
+
+        <Button android:textSize="25.0dip" 
+            android:id="@+id/osensor_bt_failed" 
+            android:layout_width="fill_parent" 
+            android:layout_height="wrap_content" 
+            android:text="@string/Failed" 
+            android:layout_weight="0.2" />
+    </LinearLayout>
+</LinearLayout>
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/gps.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/gps.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/gps.xml	(revision 1055)
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <ScrollView android:layout_width="fill_parent" android:layout_height="250.0dip" android:fadeScrollbars="false">
+        <LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent">
+            <TextView android:id="@id/gps_state_id" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+            <TextView android:id="@id/gps_satellite_id" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+            <TextView android:id="@id/gps_signal_id" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+            <TextView android:id="@id/gps_result_id" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+            <Chronometer android:id="@id/gps_time_id" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+        </LinearLayout>
+    </ScrollView>
+    <LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent">
+        <Button android:textSize="25.0dip" android:id="@id/gps_bt_ok" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Success" android:layout_weight="0.8" />
+        <Button android:textSize="25.0dip" android:id="@id/gps_bt_failed" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Failed" android:layout_weight="0.2" />
+    </LinearLayout>
+</LinearLayout>
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/main_grid.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/main_grid.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/main_grid.xml	(revision 1055)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="utf-8"?>
+<TextView xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@id/factor_button"
+    android:layout_width="fill_parent"
+    android:layout_height="45dp"
+    android:background="@drawable/btn_default"
+    android:textColor="@color/black"
+    android:textSize="20.0dip"
+    android:lines="1"
+    android:scrollHorizontally="true"
+    android:ellipsize = "end" />
+
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/psensor.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/psensor.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/psensor.xml	(revision 1055)
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout android:orientation="vertical" android:background="@drawable/psensor_background" android:layout_width="fill_parent" android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <TextView android:textSize="20.0dip" android:textColor="#ff000000" android:id="@id/proximity" android:layout_width="wrap_content" android:layout_height="wrap_content" android:layout_marginLeft="20.0dip" android:layout_marginTop="30.0dip" android:layout_marginRight="20.0dip" android:text="@string/proximity" />
+    <TextView android:textSize="15.0dip" android:textColor="@color/Blue" android:id="@id/tips" android:layout_width="wrap_content" android:layout_height="wrap_content" android:layout_marginLeft="20.0dip" android:layout_marginTop="15.0dip" android:layout_marginRight="20.0dip" android:text="@string/tips" />
+    <LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent">
+        <Button android:textSize="25.0dip" android:id="@id/psensor_bt_ok" android:layout_width="fill_parent" android:layout_height="wrap_content" android:layout_marginLeft="10.0dip" android:layout_marginRight="10.0dip" android:text="@string/Success" android:layout_weight="0.8" />
+        <Button android:textSize="25.0dip" android:id="@id/psensor_bt_failed" android:layout_width="fill_parent" android:layout_height="wrap_content" android:layout_marginLeft="10.0dip" android:layout_marginRight="10.0dip" android:text="@string/Failed" android:layout_weight="0.2" />
+    </LinearLayout>
+</LinearLayout>
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/sdcard.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/sdcard.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/sdcard.xml	(revision 1055)
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <TextView android:textSize="22.0dip" android:id="@id/sdcard_info" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+    <LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent">
+        <Button android:textSize="25.0dip" android:id="@id/sdcard_bt_ok" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Success" android:layout_weight="0.8" />
+        <Button android:textSize="25.0dip" android:id="@id/sdcard_bt_failed" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Failed" android:layout_weight="0.2" />
+    </LinearLayout>
+</LinearLayout>
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/chargealertdialog.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/chargealertdialog.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/chargealertdialog.xml	(revision 1055)
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout android:orientation="vertical" android:layout_width="wrap_content" android:layout_height="wrap_content"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <TextView 
+      android:textSize="26.0dip" 
+      android:textColor="@color/Red" 
+      android:layout_gravity="center_vertical"
+      android:gravity="center"
+      android:id="@id/chargemessage" 
+      android:layout_width="300dip" 
+      android:layout_height="100dip" 
+      android:text="@string/charge_message" />
+</LinearLayout>
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/btlist.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/btlist.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/btlist.xml	(revision 1055)
@@ -0,0 +1,43 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="fill_parent"
+    android:layout_height="fill_parent"
+    android:orientation="vertical" >
++++
+    <TextView
+        android:id="@+id/bt_state_id"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_weight="0.32"
+        android:textSize="20dip" />
++
+    <ListView
+        android:id="@+id/listView1"
+        android:layout_width="fill_parent"
+        android:layout_height="200dp"
+        android:layout_weight="0.65" >
+
+    </ListView>
+
+    <LinearLayout
+        android:layout_width="fill_parent"
+        android:layout_height="wrap_content"
+        android:orientation="vertical" >
+        <Button
+            android:id="@+id/bttest_ok"
+            android:layout_width="fill_parent"
+            android:layout_height="91dp"
+            android:text="@string/Success"
+            android:textSize="25.0dip" />
+        <Button
+            android:id="@+id/bttest_failed"
+            android:layout_width="fill_parent"
+            android:layout_height="77dp"
+            android:text="@string/Failed"
+            android:textSize="25.0dip" />
+    </LinearLayout>
+</LinearLayout>
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/lcd.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/lcd.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/lcd.xml	(revision 1055)
@@ -0,0 +1,37 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="fill_parent"
+    android:layout_height="fill_parent"
+    android:background="#ff383838"
+    android:gravity="center"
+    android:orientation="vertical" >
+    <LinearLayout
+        android:layout_width="fill_parent"
+        android:layout_height="fill_parent"
+        android:layout_weight="1.0"
+        android:orientation="vertical" >
+
+        <TextView
+            android:id="@id/test_color_text1"
+            android:layout_width="fill_parent"
+            android:layout_height="fill_parent"
+            android:layout_weight="1.0"
+            android:background="#ffff0000" />
+        
+        <Button android:textSize="25.0dip" 
+                android:id="@id/lcd_bt_ok" 
+                android:visibility="gone"
+                android:layout_width="fill_parent" 
+                android:layout_height="wrap_content" 
+                android:text="@string/Success" 
+                android:layout_weight="0.8" />
+        <Button android:textSize="25.0dip" 
+                android:id="@id/lcd_bt_failed" 
+                android:visibility="gone"
+                android:layout_width="fill_parent" 
+                android:layout_height="wrap_content" 
+                android:text="@string/Failed" 
+                android:layout_weight="0.2" />
+    </LinearLayout>
+
+</LinearLayout>
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/led.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/led.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/led.xml	(revision 1055)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <LinearLayout android:orientation="horizontal" android:id="@id/LinearLayout" android:layout_width="fill_parent" android:layout_height="wrap_content">
+        <Button android:id="@id/Display_led_red" android:layout_width="wrap_content" android:layout_height="100.0dip" android:text="@string/led_red" android:layout_weight="0.5" />
+        <Button android:id="@+id/Display_led_blue" android:layout_width="wrap_content" android:layout_height="100.0dip" android:text="@string/led_green" android:layout_weight="0.5" />
+    </LinearLayout>
+    <LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent">
+        <Button android:textSize="25.0dip" android:id="@id/display_bt_ok" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Success" android:layout_weight="0.8" />
+        <Button android:textSize="25.0dip" android:id="@id/display_bt_failed" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Failed" android:layout_weight="0.2" />
+    </LinearLayout>
+</LinearLayout>
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/iris.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/iris.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/iris.xml	(revision 1055)
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent">
+        <Button android:textSize="25.0dip" 
+                android:id="@id/camera_btok" 
+                android:layout_width="fill_parent" 
+                android:layout_height="wrap_content" 
+                android:text="@string/Success" 
+                android:layout_weight="0.8" />
+        <Button android:textSize="25.0dip" 
+                android:id="@id/camera_btfailed" 
+                android:layout_width="fill_parent" 
+                android:layout_height="wrap_content" 
+                android:text="@string/Failed" 
+                android:layout_weight="0.2" />
+    </LinearLayout>
+</LinearLayout>
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/alltest.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/alltest.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/alltest.xml	(revision 1055)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<ScrollView android:layout_width="fill_parent" android:layout_height="wrap_content"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent"
+      xmlns:android="http://schemas.android.com/apk/res/android">
+        <LinearLayout android:orientation="horizontal" android:layout_width="fill_parent" android:layout_height="wrap_content">
+            <Button android:id="@id/all_bt_ok" android:layout_width="wrap_content" android:layout_height="wrap_content" android:text="@string/Success" android:layout_weight="0.5" />
+            <Button android:id="@id/all_bt_failed" android:layout_width="wrap_content" android:layout_height="wrap_content" android:text="@string/Failed" android:layout_weight="0.5" />
+        </LinearLayout>
+    </LinearLayout>
+</ScrollView>
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/smt_battery_info.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/smt_battery_info.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/smt_battery_info.xml	(revision 1055)
@@ -0,0 +1,54 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout style="@style/info_layout"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <LinearLayout style="@style/entry_layout">
+        <TextView android:text="@string/battery_info_status_label" style="@style/info_label" />
+        <TextView android:id="@id/status" style="@style/info_value" />
+    </LinearLayout>
+    <LinearLayout style="@style/entry_layout">
+        <TextView android:text="@string/battery_info_level_label" style="@style/info_label" />
+        <TextView android:id="@id/level" style="@style/info_value" />
+    </LinearLayout>
+    <LinearLayout style="@style/entry_layout" android:visibility="gone">
+        <TextView android:text="@string/battery_info_scale_label" style="@style/info_label" />
+        <TextView android:id="@id/scale" style="@style/info_value" />
+    </LinearLayout>
+    <LinearLayout style="@style/entry_layout">
+        <TextView android:text="@string/battery_info_health_label" style="@style/info_label" />
+        <TextView android:id="@id/health" style="@style/info_value" />
+    </LinearLayout>
+    <LinearLayout style="@style/entry_layout">
+        <TextView android:text="@string/battery_info_voltage_label" style="@style/info_label" />
+        <TextView android:id="@id/voltage" style="@style/info_value" />
+    </LinearLayout>
+    <LinearLayout style="@style/entry_layout">
+        <TextView android:text="@string/battery_info_temperature_label" style="@style/info_label" />
+        <TextView android:id="@id/temperature" style="@style/info_value" />
+    </LinearLayout>
+
+    <LinearLayout style="@style/entry_layout">
+        <TextView android:text="@string/charger_electronic" style="@style/info_label" />
+        <TextView android:id="@id/electronic" style="@style/info_value" />
+    </LinearLayout>
+    <LinearLayout style="@style/entry_layout">
+        <TextView android:text="@string/charger_type" style="@style/info_label" />
+        <TextView android:id="@id/charger_type" style="@style/info_value" />
+    </LinearLayout>
+
+    <LinearLayout style="@style/entry_layout">
+        <TextView android:text="@string/battery_info_technology_label" style="@style/info_label" />
+        <TextView android:id="@id/technology" style="@style/info_value" />
+    </LinearLayout>
+    <LinearLayout style="@style/entry_layout" android:visibility="gone">
+        <TextView android:text="@string/battery_info_uptime" style="@style/info_label" />
+        <TextView android:id="@id/uptime" style="@style/info_value" />
+    </LinearLayout>
+    <LinearLayout style="@style/entry_layout" android:visibility="gone">
+        <TextView android:text="@string/charger_result" style="@style/info_label" />
+        <TextView android:id="@id/charger_result" style="@style/info_value" />
+    </LinearLayout>
+    <LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent">
+        <Button android:textSize="25.0dip" android:id="@id/battery_bt_ok" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Success" android:layout_weight="0.8" />
+        <Button android:textSize="25.0dip" android:id="@id/battery_bt_failed" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Failed" android:layout_weight="0.2" />
+    </LinearLayout>
+</LinearLayout>
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/headset.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/headset.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/headset.xml	(revision 1055)
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <LinearLayout android:orientation="horizontal" android:layout_width="fill_parent" android:layout_height="wrap_content">
+        <Button android:textSize="20.0dip" android:id="@id/mic_bt_start" android:layout_width="wrap_content" android:layout_height="wrap_content" android:text="@string/HeadSet_tips" android:layout_weight="0.5" />
+    </LinearLayout>
+    <RelativeLayout android:layout_gravity="center_horizontal" android:layout_width="wrap_content" android:layout_height="wrap_content">
+        <com.mediatek.factorymode.VUMeter android:id="@id/uvMeter" android:layout_width="150.0px" android:layout_height="60.0px" android:layout_centerInParent="true" />
+    </RelativeLayout>
+    <LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent">
+        <Button android:textSize="25.0dip" android:id="@id/bt_ok" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Success" android:layout_weight="0.8" />
+        <Button android:textSize="25.0dip" android:id="@id/bt_failed" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Failed" android:layout_weight="0.2" />
+    </LinearLayout>
+</LinearLayout>
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/touchscreen_handwriting.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/touchscreen_handwriting.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/touchscreen_handwriting.xml	(revision 1055)
@@ -0,0 +1,45 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="fill_parent"
+    android:layout_height="fill_parent"
+    android:orientation="vertical" >
+    <RelativeLayout
+        android:layout_width="fill_parent"
+        android:layout_height="fill_parent"
+        android:layout_gravity="center_horizontal"
+        android:layout_weight="0.5">
+
+
+
+        <com.mediatek.factorymode.TouchView
+            android:id="@+id/toucheview"
+            android:layout_width="fill_parent"
+            android:layout_height="fill_parent"
+            android:layout_centerHorizontal="true" />
+
+    </RelativeLayout>
+
+   <LinearLayout
+       android:layout_width="fill_parent"
+       android:layout_height="wrap_content"
+       android:orientation="horizontal" >
+
+        <Button
+            android:id="@+id/touchscreen_bt_ok"
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content"
+            android:layout_weight="0.5"
+            android:text="@string/Success"
+            android:textSize="20.0dip" />
+
+
+
+        <Button
+            android:id="@+id/touchscreen_bt_failed"
+            android:layout_width="157dp"
+            android:layout_height="wrap_content"
+            android:text="@string/Failed"
+            android:textSize="20.0dip" />
+
+    </LinearLayout>
+</LinearLayout>
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/simcard.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/simcard.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/simcard.xml	(revision 1055)
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <TextView android:textSize="20.0dip" android:id="@id/simcard_sim1_info" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+    <TextView android:textSize="20.0dip" android:id="@id/simcard_sim2_info" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+    <LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent">
+        <Button android:textSize="25.0dip" android:id="@id/simcard_bt_ok" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Success" android:layout_weight="0.8" />
+        <Button android:textSize="25.0dip" android:id="@id/simcard_bt_failed" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Failed" android:layout_weight="0.2" />
+    </LinearLayout>
+</LinearLayout>
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/keycode.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/keycode.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/keycode.xml	(revision 1055)
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <TextView android:textSize="20.0dip" android:textColor="@color/Green" android:layout_gravity="center_horizontal" android:id="@id/keycode_info" android:layout_width="wrap_content" android:layout_height="wrap_content" android:text="@string/KeyCode_info" />
+    <GridView android:gravity="center" android:id="@id/keycode_grid" android:padding="1.0dip" android:layout_width="wrap_content" android:layout_height="wrap_content" android:horizontalSpacing="1.0dip" android:verticalSpacing="1.0dip" android:stretchMode="columnWidth" android:columnWidth="50.0dip" android:numColumns="auto_fit" />
+    <LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent">
+        <Button android:textSize="25.0dip" android:id="@id/keycode_bt_ok" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Success" android:layout_weight="0.8" />
+        <Button android:textSize="25.0dip" android:id="@id/keycode_bt_failed" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Failed" android:layout_weight="0.2" />
+    </LinearLayout>
+</LinearLayout>
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/version.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/version.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/version.xml	(revision 1055)
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <ScrollView android:layout_width="fill_parent" android:layout_height="300.0dip" android:fadeScrollbars="false">
+        <LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent">
+            <TextView android:textSize="14.0dip" android:id="@+id/android_version" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+            <TextView android:textSize="14.0dip" android:id="@+id/build_number" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+            <TextView android:textSize="14.0dip" android:id="@+id/imei1" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+            <TextView android:textSize="14.0dip" android:id="@+id/imei2" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+            <TextView android:textSize="14.0dip" android:id="@+id/barcode" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+       <!-- <TextView android:textSize="14.0dip" android:id="@+id/wifi_address" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+            <TextView android:textSize="14.0dip" android:id="@+id/BT_address" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+            <TextView android:textSize="14.0dip" android:id="@+id/bt_state" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+            <TextView android:textSize="14.0dip" android:id="@+id/ft_state" android:layout_width="wrap_content" android:layout_height="wrap_content" />-->
+			<TextView android:textSize="14.0dip" android:id="@+id/lte_state" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+			<TextView android:textSize="14.0dip" android:id="@+id/gsm_state" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+			<TextView android:textSize="14.0dip" android:id="@+id/td_state" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+            <TextView android:textSize="14.0dip" android:id="@+id/ant_state" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+            <TextView android:textSize="14.0dip" android:id="@+id/linux_version" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+            <TextView android:textSize="14.0dip" android:id="@+id/modem_version" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+            <TextView android:textSize="14.0dip" android:id="@+id/tp_firmware_version" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+        </LinearLayout>
+    </ScrollView>
+    <LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent">
+        <Button android:textSize="25.0dip" android:id="@+id/version_bt_ok" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Success" android:layout_weight="0.8" />
+        <Button android:textSize="25.0dip" android:id="@+id/version_bt_failed" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Failed" android:layout_weight="0.2" />
+    </LinearLayout>
+</LinearLayout>
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/touchscreen_line.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/touchscreen_line.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/touchscreen_line.xml	(revision 1055)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="fill_parent"
+    android:layout_height="fill_parent"
+    android:orientation="vertical" >
+  
+</LinearLayout>
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/speaker.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/speaker.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/speaker.xml	(revision 1055)
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout android:orientation="vertical"
+     android:layout_width="fill_parent" 
+     android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <Button android:id="@id/speaker_bt_ok" 
+        android:layout_width="fill_parent" 
+        android:layout_height="fill_parent" 
+        android:text="@string/Success" 
+        android:textSize="25.0dip"
+        android:keepScreenOn="true"
+        android:layout_weight="0.3" />
+    <Button android:id="@id/speaker_bt_failed" 
+        android:layout_width="fill_parent" 
+        android:layout_height="fill_parent" 
+        android:text="@string/Failed" 
+        android:textSize="25.0dip"
+        android:layout_weight="0.7"/>
+</LinearLayout>
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/wifi_test.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/wifi_test.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/wifi_test.xml	(revision 1055)
@@ -0,0 +1,16 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <ScrollView android:layout_width="fill_parent" android:layout_height="250.0dip" android:fadeScrollbars="false">
+        <LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent">
+            <TextView android:textSize="20.0dip" android:id="@id/wifi_state_id" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+            <TextView android:textSize="15.0dip" android:id="@id/wifi_result_id" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+            <TextView android:textSize="15.0dip" android:id="@id/wifi_con_id" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+            <TextView android:textSize="15.0dip" android:id="@id/wifi_resinfo_id" android:layout_width="wrap_content" android:layout_height="wrap_content" />
+        </LinearLayout>
+    </ScrollView>
+    <LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent">
+        <Button android:textSize="25.0dip" android:id="@id/wifi_bt_ok" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Success" android:layout_weight="0.8" />
+        <Button android:textSize="25.0dip" android:id="@id/wifi_bt_failed" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Failed" android:layout_weight="0.2" />
+    </LinearLayout>
+</LinearLayout>
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/micrecorder.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/micrecorder.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/micrecorder.xml	(revision 1055)
@@ -0,0 +1,65 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="fill_parent"
+    android:layout_height="fill_parent"
+    android:orientation="vertical" >
+
+    <LinearLayout
+        android:layout_width="fill_parent"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal" >
+
+        <Button
+            android:id="@id/mic_bt_start"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_weight="0.5"
+            android:text="@string/Mic_start"
+            android:textSize="20.0dip" />
+    </LinearLayout>
+
+    <RelativeLayout
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="center_horizontal" >
+
+        <com.mediatek.factorymode.VUMeter
+            android:id="@id/uvMeter"
+            android:layout_width="150.0px"
+            android:layout_height="60.0px"
+            android:layout_centerInParent="true" />
+    </RelativeLayout>
+
+    <TextView
+        android:id="@id/mic_tips"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="center_horizontal"
+        android:text="@string/microphone_name"
+        android:textColor="@color/Green"
+        android:textSize="20.0dip" />
+
+    <LinearLayout
+        android:layout_width="fill_parent"
+        android:layout_height="fill_parent"
+        android:orientation="vertical" >
+
+        <Button
+            android:id="@id/mic_bt_ok"
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content"
+            android:layout_weight="0.8"
+            android:text="@string/Success"
+            android:textSize="25.0dip" />
+
+        <Button
+            android:id="@id/mic_bt_failed"
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content"
+            android:layout_weight="0.2"
+            android:text="@string/Failed"
+            android:textSize="25.0dip" />
+    </LinearLayout>
+
+
+</LinearLayout>
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/audio_test.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/audio_test.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/layout/audio_test.xml	(revision 1055)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <Button android:textSize="25.0dip" android:id="@id/audio_bt_ok" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Success" android:layout_weight="0.8" />
+    <Button android:textSize="25.0dip" android:id="@id/audio_bt_failed" android:layout_width="fill_parent" android:layout_height="wrap_content" android:text="@string/Failed" android:layout_weight="0.2" />
+</LinearLayout>
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/values-zh-rCN/strings.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/values-zh-rCN/strings.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/values-zh-rCN/strings.xml	(revision 1055)
@@ -0,0 +1,234 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="hello">欢迎来到工厂模式</string>
+    <string name="app_name">工厂模式</string>
+    <string name="Settings">设置</string>
+    <string name="AutoTest">自动测试</string>
+    <string name="AllTest">整机测试</string>
+    <string name="Packageerror">出错了,无法找到应用包！</string>
+    <string name="PackageIerror">内部错误</string>
+    <string name="BatteryLog">电源</string>
+    <string name="battery_info_status_label">充电状态:</string>
+    <string name="battery_info_scale_label">电池电量:</string>
+    <string name="battery_info_level_label">当前电量:</string>
+    <string name="battery_info_health_label">电源状况:</string>
+    <string name="battery_info_technology_label">电源技术:</string>
+    <string name="battery_info_voltage_label">当前电压:</string>
+    <string name="battery_info_voltage_units">mV</string>
+    <string name="battery_info_temperature_label">电源温度:</string>
+    <string name="battery_info_temperature_units">° C</string>
+    <string name="battery_info_uptime">自启动的时间:</string>
+    <string name="battery_info_awake_battery">对电池唤醒时间:</string>
+    <string name="battery_info_awake_plugged">充电时间:</string>
+    <string name="battery_info_screen_on">屏幕打开时间:</string>
+    <string name="battery_info_status_unknown">未知</string>
+    <string name="battery_info_status_charging">充电</string>
+    <string name="battery_info_status_charging_ac">(AC)</string>
+    <string name="battery_info_status_charging_usb">(USB)</string>
+    <string name="battery_info_status_discharging">Discharging</string>
+    <string name="battery_info_status_not_charging">未充电</string>
+    <string name="battery_info_status_full">满</string>
+    <string name="battery_info_health_unknown">未知</string>
+    <string name="battery_info_health_good">很好</string>
+    <string name="battery_info_health_overheat">过热</string>
+    <string name="battery_info_health_dead">Dead</string>
+    <string name="battery_info_health_over_voltage">电压过高</string>
+    <string name="battery_info_health_unspecified_failure">未知错误</string>
+    <string name="TouchScreen">触屏</string>
+    <string name="PointTest">点测试</string>
+    <string name="LineTest">线测试</string>
+    <string name="Result">查看结果</string>
+    <string name="Offset">偏移量：</string>
+    <string name="TouchComplete">测试完成</string>
+    <string name="Error">错误</string>
+    <string name="DrawError">绘制出错！</string>
+    <string name="Again">重试</string>
+    <string name="GoOn">继续</string>
+    <string name="BackLight">背景灯</string>
+    <string name="Display_lcd_Text">背景灯</string>
+    <string name="Memory">内存</string>
+    <string name="Audio">声音</string>
+    <string name="Camera">相机</string>
+    <string name="Camera_takepic">拍照</string>
+    <string name="Camera_notfound">未检测到前置摄像头</string>
+    <string name="WiFi">WiFi</string>
+    <string name="WiFi_success">测试成功</string>
+    <string name="WiFi_failed">测试失败</string>
+    <string name="WiFi_scaning">正在查找中...</string>
+    <string name="WiFi_info_closeing">wifi正在关闭中...</string>
+    <string name="WiFi_info_close">wifi已经关闭</string>
+    <string name="WiFi_info_opening">wifi正在打开</string>
+    <string name="WiFi_info_open">wifi已经打开</string>
+    <string name="WiFi_info_unknown">未知状态</string>
+    <string name="WiFi_connecting">正在连接...</string>
+    <string name="WiFi_notfound_openap">未找到开放的连接点</string>
+    <string name="HeadSet">耳机</string>
+    <string name="HeadSet_plugged">耳机插入</string>
+    <string name="HeadSet_unplugged">耳机拔出</string>
+    <string name="HeadSet_tips">请插入耳机进行测试</string>
+    <string name="HeadSet_hook">按下耳机Hook键!</string>
+    <string name="HeadSet_hook_message">请确认拨打电话时长按耳机Hook键是否可以挂断?</string>
+    <string name="GPS">GPS</string>
+    <string name="GPS_open">请打开GPS</string>
+    <string name="GPS_connect">GPS 已打开, 正在连接...</string>
+    <string name="GPS_normal">GPS 正常</string>
+    <string name="GPS_satelliteNum">GPS 已搜索到卫星数 :</string>
+    <string name="GPS_Signal">GPS 信号 :</string>
+    <string name="GPS_Success">成功</string>
+    <string name="GPS_time">耗时： %s 分</string>
+    <string name="Sensor">传感器</string>
+    <string name="Vibrator">震动</string>
+    <string name="Signal">电话</string>
+    <string name="YGPS">YGPS</string>
+    <string name="AGPS">AGPS</string>
+    <string name="Microphone">麦克风</string>
+    <string name="Mic_start">开始录音</string>
+    <string name="Mic_stop">停止录音并播放</string>
+    <string name="Mic_play">开始播放</string>
+    <string name="Mic_operation">麦克风选项</string>
+    <string name="Speaker_operation">喇叭选项</string>
+    <string name="Bluetooth">蓝牙</string>
+    <string name="Bluetooth_open">蓝牙已经打开</string>
+    <string name="Bluetooth_opening">蓝牙正在打开...</string>
+    <string name="Bluetooth_scaning">正在查找...</string>
+    <string name="Bluetooth_mac">MAC地址:</string>
+    <string name="Bluetooth_scan_success">查找完成</string>
+    <string name="GSensor">重力传感器</string>
+    <string name="GSensor_info">竖立,平放,侧立,观察重力变化!</string>
+    <string name="MSensor">磁力传感器</string>
+    <string name="MSensor_default_text">未知数据</string>
+    <string name="MSensor_North">正北</string>
+    <string name="MSensor_East">正东</string>
+    <string name="MSensor_South">正南</string>
+    <string name="MSensor_West">正西</string>
+    <string name="MSensor_north_east">北偏东</string>
+    <string name="MSensor_south_east">南偏东</string>
+    <string name="MSensor_south_west">南偏西</string>
+    <string name="MSensor_north_west">北偏西</string>
+    <string name="LSensor">光传感器</string>
+    <string name="LSensorCali">光传感器校准</string>
+    <string name="lsensor_cali_name">光感校准</string>
+    <string name="lsensor_cali_start">开始校准</string>
+    <string name="LSensor_default_text">未知数据</string>
+    <string name="LSensor_accuracy">精度:</string>
+    <string name="LSensor_value">数值:</string>
+    <string name="LSensor_tips">在强光和黑暗地方观察数值变化!</string>
+    <string name="gyro">陀螺仪</string>
+    <string name="LCD_increase">强背光</string>
+    <string name="LCD_weaken">弱背光</string>
+    <string name="Hall_tips">霍尔</string>
+    <string name="Hall">霍尔</string>
+    <string name="Success">成功</string>
+    <string name="Failed">失败</string>
+    <string name="psensor_hello">PSensor 验证</string>
+    <string name="psensor_app_name">距离传感器</string>
+    <string name="proximity">接近 :</string>
+    <string name="tips">请将手放置和离开感应区观看数值变化!</string>
+    <string name="Earphone">听筒</string>
+    <string name="battery_name">电 源</string>
+    <string name="touchscreen_name">触 屏</string>
+    <string name="speaker_name">喇 叭</string>
+    <string name="wifi_name">WiFi</string>
+    <string name="bluetooth_name">蓝 牙</string>
+    <string name="headset_name">耳 机</string>
+    <string name="earphone_name">听 筒</string>
+    <string name="gps_name">GPS</string>
+    <string name="vibrator_name">震 动</string>
+    <string name="telephone_name">电 话</string>
+    <string name="backlight_name">背景灯</string>
+    <string name="memory_name">内 存</string>
+    <string name="gsensor_name">重力传感</string>
+    <string name="msensor_name">磁力传感</string>
+    <string name="lsensor_name">光传感</string>
+    <string name="psensor_name">距离传感</string>
+    <string name="camera_name">后摄像头</string>
+    
+    <string name="sdcard_name">T 卡</string>
+    <string name="fmradio_name">收音机</string>
+    <string name="KeyCode_name">按 键</string>
+    <string name="lcd_name">LCD</string>
+    <string name="sim_name">SIM卡</string>
+    <string name="microphone_name">麦克风</string>
+    <string name="submicrophone_name">副麦克风</string>
+    <string name="subcamera_name">前摄像头</string>
+    <string name="headsethook_name">耳机Hook</string>
+    <string name="sdcard">T卡</string>
+    <string name="sdcard_tips_success">已检测到SD卡</string>
+    <string name="sdcard_tips_failed">没有测到SD卡</string>
+    <string name="sdcard_totalsize">总容量:</string>
+    <string name="sdcard_freesize">剩余容量:</string>
+    <string name="FMRadio">收音机</string>
+    <string name="FMRadio_notice">选择</string>
+    <string name="KeyCode">按键</string>
+    <string name="KeyCode_info">请开始按键</string>
+    <string name="LCD">LCD</string>
+    <string name="SimCard">SIM卡</string>
+    <string name="sim1_info_ok">SIM1:正常</string>
+    <string name="sim1_info_failed">SIM1:未发现</string>
+    <string name="sim2_info_ok">SIM2:正常</string>
+    <string name="sim2_info_failed">SIM2:未发现</string>
+    <string name="sim_info_ok">SIM:正常</string>
+    <string name="sim_info_failed">SIM:未发现</string>
+    <string name="Report">测试报告</string>
+    <string name="SingleTestReport">单项测试报告</string>
+    <string name="AutoTestReport">自动测试报告</string>
+    <string name="report_ok">成功项:</string>
+    <string name="report_failed">失败项:</string>
+    <string name="report_notest">未测试项:</string>
+    <string name="menu_exit">退出测试</string>
+    <string name="Mic_player">停止并播放</string>
+    <string name="Fmsearch">FM搜台</string>
+    <string name="hour">小时</string>
+    <string name="minute">分</string>
+    <string name="second">秒</string>
+    <string name="Bluetooth_closed">蓝牙已关闭</string>
+    <string name="okok">确定</string>
+    <string name="stopplayer">停止播放</string>
+    <string name="memorytotal">总内存：</string>
+    <string name="memoryfree">剩余内存</string>
+    <string name="GSensor_tips">请晃动手机观察XYZ值的变化</string>
+    <string name="MSensor_tips">请晃动手机观察XYZ值的变化</string>
+    <string name="version_info">版本信息</string>
+    <string name="rf_cali">RF CALI</string>
+    <string name="default_version">unknow</string>
+    <string name="lcd_hint">请按 HOME 键进行颜色切换</string>
+    <string name="tp_hw_hint">测试完成后请按 Search 键确认结果</string>
+    <string name="tp_line_hint">请沿着平行线缓慢地画两条对角线\n如果对角线连续且平滑，则TP正常。</string>
+    <string name="tp_line_start_hint">请从黄色区域开始画</string>
+    <string name="tp_line_stop_hint">请画到对角位置</string>
+    <string name="tp_line_area_hint">请画在两条平行线之间</string>
+    <string name="tp_success_hint">TP测试成功</string>
+    <string name="tp_slide_too_quick">滑动速度太快，请缓慢滑动</string>
+    <string name="tp_block_too_quick">蓝色点为TP返回点，滑动太快可能会无法消除方块</string>
+    <string name="flashlight_tips">闪光灯</string>
+    <string name="flashlight">闪光灯</string>
+    <string name="led_red">打开</string>
+    <string name="led_green">关闭</string>
+    <string name="Led">指示灯</string>
+    <string name="charger_unknown">未知</string>
+    <string name="charger_charging">正在充电</string>
+    <string name="charger_not_charging">未充电</string>
+    <string name="charger_discharging">正在放电</string>
+    <string name="charger_full">满电</string>
+    <string name="charger_electronic">充电电流:</string>
+    <string name="charger_type">充电类型:</string>
+    <string name="charger_connected">已连接</string>
+    <string name="charger_disconnected">未连接</string>
+    <string name="charger_result">测试结果:</string>
+    <string name="charger_success">测试成功</string>
+    <string name="charger_failed">测试失败</string>
+    <string name="charge_message">"请插入充电器"</string>
+    <string name="charger_tips">"电池已满，请更换电池。"</string>
+    <string name="charger_start_tips">"等待第一次测试"</string>
+    <string name="charger_retry_tips">"测试失败。将在<xliff:g id="xxx">%d</xliff:g>秒后重试。（剩余 <xliff:g id="yyy">%d</xliff:g> 次）"</string>
+    <string name="charger_temperature_error">电池温度不正常，测试已停止。</string>
+    <string name="cali_result_pass">"校准成功"</string>
+    <string name="cali_result_fail">"校准失败"</string>  	
+    <string name="exit_message">再次按退出自动测试</string>
+    <string name="finger_tips">指纹</string>
+    <string name="finger">指纹</string>
+    <string name="iris">虹膜</string>
+    <string name="iris_name">虹膜</string>
+    <string name="overall_unit_power_name">整机电源</string>
+    <string name="smt_name">SMT电源</string>
+</resources>
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/values/public.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/values/public.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/values/public.xml	(revision 1055)
@@ -0,0 +1,345 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <public type="drawable" name="btn_default" id="0x7f020001" />
+    <public type="drawable" name="psensor_background" id="0x7f020010" />
+    <public type="drawable" name="back" id="0x7f020000" />
+    <public type="drawable" name="btn_default_normal" id="0x7f020002" />
+    <public type="drawable" name="btn_default_normal_disable" id="0x7f020003" />
+    <public type="drawable" name="btn_default_normal_disable_focused" id="0x7f020004" />
+    <public type="drawable" name="btn_default_pressed" id="0x7f020005" />
+    <public type="drawable" name="btn_default_selected" id="0x7f020006" />
+    <public type="drawable" name="camera" id="0x7f020007" />
+    <public type="drawable" name="compass" id="0x7f020008" />
+    <public type="drawable" name="error" id="0x7f020009" />
+    <public type="drawable" name="gsensor_x" id="0x7f02000a" />
+    <public type="drawable" name="gsensor_x_2" id="0x7f02000b" />
+    <public type="drawable" name="gsensor_y" id="0x7f02000c" />
+    <public type="drawable" name="gsensor_z" id="0x7f02000d" />
+    <public type="drawable" name="home" id="0x7f02000e" />
+    <public type="drawable" name="menu" id="0x7f02000f" />
+    <public type="drawable" name="search" id="0x7f020011" />
+    <public type="drawable" name="unknown" id="0x7f020012" />
+    <public type="drawable" name="vldown" id="0x7f020013" />
+    <public type="drawable" name="vlup" id="0x7f020014" />
+    <public type="drawable" name="vumeter" id="0x7f020015" />
+    <public type="layout" name="alltest" id="0x7f030000" />
+    <public type="layout" name="audio_test" id="0x7f030001" />
+    <public type="layout" name="backlight" id="0x7f030002" />
+    <public type="layout" name="battery_info" id="0x7f030003" />
+    <public type="layout" name="ble_test" id="0x7f030004" />
+    <public type="layout" name="btlist" id="0x7f030005" />
+    <public type="layout" name="camera" id="0x7f030006" />
+    <public type="layout" name="gps" id="0x7f030007" />
+    <public type="layout" name="gsensor" id="0x7f030008" />
+    <public type="layout" name="headset" id="0x7f030009" />
+    <public type="layout" name="keycode" id="0x7f03000a" />
+    <public type="layout" name="keycode_grid" id="0x7f03000b" />
+    <public type="layout" name="lcd" id="0x7f03000c" />
+    <public type="layout" name="lsensor" id="0x7f03000d" />
+    <public type="layout" name="main" id="0x7f03000e" />
+    <public type="layout" name="main_grid" id="0x7f03000f" />
+    <public type="layout" name="memory" id="0x7f030010" />
+    <public type="layout" name="micrecorder" id="0x7f030011" />
+    <public type="layout" name="microphone" id="0x7f030012" />
+    <public type="layout" name="msensor" id="0x7f030013" />
+    <public type="layout" name="psensor" id="0x7f030014" />
+    <public type="layout" name="report" id="0x7f030015" />
+    <public type="layout" name="sdcard" id="0x7f030016" />
+    <public type="layout" name="signal" id="0x7f030017" />
+    <public type="layout" name="simcard" id="0x7f030018" />
+    <public type="layout" name="touchscreen_handwriting" id="0x7f030019" />
+    <public type="layout" name="vibrator" id="0x7f03001a" />
+    <public type="layout" name="wifi_test" id="0x7f03001b" />
+    <public type="layout" name="ygps" id="0x7f03001c" />
+    <public type="layout" name="chargealertdialog" id="0x7f03001d" />
+    <public type="raw" name="tada" id="0x7f040000" />
+    <public type="array" name="select_dialog_items" id="0x7f050000" />
+    <public type="color" name="recording_current_shot_text" id="0x7f060000" />
+    <public type="color" name="gray" id="0x7f060001" />
+    <public type="color" name="black" id="0x7f060002" />
+    <public type="color" name="Green" id="0x7f060003" />
+    <public type="color" name="Red" id="0x7f060004" />
+    <public type="color" name="Blue" id="0x7f060005" />
+    <public type="id" name="LinerLayout_comm_info" id="0x7f070000" />
+    <public type="id" name="LinerLayout_file_sys_info" id="0x7f070001" />
+    <public type="id" name="LinerLayout_partition_info" id="0x7f070002" />
+    <public type="id" name="comm_info" id="0x7f070003" />
+    <public type="id" name="file_sys_info" id="0x7f070004" />
+    <public type="id" name="partition_info" id="0x7f070005" />
+    <public type="id" name="all_bt_ok" id="0x7f070006" />
+    <public type="id" name="all_bt_failed" id="0x7f070007" />
+    <public type="id" name="audio_bt_ok" id="0x7f070008" />
+    <public type="id" name="audio_bt_failed" id="0x7f070009" />
+    <public type="id" name="LinearLayout" id="0x7f07000a" />
+    <public type="id" name="Display_lcd_on" id="0x7f07000b" />
+    <public type="id" name="Display_lcd_off" id="0x7f07000c" />
+    <public type="id" name="display_bt_ok" id="0x7f07000d" />
+    <public type="id" name="display_bt_failed" id="0x7f07000e" />
+    <public type="id" name="status" id="0x7f07000f" />
+    <public type="id" name="level" id="0x7f070010" />
+    <public type="id" name="scale" id="0x7f070011" />
+    <public type="id" name="health" id="0x7f070012" />
+    <public type="id" name="voltage" id="0x7f070013" />
+    <public type="id" name="temperature" id="0x7f070014" />
+    <public type="id" name="technology" id="0x7f070015" />
+    <public type="id" name="uptime" id="0x7f070016" />
+    <public type="id" name="battery_bt_ok" id="0x7f070017" />
+    <public type="id" name="battery_bt_failed" id="0x7f070018" />
+    <public type="id" name="ble_state_id" id="0x7f070019" />
+    <public type="id" name="ble_result_id" id="0x7f07001a" />
+    <public type="id" name="ble_con_id" id="0x7f07001b" />
+    <public type="id" name="ble_bt_ok" id="0x7f07001c" />
+    <public type="id" name="ble_bt_failed" id="0x7f07001d" />
+    <public type="id" name="camera_view" id="0x7f07001e" />
+    <public type="id" name="subcamera_take" id="0x7f07001f" />
+    <public type="id" name="camera_take" id="0x7f070020" />
+    <public type="id" name="camera_btok" id="0x7f070021" />
+    <public type="id" name="camera_btfailed" id="0x7f070022" />
+    <public type="id" name="gps_state_id" id="0x7f070023" />
+    <public type="id" name="gps_satellite_id" id="0x7f070024" />
+    <public type="id" name="gps_signal_id" id="0x7f070025" />
+    <public type="id" name="gps_result_id" id="0x7f070026" />
+    <public type="id" name="gps_time_id" id="0x7f070027" />
+    <public type="id" name="gps_bt_ok" id="0x7f070028" />
+    <public type="id" name="gps_bt_failed" id="0x7f070029" />
+    <public type="id" name="gsensor_iv_img" id="0x7f07002a" />
+    <public type="id" name="gsensor_tv_info" id="0x7f07002b" />
+    <public type="id" name="gsensor_bt_ok" id="0x7f07002c" />
+    <public type="id" name="gsensor_bt_failed" id="0x7f07002d" />
+    <public type="id" name="mic_bt_start" id="0x7f07002e" />
+    <public type="id" name="uvMeter" id="0x7f07002f" />
+    <public type="id" name="bt_ok" id="0x7f070030" />
+    <public type="id" name="bt_failed" id="0x7f070031" />
+    <public type="id" name="keycode_info" id="0x7f070032" />
+    <public type="id" name="keycode_grid" id="0x7f070033" />
+    <public type="id" name="keycode_bt_ok" id="0x7f070034" />
+    <public type="id" name="keycode_bt_failed" id="0x7f070035" />
+    <public type="id" name="imgview" id="0x7f070036" />
+    <public type="id" name="test_color_text1" id="0x7f070037" />
+    <public type="id" name="lsensor_accuracy" id="0x7f070038" />
+    <public type="id" name="lsensor_value" id="0x7f070039" />
+    <public type="id" name="lsensor_tips" id="0x7f07003a" />
+    <public type="id" name="lsensor_bt_ok" id="0x7f07003b" />
+    <public type="id" name="lsensor_bt_failed" id="0x7f07003c" />
+    <public type="id" name="main_bt_autotest" id="0x7f07003d" />
+    <public type="id" name="main_bt_alltest" id="0x7f07003e" />
+    <public type="id" name="main_grid" id="0x7f07003f" />
+    <public type="id" name="factor_button" id="0x7f070040" />
+    <public type="id" name="memory_bt_ok" id="0x7f070041" />
+    <public type="id" name="memory_bt_failed" id="0x7f070042" />
+    <public type="id" name="mic_tips" id="0x7f070043" />
+    <public type="id" name="mic_bt_ok" id="0x7f070044" />
+    <public type="id" name="mic_bt_failed" id="0x7f070045" />
+    <public type="id" name="speaker_bt_ok" id="0x7f070046" />
+    <public type="id" name="speaker_bt_failed" id="0x7f070047" />
+    <public type="id" name="mic_tv_status" id="0x7f070048" />
+    <public type="id" name="LinearLayout01" id="0x7f070049" />
+    <public type="id" name="OrientText" id="0x7f07004a" />
+    <public type="id" name="ivCompass" id="0x7f07004b" />
+    <public type="id" name="OrientValue" id="0x7f07004c" />
+    <public type="id" name="msensor_bt_ok" id="0x7f07004d" />
+    <public type="id" name="msensor_bt_failed" id="0x7f07004e" />
+    <public type="id" name="proximity" id="0x7f07004f" />
+    <public type="id" name="tips" id="0x7f070050" />
+    <public type="id" name="psensor_bt_ok" id="0x7f070051" />
+    <public type="id" name="psensor_bt_failed" id="0x7f070052" />
+    <public type="id" name="report_success" id="0x7f070053" />
+    <public type="id" name="report_failed" id="0x7f070054" />
+    <public type="id" name="report_default" id="0x7f070055" />
+    <public type="id" name="sdcard_info" id="0x7f070056" />
+    <public type="id" name="sdcard_bt_ok" id="0x7f070057" />
+    <public type="id" name="sdcard_bt_failed" id="0x7f070058" />
+    <public type="id" name="signal_bt_ok" id="0x7f070059" />
+    <public type="id" name="signal_bt_failed" id="0x7f07005a" />
+    <public type="id" name="simcard_sim1_info" id="0x7f07005b" />
+    <public type="id" name="simcard_sim2_info" id="0x7f07005c" />
+    <public type="id" name="simcard_bt_ok" id="0x7f07005d" />
+    <public type="id" name="simcard_bt_failed" id="0x7f07005e" />
+    <public type="id" name="touchscreen_bt_ok" id="0x7f07005f" />
+    <public type="id" name="touchscreen_bt_failed" id="0x7f070060" />
+    <public type="id" name="vibrator_bt_ok" id="0x7f070061" />
+    <public type="id" name="vibrator_bt_failed" id="0x7f070062" />
+    <public type="id" name="wifi_state_id" id="0x7f070063" />
+    <public type="id" name="wifi_result_id" id="0x7f070064" />
+    <public type="id" name="wifi_con_id" id="0x7f070065" />
+    <public type="id" name="wifi_resinfo_id" id="0x7f070066" />
+    <public type="id" name="wifi_bt_ok" id="0x7f070067" />
+    <public type="id" name="wifi_bt_failed" id="0x7f070068" />
+    <public type="id" name="ygps_bt_ok" id="0x7f070069" />
+    <public type="id" name="ygps_bt_failed" id="0x7f07006a" />
+    <public type="string" name="hello" id="0x7f080000" />
+    <public type="string" name="app_name" id="0x7f080001" />
+    <public type="string" name="Settings" id="0x7f080002" />
+    <public type="string" name="AutoTest" id="0x7f080003" />
+    <public type="string" name="AllTest" id="0x7f080004" />
+    <public type="string" name="Packageerror" id="0x7f080005" />
+    <public type="string" name="PackageIerror" id="0x7f080006" />
+    <public type="string" name="BatteryLog" id="0x7f080007" />
+    <public type="string" name="battery_info_status_label" id="0x7f080008" />
+    <public type="string" name="battery_info_scale_label" id="0x7f080009" />
+    <public type="string" name="battery_info_level_label" id="0x7f08000a" />
+    <public type="string" name="battery_info_health_label" id="0x7f08000b" />
+    <public type="string" name="battery_info_technology_label" id="0x7f08000c" />
+    <public type="string" name="battery_info_voltage_label" id="0x7f08000d" />
+    <public type="string" name="battery_info_voltage_units" id="0x7f08000e" />
+    <public type="string" name="battery_info_temperature_label" id="0x7f08000f" />
+    <public type="string" name="battery_info_temperature_units" id="0x7f080010" />
+    <public type="string" name="battery_info_uptime" id="0x7f080011" />
+    <public type="string" name="battery_info_awake_battery" id="0x7f080012" />
+    <public type="string" name="battery_info_awake_plugged" id="0x7f080013" />
+    <public type="string" name="battery_info_screen_on" id="0x7f080014" />
+    <public type="string" name="battery_info_status_unknown" id="0x7f080015" />
+    <public type="string" name="battery_info_status_charging" id="0x7f080016" />
+    <public type="string" name="battery_info_status_charging_ac" id="0x7f080017" />
+    <public type="string" name="battery_info_status_charging_usb" id="0x7f080018" />
+    <public type="string" name="battery_info_status_discharging" id="0x7f080019" />
+    <public type="string" name="battery_info_status_not_charging" id="0x7f08001a" />
+    <public type="string" name="battery_info_status_full" id="0x7f08001b" />
+    <public type="string" name="battery_info_health_unknown" id="0x7f08001c" />
+    <public type="string" name="battery_info_health_good" id="0x7f08001d" />
+    <public type="string" name="battery_info_health_overheat" id="0x7f08001e" />
+    <public type="string" name="battery_info_health_dead" id="0x7f08001f" />
+    <public type="string" name="battery_info_health_over_voltage" id="0x7f080020" />
+    <public type="string" name="battery_info_health_unspecified_failure" id="0x7f080021" />
+    <public type="string" name="TouchScreen" id="0x7f080022" />
+    <public type="string" name="PointTest" id="0x7f080023" />
+    <public type="string" name="LineTest" id="0x7f080024" />
+    <public type="string" name="Result" id="0x7f080025" />
+    <public type="string" name="Offset" id="0x7f080026" />
+    <public type="string" name="TouchComplete" id="0x7f080027" />
+    <public type="string" name="Error" id="0x7f080028" />
+    <public type="string" name="DrawError" id="0x7f080029" />
+    <public type="string" name="Again" id="0x7f08002a" />
+    <public type="string" name="GoOn" id="0x7f08002b" />
+    <public type="string" name="BackLight" id="0x7f08002c" />
+    <public type="string" name="Display_lcd_Text" id="0x7f08002d" />
+    <public type="string" name="Memory" id="0x7f08002e" />
+    <public type="string" name="Audio" id="0x7f08002f" />
+    <public type="string" name="Camera" id="0x7f080030" />
+    <public type="string" name="Camera_takepic" id="0x7f080031" />
+    <public type="string" name="Camera_notfound" id="0x7f080032" />
+    <public type="string" name="WiFi" id="0x7f080033" />
+    <public type="string" name="WiFi_success" id="0x7f080034" />
+    <public type="string" name="WiFi_failed" id="0x7f080035" />
+    <public type="string" name="WiFi_scaning" id="0x7f080036" />
+    <public type="string" name="WiFi_info_closeing" id="0x7f080037" />
+    <public type="string" name="WiFi_info_close" id="0x7f080038" />
+    <public type="string" name="WiFi_info_opening" id="0x7f080039" />
+    <public type="string" name="WiFi_info_open" id="0x7f08003a" />
+    <public type="string" name="WiFi_info_unknown" id="0x7f08003b" />
+    <public type="string" name="WiFi_connecting" id="0x7f08003c" />
+    <public type="string" name="WiFi_notfound_openap" id="0x7f08003d" />
+    <public type="string" name="HeadSet" id="0x7f08003e" />
+    <public type="string" name="HeadSet_plugged" id="0x7f08003f" />
+    <public type="string" name="HeadSet_unplugged" id="0x7f080040" />
+    <public type="string" name="HeadSet_tips" id="0x7f080041" />
+    <public type="string" name="HeadSet_hook" id="0x7f080042" />
+    <public type="string" name="HeadSet_hook_message" id="0x7f080043" />
+    <public type="string" name="GPS" id="0x7f080044" />
+    <public type="string" name="GPS_open" id="0x7f080045" />
+    <public type="string" name="GPS_connect" id="0x7f080046" />
+    <public type="string" name="GPS_normal" id="0x7f080047" />
+    <public type="string" name="GPS_satelliteNum" id="0x7f080048" />
+    <public type="string" name="GPS_Signal" id="0x7f080049" />
+    <public type="string" name="GPS_Success" id="0x7f08004a" />
+    <public type="string" name="GPS_time" id="0x7f08004b" />
+    <public type="string" name="Sensor" id="0x7f08004c" />
+    <public type="string" name="Vibrator" id="0x7f08004d" />
+    <public type="string" name="Signal" id="0x7f08004e" />
+    <public type="string" name="YGPS" id="0x7f08004f" />
+    <public type="string" name="AGPS" id="0x7f080050" />
+    <public type="string" name="Microphone" id="0x7f080051" />
+    <public type="string" name="Mic_start" id="0x7f080052" />
+    <public type="string" name="Mic_stop" id="0x7f080053" />
+    <public type="string" name="Mic_play" id="0x7f080054" />
+    <public type="string" name="Mic_operation" id="0x7f080055" />
+    <public type="string" name="Speaker_operation" id="0x7f080056" />
+    <public type="string" name="Bluetooth" id="0x7f080057" />
+    <public type="string" name="Bluetooth_open" id="0x7f080058" />
+    <public type="string" name="Bluetooth_opening" id="0x7f080059" />
+    <public type="string" name="Bluetooth_scaning" id="0x7f08005a" />
+    <public type="string" name="Bluetooth_mac" id="0x7f08005b" />
+    <public type="string" name="Bluetooth_scan_success" id="0x7f08005c" />
+    <public type="string" name="GSensor" id="0x7f08005d" />
+    <public type="string" name="GSensor_info" id="0x7f08005e" />
+    <public type="string" name="MSensor" id="0x7f08005f" />
+    <public type="string" name="MSensor_default_text" id="0x7f080060" />
+    <public type="string" name="MSensor_North" id="0x7f080061" />
+    <public type="string" name="MSensor_East" id="0x7f080062" />
+    <public type="string" name="MSensor_South" id="0x7f080063" />
+    <public type="string" name="MSensor_West" id="0x7f080064" />
+    <public type="string" name="MSensor_north_east" id="0x7f080065" />
+    <public type="string" name="MSensor_south_east" id="0x7f080066" />
+    <public type="string" name="MSensor_south_west" id="0x7f080067" />
+    <public type="string" name="MSensor_north_west" id="0x7f080068" />
+    <public type="string" name="LSensor" id="0x7f080069" />
+    <public type="string" name="LSensor_default_text" id="0x7f08006a" />
+    <public type="string" name="LSensor_accuracy" id="0x7f08006b" />
+    <public type="string" name="LSensor_value" id="0x7f08006c" />
+    <public type="string" name="LSensor_tips" id="0x7f08006d" />
+    <public type="string" name="LCD_increase" id="0x7f08006e" />
+    <public type="string" name="LCD_weaken" id="0x7f08006f" />
+    <public type="string" name="Success" id="0x7f080070" />
+    <public type="string" name="Failed" id="0x7f080071" />
+    <public type="string" name="psensor_hello" id="0x7f080072" />
+    <public type="string" name="psensor_app_name" id="0x7f080073" />
+    <public type="string" name="proximity" id="0x7f080074" />
+    <public type="string" name="tips" id="0x7f080075" />
+    <public type="string" name="Earphone" id="0x7f080076" />
+    <public type="string" name="battery_name" id="0x7f080077" />
+    <public type="string" name="touchscreen_name" id="0x7f080078" />
+    <public type="string" name="speaker_name" id="0x7f080079" />
+    <public type="string" name="wifi_name" id="0x7f08007a" />
+    <public type="string" name="bluetooth_name" id="0x7f08007b" />
+    <public type="string" name="headset_name" id="0x7f08007c" />
+    <public type="string" name="earphone_name" id="0x7f08007d" />
+    <public type="string" name="gps_name" id="0x7f08007e" />
+    <public type="string" name="vibrator_name" id="0x7f08007f" />
+    <public type="string" name="telephone_name" id="0x7f080080" />
+    <public type="string" name="backlight_name" id="0x7f080081" />
+    <public type="string" name="memory_name" id="0x7f080082" />
+    <public type="string" name="gsensor_name" id="0x7f080083" />
+    <public type="string" name="msensor_name" id="0x7f080084" />
+    <public type="string" name="lsensor_name" id="0x7f080085" />
+    <public type="string" name="psensor_name" id="0x7f080086" />
+    <public type="string" name="camera_name" id="0x7f080087" />
+    <public type="string" name="sdcard_name" id="0x7f080088" />
+    <public type="string" name="fmradio_name" id="0x7f080089" />
+    <public type="string" name="KeyCode_name" id="0x7f08008a" />
+    <public type="string" name="lcd_name" id="0x7f08008b" />
+    <public type="string" name="sim_name" id="0x7f08008c" />
+    <public type="string" name="microphone_name" id="0x7f08008d" />
+    <public type="string" name="subcamera_name" id="0x7f08008e" />
+    <public type="string" name="headsethook_name" id="0x7f08008f" />
+    <public type="string" name="sdcard" id="0x7f080090" />
+    <public type="string" name="sdcard_tips_success" id="0x7f080091" />
+    <public type="string" name="sdcard_tips_failed" id="0x7f080092" />
+    <public type="string" name="sdcard_totalsize" id="0x7f080093" />
+    <public type="string" name="sdcard_freesize" id="0x7f080094" />
+    <public type="string" name="FMRadio" id="0x7f080095" />
+    <public type="string" name="FMRadio_notice" id="0x7f080096" />
+    <public type="string" name="KeyCode" id="0x7f080097" />
+    <public type="string" name="KeyCode_info" id="0x7f080098" />
+    <public type="string" name="LCD" id="0x7f080099" />
+    <public type="string" name="SimCard" id="0x7f08009a" />
+    <public type="string" name="sim1_info_ok" id="0x7f08009b" />
+    <public type="string" name="sim1_info_failed" id="0x7f08009c" />
+    <public type="string" name="sim2_info_ok" id="0x7f08009d" />
+    <public type="string" name="sim2_info_failed" id="0x7f08009e" />
+    <public type="string" name="sim_info_ok" id="0x7f08009f" />
+    <public type="string" name="sim_info_failed" id="0x7f0800a0" />
+    <public type="string" name="Report" id="0x7f0800a1" />
+    <public type="string" name="report_ok" id="0x7f0800a2" />
+    <public type="string" name="report_failed" id="0x7f0800a3" />
+    <public type="string" name="report_notest" id="0x7f0800a4" />
+    <public type="string" name="menu_exit" id="0x7f0800a5" />
+    <public type="string" name="charge_message" id="0x7f0800a6" />
+    <public type="style" name="info_label" id="0x7f090000" />
+    <public type="style" name="info_value" id="0x7f090001" />
+    <public type="style" name="info_layout" id="0x7f090002" />
+    <public type="style" name="entry_layout" id="0x7f090003" />
+    <public type="style" name="TextAppearance" id="0x7f090004" />
+    <public type="style" name="TextAppearance.info_label" id="0x7f090005" />
+    <public type="style" name="TextAppearance.info_small" id="0x7f090006" />
+    <public type="style" name="TextAppearance.info_value" id="0x7f090007" />
+</resources>
\ No newline at end of file
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/values/dimens.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/values/dimens.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/values/dimens.xml	(revision 1055)
@@ -0,0 +1,6 @@
+<resources>
+    <dimen name="btn_margin_dividing">30dp</dimen>
+    <!-- [issue 31517] Begin, by ruping.zhu, 2015-11-20-->
+    <dimen name="lookback_bottom_size">200dip</dimen>
+    <!-- [issue 31517] End, by ruping.zhu, 2015-11-20-->
+</resources>
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/values/ids.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/values/ids.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/values/ids.xml	(revision 1055)
@@ -0,0 +1,154 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <item type="id" name="LinerLayout_comm_info" />
+    <item type="id" name="LinerLayout_file_sys_info" />
+    <item type="id" name="LinerLayout_partition_info" />
+    <item type="id" name="comm_info" />
+    <item type="id" name="file_sys_info" />
+    <item type="id" name="partition_info" />
+    <item type="id" name="all_bt_ok">false</item>
+    <item type="id" name="all_bt_failed">false</item>
+    <item type="id" name="audio_bt_ok">false</item>
+    <item type="id" name="audio_bt_failed">false</item>
+    <item type="id" name="LinearLayout">false</item>
+    <item type="id" name="Display_lcd_on">false</item>
+    <item type="id" name="Display_lcd_off">false</item>
+    
+    <item type="id" name="Display_led_white">false</item>
+    <item type="id" name="Display_led_red">false</item>
+    <item type="id" name="Display_led_green">false</item>
+    <item type="id" name="display_bt_ok">false</item>
+    <item type="id" name="display_bt_failed">false</item>
+    <item type="id" name="status">false</item>
+    <item type="id" name="level">false</item>
+    <item type="id" name="scale">false</item>
+    <item type="id" name="health">false</item>
+    <item type="id" name="voltage">false</item>
+    <item type="id" name="temperature">false</item>
+    <item type="id" name="technology">false</item>
+    <item type="id" name="uptime">false</item>
+    <item type="id" name="battery_bt_ok">false</item>
+    <item type="id" name="battery_bt_failed">false</item>
+    <item type="id" name="ble_state_id">false</item>
+    <item type="id" name="ble_result_id">false</item>
+    <item type="id" name="ble_con_id">false</item>
+    <item type="id" name="ble_bt_ok">false</item>
+    <item type="id" name="ble_bt_failed">false</item>
+    <item type="id" name="camera_view">false</item>
+    <item type="id" name="subcamera_take">false</item>
+    <item type="id" name="camera_take">false</item>
+    <item type="id" name="camera_btok">false</item>
+    <item type="id" name="camera_btfailed">false</item>
+    <item type="id" name="gps_state_id">false</item>
+    <item type="id" name="gps_satellite_id">false</item>
+    <item type="id" name="gps_signal_id">false</item>
+    <item type="id" name="gps_result_id">false</item>
+    <item type="id" name="gps_time_id">false</item>
+    <item type="id" name="gps_bt_ok">false</item>
+    <item type="id" name="gps_bt_failed">false</item>
+    <item type="id" name="gsensor_iv_img">false</item>
+    <item type="id" name="gsensor_tv_info">false</item>
+    <item type="id" name="gsensor_bt_ok">false</item>
+    <item type="id" name="gsensor_bt_failed">false</item>
+    <item type="id" name="mic_bt_start">false</item>
+    <item type="id" name="uvMeter">false</item>
+    <item type="id" name="bt_ok">false</item>
+    <item type="id" name="bt_failed">false</item>
+    <item type="id" name="keycode_info">false</item>
+    <item type="id" name="keycode_grid">false</item>
+    <item type="id" name="keycode_bt_ok">false</item>
+    <item type="id" name="keycode_bt_failed">false</item>
+    <item type="id" name="imgview">false</item>
+    <item type="id" name="test_color_text1">false</item>
+    <item type="id" name="lsensor_accuracy">false</item>
+    <item type="id" name="lsensor_value">false</item>
+    <item type="id" name="lsensor_tips">false</item>
+    <item type="id" name="lsensor_bt_ok">false</item>
+    <item type="id" name="lsensor_bt_failed">false</item>
+    <item type="id" name="main_bt_autotest">false</item>
+    <item type="id" name="main_bt_alltest">false</item>
+    <item type="id" name="main_grid">false</item>
+    <item type="id" name="factor_button">false</item>
+    <item type="id" name="memory_bt_ok">false</item>
+    <item type="id" name="memory_bt_failed">false</item>
+    <item type="id" name="mic_tips">false</item>
+    <item type="id" name="mic_bt_ok">false</item>
+    <item type="id" name="mic_bt_failed">false</item>
+    <item type="id" name="speaker_bt_ok">false</item>
+    <item type="id" name="speaker_bt_failed">false</item>
+    <item type="id" name="mic_tv_status">false</item>
+    <item type="id" name="LinearLayout01">false</item>
+    <item type="id" name="OrientText">false</item>
+    <item type="id" name="ivCompass">false</item>
+    <item type="id" name="OrientValue">false</item>
+    <item type="id" name="msensor_iv_img">false</item>
+    <item type="id" name="msensor_tv_info">false</item>
+    <item type="id" name="msensor_bt_ok">false</item>
+    <item type="id" name="msensor_bt_failed">false</item>
+    <item type="id" name="proximity">false</item>
+    <item type="id" name="tips">false</item>
+    <item type="id" name="psensor_bt_ok">false</item>
+    <item type="id" name="psensor_bt_failed">false</item>
+    <item type="id" name="report_success">false</item>
+    <item type="id" name="report_failed">false</item>
+    <item type="id" name="report_default">false</item>
+    <item type="id" name="sdcard_info">false</item>
+    <item type="id" name="sdcard_bt_ok">false</item>
+    <item type="id" name="sdcard_bt_failed">false</item>
+    <item type="id" name="signal_bt_ok">false</item>
+    <item type="id" name="signal_bt_failed">false</item>
+    <item type="id" name="simcard_sim1_info">false</item>
+    <item type="id" name="simcard_sim2_info">false</item>
+    <item type="id" name="simcard_bt_ok">false</item>
+    <item type="id" name="simcard_bt_failed">false</item>
+    <item type="id" name="touchscreen_bt_ok">false</item>
+    <item type="id" name="touchscreen_bt_failed">false</item>
+    <item type="id" name="vibrator_bt_ok">false</item>
+    <item type="id" name="vibrator_bt_failed">false</item>
+    <item type="id" name="wifi_state_id">false</item>
+    <item type="id" name="wifi_result_id">false</item>
+    <item type="id" name="wifi_con_id">false</item>
+    <item type="id" name="wifi_resinfo_id">false</item>
+    <item type="id" name="wifi_bt_ok">false</item>
+    <item type="id" name="wifi_bt_failed">false</item>
+    <item type="id" name="ygps_bt_ok">false</item>
+    <item type="id" name="ygps_bt_failed">false</item>
+    <item type="id" name="android_version">false</item>
+    <item type="id" name="build_number">false</item>
+    <item type="id" name="imei">false</item>
+    <item type="id" name="barcode">false</item>
+    <item type="id" name="bt_state">false</item>
+    <item type="id" name="ft_state">false</item>
+    <item type="id" name="linux_version">false</item>
+    <item type="id" name="platform_version">false</item>
+    <item type="id" name="version_bt_ok">false</item>
+    <item type="id" name="version_bt_failed">false</item>
+    <item type="id" name="rf_cali">false</item>
+    <item type="id" name="rf_bt_ok">false</item>
+    <item type="id" name="rf_bt_failed">false</item>
+    <item type="id" name="fm_bt_ok">false</item>
+    <item type="id" name="fm_bt_failed">false</item>
+    <item type="id" name="lcd_bt_ok">false</item>
+    <item type="id" name="lcd_bt_failed">false</item>
+    <item type="id" name="pointer_bt_ok">false</item>
+    <item type="id" name="pointer_bt_failed">false</item>
+    <item type="id" name="line_bt_ok">false</item>
+    <item type="id" name="line_bt_failed">false</item>
+    <item type="id" name="hall_tips">false</item>
+    <item type="id" name="hall_bt_ok">false</item>
+    <item type="id" name="hall_bt_failed">false</item>
+    
+    <item type="id" name="flashlight_tips">false</item>      
+    <item type="id" name="flashlight_bt_ok">false</item>     
+    <item type="id" name="flashlight_bt_failed">false</item> 
+    <item type="id" name="electronic" />
+    <item type="id" name="charger_type" />
+    <item type="id" name="charger_result" />
+    <item type="id" name="chargemessage" /> 
+    <item type="id" name="nfc_bt_ok">false</item>
+    <item type="id" name="nfc_bt_failed">false</item>
+    <item type="id" name="finger_tips">false</item>
+    <item type="id" name="finger_bt_ok">false</item>
+    <item type="id" name="finger_bt_failed">false</item>
+    
+</resources>
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/values/arrays.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/values/arrays.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/values/arrays.xml	(revision 1055)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string-array name="select_dialog_items">
+        <item>成功</item>
+        <item>失败</item>
+    </string-array>
+</resources>
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/values/colors.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/values/colors.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/values/colors.xml	(revision 1055)
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <color name="recording_current_shot_text">#ffffffff</color>
+    <color name="gray">#ffd3d3d3</color>
+    <color name="black">#ff000000</color>
+    <color name="Green">#ff00ff00</color>
+    <color name="Red">#ffff0000</color>
+    <color name="Blue">#ff0000ff</color>
+</resources>
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/values/styles.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/values/styles.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/values/styles.xml	(revision 1055)
@@ -0,0 +1,41 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <style name="info_label">
+        <item name="android:textAppearance">@style/TextAppearance.info_label</item>
+        <item name="android:paddingRight">4.0dip</item>
+        <item name="android:layout_width">wrap_content</item>
+        <item name="android:layout_height">wrap_content</item>
+    </style>
+    <style name="info_value">
+        <item name="android:textAppearance">@style/TextAppearance.info_value</item>
+        <item name="android:layout_width">wrap_content</item>
+        <item name="android:layout_height">wrap_content</item>
+    </style>
+    <style name="info_layout">
+        <item name="android:orientation">vertical</item>
+        <item name="android:paddingLeft">10.0dip</item>
+        <item name="android:paddingTop">10.0dip</item>
+        <item name="android:paddingRight">10.0dip</item>
+        <item name="android:paddingBottom">10.0dip</item>
+        <item name="android:layout_width">fill_parent</item>
+        <item name="android:layout_height">fill_parent</item>
+    </style>
+    <style name="entry_layout">
+        <item name="android:orientation">horizontal</item>
+        <item name="android:layout_width">wrap_content</item>
+        <item name="android:layout_height">wrap_content</item>
+    </style>
+    <style name="TextAppearance" parent="@android:style/TextAppearance" />
+    <style name="TextAppearance.info_label" parent="@style/TextAppearance">
+        <item name="android:textSize">14.0sp</item>
+        <item name="android:textStyle">bold</item>
+    </style>
+    <style name="TextAppearance.info_small" parent="@style/TextAppearance">
+        <item name="android:textSize">12.0sp</item>
+        <item name="android:textStyle">normal</item>
+    </style>
+    <style name="TextAppearance.info_value" parent="@style/TextAppearance">
+        <item name="android:textSize">14.0sp</item>
+        <item name="android:textStyle">normal</item>
+    </style>
+</resources>
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/values/strings.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/values/strings.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/values/strings.xml	(revision 1055)
@@ -0,0 +1,241 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="hello">Welcome to Factory Mode</string>
+    <string name="app_name">Factory Mode</string>
+    <string name="Settings">Settings</string>
+    <string name="AutoTest">Auto test</string>
+    <string name="AllTest">All test</string>
+    <string name="Packageerror">Package error!</string>
+    <string name="PackageIerror">Internal error</string>
+    <string name="BatteryLog">Battery</string>
+    <string name="battery_info_status_label">Charge state:</string>
+    <string name="battery_info_scale_label">Battery scale:</string>
+    <string name="battery_info_level_label">Battery level:</string>
+    <string name="battery_info_health_label">Battery health:</string>
+    <string name="battery_info_technology_label">Battery technology:</string>
+    <string name="battery_info_voltage_label">Battery voltage:</string>
+    <string name="battery_info_voltage_units">mV</string>
+    <string name="battery_info_temperature_label">Battery temperature:</string>
+    <string name="battery_info_temperature_units">° C</string>
+    <string name="battery_info_uptime">Battery time:</string>
+    <string name="battery_info_awake_battery">Battery wake time:</string>
+    <string name="battery_info_awake_plugged">Charge time:</string>
+    <string name="battery_info_screen_on">Screen time:</string>
+    <string name="battery_info_status_unknown">Battery unkonw</string>
+    <string name="battery_info_status_charging">Charging</string>
+    <string name="battery_info_status_charging_ac">(AC)</string>
+    <string name="battery_info_status_charging_usb">(USB)</string>
+    <string name="battery_info_status_discharging">Discharging</string>
+    <string name="battery_info_status_not_charging">Not charging</string>
+    <string name="battery_info_status_full">Battery full</string>
+    <string name="battery_info_health_unknown">Health unkonw</string>
+    <string name="battery_info_health_good">Health good</string>
+    <string name="battery_info_health_overheat">Health overheat</string>
+    <string name="battery_info_health_dead">Dead</string>
+    <string name="battery_info_health_over_voltage">Over voltage</string>
+    <string name="battery_info_health_unspecified_failure">Unspecified failure</string>
+    <string name="TouchScreen">Touch</string>
+    <string name="PointTest">Point test</string>
+    <string name="LineTest">Line test</string>
+    <string name="Result">Result</string>
+    <string name="Offset">Offset:</string>
+    <string name="TouchComplete">Touch complete</string>
+    <string name="Error">Error</string>
+    <string name="DrawError">Draw error!</string>
+    <string name="Again">Again</string>
+    <string name="GoOn">Go on</string>
+    <string name="BackLight">Backlight</string>
+    <string name="Display_lcd_Text">Backlight</string>
+    <string name="Memory">Memory</string>
+    <string name="Audio">Audio</string>
+    <string name="Camera">Camera</string>
+    <string name="Camera_takepic">Photograph</string>
+    <string name="Camera_notfound">Not found front camera</string>
+    <string name="WiFi">WiFi</string>
+    <string name="WiFi_success">Wifi success</string>
+    <string name="WiFi_failed">Wifi failed</string>
+    <string name="WiFi_scaning">Wifi scaning...</string>
+    <string name="WiFi_info_closeing">wifi closeing...</string>
+    <string name="WiFi_info_close">wifi close</string>
+    <string name="WiFi_info_opening">wifi opening</string>
+    <string name="WiFi_info_open">wifi open</string>
+    <string name="WiFi_info_unknown">wifi unknown</string>
+    <string name="WiFi_connecting">wifi connecting...</string>
+    <string name="WiFi_notfound_openap">wifi not found</string>
+    <string name="HeadSet">Headset</string>
+    <string name="HeadSet_plugged">Headset plugged</string>
+    <string name="HeadSet_unplugged">Headset unplugged</string>
+    <string name="HeadSet_tips">Plug headset</string>
+    <string name="HeadSet_hook">Headset hook!</string>
+    <string name="HeadSet_hook_message">Confirm long press headset hook to hang up phone?</string>
+    <string name="GPS">GPS</string>
+    <string name="GPS_open">GPS open</string>
+    <string name="GPS_connect">GPS connect...</string>
+    <string name="GPS_normal">GPS normal</string>
+    <string name="GPS_satelliteNum">GPS satellite num:</string>
+    <string name="GPS_Signal">GPS signal:</string>
+    <string name="GPS_Success">GPS success</string>
+    <string name="GPS_time">GPS time: %s min</string>
+    <string name="Sensor">Sensor</string>
+    <string name="Vibrator">Vibrator</string>
+    <string name="Signal">Signal</string>
+    <string name="YGPS">YGPS</string>
+    <string name="AGPS">AGPS</string>
+    <string name="Microphone">Microphone</string>
+    <string name="Mic_start">Mic start</string>
+    <string name="Mic_stop">Mic stop</string>
+    <string name="Mic_play">Mic play</string>
+    <string name="Mic_operation">Mic operation</string>
+    <string name="Speaker_operation">Speaker operation</string>
+    <string name="Bluetooth">Bluetooth</string>
+    <string name="Bluetooth_open">Bluetooth open</string>
+    <string name="Bluetooth_opening">Bluetooth opening...</string>
+    <string name="Bluetooth_scaning">Bluetooth scaning...</string>
+    <string name="Bluetooth_mac">MAC address:</string>
+    <string name="Bluetooth_scan_success">Bluetooth scan success</string>
+    <string name="GSensor">GSensor</string>
+    <string name="GSensor_info">Erected,flat,celi,gravity change!</string>
+    <string name="MSensor">MSensor</string>
+    <string name="MSensor_default_text">MSensor unknow</string>
+    <string name="MSensor_North">MSensor north</string>
+    <string name="MSensor_East">MSensor east</string>
+    <string name="MSensor_South">MSensor south</string>
+    <string name="MSensor_West">MSensor west</string>
+    <string name="MSensor_north_east">MSensor north east</string>
+    <string name="MSensor_south_east">MSensor south east</string>
+    <string name="MSensor_south_west">MSensor south west</string>
+    <string name="MSensor_north_west">MSensor north west</string>
+    <string name="LSensor">LSensor</string>
+    <string name="LSensor_default_text">LSensor unknow</string>
+    <string name="LSensor_accuracy">LSensor accuracy:</string>
+    <string name="LSensor_value">LSensor value:</string>
+    <string name="LSensor_tips">LSensor tips!</string>
+    <string name="OSensor">OSensor</string>
+    <string name="gyro">gyro</string>
+    <string name="Hall_tips">Hall</string>
+    <string name="Hall">Hall</string>
+    <string name="LCD_increase">LCD increase</string>
+    <string name="LCD_weaken">LCD weaken</string>
+    <string name="Success">Success</string>
+    <string name="Failed">Failed</string>
+    <string name="psensor_hello">PSensor check</string>
+    <string name="psensor_app_name">PSensor</string>
+    <string name="proximity">Proximity:</string>
+    <string name="tips">Proximity check!</string>
+    <string name="Earphone">Earphone</string>
+    <string name="battery_name">Battery</string>
+    <string name="touchscreen_name">Touch</string>
+    <string name="speaker_name">Speaker</string>
+    <string name="wifi_name">WiFi</string>
+    <string name="bluetooth_name">Bluetooth</string>
+    <string name="headset_name">Headset</string>
+    <string name="earphone_name">Earphone</string>
+    <string name="gps_name">GPS</string>
+    <string name="vibrator_name">Vibrator</string>
+    <string name="telephone_name">Phone</string>
+    <string name="backlight_name">Backlight</string>
+    <string name="memory_name">Memory</string>
+    <string name="gsensor_name">Gsensor</string>
+    <string name="msensor_name">Msensor</string>
+    <string name="lsensor_name">Lsensor</string>
+    <string name="LSensorCali">Lsensor Calibration</string>
+    <string name="lsensor_cali_name">LSCali</string>
+    <string name="lsensor_cali_start">Calibration Start</string>
+    <string name="psensor_name">Psensor</string>
+    <string name="camera_name">Camera</string>
+    
+    <string name="sdcard_name">T card</string>
+    <string name="fmradio_name">FM</string>
+    <string name="KeyCode_name">Key</string>
+    <string name="lcd_name">LCD</string>
+    <string name="sim_name">SIM</string>
+    <string name="microphone_name">Mic</string>
+    <string name="submicrophone_name">Sub Mic</string>
+    <string name="subcamera_name">FCamera</string>
+    <string name="headsethook_name">Headset hook</string>
+    <string name="sdcard">T card</string>
+    <string name="sdcard_tips_success">SD success</string>
+    <string name="sdcard_tips_failed">SD failed</string>
+    <string name="sdcard_totalsize">SD total:</string>
+    <string name="sdcard_freesize">SD free:</string>
+    <string name="FMRadio">FM</string>
+    <string name="nfc_name">NFC</string>
+    <string name="exit_message">Press again to exit the AutoTest</string>
+    <string name="FMRadio_notice">FM select</string>
+    <string name="KeyCode">Key</string>
+    <string name="KeyCode_info">Press key</string>
+    <string name="LCD">LCD</string>
+    <string name="SimCard">SIM</string>
+    <string name="sim1_info_ok">SIM1:ok</string>
+    <string name="sim1_info_failed">SIM1:failed</string>
+    <string name="sim2_info_ok">SIM2:ok</string>
+    <string name="sim2_info_failed">SIM2:failed</string>
+    <string name="sim_info_ok">SIM:ok</string>
+    <string name="sim_info_failed">SIM:failed</string>
+    <string name="Report">Report</string>
+    <string name="SingleTestReport">SingleTest Report</string>
+    <string name="AutoTestReport">AutoTest Report</string>
+    <string name="report_ok">Success:</string>
+    <string name="report_failed">Failed:</string>
+    <string name="report_notest">Untested:</string>
+    <string name="menu_exit">Eixt</string>
+    <string name="Mic_player">Mic player</string>
+    <string name="Fmsearch">FM search</string>
+    <string name="hour">hour</string>
+    <string name="minute">minute</string>
+    <string name="second">second</string>
+    <string name="Bluetooth_closed">Bluetooth closed</string>
+    <string name="okok">OK</string>
+    <string name="stopplayer">Stop player</string>
+    <string name="memorytotal">Memory total:</string>
+    <string name="memoryfree">Memory free:</string>
+    <string name="GSensor_tips">Gsensor check XYZ</string>
+    <string name="MSensor_tips">Msensor check XYZ</string>
+    <string name="version_info">Version</string>
+    <string name="rf_cali">RF CALI</string>
+    <string name="default_version">unknow</string>
+    <string name="lcd_hint">Press home key</string>
+    <string name="tp_hw_hint">Press Search</string>
+    <string name="tp_line_hint">Draw diagonal position\nIf the diagonal continuous and smooth,TP is normal.</string>
+    <string name="tp_line_start_hint">From the yellow area began to draw</string>
+    <string name="tp_line_stop_hint">Draw diagonal position</string>
+    <string name="tp_line_area_hint">Draw between two parallel lines</string>
+    <string name="tp_success_hint">TP success</string>
+    <string name="tp_slide_too_quick">Sliding too fast,slow slide</string>
+    
+    <string name="led_white">white</string>
+    <string name="Led">Led</string>
+    <string name="led_red">TURN ON</string>
+    <string name="led_green">TURN OFF</string>
+    <string name="tp_block_too_quick">The blue point is for response.The block is not disappear if sliding fast</string>
+    
+    <string name="flashlight_tips">FlashLight</string>
+    <string name="flashlight">FlashLight</string>
+    
+    <string name="touch_too_fast_to_tip">Blue is the back point, move too fast to clean block.</string>
+    <string name="charger_unknown">unknown</string>
+    <string name="charger_charging">charging</string>
+    <string name="charger_not_charging">not charging</string>
+    <string name="charger_discharging">discharging</string>
+    <string name="charger_full">full</string>
+    <string name="charger_electronic">electronic:</string>
+    <string name="charger_type">type:</string>
+    <string name="charger_connected">yes</string>
+    <string name="charger_disconnected">no</string>
+    <string name="charger_result">result: </string>
+    <string name="charger_success">success</string>
+    <string name="charger_failed">failed</string>
+    <string name="charger_tips">The battery is full, replace the battery please.</string>
+    <string name="charge_message">Please plug in charger.</string>
+    <string name="charger_start_tips">Wait for the first test.</string>
+    <string name="charger_retry_tips">Test failed.Try again after <xliff:g id="xxx">%d</xliff:g> seconds.(Left <xliff:g id="yyy">%d</xliff:g> times)</string>
+    <string name="charger_temperature_error">The test has been stopped because of the battery temperature is not normal.</string>
+    <string name="cali_result_pass">Calibration Success</string>
+    <string name="cali_result_fail">Calibration failed</string>
+    <string name="finger_tips">Finger</string>
+    <string name="finger">Finger</string>
+    <string name="iris">iris</string>
+    <string name="iris_name">iris</string>
+    <string name="overall_unit_power_name">Battery</string>
+    <string name="smt_name">SMT Battery</string>
+</resources>
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable/btn_default.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable/btn_default.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable/btn_default.xml	(revision 1055)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:state_window_focused="false" android:state_enabled="true" android:drawable="@drawable/btn_default_normal" />
+    <item android:state_window_focused="false" android:state_enabled="false" android:drawable="@drawable/btn_default_normal_disable" />
+    <item android:state_pressed="true" android:drawable="@drawable/btn_default_pressed" />
+    <item android:state_focused="true" android:state_enabled="true" android:drawable="@drawable/btn_default_selected" />
+    <item android:state_enabled="true" android:drawable="@drawable/btn_default_normal" />
+    <item android:state_focused="true" android:drawable="@drawable/btn_default_normal_disable_focused" />
+    <item android:drawable="@drawable/btn_default_normal_disable" />
+</selector>
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable/etshape.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable/etshape.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable/etshape.xml	(revision 1055)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<shape xmlns:android="http://schemas.android.com/apk/res/android" >
+    <corners android:radius="5dp"/>
+    <stroke android:width="1dp"
+        android:color="#ffff00"/>
+    <padding android:left="5dp"/>
+	
+</shape>
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/unknown.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/unknown.png
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/unknown.png	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/unknown.png	(revision 1055)

Property changes on: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/unknown.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/back.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/back.png
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/back.png	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/back.png	(revision 1055)

Property changes on: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/back.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/btn_default_normal_disable_focused.9.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/btn_default_normal_disable_focused.9.png
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/btn_default_normal_disable_focused.9.png	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/btn_default_normal_disable_focused.9.png	(revision 1055)

Property changes on: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/btn_default_normal_disable_focused.9.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/menu.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/menu.png
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/menu.png	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/menu.png	(revision 1055)

Property changes on: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/menu.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/search.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/search.png
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/search.png	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/search.png	(revision 1055)

Property changes on: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/search.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/compass.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/compass.png
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/compass.png	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/compass.png	(revision 1055)

Property changes on: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/compass.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/btn_default_normal.9.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/btn_default_normal.9.png
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/btn_default_normal.9.png	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/btn_default_normal.9.png	(revision 1055)

Property changes on: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/btn_default_normal.9.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/btn_default_selected.9.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/btn_default_selected.9.png
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/btn_default_selected.9.png	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/btn_default_selected.9.png	(revision 1055)

Property changes on: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/btn_default_selected.9.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/gsensor_x.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/gsensor_x.png
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/gsensor_x.png	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/gsensor_x.png	(revision 1055)

Property changes on: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/gsensor_x.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/gsensor_y.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/gsensor_y.png
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/gsensor_y.png	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/gsensor_y.png	(revision 1055)

Property changes on: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/gsensor_y.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/vldown.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/vldown.png
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/vldown.png	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/vldown.png	(revision 1055)

Property changes on: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/vldown.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/gsensor_z.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/gsensor_z.png
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/gsensor_z.png	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/gsensor_z.png	(revision 1055)

Property changes on: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/gsensor_z.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/ic_launcher.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/ic_launcher.png
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/ic_launcher.png	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/ic_launcher.png	(revision 1055)

Property changes on: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/ic_launcher.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/btn_default_pressed.9.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/btn_default_pressed.9.png
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/btn_default_pressed.9.png	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/btn_default_pressed.9.png	(revision 1055)

Property changes on: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/btn_default_pressed.9.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/vlup.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/vlup.png
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/vlup.png	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/vlup.png	(revision 1055)

Property changes on: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/vlup.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/vumeter.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/vumeter.png
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/vumeter.png	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/vumeter.png	(revision 1055)

Property changes on: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/vumeter.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/home.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/home.png
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/home.png	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/home.png	(revision 1055)

Property changes on: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/home.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/gsensor_x_2.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/gsensor_x_2.png
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/gsensor_x_2.png	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/gsensor_x_2.png	(revision 1055)

Property changes on: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/gsensor_x_2.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/camera.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/camera.png
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/camera.png	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/camera.png	(revision 1055)

Property changes on: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/camera.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/psensor_background.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/psensor_background.png
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/psensor_background.png	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/psensor_background.png	(revision 1055)

Property changes on: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/psensor_background.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/error.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/error.png
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/error.png	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/error.png	(revision 1055)

Property changes on: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/error.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/btn_default_normal_disable.9.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/btn_default_normal_disable.9.png
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/btn_default_normal_disable.9.png	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/btn_default_normal_disable.9.png	(revision 1055)

Property changes on: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-hdpi/btn_default_normal_disable.9.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-ldpi/ic_launcher.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-ldpi/ic_launcher.png
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-ldpi/ic_launcher.png	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-ldpi/ic_launcher.png	(revision 1055)

Property changes on: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-ldpi/ic_launcher.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-mdpi/psensor_background.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-mdpi/psensor_background.png
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-mdpi/psensor_background.png	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-mdpi/psensor_background.png	(revision 1055)

Property changes on: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-mdpi/psensor_background.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-mdpi/ic_launcher.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-mdpi/ic_launcher.png
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-mdpi/ic_launcher.png	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-mdpi/ic_launcher.png	(revision 1055)

Property changes on: vendor/mediatek/proprietary/packages/apps/FactoryMode/res/drawable-mdpi/ic_launcher.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/Android.mk
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/Android.mk	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/Android.mk	(revision 1055)
@@ -0,0 +1,55 @@
+# Copyright Statement:
+#
+# This software/firmware and related documentation ("MediaTek Software") are
+# protected under relevant copyright laws. The information contained herein
+# is confidential and proprietary to MediaTek Inc. and/or its licensors.
+# Without the prior written permission of MediaTek inc. and/or its licensors,
+# any reproduction, modification, use or disclosure of MediaTek Software,
+# and information contained herein, in whole or in part, shall be strictly prohibited.
+#
+# MediaTek Inc. (C) 2010. All rights reserved.
+#
+# BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
+# THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
+# RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO RECEIVER ON
+# AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
+# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
+# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
+# NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
+# SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
+# SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
+# THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
+# THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
+# CONTAINED IN MEDIATEK SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK
+# SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
+# STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND
+# CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
+# AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
+# OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
+# MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
+#
+# The following software/firmware and/or related documentation ("MediaTek Software")
+# have been modified by MediaTek Inc. All revisions are subject to any receiver's
+# applicable license agreements with MediaTek Inc.
+
+
+LOCAL_PATH:= $(call my-dir)
+include $(CLEAR_VARS)
+
+LOCAL_JAVA_LIBRARIES := telephony-common
+
+LOCAL_JAVA_LIBRARIES += mediatek-framework
+
+LOCAL_MODULE_TAGS := optional
+
+LOCAL_SRC_FILES := $(call all-subdir-java-files) 
+
+LOCAL_PACKAGE_NAME := FactoryMode
+
+LOCAL_PRIVILEGED_MODULE := true
+
+LOCAL_CERTIFICATE := platform
+
+#LOCAL_JNI_SHARED_LIBRARIES := libfmjni
+
+include $(BUILD_PACKAGE)
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/AndroidManifest.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/AndroidManifest.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/AndroidManifest.xml	(revision 1055)
@@ -0,0 +1,252 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.mediatek.factorymode"
+    android:versionCode="1"
+    android:versionName="1.0" 
+    android:sharedUserId="android.uid.system">
+
+    <uses-sdk android:minSdkVersion="10"
+	      android:targetSdkVersion="23" />
+
+    <uses-permission android:name="android.permission.WRITE_SETTINGS" />
+    <uses-permission android:name="android.permission.READ_SETTINGS" />
+    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
+    <uses-permission android:name="android.permission.MOUNT_UNMOUNT_FILESYSTEMS" />
+    <uses-permission android:name="android.permission.CALL_PHONE" />
+    <uses-permission android:name="android.permission.CAMERA" />
+    <uses-permission android:name="android.permission.ACCESS_WIFI_STATE" />
+    <uses-permission android:name="android.permission.CHANGE_WIFI_STATE" />
+    <uses-permission android:name="android.permission.MODIFY_PHONE_STATE" />
+    <uses-permission android:name="android.permission.DIAGNOSTIC" />
+    <uses-permission android:name="android.permission.HARDWARE_TEST" />
+    <uses-permission android:name="android.permission.INTERNET" />
+    <uses-permission android:name="android.permission.ACCESS_BLUETOOTH_SHARE" />
+    <uses-permission android:name="android.permission.BLUETOOTH" />
+    <uses-permission android:name="android.permission.BLUETOOTH_ADMIN" />
+    <uses-permission android:name="android.permission.CHANGE_NETWORK_STATE" />
+    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
+    <uses-permission android:name="android.permission.ACCESS_MOCK_LOCATION" />
+    <uses-permission android:name="android.permission.UPDATE_DEVICE_STATS" />
+    <uses-permission android:name="android.permission.MODIFY_AUDIO_SETTINGS" />
+    <uses-permission android:name="android.permission.RESTART_PACKAGES" />
+    <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
+    <uses-permission android:name="android.permission.RECORD_AUDIO"/>
+    <uses-permission android:name="android.permission.VIBRATE"/>
+    <uses-permission android:name="android.permission.WRITE_SECURE_SETTINGS"/>
+    <uses-permission android:name="android.permission.READ_PHONE_STATE" />
+    <uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED"/>
+
+    <application
+        android:icon="@drawable/ic_launcher"
+        android:label="@string/app_name" >
+        <activity
+            android:name=".FactoryMode"
+            android:label="@string/app_name"
+            android:screenOrientation="portrait" >
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+            </intent-filter>
+        </activity>
+
+        <service android:name=".wifi.wifiStateListener" />
+        <service android:name=".BatteryLogService" />
+        <receiver
+            android:name=".FactoryModeReceiver">
+            <intent-filter>
+                <action android:name="android.intent.action.BOOT_COMPLETED" />
+            </intent-filter>
+            <intent-filter>
+                <action android:name="android.provider.Telephony.SECRET_CODE" />
+                <data android:scheme="android_secret_code" android:host="73" />
+            </intent-filter>
+        </receiver>
+        <activity
+            android:name=".AutoTest"
+            android:label="@string/AutoTest"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".AllTest"
+            android:label="@string/AllTest"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".headset.HeadSet"
+            android:label="@string/HeadSet"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".gps.GPS"
+            android:label="@string/GPS"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".gps.YGPS"
+            android:label="@string/GPS"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".vibratortest.Vibratortest"
+            android:label="@string/Vibrator"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".signal.Signal"
+            android:label="@string/Signal"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".BatteryLog"
+            android:label="@string/overall_unit_power_name"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".smtbattery.SMTBattery"
+            android:label="@string/smt_name"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".touchscreen.TouchScreenHandWriting"
+            android:label="@string/TouchScreen"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".touchscreen.PointTest"
+            android:label="@string/PointTest"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".touchscreen.BlockTest"
+            android:label="@string/LineTest"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".backlight.BackLight"
+            android:label="@string/BackLight"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".memory.Memory"
+            android:label="@string/Memory"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".micophone.MicRecorder"
+            android:label="@string/microphone_name"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".micophone.SubMicRecorder"
+            android:label="@string/submicrophone_name"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".audio.AudioTest"
+            android:label="@string/Audio"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".camera.CameraTest"
+            android:label="@string/Camera"
+            android:screenOrientation="portrait"
+            android:configChanges="keyboardHidden|orientation"
+            android:launchMode="singleInstance"
+           />
+        <activity
+            android:name=".camera.SubCamera"
+            android:label="@string/Camera"
+            android:configChanges="keyboardHidden|orientation"
+            android:screenOrientation="portrait"
+            android:stateNotNeeded="true"
+            android:launchMode="singleInstance" />
+        <activity
+            android:name=".Iris"
+            android:label="@string/iris"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".wifi.WiFiTest"
+            android:label="@string/WiFi"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".bluetooth.Bluetooth"
+            android:label="@string/Bluetooth"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".sensor.GSensor"
+            android:label="@string/GSensor"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".sensor.MSensor"
+            android:label="@string/MSensor"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".sensor.LSensor"
+            android:label="@string/LSensor"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".hall.Hall"
+            android:label="@string/Hall"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".sensor.LSensorCali"
+            android:label="@string/LSensorCali"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".sensor.PSensor"
+            android:label="@string/psensor_app_name"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".sensor.Gyro"
+            android:label="@string/gyro"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".earphone.Earphone"
+            android:label="@string/Earphone"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".Speaker"
+            android:label="@string/speaker_name"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".sdcard.SDCard"
+            android:label="@string/sdcard"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".KeyCode"
+            android:label="@string/KeyCode"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".lcd.LCD"
+            android:label="@string/LCD"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".simcard.SimCard"
+            android:label="@string/SimCard"
+            android:process="com.android.phone"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".fmradio.FMRadio"
+            android:label="@string/FMRadio"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".version.Version"
+            android:label="@string/version_info"
+            android:process="com.android.phone"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".rfcali.RFCali"
+            android:label="@string/rf_cali"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".Report"
+            android:label="@string/Report"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".led.Led"
+            android:label="@string/Led"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".flashlight.FlashLight"
+            android:label="@string/flashlight"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".sensor.OSensor"
+            android:label="@string/OSensor"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".finger.Finger"
+            android:label="@string/finger"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".nfc.Nfc"
+            android:label="@string/nfc_name"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".ChargeAlertDialog"
+            android:theme="@android:style/Theme.Dialog" />
+        </application>
+
+</manifest>
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/headset/HeadSet.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/headset/HeadSet.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/headset/HeadSet.java	(revision 1055)
@@ -0,0 +1,294 @@
+package com.mediatek.factorymode.headset;
+
+import java.io.File;
+import java.io.FileReader;
+import java.io.IOException;
+import java.util.Calendar;
+import java.util.Locale;
+
+import android.app.Activity;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.media.MediaPlayer;
+import android.media.MediaRecorder;
+import android.os.Bundle;
+import android.os.Environment;
+import android.text.format.DateFormat;
+import android.util.Log;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.WindowManager;
+import android.widget.Button;
+
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.R;
+import com.mediatek.factorymode.VUMeter;
+
+import android.os.Handler;
+import android.os.Message;
+
+public class HeadSet  extends Activity {
+
+	private Button succesButton ;
+	private Button failButton ;
+	private Button testheadbButton;
+	
+	private MediaRecorder mRecorder = null;
+	private MediaPlayer mPlayer = null;
+	private String  curPath = null ;
+	private VUMeter mVUMeter;
+	
+	private static final int TEST_IDLE = 0;
+	private static final int TEST_RECORDERING = 1;
+	private static final int TEST_PLAYYING =2;
+	private int curTestState = TEST_IDLE; 
+	
+	private static final String INTERNAL_MEMORY_DIR = "/storage/sdcard0/Music/";
+	private static final String TEST_FILE_NAME = "testingHeadSetRecorder.amr";
+	
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+		//getWindow().addFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		setContentView(R.layout.headset);
+		testheadbButton =(Button)this.findViewById(R.id.mic_bt_start);
+	
+		succesButton = (Button)this.findViewById(R.id.bt_ok);
+		failButton = (Button)this.findViewById(R.id.bt_failed);
+		mVUMeter = (VUMeter)this.findViewById(R.id.uvMeter);
+		mVUMeter.setVisibility(View.GONE);
+		succesButton.setEnabled(false);
+		succesButton.setOnClickListener(new Button.OnClickListener(){
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(HeadSet.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intent);
+				finish();
+			}
+		});
+		failButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(HeadSet.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_FAIL,intent);
+				finish();
+			}
+			
+		});
+		testheadbButton.setOnClickListener(new View.OnClickListener() {
+			@Override
+			public void onClick(View v) {	
+          if(curTestState == TEST_IDLE){
+						startRecorder();
+						testheadbButton.setClickable(false);
+						mHandler.sendEmptyMessageDelayed(TEST_IDLE , 1000);
+					}else if(curTestState == TEST_RECORDERING){
+						stopRecorder();
+						playRecordfile();
+						testheadbButton.setClickable(false);
+						mHandler.sendEmptyMessageDelayed(TEST_RECORDERING , 1000);
+					}else if(curTestState == TEST_PLAYYING) {
+						stopplay();
+						testheadbButton.setClickable(false);
+						mHandler.sendEmptyMessageDelayed(TEST_PLAYYING , 1000);
+					}
+			}
+		});
+		
+		if(getHeadsetState()== 0)
+		{
+			testheadbButton.setEnabled(false);
+			testheadbButton.setText(getString(R.string.HeadSet_tips));
+		}else {
+			testheadbButton.setEnabled(true);
+			testheadbButton.setText(getString(R.string.Mic_start));
+		}
+		IntentFilter filter = new IntentFilter(); 
+        filter.addAction(Intent.ACTION_TIME_TICK); 
+        filter.addAction(Intent.ACTION_HEADSET_PLUG); 
+        this.registerReceiver(mIntentReceiver, filter);
+	}
+	private static final String HEADSET_STATE_PATH = "/sys/class/switch/h2w/state";
+	public static int getHeadsetState() {
+        try {
+            FileReader file = new FileReader(HEADSET_STATE_PATH);
+            char[] buffer = new char[1024];
+            int len = file.read(buffer, 0, 1024);
+            int headsetState = Integer.valueOf((new String(buffer, 0, len)).trim());
+            Log.v("HeadSet", "---------------" + headsetState);
+            return headsetState;
+
+        } catch (Exception e) {
+            return 0;
+        }
+    }
+    
+    private Handler mHandler = new Handler(){
+    	@Override
+			public void handleMessage(Message msg) {
+				super.handleMessage(msg);
+				if (msg.what == TEST_IDLE) {
+             curTestState = TEST_RECORDERING;
+				}else if (msg.what == TEST_RECORDERING) {
+             curTestState = TEST_PLAYYING;
+				}else if (msg.what == TEST_PLAYYING) {
+             curTestState = TEST_IDLE;
+				}
+				testheadbButton.setClickable(true);
+			}
+		};
+		
+		public static boolean isFolderExists(String strFolder) {        
+		 File file = new File(strFolder);                
+		 if (!file.exists()) {            
+			 if (file.mkdirs()) {                                
+				 return true;            
+			 } else {                
+				 return false;            
+			}        
+		}
+		return true;
+	}
+		
+	void startRecorder(){
+		//File file = new File("/sdcard/"+ "YY"+ new DateFormat().format("yyyyMMdd_hhmmss",Calendar.getInstance(Locale.CHINA)) + ".amr");
+		String path = INTERNAL_MEMORY_DIR + TEST_FILE_NAME;
+		boolean bRet = isFolderExists(INTERNAL_MEMORY_DIR);
+		File file = new File(path);
+		if(file.exists()) {
+			file.delete();
+		}
+		
+		curPath = file.getPath();
+		Log.i("chenhu","curPath="+curPath);
+		mRecorder = new MediaRecorder();
+		mRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);
+		mRecorder.setOutputFormat(MediaRecorder.OutputFormat.DEFAULT);
+		mRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.DEFAULT);
+		mRecorder.setOutputFile(file.getAbsolutePath());
+		try {
+			file.createNewFile();
+			file.setReadable(true, false);
+			file.setWritable(true, false);
+			mRecorder.prepare();
+			mRecorder.start();
+		} catch (IllegalStateException e) {
+			e.printStackTrace();
+		} catch (IOException e) {
+			e.printStackTrace();
+		}
+		testheadbButton.setText(getString(R.string.Mic_stop));
+		mVUMeter.setRecorder(mRecorder);
+	}
+	private void stopRecorder(){
+		if (mRecorder != null) {
+			mRecorder.stop();
+			mRecorder.release();
+			mRecorder = null;
+		}
+	}
+	private void playRecordfile(){
+		mPlayer = new MediaPlayer();
+		mPlayer.reset();
+		try{
+			mPlayer.setDataSource(curPath);
+			mPlayer.prepare();
+			mPlayer.start();
+		} catch (IllegalStateException e) {
+			e.printStackTrace();
+		} catch (IOException e) {
+			e.printStackTrace();
+		}
+		testheadbButton.setText(getString(R.string.stopplayer));
+		succesButton.setEnabled(true);
+	}
+	private void stopplay(){
+		if (mPlayer != null) {
+			mPlayer.stop();
+			mPlayer.release();
+			mPlayer = null;
+			testheadbButton.setText(getString(R.string.Mic_start));
+		}
+	}
+	
+	@Override
+	public void onStop() {
+		if (mRecorder != null) {
+			mRecorder.stop();
+			mRecorder.release();
+			mRecorder = null;
+		}
+		
+		if (mPlayer != null) {
+			mPlayer.stop();
+			mPlayer.release();
+			mPlayer = null;
+		}
+		
+		File file = new File(INTERNAL_MEMORY_DIR + TEST_FILE_NAME);
+		if(file.exists()) {
+			file.delete();
+		}
+		
+		super.onStop();
+		
+	}
+	
+	@Override
+	protected void onDestroy() {
+		//getWindow().clearFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		super.onDestroy();
+	}
+	
+	private BroadcastReceiver mIntentReceiver = new BroadcastReceiver() {
+        @Override 
+        public void onReceive(Context context, Intent intent) {
+            String action = intent.getAction(); 
+            if (action.equals(Intent.ACTION_HEADSET_PLUG)) {
+               int curheatset = intent.getIntExtra("state", 0);
+               if(curheatset == 0) {
+                  /*if(curTestState == TEST_IDLE){
+                     startRecorder();
+                     testheadbButton.setClickable(false);
+                     mHandler.sendEmptyMessageDelayed(TEST_IDLE , 1000);
+                  }else if(curTestState == TEST_RECORDERING){
+                     stopRecorder();
+                     playRecordfile();
+                     testheadbButton.setClickable(false);
+                     mHandler.sendEmptyMessageDelayed(TEST_RECORDERING , 1000);
+                  }else if(curTestState == TEST_PLAYYING) {
+                     stopplay();
+                     testheadbButton.setClickable(false);
+                     mHandler.sendEmptyMessageDelayed(TEST_PLAYYING , 1000);
+                  }*/
+                  testheadbButton.setEnabled(false);
+                  testheadbButton.setText(getString(R.string.HeadSet_tips));
+               } else if(curheatset == 1) {
+                  testheadbButton.setEnabled(true);
+                  testheadbButton.setText(getString(R.string.Mic_start));
+               }
+            } 
+        }
+     }; 
+     
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(HeadSet.this, FactoryMode.class);
+			setResult(FactoryMode.TEST_CANCEL,intent);
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/ChargeAlertDialog.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/ChargeAlertDialog.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/ChargeAlertDialog.java	(revision 1055)
@@ -0,0 +1,44 @@
+package com.mediatek.factorymode;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.Window;
+import android.widget.TextView;
+
+public class ChargeAlertDialog extends Activity{
+  static Activity ChargeAlertDialog;
+  @Override
+  protected void onCreate(Bundle savedInstanceState) {
+    // TODO Auto-generated method stub
+    super.onCreate(savedInstanceState);
+    requestWindowFeature(Window.FEATURE_NO_TITLE);
+    setContentView(R.layout.chargealertdialog);
+    ChargeAlertDialog = this;
+    this.setFinishOnTouchOutside(false);
+  }
+  @Override
+  public boolean onKeyUp(int keyCode, KeyEvent event) {
+    switch (keyCode) {
+     case KeyEvent.KEYCODE_MENU:
+       return true;
+    
+     case KeyEvent.KEYCODE_APP_SWITCH:
+       return true;
+      
+     case KeyEvent.KEYCODE_BACK:
+       return true;
+    }
+    return super.onKeyUp(keyCode, event);
+  }
+  @Override
+  public boolean onKeyDown(int keyCode, KeyEvent event) {
+    switch (keyCode) {
+      case KeyEvent.KEYCODE_APP_SWITCH:
+      break;
+    }
+    return super.onKeyDown(keyCode, event);
+  }
+}
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/FactoryModeReceiver.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/FactoryModeReceiver.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/FactoryModeReceiver.java	(revision 1055)
@@ -0,0 +1,91 @@
+package com.mediatek.factorymode;
+
+import static com.android.internal.telephony.TelephonyIntents.SECRET_CODE_ACTION;
+
+import android.content.BroadcastReceiver;
+import android.content.ComponentName;
+import android.content.Context;
+import android.content.Intent;
+import android.net.Uri;
+import android.os.Environment;
+import android.os.storage.StorageManager;
+import android.util.Log;
+
+import android.app.ActivityManager;
+import android.app.Activity;
+import android.app.PendingIntent;
+import android.content.IntentFilter;
+import android.os.Binder;
+import android.os.StatFs;
+import android.os.SystemClock;
+import android.os.SystemProperties;
+import android.os.Handler;
+import android.os.Message;
+import android.telephony.TelephonyManager;
+import android.text.format.Time;
+
+import com.mediatek.storage.StorageManagerEx;
+
+import java.io.File;
+import java.io.FileDescriptor;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.PrintWriter;
+import java.io.BufferedReader;
+import java.io.BufferedWriter;
+import java.io.FileReader;
+import java.io.FileWriter;
+import java.io.FileNotFoundException;
+
+public class FactoryModeReceiver extends BroadcastReceiver {
+  private final static String TAG = "FactoryModeReceiver";
+  //private static StorageManager mStorageManagerHandle = null;
+  private Context mContext;
+  //private String mSDCard2;
+  Uri factoyUri = Uri.parse("android_secret_code://73");
+  
+  @Override
+  public void onReceive(Context context,Intent intent){
+  //mContext = context;
+  //String action = intent.getAction();
+  if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {
+    if("*#*#73#*#*".equals(readSDFile("/factorymode.txt"))){
+      Intent i = new Intent(Intent.ACTION_MAIN);
+      i.setComponent(new ComponentName("com.mediatek.factorymode", "com.mediatek.factorymode.FactoryMode"));
+      i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+      context.startActivity(i);
+      //Log.i(TAG, "external SD is mounted");
+      //Log.i(TAG, "mSDCard2 is" + mSDCard2);
+    }
+  }
+  if (intent.getAction().equals(SECRET_CODE_ACTION)) {
+    Uri uri = intent.getData();
+    if (uri.equals(factoyUri)) {
+      Intent i = new Intent(Intent.ACTION_MAIN);
+      i.setComponent(new ComponentName("com.mediatek.factorymode", "com.mediatek.factorymode.FactoryMode"));
+      i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+      context.startActivity(i);
+    }
+  }
+}
+
+  public String readSDFile(String filesname) {
+    String allpath=StorageManagerEx.getExternalStoragePath()+filesname;
+    StringBuffer sb = new StringBuffer();
+    File file = new File(allpath);
+    BufferedReader br = null;
+    try {
+      br = new BufferedReader(new FileReader(file));
+      String line = "";
+      while((line = br.readLine())!=null) {
+        sb.append(line);
+      }
+      br.close();
+    } catch (FileNotFoundException e) {
+      e.printStackTrace();
+    } catch (IOException e) {
+      e.printStackTrace();
+    }
+    return sb.toString();
+  }
+}
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/simcard/SimCard.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/simcard/SimCard.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/simcard/SimCard.java	(revision 1055)
@@ -0,0 +1,150 @@
+package com.mediatek.factorymode.simcard;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+import android.telephony.TelephonyManager;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.TextView;
+
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.R;
+//import com.mediatek.telephony.TelephonyManagerEx;
+import com.android.internal.telephony.ITelephony;
+import android.os.RemoteException;
+import android.util.Log;
+import com.android.internal.telephony.PhoneConstants;
+import android.os.ServiceManager;
+import com.mediatek.factorymode.FeatureOption;
+
+public class SimCard extends Activity{
+
+	public static final String TAG = "SimCard test"; 
+	private TextView sim1TextView ;
+	private TextView sim2TextView;
+	private Button successButton;
+	private Button failButton;
+	private boolean SPECSUPPORT = true;
+	private boolean simFlag_1 = false;
+	private boolean simFlag_2 = false;
+	private boolean simFlag_3 = false;
+	private TelephonyManager mTelephonyManager;
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+		//getWindow().addFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		setContentView(R.layout.simcard);
+		mTelephonyManager = (TelephonyManager)getSystemService(this.TELEPHONY_SERVICE);
+		//TelephonyManagerEx tm = TelephonyManagerEx.getDefault();
+		boolean Sim1Exist = false;
+		boolean Sim2Exist = false;
+
+		sim1TextView = (TextView)this.findViewById(R.id.simcard_sim1_info);
+		sim2TextView = (TextView)this.findViewById(R.id.simcard_sim2_info);
+		successButton = (Button)this.findViewById(R.id.simcard_bt_ok);
+		failButton = (Button)this.findViewById(R.id.simcard_bt_failed);
+		successButton.setEnabled(false);
+		
+		// ITelephony  iTelephony = ITelephony.Stub.asInterface(ServiceManager.getService("phone"));
+		if (FeatureOption.MTK_GEMINI_SUPPORT == true && SPECSUPPORT == false)
+		{
+			try{
+				Sim1Exist = (mTelephonyManager.getSimState(PhoneConstants.SIM_ID_1) != TelephonyManager.SIM_STATE_ABSENT);
+				Sim2Exist = (mTelephonyManager.getSimState(PhoneConstants.SIM_ID_2) != TelephonyManager.SIM_STATE_ABSENT);
+			}catch(Exception e){
+				Log.i(TAG, "RemoteException happens......");
+			}
+			
+			if(Sim1Exist)
+			{
+				sim1TextView.setText("sim1 exist");
+				simFlag_1 = true;
+	
+			}else
+			{
+				sim1TextView.setText("sim1 not exist");
+			}
+			
+			if(Sim2Exist)
+			{
+				sim2TextView.setText("sim2 exist");
+				simFlag_2 = true;
+	
+			}else
+			{
+				sim2TextView.setText("sim2 not exist");
+			}
+		} else {
+			try{
+				Sim1Exist = (mTelephonyManager.getSimState(PhoneConstants.SIM_ID_1) != TelephonyManager.SIM_STATE_ABSENT);
+			}catch(Exception e){
+				Log.i(TAG, "RemoteException happens......");
+			}
+			
+			if(Sim1Exist)
+			{
+				sim1TextView.setText("sim exist");
+				simFlag_3 = true;
+			}else
+			{
+				sim1TextView.setText("sim not exist");
+			}
+		}
+		// yaoming, 	If simcard is ok, jumps to next test, 20130426		
+		if((simFlag_1 == true && simFlag_2 == true) || simFlag_3 == true){
+			successButton.setEnabled(true);
+			Intent intent = new Intent(SimCard.this, FactoryMode.class);
+			setResult(FactoryMode.TEST_OK,intent);
+			finish();
+			}
+		
+		
+		successButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(SimCard.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intent);
+				finish();
+			}
+			
+		});
+		failButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(SimCard.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_FAIL,intent);
+				finish();
+			}
+			
+		});
+	}
+
+	@Override
+	protected void onDestroy() {
+		//getWindow().clearFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		super.onDestroy();
+	}
+
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(SimCard.this, FactoryMode.class);
+			setResult(FactoryMode.TEST_CANCEL,intent);
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/touchscreen/PointTest.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/touchscreen/PointTest.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/touchscreen/PointTest.java	(revision 1055)
@@ -0,0 +1,5 @@
+package com.mediatek.factorymode.touchscreen;
+
+public class PointTest {
+
+}
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/touchscreen/BlockTest.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/touchscreen/BlockTest.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/touchscreen/BlockTest.java	(revision 1055)
@@ -0,0 +1,618 @@
+package com.mediatek.factorymode.touchscreen;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Paint;
+import android.graphics.Path;
+import android.graphics.Point;
+import android.graphics.RectF;
+import android.graphics.Region;
+import android.os.Bundle;
+import android.util.Log;
+import android.view.KeyEvent;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.Toast;
+import android.view.VelocityTracker;
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.R;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+
+public class BlockTest extends Activity {
+	
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		super.onCreate(savedInstanceState);
+		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
+		getWindow().requestFeature(Window.FEATURE_NO_TITLE);
+		getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_IMMERSIVE_GESTURE_ISOLATED);
+		BlockView bv = new BlockView(this,getWindowManager().getDefaultDisplay().getHeight(),getWindowManager().getDefaultDisplay().getWidth());
+		setContentView(bv);
+	}
+	
+	private void successGoBack(){
+		Intent intent = new Intent(BlockTest.this, FactoryMode.class);
+		setResult(FactoryMode.TEST_OK,intent);
+		finish();
+	}
+	public class BlockView extends View {
+		private static final String TAG = "BlockView";
+		private List<Quadrangle> crossLayout = new ArrayList<Quadrangle>();
+		private List<List<Quadrangle>> cellLayout = new ArrayList<List<Quadrangle>>();
+		static final float MAX_VELOCITY = 8;
+		private int crossLine = 22;
+		private int crossVeticalLine = 9;
+		private int cellLine = 17;
+		private int cellVeticalLine = 9;
+		private int screenHeight;
+		private int screenWidth;
+		private Point crossLeftLineLTPoint = new Point();
+		private Point crossLeftLineRTPoint = new Point();
+		private Point crossLeftLineLBPoint = new Point();
+		private Point crossLeftLineRBPoint = new Point();
+		private Path leftLine = new Path();
+		private Point crossRightLineLTPoint = new Point();
+		private Point crossRightLineRTPoint = new Point();
+		private Point crossRightLineLBPoint = new Point();
+		private Point crossRightLineRBPoint = new Point();
+		private Path rightLine = new Path();
+		private Paint redPaint = new Paint();
+		private Paint whitePaint = new Paint();
+		private Paint bluePaint = new Paint();
+		private Paint greenPaint = new Paint();
+		private Toast mToast;
+		private VelocityTracker vt;
+		/**
+			* @param context
+		*/
+		public BlockView(Context context, int screenHeight, int screenWidth){
+			super(context);
+			this.screenHeight = screenHeight;
+			this.screenWidth = screenWidth;
+			Log.d(TAG, "screenHeight:" + screenHeight + ",screenWidth:" + screenWidth);
+			initData();
+			initPaint();
+		}
+		
+		private void initPaint(){
+			// 边线画笔
+			redPaint.setAntiAlias(true);
+			redPaint.setColor(Color.RED);
+			redPaint.setStrokeWidth(1);
+			redPaint.setStyle(Paint.Style.STROKE);
+			// 白色填充画笔
+			whitePaint.setAntiAlias(true);
+			whitePaint.setColor(Color.WHITE);
+			whitePaint.setStyle(Paint.Style.FILL_AND_STROKE);
+			// 绿色点画笔
+			bluePaint.setAntiAlias(true);
+			bluePaint.setStrokeWidth(3);
+			bluePaint.setColor(Color.BLUE);
+			bluePaint.setStyle(Paint.Style.STROKE);
+			// 绿色轨迹画笔
+			greenPaint.setAntiAlias(true);
+			greenPaint.setColor(Color.GREEN);
+			greenPaint.setStyle(Paint.Style.STROKE);
+		}
+		
+		private void initData(){
+			int crossCellWidth = screenWidth / crossVeticalLine;
+			int crossCellHeight = screenHeight / crossLine;
+			// 左斜线的顶部 左边点和右边点
+			crossLeftLineLTPoint.x = 0;
+			crossLeftLineLTPoint.y = crossCellHeight;
+			crossLeftLineRTPoint.x = crossCellWidth / 2;
+			crossLeftLineRTPoint.y = 0;
+			// 左斜线的底部 左边点和右边点
+			crossLeftLineLBPoint.x = screenWidth - crossCellWidth / 2;
+			crossLeftLineLBPoint.y = screenHeight;
+			crossLeftLineRBPoint.x = screenWidth;
+			crossLeftLineRBPoint.y = screenHeight - crossCellHeight;
+			// 左斜线
+			leftLine.moveTo(crossLeftLineLTPoint.x, crossLeftLineLTPoint.y);
+			leftLine.lineTo(0, 0);
+			leftLine.lineTo(crossLeftLineRTPoint.x, crossLeftLineRTPoint.y);
+			leftLine.lineTo(crossLeftLineRBPoint.x, crossLeftLineRBPoint.y);
+			leftLine.lineTo(screenWidth, screenHeight);
+			leftLine.lineTo(crossLeftLineLBPoint.x, crossLeftLineLBPoint.y);
+			leftLine.lineTo(crossLeftLineLTPoint.x, crossLeftLineLTPoint.y);
+			
+			// 右斜线的顶部 左边点和右边点
+			crossRightLineLTPoint.x = screenWidth - crossCellWidth / 2;
+			crossRightLineLTPoint.y = 0;
+			crossRightLineRTPoint.x = screenWidth;
+			crossRightLineRTPoint.y = crossCellHeight;
+			// 右斜线的顶部 左边点和右边点
+			crossRightLineLBPoint.x = 0;
+			crossRightLineLBPoint.y = screenHeight - crossCellHeight;
+			crossRightLineRBPoint.x = crossCellWidth / 2;
+			crossRightLineRBPoint.y = screenHeight;
+			
+			// 右斜线
+			rightLine.moveTo(crossRightLineLTPoint.x, crossRightLineLTPoint.y);
+			rightLine.lineTo(screenWidth, 0);
+			rightLine.lineTo(crossRightLineRTPoint.x, crossRightLineRTPoint.y);
+			rightLine.lineTo(crossRightLineRBPoint.x, crossRightLineRBPoint.y);
+			rightLine.lineTo(0, screenHeight);
+			rightLine.lineTo(crossRightLineLBPoint.x, crossRightLineLBPoint.y);
+			rightLine.lineTo(crossRightLineLTPoint.x, crossRightLineLTPoint.y);
+			getCrossLayoutNodePoint(crossCellHeight);
+		}
+		
+		@Override
+		protected void onDraw(Canvas canvas) {
+			canvas.drawARGB(255, 0, 0, 0);
+			if (cellIsShow) {
+				int size = cellLayout.size();
+				for (int i = 0; i < size; i++) {
+					List<Quadrangle> line = cellLayout.get(i);
+					for (int j = 0; j < line.size(); j++) {
+						if (checkCellIsRemoved(i, j)) {
+							continue;
+						}
+						Quadrangle q = line.get(j);
+						p.reset();
+						p.moveTo(q.left_top.x, q.left_top.y);
+						p.lineTo(q.top_right.x, q.top_right.y);
+						p.lineTo(q.right_bottom.x, q.right_bottom.y);
+						p.lineTo(q.bottom_left.x, q.bottom_left.y);
+						p.close();
+						canvas.drawPath(p, whitePaint);
+						canvas.drawPath(p, redPaint);
+					}
+				}
+			} else {
+				int size = crossLayout.size();
+				for (int i = 0; i < size; i++){
+					if (checkQuadIsRemoved(i)){
+						continue;
+					}
+					Quadrangle q = crossLayout.get(i);
+					p.reset();
+					p.moveTo(q.left_top.x, q.left_top.y);
+					p.lineTo(q.top_right.x, q.top_right.y);
+					p.lineTo(q.right_bottom.x, q.right_bottom.y);
+					p.lineTo(q.bottom_left.x, q.bottom_left.y);
+					p.close();
+					canvas.drawPath(p, whitePaint);
+					canvas.drawPath(p, redPaint);
+				}
+			}
+			int touchLastX = 0;
+			int touchLastY = 0;
+			
+			Iterator<Integer> keys = touchPoints.keySet().iterator();
+			while (keys.hasNext()) {
+				List<Point> list = touchPoints.get(keys.next());
+				int touchSize = list.size();
+				for (int i = 0; i < touchSize; i++) {
+					trackPoint = list.get(i);
+					if (i == 0) {
+						canvas.drawPoint(trackPoint.x, trackPoint.y, greenPaint);
+					} else { 
+						canvas.drawLine(touchLastX, touchLastY, trackPoint.x, trackPoint.y, greenPaint);
+					}
+					canvas.drawPoint(trackPoint.x,trackPoint.y,bluePaint);
+					touchLastX = trackPoint.x;
+					touchLastY = trackPoint.y;
+				}
+			}
+		}
+		
+		private void toNextTest() {
+			touchPoints.clear();
+			int cellHeight = screenHeight / cellLine;
+			int cellWidth = screenWidth / cellVeticalLine;
+			getCellLayoutNodePoint(cellWidth, cellHeight);
+			cellIsShow = true;
+			invalidate();
+		}
+		boolean eliminateMode = false;
+		boolean cellIsShow = false;
+		Map<Integer, List<Point>> touchPoints = new HashMap<Integer, List<Point>>();
+		
+		@Override
+		public boolean onTouchEvent(MotionEvent event) {
+			int x = (int) event.getX();
+			int y = (int) event.getY();
+			int action = event.getAction();
+			switch (action) {
+				case MotionEvent.ACTION_DOWN:
+					eliminateMode = true;
+					if (cellIsShow) {
+						checkPointInCell(x, y);
+					} else {
+						checkPointInQuad(x, y);
+					}
+					List<Point> newPoints = new ArrayList<Point>();
+					int key = touchPoints.size();
+					touchPoints.put(key, newPoints);
+					newPoints.add(new Point(x, y));
+					vt = VelocityTracker.obtain();
+					vt.addMovement(event);
+					invalidate();
+					break;
+					
+				case MotionEvent.ACTION_MOVE:
+					vt.addMovement(event);
+					vt.computeCurrentVelocity(10);
+					int xVe = (int) vt.getXVelocity();
+					int yVe = (int) vt.getYVelocity();
+					if(xVe>MAX_VELOCITY||yVe>MAX_VELOCITY){
+						if(mToast!=null){
+							mToast.cancel();
+						}
+					mToast = Toast.makeText(getContext(), "蓝色点为TP返回点，滑动太快可能会无法消除方块。", Toast.LENGTH_SHORT);
+					mToast.show();
+					}
+					if (cellIsShow) {
+						checkPointInCell(x, y);
+					} else {
+						checkPointInQuad(x, y);
+					}
+					touchPoints.get(touchPoints.size() - 1).add(new Point(x, y));
+					invalidate();
+					break;
+					
+				case MotionEvent.ACTION_UP:
+				case MotionEvent.ACTION_CANCEL:
+					eliminateMode = false;
+					touchPoints.get(touchPoints.size() - 1).add(new Point(x, y));
+					invalidate();
+					if (!cellIsShow) {
+						if (touchedQuad.size() == crossLayout.size()) {
+							toNextTest();
+						}
+					} else {
+						if(checkCellRemovedOver()){
+							successGoBack();
+						}
+					}
+					logOutData();
+					vt.addMovement(event);
+					vt.computeCurrentVelocity(10);
+					int xVe2 = (int) vt.getXVelocity();
+					int yVe2 = (int) vt.getYVelocity();
+					if(xVe2>MAX_VELOCITY||yVe2>MAX_VELOCITY){
+						if(mToast!=null){
+							mToast.cancel();
+						}
+						mToast = Toast.makeText(getContext(), "蓝色点为TP返回点，滑动太快可能会无法消除方块。", Toast.LENGTH_SHORT);
+						mToast.show();
+					}
+					break;
+					
+				default:
+					break;
+			}
+			return true;
+		}
+		
+		private boolean checkCellRemovedOver(){
+			int touchedCellSize = touchedCell.size();
+			int cellSize=0;
+			for (int i = 0; i < cellLayout.size(); i++) {
+				cellSize+=cellLayout.get(i).size();
+			}
+			if(touchedCellSize==cellSize){
+				return true;
+			}
+			return false;
+		}
+		
+		Path p = new Path();
+		Region pRe = new Region();
+		RectF pBounds = new RectF();
+		Region standRe = new Region();
+		Point trackPoint = new Point();
+		List<Integer> touchedQuad = new ArrayList<Integer>();
+		List<Cell> touchedCell = new ArrayList<Cell>();
+		
+		private boolean checkQuadIsRemoved(int position) {
+			for (int i = 0; i < touchedQuad.size(); i++) {
+				if (position == touchedQuad.get(i)) {
+					return true;
+				}
+			}
+			return false;
+		}
+		
+		private boolean checkCellIsRemoved(int i, int j) {
+			for (int h = 0; h < touchedCell.size(); h++) {
+				Cell c = touchedCell.get(h);
+				if (c.i == i && c.j == j) {
+					return true;
+				}
+			}
+			return false;
+		}
+		
+		private void checkPointInQuad(int x, int y) {
+			int size = crossLayout.size() / 2;
+			for (int i = 0; i < size; i++) {
+				Quadrangle lq = crossLayout.get(i);
+				if (y < lq.bottom_left.y) {
+					Quadrangle rq = crossLayout.get(size + i);
+					if (!checkIsExitInMovedQuad(i)) {
+						if (checkPointInGiveRegion(x, y, lq.left_top, lq.top_right, lq.right_bottom, lq.bottom_left)) {
+							addPositionForQuad(i);
+						}
+					}
+					if (!checkIsExitInMovedQuad(size + i)) {
+						if (checkPointInGiveRegion(x, y, rq.left_top, rq.top_right, rq.right_bottom, rq.bottom_left)) {
+							addPositionForQuad(size + i);
+						}
+					}
+					return;
+				}
+			}
+		}
+		
+		private void addPositionForQuad(int position) {
+			for (int i = 0; i < touchedQuad.size(); i++) {
+				if (position == touchedQuad.get(i)) {
+					return;
+				}
+			}
+			touchedQuad.add(position);
+		}
+		
+		private void checkPointInCell(int x, int y) {
+			int size = cellLayout.size();
+			for (int i = 0; i < size; i++) {
+				if (y < cellLayout.get(i).get(0).bottom_left.y) {
+					List<Quadrangle> yContainList = cellLayout.get(i);
+					for (int j = 0; j < yContainList.size(); j++) {
+						if (isExitInMovedCell(i, j)) {
+							continue;
+						}
+						Quadrangle q = yContainList.get(j);
+						if (checkPointInGiveRegion(x, y, q.left_top, q.top_right, q.right_bottom, q.bottom_left)) {
+							addTouchedCell(i, j);
+						}
+					}
+					return;
+				}
+			}
+		}
+		
+		private boolean isExitInMovedCell(int i, int j) {
+			for (int h = 0; h < touchedCell.size(); h++) {
+				Cell c = touchedCell.get(h);
+				if (c.i == i && c.j == j) {
+					return true;
+				}
+			}
+			return false;
+		}
+		
+		private void addTouchedCell(int i,int j){
+			for (int h = 0; h < touchedCell.size(); h++) {
+				if(touchedCell.get(h).i==i&&touchedCell.get(h).j==j){
+					return ;
+				}
+			}
+			touchedCell.add(new Cell(i, j));
+		}
+		
+		private boolean checkPointInGiveRegion(int x, int y, Point tl, Point tr, Point br, Point bl) {
+			p.reset();
+			p.moveTo(tl.x, tl.y);
+			p.lineTo(tr.x, tr.y);
+			p.lineTo(br.x, br.y);
+			p.lineTo(bl.x, bl.y);
+			p.close();
+			pBounds.setEmpty();
+			p.computeBounds(pBounds, true);
+			pRe.setEmpty();
+			standRe.setEmpty();
+			standRe.set((int) pBounds.left, (int) pBounds.top, (int) pBounds.right, (int) pBounds.bottom);
+			pRe.setPath(p, standRe);
+			return pRe.contains(x, y);
+		}
+		
+		private boolean checkIsExitInMovedQuad(int position) {
+			for (int i = 0; i < touchedQuad.size(); i++) {
+				if (position == touchedQuad.get(i)) {
+					return true;
+				}
+			}
+			return false;
+		}
+		
+		private void getCellLayoutNodePoint(int cellWidth, int cellHeight) {
+			List<Point> nodeTList = new ArrayList<Point>();
+			List<Point> nodeBList = new ArrayList<Point>();
+			for (int i = 0; i <= cellLine; i++) {
+				for (int j = 0; j <= cellVeticalLine; j++) {
+					Point p = new Point(cellWidth * j, cellHeight * i);
+					if (i == 0) {
+						nodeTList.add(p);
+					} else {
+						nodeBList.add(p);
+					}
+				}
+				if (i > 0) {
+					List<Quadrangle> list = new ArrayList<Quadrangle>();
+					for (int j = 0; j < (nodeBList.size() - 1); j++) {
+						if (i == 2 || i == 3 || i == 4 || i == 6 || i == 7 || i == 8 || i == 10 || i == 11 || i == 12 || i == 14 || i == 15 || i == 16) {
+							if(j==1||j==3||j==5||j==7){
+								continue;
+							}
+						}
+						Quadrangle q = new Quadrangle();
+						q.left_top = nodeTList.get(j);
+						q.top_right = nodeTList.get(j + 1);
+						q.right_bottom = nodeBList.get(j + 1);
+						q.bottom_left = nodeBList.get(j);
+						list.add(q);
+					}
+					for (int j = 0; j < nodeBList.size(); j++) {
+						nodeTList.set(j, nodeBList.get(j));
+					}
+					nodeBList.clear();
+					cellLayout.add(list);
+				}
+			}
+		}
+		
+		private void getCrossLayoutNodePoint(int cellHeight) {
+			int mHeight = 0;
+			Point[] listP = new Point[4];
+			for (int i = 0; i <= crossLine; i++) {
+				// 左斜线 交点
+				if (i != 0 && i != 2 && i != 22 && i != 21) {
+					mHeight += cellHeight + 1;
+				} else if (i != 0) {
+					mHeight += cellHeight;
+				}
+				Point leftLeftLinePoint = calcLineNode(mHeight, crossLeftLineLTPoint.x, crossLeftLineLTPoint.y, crossLeftLineLBPoint.x, crossLeftLineLBPoint.y);
+				fixOutOfBoundPoint(leftLeftLinePoint);
+				Point rightLeftLinePoint = calcLineNode(mHeight, crossLeftLineRTPoint.x, crossLeftLineRTPoint.y, crossLeftLineRBPoint.x, crossLeftLineRBPoint.y);
+				fixOutOfBoundPoint(rightLeftLinePoint);
+				if (i == 0) {
+					listP[0] = leftLeftLinePoint;
+					listP[1] = rightLeftLinePoint;
+				} else if (i == 1) {
+					listP[2] = leftLeftLinePoint;
+					listP[3] = rightLeftLinePoint;
+					Quadrangle leftQ = new Quadrangle();
+					leftQ.left_top = listP[0];
+					leftQ.top_right = listP[1];
+					leftQ.right_bottom = listP[3];
+					leftQ.bottom_left = listP[2];
+					crossLayout.add(leftQ);
+				} else {
+					listP[0] = listP[2];
+					listP[1] = listP[3];
+					listP[2] = leftLeftLinePoint;
+					listP[3] = rightLeftLinePoint;
+					Quadrangle leftQ = new Quadrangle();
+					leftQ.left_top = listP[0];
+					leftQ.top_right = listP[1];
+					leftQ.right_bottom = listP[3];
+					leftQ.bottom_left = listP[2];
+					crossLayout.add(leftQ);
+				}
+			}
+			mHeight = 0;
+			for (int i = 0; i <= crossLine; i++) {
+				// 右斜线交点
+				if (i != 0 && i != 2 && i != 22 && i != 21) {
+					mHeight += cellHeight + 1;
+				} else if (i != 0) {
+					mHeight += cellHeight;
+				}
+				Point leftRightLinePoint = calcLineNode(mHeight, crossRightLineLTPoint.x, crossRightLineLTPoint.y, crossRightLineLBPoint.x, crossRightLineLBPoint.y);
+				fixOutOfBoundPoint(leftRightLinePoint);
+				Point rightRightLinePoint = calcLineNode(mHeight, crossRightLineRTPoint.x, crossRightLineRTPoint.y, crossRightLineRBPoint.x, crossRightLineRBPoint.y);
+				fixOutOfBoundPoint(rightRightLinePoint);
+				if (i == 0) {
+					listP[0] = leftRightLinePoint;
+					listP[1] = rightRightLinePoint;
+				} else if (i == 1) {
+					listP[2] = leftRightLinePoint;
+					listP[3] = rightRightLinePoint;
+					Quadrangle rightQ = new Quadrangle();
+					rightQ.left_top = listP[0];
+					rightQ.top_right = listP[1];
+					rightQ.right_bottom = listP[3];
+					rightQ.bottom_left = listP[2];
+					crossLayout.add(rightQ);
+				} else {
+					listP[0] = listP[2];
+					listP[1] = listP[3];
+					listP[2] = leftRightLinePoint;
+					listP[3] = rightRightLinePoint;
+					Quadrangle rightQ = new Quadrangle();
+					rightQ.left_top = listP[0];
+					rightQ.top_right = listP[1];
+					rightQ.right_bottom = listP[3];
+					rightQ.bottom_left = listP[2];
+					crossLayout.add(rightQ);
+				}
+			}
+		}
+		
+		private void fixOutOfBoundPoint(Point p) {
+			if (p.x < 0) {
+				p.x = 0;
+			}
+			if (p.x > screenWidth) {
+				p.x = screenWidth;
+			}
+		}
+		
+		private Point calcLineNode(int height, int x1, int y1, int x2, int y2) {
+			Point node = new Point();
+			node.y = height;
+			node.x = ((x2 - x1) * (height - y1) + (y2 - y1) * x1) / (y2 - y1);
+			int k = (y2 - y1) / (x2 - x1);
+			int b = y1 - k * x1;
+			return node;
+		}
+		
+		public class Quadrangle {
+			public Point left_top;
+			public Point top_right;
+			public Point right_bottom;
+			public Point bottom_left;
+			
+			@Override
+			public String toString() {
+				return "(" + left_top + "," + top_right + "," + right_bottom + "," + bottom_left+")";
+			}
+		}
+		
+		public class Cell {
+			public int i;
+			public int j;
+			public Cell(int i, int j) {
+				this.i = i;
+				this.j = j;
+			}
+			
+			@Override
+			public String toString() {
+				return "("+i+","+j+")";
+			}
+		}
+		
+		private void logOutData(){
+			for (int i = 0; i < touchPoints.size(); i++) {
+				Log.d(TAG, "i:"+i+"--->point:"+touchPoints.get(i));
+			}
+			for (int i = 0; i < touchedCell.size(); i++) {
+				Log.d(TAG, "i:"+i+"--->touchedCell:"+touchedCell.get(i));
+			}
+			for (int i = 0; i < touchedQuad.size(); i++) {
+				Log.d(TAG, "i:"+i+"--->touchedQuad:"+touchedQuad.get(i));
+			}
+		}
+	}
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(BlockTest.this, FactoryMode.class);
+			setResult(FactoryMode.TEST_CANCEL,intent);
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/touchscreen/TouchScreenHandWriting.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/touchscreen/TouchScreenHandWriting.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/touchscreen/TouchScreenHandWriting.java	(revision 1055)
@@ -0,0 +1,60 @@
+package com.mediatek.factorymode.touchscreen;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.graphics.Color;
+import android.os.Bundle;
+import android.view.View;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.Button;
+
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.KeyCode;
+import com.mediatek.factorymode.TouchView;
+import com.mediatek.factorymode.R;
+
+public class TouchScreenHandWriting extends Activity {
+	
+	private String TAG = "TouchScreenHandWriting";
+	private TouchView myview = null;
+	private Button successButton = null;
+	private Button failButton = null;
+	
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		super.onCreate(savedInstanceState);
+		// setContentView(new MyView(this));
+
+		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
+				WindowManager.LayoutParams.FLAG_FULLSCREEN);
+	    //setContentView(myview = new TouchView(this));
+		setContentView(R.layout.touchscreen_handwriting);
+		myview = (TouchView)this.findViewById(R.id.toucheview);
+		successButton =(Button)this.findViewById(R.id.touchscreen_bt_ok);
+		failButton =(Button)this.findViewById(R.id.touchscreen_bt_failed);
+
+		successButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(TouchScreenHandWriting.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intent);
+				finish();
+			}
+			
+		});
+		failButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(TouchScreenHandWriting.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_FAIL,intent);
+				finish();
+			}
+			
+		});
+	}
+}
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/touchscreen/LineTest.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/touchscreen/LineTest.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/touchscreen/LineTest.java	(revision 1055)
@@ -0,0 +1,423 @@
+package com.mediatek.factorymode.touchscreen;
+
+
+import java.util.ArrayList;
+import java.util.Timer;
+import java.util.TimerTask;
+
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.R;
+
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Paint;
+import android.os.Bundle;
+import android.util.Log;
+import android.view.KeyEvent;
+import android.view.VelocityTracker;
+import android.view.View;
+import android.view.ViewGroup.LayoutParams;
+import android.view.MotionEvent;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.AbsoluteLayout;
+import android.widget.Button;
+import android.widget.RelativeLayout;
+import android.widget.Toast;
+
+public class LineTest extends Activity {
+	static final String TAG = "LineTest";
+	
+	static final int EDGE_GAP = 150;
+	static final int BLOCK_WIDTH = 180;
+	static final int RADIUS_2 = (EDGE_GAP)* (EDGE_GAP);
+	static final float MAX_VELOCITY = 80;
+	
+	static final int LEFT_TOP    = 0;
+	static final int RIGHT_TOP   = 1;
+	static final int RIGHT_BOTTOM = 2;
+	static final int LEFT_BOTTOM = 3;
+	
+	private View mLineView;
+	static int mStartPoint = -1;
+	static float mLine_K;
+	
+	private boolean[] state_referenceLine = {false, false};
+	
+	private ArrayList<PT> mPoints = new ArrayList<PT>();
+	private Paint mPaint;
+	private Paint mCornerPaint;
+	private Paint mTargetPaint;
+	private int mScreenWidth;
+	private int mScreenHeigh;
+	private float mGradient;
+	private float mPoint2Line;
+	
+	private Toast mToast;
+	
+	private VelocityTracker mVelocity;
+
+	
+	@Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        this.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
+        requestWindowFeature(Window.FEATURE_NO_TITLE); 
+        //getWindow().addFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+      	setContentView(R.layout.touchscreen_line);
+      	
+      	mLineView = new LineView(this);
+      	RelativeLayout.LayoutParams param  = new RelativeLayout.LayoutParams(
+                LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);
+      	addContentView(mLineView, param);
+      	
+      	initView();
+    }
+	
+	private void initView() {
+		WindowManager dpy = (WindowManager)getSystemService(Context.WINDOW_SERVICE);
+        mScreenWidth = dpy.getDefaultDisplay().getWidth();
+        mScreenHeigh = dpy.getDefaultDisplay().getHeight();
+        mGradient = (float)mScreenHeigh / mScreenWidth;
+        Log.v(TAG, "initView: mGradient = " + mGradient);
+        
+        mPoint2Line = (float) (EDGE_GAP / Math.sqrt(1 + mGradient * mGradient));
+        Log.v(TAG, "initView: mPoint2Line = " + mPoint2Line);
+        
+        mLine_K = (float) Math.sqrt(mGradient * mGradient + 1);
+		
+		mPaint = new Paint();
+		mPaint.setAntiAlias(true);
+		
+		mCornerPaint = new Paint();
+		mCornerPaint.setAntiAlias(true);
+		mCornerPaint.setColor(Color.YELLOW);
+		mCornerPaint.setStyle(Paint.Style.STROKE);
+		mCornerPaint.setStrokeWidth(3);
+		
+		mTargetPaint = new Paint();
+		mTargetPaint.setAntiAlias(true);
+		mTargetPaint.setColor(Color.GREEN);
+		mTargetPaint.setStyle(Paint.Style.STROKE);
+		mTargetPaint.setStrokeWidth(1);
+		
+		mToast = Toast.makeText(this, getString(R.string.tp_line_hint), Toast.LENGTH_LONG);
+		mToast.show();
+	}
+    
+	@Override
+	protected void onDestroy() {
+		//getWindow().clearFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		super.onDestroy();
+	}
+	
+    private void goback(int flag) {
+		// TODO Auto-generated method stub
+		Intent intent=new Intent();  
+	    intent.setClass(LineTest.this, FactoryMode.class);  
+	    setResult(flag,intent);
+	    finish();
+	}
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			if(FactoryMode.isAutoTest) {
+				FactoryMode.currenttestitem = FactoryMode.currenttestitem - 2;
+				if(FactoryMode.currenttestitem < -1) {
+					FactoryMode.currenttestitem = -1;
+				}
+				Intent intent = new Intent(LineTest.this, FactoryMode.class);
+				setResult(RESULT_CANCELED,intent);
+				finish();
+			}
+			
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			if(FactoryMode.isAutoTest) {
+				FactoryMode.isAutoTest = false;
+				Intent intent = new Intent(LineTest.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_FAIL,intent);
+				finish();
+				return true;
+			}
+		}
+		return super.onKeyUp(keyCode, event);
+    }
+    
+    public class LineView extends View {
+
+		public LineView(Context context) {
+			super(context);
+		}
+    	
+		@Override
+		protected void onDraw(Canvas canvas) {
+			/* Draw diagonal line */
+			if(state_referenceLine[0]) {
+				mPaint.setColor(Color.GREEN);
+				mPaint.setStyle(Paint.Style.FILL_AND_STROKE);
+				mPaint.setStrokeWidth(BLOCK_WIDTH);
+				canvas.drawLine(0, 0, mScreenWidth, mScreenHeigh, mPaint);
+			} else {
+				mPaint.setColor(Color.RED);
+				mPaint.setStyle(Paint.Style.STROKE);
+				mPaint.setStrokeWidth(3);
+				canvas.drawLine(0, EDGE_GAP, mScreenWidth - EDGE_GAP, mScreenHeigh, mPaint);
+				canvas.drawLine(EDGE_GAP, 0, mScreenWidth, mScreenHeigh - EDGE_GAP, mPaint);
+			}
+			
+			if(state_referenceLine[1]) {
+				mPaint.setColor(Color.GREEN);
+				mPaint.setStyle(Paint.Style.FILL_AND_STROKE);
+				mPaint.setStrokeWidth(BLOCK_WIDTH);
+				canvas.drawLine(0, mScreenHeigh, mScreenWidth, 0, mPaint);
+			} else {
+				mPaint.setColor(Color.RED);
+				mPaint.setStyle(Paint.Style.STROKE);
+				mPaint.setStrokeWidth(3);
+				canvas.drawLine(0, mScreenHeigh - EDGE_GAP, mScreenWidth - EDGE_GAP, 0, mPaint);
+				canvas.drawLine(EDGE_GAP, mScreenHeigh, mScreenWidth, EDGE_GAP, mPaint);
+			}
+			
+			/* Draw circle */
+			if(!state_referenceLine[0]) {
+				canvas.drawCircle(0, 0, EDGE_GAP, mCornerPaint);
+				canvas.drawCircle(mScreenWidth, mScreenHeigh, EDGE_GAP , mCornerPaint);
+			}
+			
+			if(!state_referenceLine[1]) {
+				canvas.drawCircle(mScreenWidth, 0, EDGE_GAP, mCornerPaint);
+				canvas.drawCircle(0, mScreenHeigh, EDGE_GAP, mCornerPaint);
+			}
+			
+			if(mPoints != null && mPoints.size() > 0) {
+				int size = mPoints.size();
+				float lastX = 0, lastY = 0;
+				
+				for(int i = 0; i < size; i++) {
+					PT n = mPoints.get(i);
+					
+					if(i > 0) {
+						canvas.drawLine(lastX, lastY, n.x, n.y, mTargetPaint);
+						canvas.drawPoint(lastX, lastY, mTargetPaint);
+					}
+					
+					lastX = n.x;
+					lastY = n.y;
+				}
+			}
+		}
+		
+		public boolean onTouchEvent(MotionEvent event) {
+			float x = event.getX();
+			float y = event.getY();
+			
+			switch(event.getAction()) {
+			case MotionEvent.ACTION_DOWN:
+				if(mToast != null) {
+					mToast.cancel();
+				}
+
+				if(checkStartPoint(x, y)) {
+					clear();
+					mVelocity = VelocityTracker.obtain();
+					if(mPoints != null) {
+						mPoints.add(new PT(x, y));
+					}
+					invalidate();
+				}
+				break;
+				
+			case MotionEvent.ACTION_MOVE:
+				if((mStartPoint != -1) && (isOnLine1(x, y) || isOnLine2(x, y))) {
+					mVelocity.addMovement(event);
+					mVelocity.computeCurrentVelocity(10);
+					
+					float xV = mVelocity.getXVelocity();
+					float yV = mVelocity.getYVelocity();
+					Log.v(TAG, "onTouchEvent: xV = " + xV);
+					Log.v(TAG, "onTouchEvent: yV = " + yV);
+					if((Math.abs(xV) > MAX_VELOCITY) || (Math.abs(yV) > MAX_VELOCITY)) {
+						if(mToast != null) {
+							//mToast.cancel();
+							mToast.setText(getString(R.string.tp_slide_too_quick));
+							mToast.show();
+						}
+						mStartPoint = -1;
+						clear();
+					} else {
+						if(mPoints != null) {
+							mPoints.add(new PT(x, y));
+							
+							if((int)y - mPoints.get(0).y > (mScreenHeigh - BLOCK_WIDTH)) {
+								checkLastPoint(false, x, y);
+							}
+						}
+					}
+				} else {
+					if(((mStartPoint == LEFT_TOP || mStartPoint == RIGHT_BOTTOM) && !state_referenceLine[0]) || 
+							((mStartPoint == RIGHT_TOP || mStartPoint == LEFT_BOTTOM) && !state_referenceLine[1])) {
+						if(mToast != null) {
+							//mToast.cancel();
+							mToast.setText(getString(R.string.tp_line_area_hint));
+							mToast.show();
+						}
+					}
+					mStartPoint = -1;
+					clear();
+				}
+				invalidate();
+				break;
+				
+			case MotionEvent.ACTION_UP:
+				if(checkLastPoint(true, x, y)) {
+					invalidate();
+				}
+				mStartPoint = -1;
+				clear();
+				break;
+				
+			default:
+				mStartPoint = -1;
+				clear();
+				break;
+			}
+			
+			return true;
+		}
+		
+		boolean checkStartPoint(float x, float y) {
+			boolean ret = false;
+			mStartPoint = -1;
+			
+			if(x * x + y * y <= RADIUS_2) {
+				mStartPoint = LEFT_TOP;
+				ret = true;
+			} else if((mScreenWidth - x) * (mScreenWidth - x) + y * y <= RADIUS_2) {
+				mStartPoint = RIGHT_TOP;
+				ret = true;
+			} else if((mScreenWidth - x) * (mScreenWidth - x) + (mScreenHeigh - y) * (mScreenHeigh - y) < RADIUS_2) {
+				mStartPoint = RIGHT_BOTTOM;
+				ret = true;
+			} else if(x * x + (mScreenHeigh - y) * (mScreenHeigh - y) <= RADIUS_2) {
+				mStartPoint = LEFT_BOTTOM;
+				ret = true;
+			} else {
+				if(!state_referenceLine[0] || !state_referenceLine[1]) {
+					if(mToast != null) {
+						mToast.setText(getString(R.string.tp_line_start_hint));
+						mToast.show();
+					}
+				}
+			}
+			
+			return ret;
+		}
+		
+		boolean checkLastPoint(boolean isUp, float x, float y) {
+			boolean ret = false;
+			
+			if((mStartPoint == LEFT_TOP) && ((mScreenWidth - x) * (mScreenWidth - x) + (mScreenHeigh - y) * (mScreenHeigh - y) < RADIUS_2)) {
+				state_referenceLine[0] = true;
+				ret = true;
+			} else if((mStartPoint == RIGHT_BOTTOM) && (x * x + y * y <= RADIUS_2)) {
+				state_referenceLine[0] = true;
+				ret = true;
+			} else if((mStartPoint == RIGHT_TOP) && (x * x + (mScreenHeigh - y) * (mScreenHeigh - y) <= RADIUS_2)) {
+				state_referenceLine[1] = true;
+				ret = true;
+			} else if((mStartPoint == LEFT_BOTTOM) && ((mScreenWidth - x) * (mScreenWidth - x) + y * y <= RADIUS_2)) {
+				state_referenceLine[1] = true;
+				ret = true;
+			} else {
+				if(isUp && (mStartPoint != -1) && ((isOnLine1(x, y) && !state_referenceLine[0]) || (isOnLine2(x, y) && !state_referenceLine[1]))) {
+					if(mToast != null) {
+						mToast.setText(getString(R.string.tp_line_stop_hint));
+						mToast.show();
+					}
+				}
+			}
+			
+			if(state_referenceLine[0] && state_referenceLine[1]) {
+				if(mToast != null) {
+					mToast.setText(getString(R.string.tp_success_hint));
+					mToast.show();
+				}
+				
+				Timer timer = new Timer();
+				timer.schedule(new TimerTask() {
+
+					@Override
+					public void run() {
+						Intent intent = new Intent(LineTest.this, FactoryMode.class);
+						setResult(FactoryMode.TEST_OK,intent);
+						finish();
+					}
+					
+				}, 1500);
+			}
+			
+			return ret;
+		}
+		
+		boolean isOnLine1(float x, float y) {
+			boolean ret = false;
+			float interval = Math.abs(mGradient * x - y) / mLine_K;
+			if(interval <= mPoint2Line) {
+				ret = true;
+			}
+			
+			return ret;
+		}
+		
+		boolean isOnLine2(float x, float y) {
+			boolean ret = false;
+			float interval = Math.abs(-mGradient * x - y + mScreenHeigh) / mLine_K;
+			if(interval <= mPoint2Line) {
+				ret = true;
+			}
+			
+			return ret;		
+		}
+    }
+    
+    @Override
+	protected void onStop() {
+    	super.onStop();
+    	if(mToast != null) {
+			mToast.cancel();
+		}
+		
+		if(mPoints != null) {
+			mPoints.clear();
+		}
+    }
+    
+    public class PT {
+		public float x;
+		public float y;
+		public PT(float x, float y)
+		{
+			this.x = x;
+			this.y = y;
+		}
+	};
+    
+	void clear() {
+		if(mPoints != null) {
+			mPoints.clear();
+		}
+		
+		if(mVelocity != null) {
+			mVelocity.clear();
+		}
+	}
+    
+}
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/version/Version.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/version/Version.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/version/Version.java	(revision 1055)
@@ -0,0 +1,397 @@
+package com.mediatek.factorymode.version;
+
+import java.io.BufferedReader;
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.FileReader;
+import java.io.IOException;
+
+import android.app.Activity;
+import com.mediatek.factorymode.FactoryModeReceiver;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.os.AsyncResult;
+import android.os.Bundle;
+import android.os.Environment;
+import android.os.Handler;
+import android.os.Message;
+import android.os.RemoteException;
+import android.os.ServiceManager;
+import android.os.SystemClock;
+import android.os.SystemProperties;
+import android.os.storage.StorageManager;
+import android.telephony.TelephonyManager;
+import android.text.TextUtils;
+
+import com.android.internal.telephony.Phone;
+import com.android.internal.telephony.PhoneFactory;
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.R;
+import com.mediatek.storage.StorageManagerEx;
+import com.mediatek.telephony.TelephonyManagerEx;
+import com.mediatek.factorymode.FeatureOption;
+
+import android.util.Log;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.TextView;
+
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+public class Version extends Activity {
+	private static final String TAG = "Version";
+	private static final String LINUX_VER = "/proc/version";
+	private static final String ANDROID_VER = "ro.build.version.release";
+	private static final String BUILD_NUMBER = "ro.build.display.id";
+	private static final String TP_FIRMWARE_VER = "/proc/tp_ver";
+	
+	private static final int EVENT_MODEM_VERSION = 1;
+	
+	private TextView mAndroidVersion;
+	private TextView mBuildNumber;
+	private TextView mIMEI1;
+	private TextView mIMEI2;
+	private TextView mBarcode;
+	private TextView mWifiAddress;
+	private TextView mBTAddress;
+	private TextView mLteState;
+	private TextView mGsmState;
+	private TextView mTdState;
+	private TextView mAntState;
+	private TextView mLinuxVersion;
+	private TextView mModemVersion;
+	private TextView mTPFWVersion;
+	private Button mSuccessButton;
+	private Button mFailButton;
+	private Phone mPhone;
+	private boolean barcodeFlag = false;
+	private boolean lteFlag = false;
+	private boolean gsmFlag = false;
+	private boolean tdFlag = false;
+	private boolean antFlag = false;
+	private boolean buildNUMFlag = false;
+
+	private boolean tpFlag = false;
+
+	private static final String SD_CARD = StorageManagerEx.getExternalStoragePath();
+	private StorageManager mStorageManager;
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+		setContentView(R.layout.version);
+
+		mPhone = PhoneFactory.getDefaultPhone();
+		mAndroidVersion = (TextView)findViewById(R.id.android_version);
+		mBuildNumber = (TextView)findViewById(R.id.build_number);
+		mIMEI1 = (TextView)findViewById(R.id.imei1);
+		mIMEI2 = (TextView)findViewById(R.id.imei2);
+		if (FeatureOption.MTK_GEMINI_SUPPORT == false) {
+			mIMEI2.setVisibility(View.GONE);
+		}
+		
+		mBarcode = (TextView)findViewById(R.id.barcode);
+
+		mLteState = (TextView)findViewById(R.id.lte_state);
+		if(SystemProperties.getInt("ro.mtk_lte_support", 0) != 1){
+			mLteState.setVisibility(View.GONE);
+		}
+		mGsmState = (TextView)findViewById(R.id.gsm_state);
+		mTdState = (TextView)findViewById(R.id.td_state);
+		mAntState = (TextView)findViewById(R.id.ant_state);
+		mLinuxVersion = (TextView)findViewById(R.id.linux_version);
+		mModemVersion = (TextView)findViewById(R.id.modem_version);
+		mTPFWVersion = (TextView)findViewById(R.id.tp_firmware_version);
+		mSuccessButton = (Button)findViewById(R.id.version_bt_ok);
+		mFailButton = (Button)findViewById(R.id.version_bt_failed);
+		
+		mSuccessButton.setEnabled(false);
+	
+		mSuccessButton.setOnClickListener(new Button.OnClickListener() {
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(Version.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intent);
+				finish();
+			}
+			
+		});
+		
+		mFailButton.setOnClickListener(new Button.OnClickListener() {
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(Version.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_FAIL,intent);
+				finish();
+			}
+			
+		});
+        
+		mStorageManager = (StorageManager)this.getSystemService(Context.STORAGE_SERVICE);
+		//if (mStorageManager.getVolumeState(SD_CARD).equals(
+		//		Environment.MEDIA_MOUNTED)) {
+		getVersionInfo();
+		if(buildNUMFlag == true && tpFlag == true && gsmFlag == true && tdFlag == true && lteFlag == true){
+			mSuccessButton.setEnabled(true);
+		}
+	}
+	
+	public String readSDFile(String filesname) {
+		String allpath=SD_CARD+filesname;
+		StringBuffer sb = new StringBuffer();
+		File file = new File(allpath);
+		BufferedReader br = null;
+		try{
+			br = new BufferedReader(new FileReader(file));
+			String line = "";
+			while((line = br.readLine())!=null)
+			{
+				sb.append(line);
+			}
+			br.close();
+			} catch (FileNotFoundException e) {
+				e.printStackTrace();
+			} catch (IOException e) {
+				e.printStackTrace();
+			}
+		return sb.toString();
+	}
+	private void getVersionInfo() {
+		//Android version
+		String androidVer = SystemProperties.get(ANDROID_VER, getResources().getString(R.string.default_version));
+		androidVer = "Android version: " + androidVer;
+		mAndroidVersion.setText(androidVer);
+		
+		//build number
+		String buildNumber = SystemProperties.get(BUILD_NUMBER, getResources().getString(R.string.default_version));
+		buildNumber = "Build number: " + buildNumber;
+		mBuildNumber.setText(buildNumber);
+		
+		if(readSDFile("/versionNUM.txt").equals(buildNumber)){
+			buildNUMFlag = true;
+		}
+		//imei
+		if (FeatureOption.MTK_GEMINI_SUPPORT) {
+			String[] imeis = new String[2];
+			for (int i = 0; i < imeis.length; i++) {
+				  final Phone phone = PhoneFactory.getPhone(i);
+				  if (phone != null) {
+             String imei = phone.getImei();
+             imeis[i] = TextUtils.isEmpty(imei) ? "unknow" : imei;
+             String meid = phone.getMeid();
+             Log.v(TAG, "imeis = " +  imeis[i]);
+             Log.v(TAG, "meid  = " +  meid);
+          }
+			}
+			mIMEI1.setText("IMEI1: " + imeis[0]);
+			mIMEI2.setText("IMEI2: " + imeis[1]);
+		}
+	 else 
+	 {
+			String imei = PhoneFactory.getPhone(0).getImei();/*getDeviceIdGemini(0)*/
+			if(imei == null || imei.length() == 0) {
+				imei = "unknow";
+			}
+		
+			imei = "IMEI: " + imei;
+			mIMEI1.setText(imei);
+		}
+		
+		//barcode(SN) 
+		String barcode = SystemProperties.get("gsm.serial");//((TelephonyManager)getSystemService(Context.TELEPHONY_SERVICE)).getSN();
+		Log.v(TAG, "barcode = " + barcode);
+		if(barcode == null || barcode.length() == 0) {
+			barcode = "unknow";
+			
+		}else{
+			barcodeFlag = true;
+		}
+		mBarcode.setText("Barcode(SN): " + barcode);
+		
+		//BT FT
+		int len = barcode.length();
+		Log.v(TAG, "len = " + len);
+		
+		String lte = "Not Yet";
+		String gsm = "Not Yet";
+		String td = "Not Yet";
+		String ant = "Not Yet";
+		if(len >= 63 && barcode.charAt(58) == 'L') {
+			lte = "Pass";
+			lteFlag = true;
+		}
+		if(len >= 63 && barcode.charAt(59) == 'W') {
+			ant = "Pass";
+			antFlag=true;
+		}
+		if(len >= 63 && barcode.charAt(60) == '1' && barcode.charAt(61) == '0') {
+			gsm = "Pass";
+			gsmFlag = true;
+		}
+		if(len >= 63 && barcode.charAt(62) == 'P') {
+			td = "Pass";
+			tdFlag = true;
+		}
+		lte = "LTE: " + lte;
+		gsm = "GSM: " + gsm;
+		td = "WCDMA: " + td;
+		ant = "ANTENNA: " + ant;
+		
+		mLteState.setText(lte);
+		mGsmState.setText(gsm);
+		mTdState.setText(td);
+		mAntState.setText(ant);
+		
+		//linux version
+		String linuxVersion = "unknow";
+		try {
+			linuxVersion = formatKernelVersion(readLine(LINUX_VER));
+		} catch (IOException e) {
+			Log.e(TAG, "IO Exception when getting kernel version for Device Info screen", e);
+			linuxVersion = "Unavailable";
+		}
+		mLinuxVersion.setText("Linux version: " + linuxVersion);
+
+		//Modem version
+		getModemVersion();
+		//TP firmware version
+		String tpFwVersion = "unknow";
+		try {
+			BufferedReader reader = new BufferedReader(new FileReader(TP_FIRMWARE_VER), 256);
+			if (reader != null) {
+				try {
+					//tpFwVersion = reader.readLine();
+					int version = reader.read();
+					tpFwVersion = "0x" + Integer.toHexString(version);
+					Log.v(TAG, "tpFwVersion = " + tpFwVersion);
+				} catch (IOException e) {
+					// TODO Auto-generated catch block
+					Log.e(TAG, "tpFwVersion readLine failed!");
+				}
+			}
+		} catch (FileNotFoundException e) {
+			// TODO Auto-generated catch block
+			Log.e(TAG, "tpFwVersion new BufferedReader failed!");
+		}
+		mTPFWVersion.setText("TP Firmware Version: " + tpFwVersion);
+		//Log.v(TAG, "[getVersionInfo] tp=" + readSDFile("/tp.txt"));
+		if (readSDFile("/tp.txt").equals(tpFwVersion)){
+			tpFlag = true;
+		}
+	}
+	
+	private static String readLine(String filename) throws IOException {
+		BufferedReader reader = new BufferedReader(new FileReader(filename), 256);
+		try {
+			return reader.readLine();
+		} finally {
+			reader.close();
+		}
+	}
+	public static String formatKernelVersion(String rawKernelVersion) {
+		//Example (see tests for more):
+		//Linux version 3.0.31-g6fb96c9 (android-build@xxx.xxx.xxx.xxx.com) \
+		//(gcc version 4.6.x-xxx 20120106 (prerelease) (GCC) ) #1 SMP PREEMPT \
+		//Thu Jun 28 11:02:39 PDT 2012
+		final String PROC_VERSION_REGEX =
+			"Linux version (\\S+) " +							/* group 1: "3.0.31-g6fb96c9" */
+			"\\((\\S+?)\\) " +										/* group 2: "x@y.com" (kernel builder) */
+			"(?:\\(gcc.+? \\)) " +								/* ignore: GCC version information */
+			"(#\\d+) " +													/* group 3: "#1" */
+			"(?:.*?)?" +													/* ignore: optional SMP, PREEMPT, and any CONFIG_FLAGS */
+			"((Sun|Mon|Tue|Wed|Thu|Fri|Sat).+)";	/* group 4: "Thu Jun 28 11:02:39 PDT 2012" */
+		Matcher m = Pattern.compile(PROC_VERSION_REGEX).matcher(rawKernelVersion);
+		if (!m.matches()) {
+			Log.e(TAG, "Regex did not match on /proc/version: " + rawKernelVersion);
+			return "Unavailable";
+		} else if (m.groupCount() < 4) {
+			Log.e(TAG, "Regex match on /proc/version only returned " + m.groupCount() + " groups");
+			return "Unavailable";
+		}
+		String kernelString = m.group(1);
+		if (kernelString.endsWith("+")) {
+			kernelString = kernelString.substring(0, kernelString.length() - 2);
+		}
+		return kernelString;
+	}
+	
+	void getModemVersion() {
+		String cmd[] = {"AT+CGMR", "+CGMR"};
+		sendATCommand(cmd, EVENT_MODEM_VERSION);
+	}
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(Version.this, FactoryMode.class);
+			setResult(FactoryMode.TEST_CANCEL,intent);
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+	
+	@Override
+	protected void onDestroy() {
+		//getWindow().clearFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		super.onDestroy();
+	}
+	
+	private void sendATCommand(String[] cmd, int message) {
+		Log.v(TAG, "sendATCommand: cmd = " + cmd);
+		if(cmd != null) {
+			for(int i = 0; i < cmd.length; i++) {
+				Log.v(TAG, "sendATCommand: cmd[" + i + "] = " + cmd[i]);
+			}
+		}
+		Log.v(TAG, "sendATCommand: mPhone = " + mPhone);
+		if(mPhone != null) {
+			mPhone.invokeOemRilRequestStrings(cmd, mATCmdHandler.obtainMessage(message));
+		}
+	}
+	
+	private Handler mATCmdHandler = new Handler() {
+		public void handleMessage(Message msg) {
+			Log.v(TAG, "handleMessage: msg.what = " + msg.what);
+			AsyncResult ar;
+			switch(msg.what) {
+			case EVENT_MODEM_VERSION:
+				String modemV = "unknow";
+				ar = (AsyncResult)msg.obj;
+				String data[] = (String[])ar.result;
+				String[] numV = null;
+				Log.v(TAG, "handleMessage: data = " + data);
+				if(data != null) {
+					Log.v(TAG, "handleMessage: data.length = " + data.length);
+					for(int i = 0; i < data.length; i++) {
+						numV = data[i].split(",");
+					}
+					if(data != null && data.length > 0 && data[0] != null && data[0].length() > 0) {
+						modemV = numV[0].substring("+CGMR :".length());
+					}
+				}
+				
+				modemV = "Modem Version: " + modemV;
+				mModemVersion.setText(modemV);
+				break;			
+			}
+		}
+	};
+}
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/AllTest.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/AllTest.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/AllTest.java	(revision 1055)
@@ -0,0 +1,15 @@
+package com.mediatek.factorymode;
+
+import android.app.Activity;
+import android.os.Bundle;
+
+public class AllTest extends Activity {
+
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+		setContentView(R.layout.alltest);
+	}
+
+}
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/AutoTest.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/AutoTest.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/AutoTest.java	(revision 1055)
@@ -0,0 +1,5 @@
+package com.mediatek.factorymode;
+
+public class AutoTest {
+
+}
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/vibratortest/Vibratortest.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/vibratortest/Vibratortest.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/vibratortest/Vibratortest.java	(revision 1055)
@@ -0,0 +1,100 @@
+package com.mediatek.factorymode.vibratortest;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+import android.os.Vibrator;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.WindowManager;
+import android.widget.Button;
+
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.R;
+import com.mediatek.factorymode.earphone.Earphone;
+
+public class Vibratortest extends Activity {
+	Vibrator vibrator;
+	Button succesButton ;
+	Button failButton ;
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+		getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
+		//getWindow().addFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		setContentView(R.layout.vibrator);
+		getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
+		vibrator = (Vibrator) getSystemService(VIBRATOR_SERVICE);
+		long[] pattern = { 2000, 2000, 2000, 2000}; // OFF/ON/OFF/ON...
+		vibrator.vibrate(pattern, 0);
+		//vibrator.vibrate(30000);
+		succesButton = (Button)this.findViewById(R.id.vibrator_bt_ok);
+		failButton = (Button)this.findViewById(R.id.vibrator_bt_failed);
+		succesButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(Vibratortest.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intent);
+				finish();
+			}
+			
+		});
+		failButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(Vibratortest.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_FAIL,intent);
+				finish();
+			}
+			
+		});
+	}
+
+	@Override
+	protected void onPause() {
+		// TODO Auto-generated method stub
+//		if (null != vibrator) {
+//			vibrator.cancel();
+//		}
+		super.onPause();
+	}
+
+	@Override
+	protected void onStop() {
+//		if (null != vibrator) {
+//			vibrator.cancel();
+//		}
+		super.onStop();
+	}
+
+	@Override
+	protected void onDestroy() {
+		// TODO Auto-generated method stub
+		//getWindow().clearFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		if (null != vibrator) {
+			vibrator.cancel();
+		}
+		getWindow().clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
+		super.onDestroy();
+	}
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(Vibratortest.this, FactoryMode.class);
+			setResult(FactoryMode.TEST_CANCEL,intent);
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/FactoryMode.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/FactoryMode.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/FactoryMode.java	(revision 1055)
@@ -0,0 +1,823 @@
+package com.mediatek.factorymode;
+
+import android.app.Activity;
+import android.content.BroadcastReceiver;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.graphics.Color;
+import android.net.Uri;
+import android.os.Bundle;
+import android.util.Log;
+import android.view.View;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.AdapterView;
+import android.widget.AdapterView.OnItemClickListener;
+import android.widget.ArrayAdapter;
+import android.widget.Button;
+import android.widget.GridView;
+import android.widget.TextView;
+
+import com.mediatek.factorymode.backlight.BackLight;
+import com.mediatek.factorymode.bluetooth.Bluetooth;
+import com.mediatek.factorymode.camera.CameraTest;
+import com.mediatek.factorymode.camera.SubCamera;
+import com.mediatek.factorymode.earphone.Earphone;
+import com.mediatek.factorymode.fmradio.FMRadio;
+import com.mediatek.factorymode.gps.GPS;
+import com.mediatek.factorymode.headset.HeadSet;
+import com.mediatek.factorymode.lcd.LCD;
+import com.mediatek.factorymode.memory.Memory;
+import com.mediatek.factorymode.micophone.MicRecorder;
+import com.mediatek.factorymode.micophone.SubMicRecorder;
+import com.mediatek.factorymode.sdcard.SDCard;
+import com.mediatek.factorymode.sensor.GSensor;
+import com.mediatek.factorymode.sensor.LSensor;
+import com.mediatek.factorymode.sensor.MSensor;
+import com.mediatek.factorymode.sensor.PSensor;
+import com.mediatek.factorymode.sensor.OSensor;
+import com.mediatek.factorymode.sensor.Gyro;
+import com.mediatek.factorymode.signal.Signal;
+import com.mediatek.factorymode.simcard.SimCard;
+import com.mediatek.factorymode.touchscreen.BlockTest;
+import com.mediatek.factorymode.touchscreen.TouchScreenHandWriting;
+import com.mediatek.factorymode.vibratortest.Vibratortest;
+import com.mediatek.factorymode.version.Version;
+import com.mediatek.factorymode.wifi.WiFiTest;
+import com.mediatek.factorymode.finger.Finger;
+import com.mediatek.factorymode.led.Led;
+import com.mediatek.factorymode.nfc.Nfc;
+import com.mediatek.factorymode.sensor.LSensorCali;
+import com.mediatek.factorymode.hall.Hall;
+import com.mediatek.factorymode.smtbattery.SMTBattery;
+import com.mediatek.factorymode.flashlight.FlashLight;
+
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.io.PrintWriter;
+import java.io.BufferedReader;
+import java.io.BufferedWriter;
+import java.io.FileReader;
+import java.io.FileWriter;
+import java.lang.Integer;
+
+import android.os.IBinder;
+import android.os.ServiceManager;
+
+public class FactoryMode extends Activity {
+	public static final String TAG = "FactoryMode";
+	private static final int PRODUCT_INFO_NVRAM_LID = 50;
+	private static final String PRODUCT_INFO_NVRAM_PATH = "/data/nvram/APCFG/APRDEB/PRODUCT_INFO";
+	private static final int MMI_TEST_REPORT_NV_POS = 499;
+	private static final int TEST_REPORT_NV_POS = 500;
+	private static final int AUTO_TEST_REPORT_NV_POS = 550;
+	private static final int LASTEST_TEST_REPORT_NV_POS = 630;
+
+	public static final int TESTITEM_START = 0;
+	public static final int TESTITEM_VERSION = TESTITEM_START;
+	public static final int TESTITEM_TOUCH = 1;
+	public static final int TESTITEM_LCD = 2;
+	public static final int TESTITEM_GPS = 3;
+	public static final int TESTITEM_POWER = 4;
+	public static final int TESTITEM_KEY = 5;
+	public static final int TESTITEM_SPEAKER = 6;
+	public static final int TESTITEM_HEADSET = 7;
+	public static final int TESTITEM_MIC = 8;
+	public static final int TESTITEM_RECEIVER = 9;
+	public static final int TESTITEM_WIFI = 10;
+	public static final int TESTITEM_BT = 11;
+	public static final int TESTITEM_SHAKE = 12;
+	public static final int TESTITEM_CALL = 13;
+	public static final int TESTITEM_BL = 14;
+	public static final int TESTITEM_MEMORY = 15;
+	public static final int TESTITEM_GSENSOR = 16;
+	public static final int TESTITEM_MSENSOR = 17;
+	public static final int TESTITEM_LSENSOR = 18;
+	public static final int TESTITEM_DSENSOR = 19;
+	public static final int TESTITEM_TCARD = 20;
+	public static final int TESTITEM_FCAMERA = 21;
+	public static final int TESTITEM_BCAMERA = 22;
+	//public static final int TESTITEM_RCAMERA = 23;
+	//public static final int TESTITEM_IRIS=23;
+	public static final int TESTITEM_FM = 23;
+	public static final int TESTITEM_SIM = 24;
+	public static final int TESTITEM_LSENSORCALI = 25;
+	public static final int SUBTESTITEM_MIC = 26;
+	public static final int TESTITEM_HALL = 27;
+	public static final int TESTITEM_LED = 28;
+	public static final int TESTITEM_FLASHLIGHT = 29;
+	public static final int TESTITEM_OSENSOR = 30;
+	public static final int TESTITEM_FINGER = 31;
+	public static final int TESTITEM_GYRO = 32;
+	public static final int TESTITEM_NFC = 33;
+	//public static final int TESTITEM_TATOL = 35;
+	public static final int TESTITEM_SMT = 35;
+	public static final int TESTITEM_TATOL = 36;
+	
+	public static int currenttestitem = TESTITEM_START;
+	public static boolean isAutoTest = false;
+	public static boolean isinit = true;
+	public static boolean shouldCharge = false;
+	public static boolean isCharging = false;
+	
+	public static int testResult[];
+	public static int autotestResult[];
+	public static int LTResult[];
+	
+	public static final int TEST_OK = 1;
+	public static final int TEST_FAIL = 2;
+	public static final int TEST_CANCEL = 3;
+	public static final int UNTESTED = 0;
+
+	private GridView gridview;
+	ArrayAdapter<String> adapter;
+	private Button autotestButton = null;
+	private Button reportButton = null;
+	private Button autoreportButton = null;
+	public int ATPC = 0;//Auto Test Passed Count
+	public int AutoTested = 0;//if AutoTest was tested,then set value 1
+
+	public static final int testitem[] = {
+		TESTITEM_VERSION,
+		TESTITEM_TOUCH,
+		TESTITEM_LCD,
+		TESTITEM_GPS,
+		TESTITEM_KEY,
+		TESTITEM_SPEAKER,
+		TESTITEM_HEADSET,
+		TESTITEM_FM,
+		TESTITEM_WIFI,
+		TESTITEM_BT,
+		TESTITEM_MEMORY,
+		TESTITEM_TCARD,
+		TESTITEM_SIM,
+		TESTITEM_SHAKE,
+		TESTITEM_FLASHLIGHT,
+		TESTITEM_POWER,
+		TESTITEM_SMT,
+		TESTITEM_BL,
+		TESTITEM_GSENSOR,
+		TESTITEM_MSENSOR,
+		TESTITEM_LSENSORCALI,
+		TESTITEM_LSENSOR,
+		TESTITEM_DSENSOR,
+		TESTITEM_FCAMERA,
+		TESTITEM_BCAMERA,
+		//TESTITEM_RCAMERA,
+		//TESTITEM_IRIS,
+		TESTITEM_CALL,
+		TESTITEM_MIC,
+		SUBTESTITEM_MIC,
+		TESTITEM_HALL,
+		TESTITEM_LED,
+		TESTITEM_FINGER,
+		TESTITEM_GYRO,
+		TESTITEM_NFC
+	};
+
+	@Override
+	public void onCreate(Bundle savedInstanceState){
+		super.onCreate(savedInstanceState);
+		requestWindowFeature(Window.FEATURE_NO_TITLE);
+		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
+		getWindow().requestFeature(Window.FEATURE_NO_TITLE);
+		getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_IMMERSIVE_GESTURE_ISOLATED);
+		
+		setContentView(R.layout.main);
+		
+		gridview = (GridView) findViewById(R.id.main_grid);
+		adapter = new ArrayAdapter<String>(this, R.layout.main_grid);
+		gridview.setAdapter(adapter);
+		
+		testResult = new int[TESTITEM_TATOL];
+		autotestResult = new int[TESTITEM_TATOL];
+		LTResult = new int[TESTITEM_TATOL];
+		
+		Intent serviceintent = new Intent(this,BatteryLogService.class);
+		startService(serviceintent);
+		
+		getTestReport();
+		getAutoTestReport();
+		getLastestTestReport();
+		
+		autotestButton = (Button)this.findViewById(R.id.main_bt_autotest);
+		reportButton  = (Button)this.findViewById(R.id.main_bt_report);
+		autoreportButton = (Button)this.findViewById(R.id.main_auto_report);
+		
+		autoreportButton.setText(getReportText());
+		
+		autotestButton.setOnClickListener(new Button.OnClickListener(){
+			@Override
+			public void onClick(View v){
+				// TODO Auto-generated method stub
+				isAutoTest = true;
+				currenttestitem = 0;
+				TestSelectedItem(testitem[currenttestitem]);
+			}
+		});
+		reportButton.setOnClickListener(new Button.OnClickListener(){
+			@Override
+			public void onClick(View v){
+				getTestReport();
+				Intent intent2 = new Intent();
+				intent2.setClass(FactoryMode.this, Report.class);
+				startActivity(intent2);
+			}
+		});
+		autoreportButton.setOnClickListener(new Button.OnClickListener(){
+			@Override
+			public void onClick(View v){
+				getAutoTestReport();
+				isAutoTest = true;
+				Intent intent2 = new Intent();
+				intent2.setClass(FactoryMode.this, Report.class);
+				startActivity(intent2);
+			}
+		});
+		for (int i = TESTITEM_START; i < testitem.length; i++){
+			adapter.add(getStringbyitemid(testitem[i]));
+		}
+		gridview.setOnItemClickListener(new ItemClickListener());
+		isinit = true;
+	}
+	
+	protected void onResume(){
+		 super.onResume();
+		 Intent flashIntent = new Intent("techain_factory_flashlight");
+		 sendBroadcast(flashIntent);
+	}
+	
+	@Override
+	protected void onDestroy(){
+		Intent serviceintent = new Intent(this,BatteryLogService.class);
+		stopService(serviceintent);
+		shouldCharge = false;
+		super.onDestroy();
+	}
+	
+	@Override
+	public void onWindowFocusChanged(boolean hasFocus){
+		if(isinit){
+			initTestView();
+			isinit = false;
+		}
+		super.onWindowFocusChanged(hasFocus); 
+	}
+	
+	private void initTestView(){
+		for(int index = 0 ; index < testitem.length ; index++ ){
+			TextView tView = (TextView)gridview.getChildAt(index);
+			Log.v(TAG, "initTestView:tView = " + tView);
+			if(tView != null){
+				if(LTResult[index] == FactoryMode.TEST_OK){
+					tView.setTextColor(Color.BLUE);
+				}else if(LTResult[index] == FactoryMode.TEST_FAIL){
+					tView.setTextColor(Color.RED);
+				}else if(LTResult[index] == FactoryMode.UNTESTED){
+					tView.setTextColor(Color.BLACK);
+				}
+			}
+		}
+	}
+
+	class ItemClickListener implements OnItemClickListener {
+		public void onItemClick(AdapterView<?> arg0,// The AdapterView where the click happened
+				View arg1,// The view within the AdapterView that was clicked
+				int arg2,// The position of the view in the adapter
+				long arg3// The row id of the item that was clicked
+		){
+			isAutoTest = false;
+			TestSelectedItem(testitem[arg2]);
+		}
+	}
+	
+	private int getIndex(int testCode) {
+		int index = 0;
+		for(int i=0;i<testitem.length;i++) {
+			if(testCode == testitem[i]){
+				index = i;
+				break;
+			}
+		}
+		return index;
+	}
+	
+	public void onActivityResult(int requestCode, int resultCode, Intent intent){
+		Log.v("requestCode = " + requestCode,"resultCode = " + resultCode);
+		if(requestCode < 0 || requestCode >= TESTITEM_TATOL) {
+			return;
+		}
+		int index = getIndex(requestCode);
+		TextView tView = (TextView)gridview.getChildAt(index);
+		Log.v(TAG, "onActivityResult: tView = " + tView);
+		switch (resultCode) {
+			case TEST_OK:
+				if(tView != null){
+					tView.setTextColor(Color.BLUE);
+				}
+				if(isAutoTest){
+					autotestResult[index]= FactoryMode.TEST_OK;
+				}else{
+					testResult[index]= FactoryMode.TEST_OK;
+				}
+				LTResult[index]= FactoryMode.TEST_OK;
+				break;
+			case TEST_FAIL:
+				if(tView != null){
+					tView.setTextColor(Color.RED);
+				}
+				if(isAutoTest){
+					autotestResult[index]= FactoryMode.TEST_FAIL;
+				}else{
+					testResult[index]= FactoryMode.TEST_FAIL;
+				}
+				LTResult[index]= FactoryMode.TEST_FAIL;
+				break;
+			case TEST_CANCEL:
+				if(tView != null){
+					tView.setTextColor(Color.RED);
+				}
+				if(isAutoTest){
+					autotestResult[index]= FactoryMode.TEST_FAIL;
+					isAutoTest = false;
+					shouldCharge = false;
+				}else{
+					testResult[index]= FactoryMode.TEST_FAIL;
+				}
+				LTResult[index]= FactoryMode.TEST_FAIL;
+				break;
+		}
+		Log.v(TAG, "isAutoTest:" + isAutoTest);
+		
+		if(isAutoTest)
+		{
+			currenttestitem = currenttestitem + 1;
+			if(currenttestitem == testitem.length)
+			{
+				Intent intent2 = new Intent();
+				intent2.setClass(this, Report.class);
+				if(AutoTested == 0){
+					AutoTested = 1;
+				}
+				saveAutoTestReport();
+				saveLastestTestReport();
+				autoreportButton.setText(getReportText());
+				startActivity(intent2);
+			}
+			else {
+				TestSelectedItem(testitem[currenttestitem]);
+			}
+		}
+		if(!isAutoTest){
+			saveTestReport();
+			saveLastestTestReport();
+		}
+	}
+	
+	private String getReportText(){
+		String text = this.getString(R.string.AutoTestReport); 
+		int battery_test_fail_count = 0;
+		if(AutoTested == 0){
+			text = text + " : \n UNTESTED";
+			return text;
+		}
+		boolean pass = true;
+		for(int i = 0; i < testitem.length ; i++){
+			if(autotestResult[i] != FactoryMode.TEST_OK && i != getIndex(TESTITEM_POWER) && i != getIndex(TESTITEM_SMT)){
+				pass = false;
+				break;
+			}
+		if(autotestResult[i] != FactoryMode.TEST_OK && (i == getIndex(TESTITEM_POWER) || i == getIndex(TESTITEM_SMT))){
+				battery_test_fail_count ++;
+				if(battery_test_fail_count > 1){
+					pass = false;
+					break;
+				}
+			}
+		}
+		if(pass && ATPC > 0){
+			text = text + " : \n PASS :" + ATPC;
+		} else if(ATPC == 0 || !pass){
+			text = text + " : \n NOT PASS ";
+		}
+		return text;
+	}
+	
+	public void saveTestReport(){
+		byte[] buff = null;
+		IBinder binder = ServiceManager.getService("NvRAMAgent");
+		NvRAMAgent agent = NvRAMAgent.Stub.asInterface(binder);
+		try{
+			buff = agent.readFileByName(PRODUCT_INFO_NVRAM_PATH);
+		}catch(Exception e){
+			e.printStackTrace();
+			return ;
+		}
+		boolean pass = true;
+		for(int i=0 ; i < testitem.length; i++){
+			buff[TEST_REPORT_NV_POS  + i] = (byte)testResult[i];
+			if(testResult[i] != FactoryMode.TEST_OK){
+				pass = false;
+			}
+		}
+		try{
+			agent.writeFileByName(PRODUCT_INFO_NVRAM_PATH,buff);
+		}catch(Exception e){
+			e.printStackTrace();
+			return ;
+		}
+	}
+	
+	public void saveAutoTestReport(){
+		byte[] buff = null;
+		int battery_test_fail_count = 0;
+		IBinder binder = ServiceManager.getService("NvRAMAgent");
+		NvRAMAgent agent = NvRAMAgent.Stub.asInterface(binder);
+		try{
+			buff = agent.readFileByName(PRODUCT_INFO_NVRAM_PATH);
+		}catch(Exception e){
+			e.printStackTrace();
+			return ;
+		}
+		boolean pass = true;
+		for(int i=0 ; i < testitem.length; i++){
+			buff[AUTO_TEST_REPORT_NV_POS + 2 + i] = (byte)autotestResult[i];
+			if(autotestResult[i] != FactoryMode.TEST_OK && i != getIndex(TESTITEM_POWER) && i != getIndex(TESTITEM_SMT)){
+			pass = false;
+			//break;
+			}
+		if(autotestResult[i] != FactoryMode.TEST_OK && (i == getIndex(TESTITEM_POWER) || i == getIndex(TESTITEM_SMT))){
+				battery_test_fail_count ++;
+				if(battery_test_fail_count > 1){
+					pass = false;
+			//		break;
+				}
+			}	
+		}
+		if(pass){
+			ATPC++;
+			buff[AUTO_TEST_REPORT_NV_POS] =(byte) ATPC;
+			buff[MMI_TEST_REPORT_NV_POS] =(byte)1;
+		} else {
+			buff[MMI_TEST_REPORT_NV_POS] =(byte)0;
+		}
+		buff[AUTO_TEST_REPORT_NV_POS+1] =(byte) AutoTested;
+		try {
+			agent.writeFileByName(PRODUCT_INFO_NVRAM_PATH,buff);
+		}catch(Exception e){
+			e.printStackTrace();
+			return ;
+		}
+	}
+	
+	public void saveLastestTestReport(){
+		byte[] buff = null;
+		IBinder binder = ServiceManager.getService("NvRAMAgent");
+		NvRAMAgent agent = NvRAMAgent.Stub.asInterface(binder);
+		try{
+			buff = agent.readFileByName(PRODUCT_INFO_NVRAM_PATH);
+		}catch(Exception e){
+			e.printStackTrace();
+			return ;
+		}
+		boolean pass = true;
+		for(int i=0 ; i < testitem.length; i++){
+			buff[LASTEST_TEST_REPORT_NV_POS  + i] = (byte)LTResult[i];
+			if(LTResult[i] != FactoryMode.TEST_OK){
+			pass = false;
+			}
+		}
+		try {
+			agent.writeFileByName(PRODUCT_INFO_NVRAM_PATH,buff);
+		}catch(Exception e){
+			e.printStackTrace();
+			return ;
+		}
+	}
+	
+	public void getTestReport(){
+		byte[] buff = null;
+		IBinder binder = ServiceManager.getService("NvRAMAgent");
+		NvRAMAgent agent = NvRAMAgent.Stub.asInterface(binder);
+		
+		try{
+			buff = agent.readFileByName(PRODUCT_INFO_NVRAM_PATH);
+		}catch(Exception e){
+			e.printStackTrace();
+			return ;
+		}
+		for(int i=0 ; i < testitem.length; i++){
+			testResult[i] = buff[TEST_REPORT_NV_POS] < 0 ? 0:buff[TEST_REPORT_NV_POS + i];
+		}
+	}
+	
+	public void getAutoTestReport(){
+		byte[] buff = null;
+		IBinder binder = ServiceManager.getService("NvRAMAgent");
+		NvRAMAgent agent = NvRAMAgent.Stub.asInterface(binder);
+		try{
+			buff = agent.readFileByName(PRODUCT_INFO_NVRAM_PATH);
+		}catch(Exception e){
+			e.printStackTrace();
+			return ;
+		}
+		ATPC = buff[AUTO_TEST_REPORT_NV_POS] < 0 ? 0:buff[AUTO_TEST_REPORT_NV_POS];
+		AutoTested = buff[AUTO_TEST_REPORT_NV_POS+1] < 0 ? 0:buff[AUTO_TEST_REPORT_NV_POS+1];
+		for(int i=0 ; i < testitem.length; i++){
+			autotestResult[i] = buff[AUTO_TEST_REPORT_NV_POS] < 0 ? 0:buff[AUTO_TEST_REPORT_NV_POS + 2 + i];
+		}
+	}
+	
+	public void getLastestTestReport(){
+		byte[] buff = null;
+		IBinder binder = ServiceManager.getService("NvRAMAgent");
+		NvRAMAgent agent = NvRAMAgent.Stub.asInterface(binder);
+		try{
+			buff = agent.readFileByName(PRODUCT_INFO_NVRAM_PATH);
+		}catch(Exception e){
+			e.printStackTrace();
+			return ;
+		}
+		for(int i=0 ; i < testitem.length; i++){
+			LTResult[i] = buff[LASTEST_TEST_REPORT_NV_POS] < 0 ? 0:buff[LASTEST_TEST_REPORT_NV_POS + i];
+		}
+	}
+	
+	public void TestSelectedItem(int selectedItem) {
+		Intent intent = new Intent();
+		Log.d(TAG, "TestSelectedItem,selectedItem:" + selectedItem);
+		if(selectedItem >= TESTITEM_START && selectedItem < TESTITEM_TATOL) {
+			currenttestitem = getIndex(selectedItem);
+		}
+		switch (selectedItem) {
+		case TESTITEM_VERSION:
+			intent.setClass(this, Version.class);
+			startActivityForResult(intent,TESTITEM_VERSION); 
+			break;
+		case TESTITEM_TOUCH:
+			//intent.setClass(this, TouchScreenHandWriting.class);
+			intent.setClass(this, BlockTest.class);
+			startActivityForResult(intent,TESTITEM_TOUCH); 
+			break;
+		case TESTITEM_LCD:
+			intent.setClass(this, LCD.class);
+			startActivityForResult(intent,TESTITEM_LCD); 
+			break;
+		case TESTITEM_GPS:
+			intent.setClass(this, GPS.class);
+			startActivityForResult(intent,TESTITEM_GPS); 
+			break;
+		case TESTITEM_POWER:
+			intent.setClass(this, BatteryLog.class);
+			startActivityForResult(intent,TESTITEM_POWER); 
+			break;
+		case TESTITEM_KEY:
+			intent.setClass(this, KeyCode.class);
+			startActivityForResult(intent,TESTITEM_KEY); 
+			break;
+		case TESTITEM_SPEAKER:
+			intent.setClass(this, Speaker.class);
+			startActivityForResult(intent,TESTITEM_SPEAKER); 
+			break;
+		case TESTITEM_HEADSET:
+			intent.setClass(this, HeadSet.class);
+			startActivityForResult(intent,TESTITEM_HEADSET); 
+			break;
+		case TESTITEM_MIC:
+			intent.setClass(this,MicRecorder.class);
+			startActivityForResult(intent, TESTITEM_MIC);
+			break;
+		case SUBTESTITEM_MIC:
+			intent.setClass(this,SubMicRecorder.class);
+			startActivityForResult(intent, SUBTESTITEM_MIC);
+			break;
+		case TESTITEM_LSENSORCALI:
+			intent.setClass(this, LSensorCali.class);
+			startActivityForResult(intent, TESTITEM_LSENSORCALI);
+			break;
+		case TESTITEM_RECEIVER:
+			intent.setClass(this, Earphone.class);
+			startActivityForResult(intent, TESTITEM_RECEIVER);
+			break;
+
+		case TESTITEM_WIFI:
+			intent.setClass(this, WiFiTest.class);
+			startActivityForResult(intent, TESTITEM_WIFI);
+			break;
+		case TESTITEM_BT:
+			intent.setClass(this, Bluetooth.class);
+			startActivityForResult(intent, TESTITEM_BT);
+			break;
+		case TESTITEM_SHAKE:
+			intent.setClass(this, Vibratortest.class);
+			startActivityForResult(intent, TESTITEM_SHAKE);
+			break;
+		case TESTITEM_CALL:
+			intent.setClass(this, Signal.class);
+			startActivityForResult(intent, TESTITEM_CALL);
+			break;
+		case TESTITEM_BL:
+			intent.setClass(this, BackLight.class);
+			startActivityForResult(intent, TESTITEM_BL);
+			break;
+		case TESTITEM_MEMORY:
+			intent.setClass(this, Memory.class);
+			startActivityForResult(intent, TESTITEM_MEMORY);
+			break;
+		case TESTITEM_GSENSOR:
+			intent.setClass(this, GSensor.class);
+			startActivityForResult(intent, TESTITEM_GSENSOR);
+			break;
+		case TESTITEM_MSENSOR:
+			intent.setClass(this, MSensor.class);
+			startActivityForResult(intent, TESTITEM_MSENSOR);
+			break;
+		case TESTITEM_LSENSOR:
+			intent.setClass(this, LSensor.class);
+			startActivityForResult(intent, TESTITEM_LSENSOR);
+			break;
+		case TESTITEM_DSENSOR:
+			intent.setClass(this, PSensor.class);
+			startActivityForResult(intent, TESTITEM_DSENSOR);
+			break;
+		case TESTITEM_TCARD:
+			intent.setClass(this, SDCard.class);
+			startActivityForResult(intent, TESTITEM_TCARD);
+			break;
+		case TESTITEM_BCAMERA:
+			intent.setClass(this, CameraTest.class);
+			startActivityForResult(intent, TESTITEM_BCAMERA);
+			break;
+		case TESTITEM_FCAMERA:
+			intent.setClass(this, SubCamera.class);
+			startActivityForResult(intent, TESTITEM_FCAMERA);
+			break;
+      //   case TESTITEM_IRIS:
+		//	intent.setClass(this, Iris.class);
+			//startActivityForResult(intent, TESTITEM_IRIS);
+			//break;
+		case TESTITEM_FM:
+			//intent.setClassName("com.mediatek.FMRadio", "com.mediatek.FMRadio.FMRadiotest");
+			intent.setClass(this, FMRadio.class);
+			startActivityForResult(intent, TESTITEM_FM);
+			break;
+		case TESTITEM_SIM:
+			intent.setClass(this, SimCard.class);
+			startActivityForResult(intent, TESTITEM_SIM);
+			break;
+		case TESTITEM_HALL:
+			intent.setClass(this,Hall.class);
+			startActivityForResult(intent, TESTITEM_HALL);
+			break;
+		case TESTITEM_LED:
+			intent.setClass(this, Led.class);
+			startActivityForResult(intent, TESTITEM_LED);
+			break;
+		case TESTITEM_FLASHLIGHT:
+			intent.setClass(this, FlashLight.class);
+			startActivityForResult(intent, TESTITEM_FLASHLIGHT);
+			break;
+		case TESTITEM_OSENSOR:
+			intent.setClass(this, OSensor.class);
+			startActivityForResult(intent, TESTITEM_OSENSOR);
+      
+			break;
+	    case TESTITEM_FINGER:
+			intent.setClass(this,Finger.class);
+			startActivityForResult(intent, TESTITEM_FINGER);
+			break;
+		case TESTITEM_GYRO:
+			intent.setClass(this, Gyro.class);
+			startActivityForResult(intent, TESTITEM_GYRO);
+			break;
+	    case TESTITEM_NFC:
+                intent.setClass(this, Nfc.class);
+                startActivityForResult(intent, TESTITEM_NFC);
+                break;
+		case TESTITEM_SMT:
+			intent.setClass(this, SMTBattery.class);
+			startActivityForResult(intent,TESTITEM_SMT); 
+			break;		
+		default:
+			break;
+		}
+	}
+
+	public String getStringbyitemid(int item_id) {
+		String str = null;
+		switch (item_id) {
+		case TESTITEM_VERSION:
+			str = getString(R.string.version_info);
+			break;
+		case TESTITEM_TOUCH:
+			str = getString(R.string.touchscreen_name);
+			break;
+		case TESTITEM_LCD:
+			str = getString(R.string.lcd_name);
+			break;
+		case TESTITEM_GPS:
+			str = getString(R.string.gps_name);
+			break;
+		case TESTITEM_POWER:
+			str = getString(R.string.overall_unit_power_name);
+			break;
+		case TESTITEM_KEY:
+			str = getString(R.string.KeyCode_name);
+			break;
+		case TESTITEM_SPEAKER:
+			str = getString(R.string.speaker_name);
+			break;
+		case TESTITEM_HEADSET:
+			str = getString(R.string.headset_name);
+			break;
+		case TESTITEM_MIC:
+			str = getString(R.string.microphone_name);
+			break;
+		case SUBTESTITEM_MIC:
+			str = getString(R.string.submicrophone_name);
+			break;
+		case TESTITEM_LSENSORCALI:
+			str = getString(R.string.lsensor_cali_name);
+			break;
+		case TESTITEM_RECEIVER:
+			str = getString(R.string.earphone_name);
+			break;
+		case TESTITEM_WIFI:
+			str = getString(R.string.wifi_name);
+			break;
+		case TESTITEM_BT:
+			str = getString(R.string.bluetooth_name);
+			break;
+		case TESTITEM_SHAKE:
+			str = getString(R.string.vibrator_name);
+			break;
+		case TESTITEM_CALL:
+			str = getString(R.string.telephone_name);
+			break;
+		case TESTITEM_BL:
+			str = getString(R.string.backlight_name);
+			break;
+		case TESTITEM_MEMORY:
+			str = getString(R.string.memory_name);
+			break;
+		case TESTITEM_GSENSOR:
+			str = getString(R.string.gsensor_name);
+			break;
+		case TESTITEM_MSENSOR:
+			str = getString(R.string.msensor_name);
+			break;
+		case TESTITEM_LSENSOR:
+			str = getString(R.string.lsensor_name);
+			break;
+		case TESTITEM_DSENSOR:
+			str = getString(R.string.psensor_name);
+			break;
+		case TESTITEM_TCARD:
+			str = getString(R.string.sdcard_name);
+			break;
+		case TESTITEM_BCAMERA:
+			str = getString(R.string.camera_name);
+			break;
+		case TESTITEM_FCAMERA:
+			str = getString(R.string.subcamera_name);
+			break;
+	//	case TESTITEM_IRIS:
+		//	str = getString(R.string.iris);
+			//break;
+		case TESTITEM_FM:
+			str = getString(R.string.FMRadio);
+			break;
+		case TESTITEM_SIM:
+			str = getString(R.string.SimCard);
+			break;
+		case TESTITEM_HALL:
+			str = getString(R.string.Hall);
+			break;
+		case TESTITEM_LED:
+			str = getString(R.string.Led);
+			break;
+		case TESTITEM_FLASHLIGHT:
+			str = getString(R.string.flashlight);
+			break;
+		case TESTITEM_OSENSOR:
+			str = getString(R.string.OSensor);
+			break;
+        case TESTITEM_FINGER:
+			str = getString(R.string.finger);
+			break;
+		case TESTITEM_GYRO:
+			str = getString(R.string.gyro);
+			break;
+		case TESTITEM_NFC:
+             str = getString(R.string.nfc_name);
+             break;
+		case TESTITEM_SMT:
+			str = getString(R.string.smt_name);
+			break;	 
+		default:
+			break;
+		}
+		return str;
+	}
+}
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/TouchView.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/TouchView.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/TouchView.java	(revision 1055)
@@ -0,0 +1,142 @@
+package com.mediatek.factorymode;
+
+import java.util.ArrayList;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.graphics.Paint.FontMetricsInt;
+import android.util.AttributeSet;
+import android.view.MotionEvent;
+import android.view.VelocityTracker;
+import android.view.View;
+public class TouchView extends View{
+
+
+	private final Paint mPaint;
+	private final Paint mTargetPaint;
+	private final FontMetricsInt mTextMetrics = new FontMetricsInt();
+	public ArrayList< ArrayList<PT> > mLines = new ArrayList< ArrayList<PT> >();
+	ArrayList<PT> curLine;	
+	public ArrayList<VelocityTracker> mVelocityList	= new ArrayList<VelocityTracker>();
+	private int mHeaderBottom;
+	private boolean mCurDown;
+	private int mCurX;
+	private int mCurY;
+	private float mCurPressure;
+	private int mCurWidth;
+	private VelocityTracker mVelocity;
+
+	public TouchView(Context context) {
+		super(context);
+		mPaint = new Paint();
+		mPaint.setAntiAlias(true);
+		mPaint.setARGB(255,0,255, 0);
+		mPaint.setStyle(Paint.Style.STROKE);
+		mPaint.setStrokeWidth(3);
+		
+		mTargetPaint = new Paint();
+		mTargetPaint.setAntiAlias(false);
+		mTargetPaint.setARGB(255, 0, 255, 0);
+		mTargetPaint.setStyle(Paint.Style.STROKE);
+		mTargetPaint.setStrokeWidth(3);
+	}
+	public TouchView(Context context, AttributeSet attrs) {
+		super(context, attrs);
+		mPaint = new Paint();
+		mPaint.setAntiAlias(true);
+		mPaint.setARGB(255,0, 255, 0);
+		mPaint.setStyle(Paint.Style.STROKE);
+		mPaint.setStrokeWidth(3);
+		
+		mTargetPaint = new Paint();
+		mTargetPaint.setAntiAlias(false);
+		mTargetPaint.setARGB(255, 0, 255, 0);
+		mTargetPaint.setStyle(Paint.Style.STROKE);
+		mTargetPaint.setStrokeWidth(3);
+	}
+	@Override
+	protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+		super.onMeasure(widthMeasureSpec, heightMeasureSpec);
+
+	}
+
+	@Override
+	protected void onDraw(Canvas canvas) {
+		int w = getWidth() / 5;
+		int base = -mTextMetrics.ascent + 1;
+		int bottom = mHeaderBottom;
+		
+		int lineSz = mLines.size();
+		int k = 0;
+		for(k=0; k<lineSz; k++)	
+		{
+			ArrayList<PT> m = mLines.get(k);
+			
+			float lastX = 0, lastY = 0;
+			//mPaint.setARGB(255, 255, 0, 0);
+			int sz = m.size();
+			int i = 0;
+			for(i=0; i<sz; i++)
+			{	
+				PT n = m.get(i);			
+				if(i>0)
+				{
+				  canvas.drawLine(lastX, lastY, n.x, n.y, mTargetPaint);
+				  canvas.drawPoint(lastX, lastY, mTargetPaint);
+				}					
+				lastX = n.x;
+				lastY = n.y;
+			}	
+		}
+	}
+	@Override
+	public boolean onTouchEvent(MotionEvent event) {
+		int action = event.getAction();
+		if (action == MotionEvent.ACTION_DOWN) {
+			
+			mVelocity = VelocityTracker.obtain();
+			mVelocityList.add(mVelocity);
+			
+			curLine = new ArrayList<PT>() ;			
+			mLines.add(curLine);				
+		}
+		mVelocity.addMovement(event);
+		mVelocity.computeCurrentVelocity(1);
+		final int N = event.getHistorySize();
+		for (int i = 0; i < N; i++) {
+			curLine.add(new PT(event.getHistoricalX(i), event.getHistoricalY(i)));
+		}
+		curLine.add(new PT(event.getX(), event.getY()));
+		mCurDown = action == MotionEvent.ACTION_DOWN
+				|| action == MotionEvent.ACTION_MOVE;
+		mCurX = (int) event.getX();
+		mCurY = (int) event.getY();
+		mCurPressure = event.getPressure();
+		mCurWidth = (int) (event.getSize() * (getWidth()/3));
+
+		invalidate();
+		return true;
+	}
+	public class PT
+	{
+		public Float x;
+		public Float y;
+		public PT(Float x, Float y)
+		{
+			this.x = x;
+			this.y = y;
+		}
+	};
+	public void Clear() {
+		for(ArrayList<PT> m: mLines)
+		{
+			m.clear();
+		}			
+		mLines.clear();		
+		mVelocityList.clear();
+		invalidate();
+	}
+
+
+}
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/smtbattery/SMTBattery.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/smtbattery/SMTBattery.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/smtbattery/SMTBattery.java	(revision 1055)
@@ -0,0 +1,364 @@
+package com.mediatek.factorymode.smtbattery;
+
+import android.app.Activity;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.graphics.Color;
+import android.os.BatteryManager;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Message;
+import android.os.SystemClock;
+import android.text.format.Time;
+import android.util.Log;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.R;
+
+import java.text.SimpleDateFormat;
+import java.util.Date;
+import java.util.SimpleTimeZone;
+import java.io.FileReader;
+import java.io.IOException;
+
+public class SMTBattery extends Activity {
+
+  private static final String TAG = "SMTBattery";
+  private static final String SMT_BATTERY_ELECTRONIC = "/sys/class/power_supply/battery/ic_state";
+  private static final int TEST_RESULT_OK = 0;
+  private static final int TEST_RESULT_FAIL = 1;
+  private static final int TEST_RESULT_FULL_TIPS = 2;
+  private static final int TEST_RESULT_TESTING = 3;
+  private static final int TEST_RESULT_CHARGE_TIPS = 4;
+  private static final int TEST_RESULT_FIRST = 5;
+  private static final int TEST_RESULT_TEMPERATURE_ERROR = 6;
+  private static final int EVENT_COUNT_DOWN = 42;
+  private static int result = TEST_RESULT_CHARGE_TIPS;
+  private static int electronic = 0;
+  private static int counter = 0;
+  private static long countdown = 0;
+  private IntentFilter mIntentFilter;
+  private TextView mstatus;
+  private TextView mlevel;
+  private TextView mscale;
+  private TextView mhealth;
+  private TextView mvoltage;
+  private TextView mtemperature;
+  private TextView mtechnology;
+  private TextView muptime;
+  private TextView melectronic;
+  private TextView mcharger_type;
+  private Button successButton;
+  private Button failButton;
+  private int mVoltage;
+  private Long mChargetime = null;
+  private long exitTime = 0;
+
+  @Override
+  protected void onCreate(Bundle savedInstanceState) {
+    // TODO Auto-generated method stub
+    super.onCreate(savedInstanceState);
+    //getWindow().addFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+    setTitle(R.string.smt_name);
+    setContentView(R.layout.smt_battery_info);
+
+    mstatus = (TextView) this.findViewById(R.id.status);
+    mlevel = (TextView) this.findViewById(R.id.level);
+    mscale = (TextView) this.findViewById(R.id.scale);
+    mhealth = (TextView) this.findViewById(R.id.health);
+    mvoltage = (TextView) this.findViewById(R.id.voltage);
+    mtemperature = (TextView) this.findViewById(R.id.temperature);
+    mtechnology = (TextView) this.findViewById(R.id.technology);
+    muptime = (TextView) this.findViewById(R.id.uptime);
+    melectronic = (TextView) this.findViewById(R.id.electronic);
+    mcharger_type = (TextView) this.findViewById(R.id.charger_type);
+    successButton = (Button)this.findViewById(R.id.battery_bt_ok);
+    failButton = (Button)this.findViewById(R.id.battery_bt_failed);
+    successButton.setEnabled(false);
+    Long timeLong = SystemClock.elapsedRealtime();
+    timeLong = timeLong/1000;
+    long hour = timeLong/3600;
+    long minute = (timeLong%3600)/60;
+    long second = (timeLong%3600)%60;
+    muptime.setText(hour+getString(R.string.hour)+minute+getString(R.string.minute)+second+getString(R.string.second));
+    
+    successButton.setOnClickListener(new Button.OnClickListener(){
+      @Override
+      public void onClick(View v) {
+        // TODO Auto-generated method stub
+        Intent intent = new Intent(SMTBattery.this, FactoryMode.class);
+        setResult(FactoryMode.TEST_OK,intent);
+        finish();
+      }
+    });
+    
+    failButton.setOnClickListener(new Button.OnClickListener(){
+      @Override
+      public void onClick(View v) {
+        // TODO Auto-generated method stub
+        Intent intent = new Intent(SMTBattery.this, FactoryMode.class);
+        setResult(FactoryMode.TEST_FAIL,intent);
+        finish();
+      }
+    });
+  }
+  
+  @Override
+  protected void onResume() {
+    super.onResume();
+    //result = SMTBatteryService.result;
+    //electronic = SMTBatteryService.electronic;
+    //Log.d(TAG, "electronic=" + electronic+"   result"+result+"   BB");
+    //if(SMTBatteryService.result !=TEST_RESULT_TESTING){
+    //  setResultText(result,electronic,counter,countdown);
+    //}
+    IntentFilter filter = new IntentFilter();
+    filter.addAction(Intent.ACTION_BATTERY_CHANGED);
+    //filter.addAction("techain.intent.action.BTRB");
+    registerReceiver(mIntentReceiver, filter);
+  }
+
+  @Override
+  protected void onPause() {
+    super.onPause();
+    unregisterReceiver(mIntentReceiver);
+  }
+  
+  @Override
+  protected void onDestroy() {
+    //getWindow().clearFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+    super.onDestroy();
+  }
+  
+  private BroadcastReceiver mIntentReceiver = new BroadcastReceiver() {
+    @Override
+    public void onReceive(Context context, Intent intent) {
+      Log.d(TAG, "onReceive: Action = " + intent.getAction());
+      String action = intent.getAction();
+      int plugged = intent.getIntExtra("plugged", 0);
+      if (action.equals(Intent.ACTION_BATTERY_CHANGED)) {
+        int status = intent.getIntExtra("status", 0);
+        int health = intent.getIntExtra("health", 0);
+        boolean present = intent.getBooleanExtra("present", false);
+        int level = intent.getIntExtra("level", 0);
+        int scale = intent.getIntExtra("scale", 0);
+        int icon_small = intent.getIntExtra("icon-small", 0);
+        int voltage = intent.getIntExtra("voltage", 0);
+        mVoltage = voltage;
+        int temperature = intent.getIntExtra("temperature", 0);
+        String technology = intent.getStringExtra("technology");
+        
+        String statusString = "";
+        switch (status) {
+          case BatteryManager.BATTERY_STATUS_UNKNOWN:
+            statusString =getResources().getString(R.string.charger_unknown);// "unknown";
+            break;
+          case BatteryManager.BATTERY_STATUS_CHARGING:
+            statusString =getResources().getString(R.string.charger_charging);// "charging";
+         // battery_image.setImageResource(R.drawable.stat_sys_battery_charge);
+         // battery_image.getDrawable().setLevel(level);
+         // successButton.setEnabled(true);
+            break;
+          case BatteryManager.BATTERY_STATUS_DISCHARGING:
+            statusString = getResources().getString(R.string.charger_discharging);
+         // battery_image.setImageResource(R.drawable.stat_sys_battery);
+         // battery_image.getDrawable().setLevel(level);
+            break;
+          case BatteryManager.BATTERY_STATUS_NOT_CHARGING:
+            statusString = getResources().getString(R.string.charger_not_charging);
+            break;
+          case BatteryManager.BATTERY_STATUS_FULL:
+            statusString = getResources().getString(R.string.charger_full);
+          //successButton.setEnabled(true);
+            break;
+        }
+        
+        String healthString = "";
+        switch (health) {
+          case BatteryManager.BATTERY_HEALTH_UNKNOWN:
+            healthString = "unknown";
+            break;
+          case BatteryManager.BATTERY_HEALTH_GOOD:
+            healthString = "good";
+            break;
+          case BatteryManager.BATTERY_HEALTH_OVERHEAT:
+            healthString = "overheat";
+            break;
+          case BatteryManager.BATTERY_HEALTH_DEAD:
+            healthString = "dead";
+            break;
+          case BatteryManager.BATTERY_HEALTH_OVER_VOLTAGE:
+            healthString = "voltage";
+            break;
+          case BatteryManager.BATTERY_HEALTH_UNSPECIFIED_FAILURE:
+            healthString = "unspecified failure";
+            break;
+        }
+        
+        String acString = "";
+        switch (plugged) {
+          case BatteryManager.BATTERY_PLUGGED_AC:
+            acString = getResources().getString(R.string.charger_connected) + " & " + "AC";// "plugged ac";
+            break;
+          case BatteryManager.BATTERY_PLUGGED_USB:
+            acString = getResources().getString(R.string.charger_connected) + " & " + "USB";//"plugged usb";
+            break;
+          default:
+            acString = getResources().getString(R.string.charger_disconnected);
+            break;
+        }
+        
+        SMTBattery.this.mstatus.setText(statusString);
+        SMTBattery.this.mhealth.setText(healthString);
+        SMTBattery.this.mlevel.setText(""+level+"%");
+        SMTBattery.this.mscale.setText(""+scale);
+        SMTBattery.this.mvoltage.setText("" + voltage + getString(R.string.battery_info_voltage_units));
+        SMTBattery.this.mtemperature.setText(""+tenthsToFixedString(temperature) + getResources().getString(R.string.battery_info_temperature_units));
+        SMTBattery.this.mtechnology.setText(technology);
+        SMTBattery.this.melectronic.setText(getSMTBatteryState());
+        SMTBattery.this.mcharger_type.setText(acString);
+        
+        Log.d("Battery", "" + intent.getIntExtra("level", 0));
+        Log.d("Battery", "" + intent.getIntExtra("scale", 0));
+        Log.d("Battery", "" + intent.getIntExtra("voltage", 0));
+        Log.d("Battery", "" + intent.getIntExtra("temperature", 0));
+        Log.d("Battery", "ss" + intent.getIntExtra("status", BatteryManager.BATTERY_STATUS_CHARGING));
+        Log.d("Battery", "" + intent.getIntExtra("plugged", 0));
+        Log.d("Battery", "" + intent.getIntExtra("health", BatteryManager.BATTERY_HEALTH_UNKNOWN));
+      }
+    }
+  };
+
+  private String getSMTBatteryState() {
+    int state = getSMTBatteryElectronic();
+    String ic_state = "";
+    switch(state) {
+      case 0:
+        ic_state = "Not Charging";
+        SMTBattery.this.successButton.setEnabled(false);
+        SMTBattery.this.melectronic.setTextColor(Color.RED);
+        break;
+      case 1:
+        ic_state = "Pre-charge";
+        SMTBattery.this.successButton.setEnabled(true);
+        SMTBattery.this.melectronic.setTextColor(Color.GREEN);
+        break;
+      case 2:
+        ic_state = "Fast Charging";
+        SMTBattery.this.successButton.setEnabled(true);
+        SMTBattery.this.melectronic.setTextColor(Color.BLUE);
+        break;
+      case 3:
+        ic_state = "Charge Termination Done";
+        SMTBattery.this.successButton.setEnabled(false);
+        SMTBattery.this.melectronic.setTextColor(Color.YELLOW);
+        break;
+      default:
+        break;
+    }
+    return ic_state;
+  }
+  private int getSMTBatteryElectronic() {
+    char[] buffer = new char[1024];
+    float batteryElectronic = 0;
+    FileReader file = null;
+    try {
+      file = new FileReader(SMT_BATTERY_ELECTRONIC);
+      int len = file.read(buffer, 0, 1024);
+      batteryElectronic = Float.valueOf((new String(buffer, 0, len)));
+      if (file != null) {
+        file.close();
+        file = null;
+      }
+    } catch (Exception e) {
+      try {
+        if (file != null) {
+          file.close();
+          file = null;
+        }
+      } catch (IOException io) {
+        Log.e(TAG, "getBatteryElectronic fail");
+      }
+    }
+    return (int)batteryElectronic;
+  };
+  
+  private final String tenthsToFixedString(int x) {
+    int tens = x / 10;
+    return Integer.toString(tens) + "." + (x - 10 * tens);
+  }
+  /*
+  private void setResultText(int result,int electronic,int counter,long countdown){
+    String resultString = "";
+    switch (result) {
+      case TEST_RESULT_OK:
+        successButton.setEnabled(true);
+        resultString = getResources().getString(R.string.charger_success);
+        mcharger_result.setTextColor(Color.GREEN);
+        break;
+      case TEST_RESULT_FAIL:
+        successButton.setEnabled(false);
+        resultString = getResources().getString(R.string.charger_failed);
+        mcharger_result.setTextColor(Color.RED);
+        break;
+      case TEST_RESULT_FULL_TIPS:
+        successButton.setEnabled(false);
+        resultString = getResources().getString(R.string.charger_tips);
+        mcharger_result.setTextColor(Color.RED);
+        break;
+      case TEST_RESULT_TESTING:
+        successButton.setEnabled(false);
+        resultString = getResources().getString(R.string.charger_retry_tips,countdown,4-counter);
+        mcharger_result.setTextColor(Color.WHITE);
+        break;
+      case TEST_RESULT_CHARGE_TIPS:
+        successButton.setEnabled(false);
+        resultString = getResources().getString(R.string.charge_message);
+        mcharger_result.setTextColor(Color.RED);
+        break;
+      case TEST_RESULT_FIRST:
+        successButton.setEnabled(false);
+        resultString = getResources().getString(R.string.charger_start_tips);
+        mcharger_result.setTextColor(Color.WHITE);
+        break;
+      case TEST_RESULT_TEMPERATURE_ERROR:
+        successButton.setEnabled(false);
+        resultString = getResources().getString(R.string.charger_temperature_error);
+        mcharger_result.setTextColor(Color.RED);
+        break;
+    }
+    if((electronic >= 400 && SMTBatteryService.mVoltage < 4100) || (electronic >= 100 && SMTBatteryService.mVoltage >= 4100)) {
+      melectronic.setText(electronic + "mA");
+      melectronic.setTextColor(Color.GREEN);
+    } else if (electronic < 400 && SMTBatteryService.mVoltage < 4100) {
+      melectronic.setText(electronic + "mA" + " < 400mA");
+      melectronic.setTextColor(Color.RED);
+    } else if (electronic < 100 && SMTBatteryService.mVoltage >= 4100) {
+      melectronic.setText(electronic + "mA" + " < 100mA");
+      melectronic.setTextColor(Color.RED);
+    }
+    mcharger_result.setText(resultString);
+  }*/
+  
+  @Override
+  public boolean onKeyUp(int keyCode, KeyEvent event) {
+    switch (keyCode) {
+      case KeyEvent.KEYCODE_MENU:
+        return true;
+      case KeyEvent.KEYCODE_BACK:
+        Intent intent = new Intent(SMTBattery.this, FactoryMode.class);
+        setResult(FactoryMode.TEST_CANCEL,intent);
+        finish();
+        return true;
+    }
+    return super.onKeyUp(keyCode, event);
+  }
+}
\ No newline at end of file
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/wifi/WiFiTest.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/wifi/WiFiTest.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/wifi/WiFiTest.java	(revision 1055)
@@ -0,0 +1,256 @@
+package com.mediatek.factorymode.wifi;
+
+import java.util.List;
+
+import android.app.Activity;
+import android.bluetooth.BluetoothDevice;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.net.wifi.ScanResult;
+import android.net.wifi.WifiInfo;
+import android.net.wifi.WifiManager;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Message;
+import android.util.Log;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.TextView;
+
+import com.mediatek.factorymode.ChargeAlertDialog;
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.R;
+import com.mediatek.factorymode.bluetooth.Bluetooth;
+import com.mediatek.factorymode.earphone.Earphone;
+
+public class WiFiTest extends Activity{
+	private TextView wifistate;
+	private TextView wifiresult;
+	private WifiManager mWifiManager;
+	private WifiStateReceiver mWifiStateReceiver;
+	private final int SET_WIFI_ADDRESS=1;
+	
+	List<ScanResult> currentWifiList;
+	Button succesButton ;
+	Button failButton ;
+	public boolean wifiFlag = false;
+	Handler handlerWiFi;
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+		//getWindow().addFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		setContentView(R.layout.wifi_test);
+		wifistate = (TextView)this.findViewById(R.id.wifi_state_id);
+		wifiresult = (TextView)this.findViewById(R.id.wifi_result_id);
+
+		
+		succesButton = (Button)this.findViewById(R.id.wifi_bt_ok);
+		failButton = (Button)this.findViewById(R.id.wifi_bt_failed);
+		succesButton.setEnabled(false);
+		succesButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(WiFiTest.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intent);
+				finish();
+			}
+			
+		});
+		failButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(WiFiTest.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_FAIL,intent);
+				finish();
+			}
+			
+		});
+		if(FactoryMode.isAutoTest) {
+		  FactoryMode.shouldCharge = true;
+		  if(!FactoryMode.isCharging) {
+			  Intent intent = new Intent();
+			  intent.setClass(WiFiTest.this, ChargeAlertDialog.class);
+			  startActivity(intent); 
+		  }
+		}
+	}
+	
+	@Override
+	protected void onDestroy() {
+		// TODO Auto-generated method stub
+		//getWindow().clearFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		mWifiManager.setWifiEnabled(false);
+		super.onDestroy();
+	}
+
+	@Override
+	protected void onStop() {
+		if(mWifiStateReceiver != null) {
+			this.unregisterReceiver(mWifiStateReceiver);
+			mWifiStateReceiver = null;
+		}
+		
+		if(currentWifiList != null) {
+			currentWifiList.clear();
+			currentWifiList = null;
+		}
+		
+		if(mWifiManager != null) {
+			mWifiManager.setWifiEnabled(false);
+		}
+		
+		super.onStop();
+	}
+	
+	class WifiStateReceiver extends BroadcastReceiver {     
+		   public void onReceive(Context c, Intent intent) {
+			  String action = intent.getAction();
+			  Log.d("wifi>>>>>>>>>>>>>action", action);
+			  
+			  if (WifiManager.WIFI_STATE_CHANGED_ACTION.equals(action)) {
+				  Bundle bundle = intent.getExtras();
+				  int oldInt = bundle.getInt("previous_wifi_state");
+				  int newInt = bundle.getInt("wifi_state");
+				  
+				  if(newInt==WifiManager.WIFI_STATE_DISABLED) {
+					  //onWifiStateChange();
+					  wifistate.setText(getString(R.string.WiFi_info_close));
+				  }else if (newInt == WifiManager.WIFI_STATE_ENABLED){
+					 // wifistate.setText(getString(R.string.WiFi_info_open));
+					 mHandler.sendEmptyMessageDelayed(SET_WIFI_ADDRESS, 1000);
+				  }else if (newInt == WifiManager.WIFI_STATE_ENABLING){
+					  wifistate.setText(getString(R.string.WiFi_info_opening));
+				  }else if(newInt==WifiManager.WIFI_STATE_DISABLING){
+					  wifistate.setText(R.string.WiFi_info_closeing);
+				  }else {
+		       
+				  }
+			  }else if (WifiManager.SCAN_RESULTS_AVAILABLE_ACTION.equals(action)){
+				  currentWifiList = mWifiManager.getScanResults();  
+				  if(currentWifiList == null) {
+					  return;
+				  }else if (currentWifiList.size() == 0){
+				  	return;
+				  }
+				  
+				  String listview = " ";
+				  for (int i = currentWifiList.size() - 1; i >= 0; i--)
+				  {
+					  //currentWifiList.get(i).BSSID;
+					  listview = currentWifiList.get(i).SSID+"\n" +listview;
+					  Log.v("wwwwwwww", listview);
+				  }			 
+				  wifiresult.setText(listview +"");
+// yaoming, If WIFI is tested jumps to next item, 20130426	
+				  succesButton.setEnabled(true);
+				  Message msg = new Message();
+				  msg.what = 0x1231;
+				  handlerWiFi.sendMessage(msg);
+			  }
+		}
+	}
+	public static String StringizeIp(int ip) {
+		  int ip4 = (ip>>24) & 0x000000FF;
+		  int ip3 = (ip>>16) & 0x000000FF;
+		  int ip2 = (ip>> 8 )& 0x000000FF;
+		  int ip1 = ip       & 0x000000FF;
+		  return Integer.toString(ip1) + "." + ip2 + "." + ip3 + "." + ip4;
+		}
+	private void onWifiStateChange() {
+        String ip_str = "";
+        WifiInfo info = mWifiManager.getConnectionInfo();
+        if(info != null) {
+         int ipaddr = info.getIpAddress();
+         String wifissid = info.getSSID();
+         ip_str = " (ip="+StringizeIp(ipaddr)+")";
+        }
+	}
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(WiFiTest.this, FactoryMode.class);
+			setResult(FactoryMode.TEST_CANCEL,intent);
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+	
+	private Handler mHandler = new Handler(){
+
+		@Override
+		public void handleMessage(Message msg) {
+			switch(msg.what){
+			case SET_WIFI_ADDRESS:
+		     WifiManager wifiManager = (WifiManager)getSystemService(Context.WIFI_SERVICE);
+		     WifiInfo wifiInfo = wifiManager.getConnectionInfo();
+		     String  macAddress = wifiInfo == null ? null : wifiInfo.getMacAddress();
+		     if( macAddress==null )
+		     {
+			    macAddress  = "unavailable";
+		     }
+		
+			   wifistate.setText(getString(R.string.WiFi_info_open)+"\nWIFI MAC: " + macAddress);
+					
+				break;
+			default:
+				break;
+			
+			}
+			super.handleMessage(msg);
+		}
+		
+	};
+	
+	@Override
+	protected void onResume(){
+		if((FactoryMode.isAutoTest && FactoryMode.isCharging) || !FactoryMode.isAutoTest) {
+			mWifiManager= (WifiManager)this.getSystemService(this.WIFI_SERVICE);
+			if(mWifiManager.isWifiEnabled())
+			{
+				//wifistate.setText(getString(R.string.WiFi_info_open));
+				
+				mHandler.sendEmptyMessageDelayed(SET_WIFI_ADDRESS, 1000);
+				
+			}else{
+				wifistate.setText(getString(R.string.WiFi_info_opening));
+			}
+			mWifiManager.setWifiEnabled(true);
+			IntentFilter intentFilter = new IntentFilter();
+			intentFilter.addAction(WifiManager.WIFI_STATE_CHANGED_ACTION);
+			intentFilter.addAction(WifiManager.SCAN_RESULTS_AVAILABLE_ACTION);
+
+			
+			mWifiStateReceiver = new WifiStateReceiver();
+			registerReceiver(mWifiStateReceiver, intentFilter);
+			mWifiManager.startScan();
+			wifiresult.setText(getString(R.string.WiFi_scaning));
+			handlerWiFi = new Handler() {
+				@Override
+				public void handleMessage(Message msg) {
+					super.handleMessage(msg);
+					if (msg.what == 0x1231) {
+							Intent intent = new Intent(WiFiTest.this, FactoryMode.class);
+							setResult(FactoryMode.TEST_OK,intent);
+							finish();	
+					}
+				}
+			};
+		}
+		super.onResume();
+	}
+}
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/FeatureOption.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/FeatureOption.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/FeatureOption.java	(revision 1055)
@@ -0,0 +1,79 @@
+
+package com.mediatek.factorymode;
+
+import android.os.SystemProperties;
+import android.telephony.TelephonyManager;
+
+public class FeatureOption {
+    public static final boolean MTK_GEMINI_SUPPORT = getValue("ro.mtk_gemini_support");
+    public static final boolean MTK_GEMINI_3SIM_SUPPORT = TelephonyManager.getDefault().getPhoneCount() == 3;
+    public static final boolean MTK_GEMINI_4SIM_SUPPORT = TelephonyManager.getDefault().getPhoneCount() == 4;
+    public static final boolean MTK_VOICE_UNLOCK_SUPPORT = getValue("ro.mtk_voice_unlock_support");
+    public static final boolean MTK_AUDIO_PROFILES = getValue("ro.mtk_audio_profiles");
+    public static final boolean MTK_LCA_ROM_OPTIMIZE = getValue("ro.mtk_lca_rom_optimize");
+    public static final boolean PURE_AP_USE_EXTERNAL_MODEM = getValue("ro.pure_ap_use_external_modem");
+    public static final boolean EVDO_DT_SUPPORT = getValue("ro.evdo_dt_support");
+    public static final boolean MTK_SYSTEM_UPDATE_SUPPORT = getValue("ro.mtk_system_update_support");
+    public static final boolean MTK_SCOMO_ENTRY = getValue("ro.mtk_scomo_entry");
+    public static final boolean MTK_MDM_SCOMO = getValue("ro.mtk_mdm_scomo");
+    public static final boolean MTK_FOTA_ENTRY = getValue("ro.mtk_fota_entry");
+    public static final boolean MTK_MDM_FUMO = getValue("ro.mtk_mdm_fumo");
+    public static final boolean MTK_DRM_APP = getValue("ro.mtk_drm_app");
+    public static final boolean MTK_EMMC_SUPPORT = getValue("ro.mtk_emmc_support");
+    public static final boolean MTK_CACHE_MERGE_SUPPORT = getValue("ro.mtk_cache_merge_support");
+    public static final boolean MTK_TETHERING_EEM_SUPPORT = getValue("ro.mtk_tethering_eem_support");
+    public static final boolean MTK_TETHERINGIPV6_SUPPORT = getValue("ro.mtk_tetheringipv6_support");
+    public static final boolean MTK_NFC_ADDON_SUPPORT = getValue("ro.mtk_nfc_addon_support");
+    public static final boolean MTK_IPO_SUPPORT = getValue("ro.mtk_ipo_support");
+    public static final boolean MTK_ONLY_OWNER_SIM_SUPPORT = getValue("ro.mtk_owner_sim_support");
+    public static final boolean MTK_2SDCARD_SWAP = getValue("ro.mtk_2sdcard_swap");
+    public static final boolean MTK_SHARED_SDCARD = getValue("ro.mtk_shared_sdcard");
+    public static final boolean MTK_OWNER_SDCARD_ONLY_SUPPORT = getValue("ro.mtk_owner_sdcard_support");
+    public static final boolean MTK_WFD_SUPPORT = getValue("ro.mtk_wfd_support");
+    public static final boolean MTK_WLAN_SUPPORT = getValue("ro.mtk_wlan_support");
+    public static final boolean MTK_GPS_SUPPORT = getValue("ro.mtk_gps_support");
+    public static final boolean MTK_BT_SUPPORT = getValue("ro.mtk_bt_support");
+    public static final boolean MTK_PASSPOINT_R1_SUPPORT = getValue("ro.mtk_passpoint_r1_support");
+    public static final boolean MTK_DHCPV6C_WIFI = getValue("ro.mtk_dhcpv6c_wifi");
+    public static final boolean MTK_EAP_SIM_AKA = getValue("ro.mtk_eap_sim_aka");
+    public static final boolean MTK_WAPI_SUPPORT = getValue("ro.mtk_wapi_support");
+    public static final boolean WIFI_WEP_KEY_ID_SET = getValue("ro.wifi_wep_key_id_set");
+    public static final boolean MTK_AUDENH_SUPPORT = getValue("ro.mtk_audenh_support");
+    public static final boolean MTK_MULTISIM_RINGTONE_SUPPORT = getValue("ro.mtk_multisim_ringtone");
+    public static final boolean MTK_VT3G324M_SUPPORT = getValue("ro.mtk_vt3g324m_support");
+    public static final boolean MTK_GEMINI_3G_SWITCH = getValue("ro.mtk_gemini_3g_switch");
+    public static final boolean MTK_SMARTBOOK_SUPPORT = getValue("ro.mtk_smartbook_support");
+    public static final boolean MTK_AGPS_APP = getValue("ro.mtk_agps_app");
+    public static final boolean MTK_OMACP_SUPPORT = getValue("ro.mtk_omacp_support");
+    public static final boolean MTK_BEAM_PLUS_SUPPORT = getValue("ro.mtk_beam_plus_support");
+    public static final boolean MTK_CLEARMOTION_SUPPORT = getValue("ro.mtk_clearmotion_support");
+    public static final boolean MTK_THEMEMANAGER_APP = getValue("ro.mtk_thememanager_app");
+    public static final boolean MTK_POWER_SAVING_SWITCH_UI_SUPPORT = getValue("ro.mtk_pwr_save_switch");
+    public static final boolean MTK_BG_POWER_SAVING_SUPPORT = getValue("ro.mtk_bg_power_saving_support");
+    public static final boolean MTK_BG_POWER_SAVING_UI_SUPPORT = getValue("ro.mtk_bg_power_saving_ui");
+    public static final boolean MTK_VOICE_UI_SUPPORT = getValue("ro.mtk_voice_ui_support");
+    public static final boolean MTK_MULTI_PARTITION_MOUNT_ONLY_SUPPORT = getValue("ro.mtk_multi_patition");
+    public static final boolean MTK_WIFIWPSP2P_NFC_SUPPORT = getValue("ro.mtk_wifiwpsp2p_nfc_support");
+    public static final boolean MTK_LCA_RAM_OPTIMIZE = getValue("ro.mtk_lca_ram_optimize");
+    public static final boolean MTK_WFD_SINK_SUPPORT = getValue("ro.mtk_wfd_sink_support");
+    public static final boolean MTK_WFD_SINK_UIBC_SUPPORT = getValue("ro.mtk_wfd_sink_uibc_support");
+    //public static final boolean MTK_BESLOUDNESS_SUPPORT = getValue("ro.mtk_besloudness_support");
+    public static final boolean MTK_BESLOUDNESS_SUPPORT = true;
+    public static final boolean MTK_BESSURROUND_SUPPORT = getValue("ro.mtk_bessurround_support");
+    public static final boolean MTK_MIRAVISION_SETTING_SUPPORT = getValue("ro.mtk_miravision_support");
+    public static final boolean MTK_TC1_FEATURE = getValue("ro.mtk_tc1_feature");
+    public static final boolean MTK_LOSSLESS_SUPPORT = getValue("ro.mtk_lossless_bt_audio");
+    public static final boolean MTK_VOLTE_SUPPORT = getValue("ro.mtk_volte_support");
+    public static final boolean MTK_IMS_SUPPORT = getValue("ro.mtk_ims_support");
+    public static final boolean MTK_DUAL_INPUT_CHARGER_SUPPORT = SystemProperties.get("ro.mtk_diso_support").equals("true");
+    public static final boolean MTK_PRODUCT_IS_TABLET = SystemProperties.get("ro.build.characteristics").equals("tablet");
+    
+    public static boolean isLteSupport() {
+        return getValue("ro.mtk_lte_support");
+    }
+    // Important!!!  the SystemProperties key's length must less than 31 , or will have JE
+    /* get the key's value*/
+    private static boolean getValue(String key) {
+        return SystemProperties.get(key).equals("1");
+    }
+}
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/nfc/Nfc.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/nfc/Nfc.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/nfc/Nfc.java	(revision 1055)
@@ -0,0 +1,108 @@
+package com.mediatek.factorymode.nfc;
+
+import android.app.Activity;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.net.Uri;
+import android.os.Bundle;
+import android.util.Log;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.Toast;
+
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.R;
+
+public class Nfc extends Activity{
+	
+	private Button successbutton;
+	private Button failbuttonButton;
+	private long exitTime = 0;
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+		setContentView(R.layout.nfc_test);
+		
+		successbutton = (Button)this.findViewById(R.id.nfc_bt_ok);
+		failbuttonButton = (Button)this.findViewById(R.id.nfc_bt_failed);
+		successbutton.setEnabled(false);
+		successbutton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(Nfc.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intent);
+				finish();
+			}
+			
+		});
+		failbuttonButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(Nfc.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_FAIL,intent);
+				finish();
+			}
+			
+		});
+		IntentFilter mfilter = new IntentFilter();
+		mfilter.addAction("intent.action.NFC_FACTORY_MODE_TEST");
+		registerReceiver(new BroadcastReceiver() {
+			@Override
+			public void onReceive(Context context, Intent intent) {
+				Log.d("NFC", "NFC_FACTORY_MODE_TEST");
+				successbutton.setEnabled(true);
+			}
+		}, mfilter);
+		
+		Intent intent = new Intent();
+		//intent.setClassName("com.android.nfctester", "com.android.nfctester.SimpleListViewActivity");
+		//intent.setClassName("com.brcm.nfcutil", "com.brcm.nfcutil.NfcUtilActivity");
+		intent.setClassName("com.techain.nfctest", "com.techain.nfctest.NfcTest");
+		startActivity(intent);
+	}
+	@Override
+	protected void onRestart() {
+		// TODO Auto-generated method stub
+		super.onRestart();
+	}
+	@Override
+	protected void onResume() {
+		// TODO Auto-generated method stub
+		super.onResume();
+	}
+	
+	@Override
+	protected void onDestroy() {
+
+		super.onDestroy();
+	}
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+      if((System.currentTimeMillis()-exitTime) > 2000 && FactoryMode.isAutoTest){
+        Toast.makeText(getApplicationContext(), getString(R.string.exit_message), Toast.LENGTH_SHORT).show();
+        exitTime = System.currentTimeMillis();
+      } else {
+        Intent intent = new Intent(Nfc.this, FactoryMode.class);
+        setResult(FactoryMode.TEST_CANCEL,intent);
+        finish();
+      }
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/VUMeter.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/VUMeter.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/VUMeter.java	(revision 1055)
@@ -0,0 +1,89 @@
+package com.mediatek.factorymode;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Paint;
+import android.graphics.drawable.Drawable;
+import android.media.AudioRecord;
+import android.media.MediaRecorder;
+import android.util.AttributeSet;
+import android.view.View;
+
+public class VUMeter extends View {
+
+	static final float PIVOT_RADIUS = 3.5f;
+
+	static final float PIVOT_Y_OFFSET = 10f;
+	static final float SHADOW_OFFSET = 2.0f;
+
+	static final float DROPOFF_STEP = 0.18f;
+
+	static final float SURGE_STEP = 0.35f;
+
+	static final long ANIMATION_INTERVAL = 70;
+
+	Paint mPaint, mShadow;
+
+	float mCurrentAngle;
+
+	MediaRecorder mRecorder; 
+
+	public VUMeter(Context context) {
+
+		super(context);
+		init(context);
+	}
+	public VUMeter(Context context, AttributeSet attrs) {
+		super(context, attrs);
+		init(context);
+	}
+	void init(Context context) {
+
+		Drawable background = context.getResources().getDrawable(
+				R.drawable.vumeter);
+		setBackgroundDrawable(background);
+		mPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
+		mPaint.setColor(Color.WHITE);
+		mShadow = new Paint(Paint.ANTI_ALIAS_FLAG);
+		mShadow.setColor(Color.argb(60, 0, 0, 0));
+		mRecorder = null;
+		mCurrentAngle = 0;
+	}
+	public void setRecorder(MediaRecorder recorder) {
+		mRecorder = recorder;
+		invalidate();
+	}
+	@Override
+	protected void onDraw(Canvas canvas) {
+		super.onDraw(canvas);
+		final float minAngle = (float) Math.PI / 8;
+		final float maxAngle = (float) Math.PI * 7 / 8;
+		float angle = minAngle;
+		if (mRecorder != null)
+			angle += (float) (maxAngle - minAngle)
+					* mRecorder.getMaxAmplitude() / 32768;
+		if (angle > mCurrentAngle)
+			mCurrentAngle = angle;
+		else
+			mCurrentAngle = Math.max(angle, mCurrentAngle - DROPOFF_STEP);
+		mCurrentAngle = Math.min(maxAngle, mCurrentAngle);
+		float w = getWidth();
+		float h = getHeight();
+		float pivotX = w / 2;
+		float pivotY = h - PIVOT_RADIUS - PIVOT_Y_OFFSET;
+		float l = h * 4 / 5;
+		float sin = (float) Math.sin(mCurrentAngle);
+		float cos = (float) Math.cos(mCurrentAngle);
+		float x0 = pivotX - l * cos;
+		float y0 = pivotY - l * sin;
+		canvas.drawLine(x0 + SHADOW_OFFSET, y0 + SHADOW_OFFSET, pivotX
+				+ SHADOW_OFFSET, pivotY + SHADOW_OFFSET, mShadow);
+		canvas.drawCircle(pivotX + SHADOW_OFFSET, pivotY + SHADOW_OFFSET,
+				PIVOT_RADIUS, mShadow);
+		canvas.drawLine(x0, y0, pivotX, pivotY, mPaint);
+		canvas.drawCircle(pivotX, pivotY, PIVOT_RADIUS, mPaint);
+		//if (mRecorder != null)
+		//	postInvalidateDelayed(ANIMATION_INTERVAL);
+	}
+}
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/memory/Memory.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/memory/Memory.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/memory/Memory.java	(revision 1055)
@@ -0,0 +1,132 @@
+package com.mediatek.factorymode.memory;
+
+import java.io.BufferedReader;
+import java.io.FileReader;
+import java.io.IOException;
+
+import android.app.Activity;
+import android.app.ActivityManager;
+import android.app.ActivityManager.MemoryInfo;
+import android.content.Context;
+import android.content.Intent;
+import android.os.Bundle;
+import android.text.format.Formatter;
+import android.util.Log;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.TextView;
+
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.R;
+import com.mediatek.factorymode.R.string;
+import com.mediatek.factorymode.earphone.Earphone;
+
+public class Memory extends Activity {
+	
+	private ActivityManager activityManager;
+	private TextView memoryinfo;
+	private Button succesButton ;
+	private Button failButton ;
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+		//getWindow().addFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		setContentView(R.layout.memory);
+		activityManager = (ActivityManager)this.getApplicationContext().getSystemService(Context.ACTIVITY_SERVICE);
+		long Avaimemsize = getSystemAvaialbeMemorySize();
+		String totalmemsize = getTotalMemory();
+		memoryinfo = (TextView)this.findViewById(R.id.comm_info);
+		memoryinfo.setText(getString(R.string.memorytotal)+totalmemsize+ "\n"+
+		getString(R.string.memoryfree)+ Avaimemsize+"MB");
+		succesButton = (Button)this.findViewById(R.id.memory_bt_ok);
+		failButton = (Button)this.findViewById(R.id.memory_bt_failed);
+		succesButton.setEnabled(false);
+	if(!"".equals(Avaimemsize)){
+		succesButton.setEnabled(true);
+		Intent intent = new Intent(Memory.this, FactoryMode.class);
+		setResult(FactoryMode.TEST_OK,intent);
+		finish();
+	}
+		succesButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(Memory.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intent);
+				finish();
+			}
+			
+		});
+		failButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(Memory.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_FAIL,intent);
+				finish();
+			}
+			
+		});
+		
+	}
+	
+	@Override
+	protected void onDestroy() {
+		//getWindow().clearFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		super.onDestroy();
+	}
+	
+	public long getSystemAvaialbeMemorySize(){
+		  MemoryInfo memoryInfo = new MemoryInfo();
+		  activityManager.getMemoryInfo(memoryInfo);
+		  long memSize = memoryInfo.availMem;
+		  
+		  System.out.println("getSystemAvaialbeMemorySize()...memory size: " + memSize);
+		  
+		return memSize/1024/1024;
+		  
+
+		 }
+	private String getTotalMemory() {	
+		String str1 = "/proc/meminfo";
+		String str2;        
+		String[] arrayOfString;
+		long initial_memory = 0;
+		try{  
+			FileReader localFileReader = new FileReader(str1);  
+			BufferedReader localBufferedReader = new BufferedReader(localFileReader, 8192);
+			str2 = localBufferedReader.readLine();
+			arrayOfString = str2.split("\\s+");
+  
+			for(String num : arrayOfString) {
+				Log.i(str2, num + "\t");
+			}
+			initial_memory = Integer.valueOf(arrayOfString[1]).intValue() * 1024;
+			localBufferedReader.close();
+		} 
+		catch(IOException e){
+		
+		}
+		return Formatter.formatFileSize(getBaseContext(), initial_memory);
+	}
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(Memory.this, FactoryMode.class);
+			setResult(FactoryMode.TEST_CANCEL,intent);
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/sensor/PSensor.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/sensor/PSensor.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/sensor/PSensor.java	(revision 1055)
@@ -0,0 +1,131 @@
+package com.mediatek.factorymode.sensor;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.hardware.Sensor;
+import android.hardware.SensorEvent;
+import android.hardware.SensorEventListener;
+import android.hardware.SensorManager;
+import android.os.Bundle;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.TextView;
+
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.R;
+import com.mediatek.factorymode.earphone.Earphone;
+
+public class PSensor extends Activity implements SensorEventListener{
+	private SensorManager sensorManager = null;
+	private Sensor PSensor = null;
+	private TextView accuracy_view= null;
+	private TextView value_0 = null;
+	private TextView value_1 = null;
+	private TextView value_2 = null;
+	private Button succesButton ;
+	private Button failButton ;
+	private boolean psensorFlag = false;
+	private float psensorValue = 0;
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+		//getWindow().addFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		setContentView(R.layout.psensor);
+	
+		sensorManager = (SensorManager)getSystemService(this.SENSOR_SERVICE);
+
+		PSensor = sensorManager.getDefaultSensor(Sensor.TYPE_PROXIMITY);
+		//accuracy_view = (TextView)this.findViewById(R.id.proximity);
+		value_0 = (TextView)this.findViewById(R.id.proximity);
+		
+		succesButton = (Button)this.findViewById(R.id.psensor_bt_ok);
+		failButton = (Button)this.findViewById(R.id.psensor_bt_failed);
+		succesButton.setEnabled(false);
+		succesButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(PSensor.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intent);
+				finish();
+			}
+			
+		});
+		failButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(PSensor.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_FAIL,intent);
+				finish();
+			}
+			
+		});
+	}
+
+	@Override
+	public void onAccuracyChanged(Sensor sensor, int accuracy) {
+		// TODO Auto-generated method stub
+		if(sensor.getType() == Sensor.TYPE_PROXIMITY){
+		}
+	}
+
+	@Override
+	protected void onPause() {
+		// TODO Auto-generated method stub
+		super.onPause();
+		sensorManager.unregisterListener(this, PSensor);
+	}
+
+	@Override
+	protected void onResume() {
+		// TODO Auto-generated method stub
+		super.onResume();
+		sensorManager.registerListener(this,PSensor, SensorManager.SENSOR_DELAY_NORMAL);
+	}
+
+	@Override
+	protected void onDestroy() {
+		//getWindow().clearFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		super.onDestroy();
+	}
+	
+	@Override
+	public void onSensorChanged(SensorEvent event) {
+		// TODO Auto-generated method stub
+		if(event.sensor.getType() == Sensor.TYPE_PROXIMITY){
+			float[] values = event.values;
+			if(psensorFlag == false && values[0] != psensorValue){
+				psensorValue = values[0];
+				psensorFlag = true;
+			}
+			value_0.setText(getString(R.string.proximity)+values[0]/10);
+			if(psensorValue != values[0] && psensorValue != 0){
+				succesButton.setEnabled(true);
+				Intent intent = new Intent(PSensor.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intent);
+				finish();
+			}
+		}
+	}
+
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(PSensor.this, FactoryMode.class);
+			setResult(FactoryMode.TEST_CANCEL,intent);
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/sensor/LSensorCali.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/sensor/LSensorCali.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/sensor/LSensorCali.java	(revision 1055)
@@ -0,0 +1,130 @@
+package com.mediatek.factorymode.sensor;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.graphics.Color;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Message;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.TextView;
+import android.util.Log;
+
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.R;
+
+import java.io.FileOutputStream;
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.io.BufferedInputStream;
+import java.util.Timer;
+import java.util.TimerTask;
+
+public class LSensorCali extends Activity {
+	private static final String TAG = "LSensorCali"; 
+  private Button startButton ;
+	private TextView mCaliValView = null;
+	private TextView mCaliResult = null;
+	private Timer mTimer = null;
+	
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		super.onCreate(savedInstanceState);
+		//getWindow().addFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		setContentView(R.layout.lsensorcali);
+		
+		startButton = (Button)this.findViewById(R.id.lsensor_cali_start);
+		startButton.setEnabled(true);
+		mCaliValView = (TextView)findViewById(R.id.lsensor_cali_showCaliVal);
+		mCaliValView.setText(null);
+		mCaliResult = (TextView)findViewById(R.id.lsensor_cali_showResult);
+		mCaliResult.setText(null);
+		
+		startButton.setOnClickListener(new Button.OnClickListener(){
+			@Override
+			public void onClick(View v) {
+			  startButton.setEnabled(false);
+				String fileName = "proc/alsps_cali";
+				int value = -1;
+				byte[] bInput = new byte[12];
+				int []valArry = {0, 0, 0}; 
+				boolean bIsSuc = false;
+				try {
+					BufferedInputStream in = new BufferedInputStream(new FileInputStream(fileName));
+					value = in.read(bInput);
+					in.close();
+				} catch(java.io.IOException e) {
+					e.printStackTrace();
+				}
+				for(int i = 0; i < bInput.length; i++){
+					Log.d("xiawei", "i = " + ((int)bInput[i]));
+				}
+				valArry[0] = ((((int)bInput[3] << 24) & 0xff000000) |(((int)bInput[2] << 16)  & 0xff0000) |(((int)bInput[1] << 8)  & 0xff00) |((int)bInput[0]   & 0xff));
+				valArry[1] = ((((int)bInput[7] << 24) & 0xff000000) |(((int)bInput[6] << 16)  & 0xff0000) |(((int)bInput[5] << 8)  & 0xff00) |((int)bInput[4]   & 0xff));
+				valArry[2] = ((((int)bInput[11] << 24) & 0xff000000) |(((int)bInput[10] << 16)  & 0xff0000) |(((int)bInput[9] << 8)  & 0xff00) |((int)bInput[8]   & 0xff));
+				String showStr = String.format("C: %d;    ", valArry[0])  + String.format("H: %d;    ", valArry[1]) + String.format("L: %d", valArry[2]);
+				if((valArry[0] >= 0)){
+					bIsSuc = true;
+					mCaliResult.setText(getString(R.string.cali_result_pass));
+					mCaliResult.setTextColor(Color.GREEN);
+				}else{
+					bIsSuc = false;
+					mCaliResult.setText(getString(R.string.cali_result_fail));
+					mCaliResult.setTextColor(Color.RED);
+				}
+				mCaliValView.setText(showStr);
+				mTimer = new Timer();
+				
+				if (bIsSuc == true) {
+					Intent intent = new Intent(LSensorCali.this, FactoryMode.class);
+					setResult(FactoryMode.TEST_OK,intent);
+					mTimer.schedule(new MyTask(), 2000);
+					//finish();
+				} else {
+					Intent intent = new Intent(LSensorCali.this, FactoryMode.class);
+					setResult(FactoryMode.TEST_FAIL,intent);
+					mTimer.schedule(new MyTask(), 2000);
+					//finish();
+				}
+			}
+
+			class MyTask extends TimerTask {
+				public void run() {
+					mTimer.cancel();
+					finish();
+				}
+			}
+			
+		});
+	}
+	
+	@Override
+	protected void onDestroy() {
+		// TODO Auto-generated method stub
+		//getWindow().clearFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		super.onDestroy();
+	}
+	
+	@Override
+	protected void onStop() {
+		super.onStop();
+	}
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(LSensorCali.this, FactoryMode.class);
+			setResult(FactoryMode.TEST_CANCEL,intent);
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/sensor/GSensor.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/sensor/GSensor.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/sensor/GSensor.java	(revision 1055)
@@ -0,0 +1,192 @@
+package com.mediatek.factorymode.sensor;
+
+import java.util.List;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.hardware.Sensor;
+import android.hardware.SensorEvent;
+import android.hardware.SensorEventListener;
+import android.hardware.SensorManager;
+import android.os.Bundle;
+import android.util.Log;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.TextView;
+
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.R;
+import com.mediatek.factorymode.bluetooth.Bluetooth;
+import android.os.Handler;
+import android.os.Message;
+
+public class GSensor extends Activity implements SensorEventListener{
+	final String TAG = "GSensor";
+	SensorManager sensorManager = null;
+	Sensor orientationSensor = null;
+	TextView accuracy_view= null;
+	TextView value_0 = null;
+	TextView value_1 = null;
+	TextView value_2 = null;
+	Button successButton;
+	Button failButton;
+	
+	final float F_ZERO = 0.00001f;
+	final int MIN_SUCCESS_COUNT = 3;
+	float[] mOldValues = new float[2];
+	int[] mSuccessCount = new int[2];
+	
+	private boolean mRegisteredSensor;
+	
+	private static final int EVENT_CHECK_RESULT = 100;
+	private static final int CHECK_RESULT_DELAY_TIME = 3000;
+	private Handler mHandler = new Handler() {
+		@Override
+		public void handleMessage(Message msg) {
+			switch(msg.what) {
+				case EVENT_CHECK_RESULT:
+					Intent intent = new Intent(GSensor.this, FactoryMode.class);
+					setResult(FactoryMode.TEST_OK,intent);
+					finish();
+					break;
+			}
+			super.handleMessage(msg);
+		}
+	};
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+		//getWindow().addFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		setContentView(R.layout.gsensor);
+	
+		mRegisteredSensor = false;
+		sensorManager = (SensorManager)getSystemService(this.SENSOR_SERVICE);
+		orientationSensor = sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
+		accuracy_view = (TextView)this.findViewById(R.id.gsensor_tv_info);
+		value_0 = (TextView)this.findViewById(R.id.gsensor_xyz);
+		
+		accuracy_view.setText(getString(R.string.GSensor_tips));
+		value_0.setText("X:\nY:\nZ:");
+		//value_0.setText("X:\nY:\n");
+		successButton = (Button)this.findViewById(R.id.gsensor_bt_ok);
+		failButton = (Button)this.findViewById(R.id.gsensor_bt_failed);
+		successButton.setEnabled(false);
+		successButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(GSensor.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intent);
+				finish();
+			}
+			
+		});
+		failButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(GSensor.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_FAIL,intent);
+				finish();
+			}
+			
+		});
+	}
+
+	@Override
+	public void onAccuracyChanged(Sensor sensor, int accuracy) {
+		// TODO Auto-generated method stub
+		if(sensor.getType() == Sensor.TYPE_ACCELEROMETER){
+		}
+	}
+
+	@Override
+	protected void onPause() {
+		// TODO Auto-generated method stub
+		if (mRegisteredSensor)
+		{
+			sensorManager.unregisterListener(this);
+			mRegisteredSensor = false;
+		}
+		super.onPause();
+	}
+
+	@Override
+	protected void onResume() {
+		// TODO Auto-generated method stub
+		super.onResume();
+		//sensorManager.registerListener(this,orientationSensor, SensorManager.SENSOR_DELAY_NORMAL);
+		List<Sensor> sensors = sensorManager.getSensorList(Sensor.TYPE_ACCELEROMETER);
+		if (sensors.size() > 0){
+			Sensor sensor = sensors.get(0);
+			mRegisteredSensor = sensorManager.registerListener(this, sensor, SensorManager.SENSOR_DELAY_FASTEST);
+		}
+	}
+
+	@Override
+	protected void onDestroy() {
+		//getWindow().clearFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		super.onDestroy();
+	}
+	
+	@Override
+	public void onSensorChanged(SensorEvent event) {
+		// TODO Auto-generated method stub
+		if(event.sensor.getType() == Sensor.TYPE_ACCELEROMETER){
+			float[] values = event.values;
+			value_0.setText("X:"+values[0]+"\nY:"+values[1]+"\nZ:"+values[2]);
+			//value_0.setText("X:"+values[0]+"\nY:"+values[1]+"\n");
+			if(checkSeonsorState(values)) {
+				successButton.setEnabled(true);
+				mHandler.sendEmptyMessageDelayed(EVENT_CHECK_RESULT, CHECK_RESULT_DELAY_TIME);
+			}
+		}
+	}
+	
+	private boolean checkSeonsorState(float[] values) {
+		boolean ret = false;
+		if(Math.abs(mOldValues[0] - values[0]) > F_ZERO) {
+			mSuccessCount[0]++;
+		}
+		if(Math.abs(mOldValues[1] - values[1]) > F_ZERO) {
+			mSuccessCount[1]++;
+		}
+		
+		/*if(Math.abs(mOldValues[2] - values[2]) > F_ZERO) {
+			mSuccessCount[2]++;
+		} */
+		mOldValues[0] = values[0];
+		mOldValues[1] = values[1];
+		//mOldValues[2] = values[2];
+		/*if((mSuccessCount[0] >= MIN_SUCCESS_COUNT) && 
+			(mSuccessCount[1] >= MIN_SUCCESS_COUNT) && 
+			(mSuccessCount[2] >= MIN_SUCCESS_COUNT)) {
+			ret = true;
+		}*/
+		if((mSuccessCount[0] >= MIN_SUCCESS_COUNT) && 
+			(mSuccessCount[1] >= MIN_SUCCESS_COUNT)) {
+			ret = true;
+		}
+		return ret;
+	}
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(GSensor.this, FactoryMode.class);
+			setResult(FactoryMode.TEST_CANCEL,intent);
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/sensor/Gyro.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/sensor/Gyro.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/sensor/Gyro.java	(revision 1055)
@@ -0,0 +1,199 @@
+
+package com.mediatek.factorymode.sensor;
+
+import java.util.List;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.hardware.Sensor;
+import android.hardware.SensorEvent;
+import android.hardware.SensorEventListener;
+import android.hardware.SensorManager;
+import android.os.Bundle;
+import android.util.Log;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.TextView;
+import android.os.Handler;
+import android.os.Message;
+
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.R;
+
+public class Gyro extends Activity implements SensorEventListener {
+
+    private static final String TAG = "Gyro";
+    private static final float NS2S = 1.0f / 1000000000.0f;
+    private static final float F_ZERO = 0.00001f;
+    private static final int EVENT_CHECK_RESULT = 100;
+    private static final int CHECK_RESULT_DELAY_TIME = 2000;
+    private final int MIN_SUCCESS_COUNT = 3;
+
+    private boolean mRegisteredSensor;
+    private SensorManager mSensorManager = null;
+    private Sensor mGyroSensor = null;
+    private TextView mGyroNameView, mGyroValueView;
+    private Button successButton, failButton;
+    private float mTimestamp;
+    private float angle[] = new float[3];
+    private float xOldValues, yOldValues, zOldValues;
+    private int xSuccessCount, ySuccessCount, zSuccessCount;
+
+    private Handler mHandler = new Handler() {
+        @Override
+        public void handleMessage(Message msg) {
+            switch (msg.what) {
+                case EVENT_CHECK_RESULT:
+                    successButton.setEnabled(true);
+                    Intent intent = new Intent(Gyro.this, FactoryMode.class);
+                    setResult(FactoryMode.TEST_OK, intent);
+                    finish();
+                    break;
+            }
+            super.handleMessage(msg);
+        }
+    };
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        // TODO Auto-generated method stub
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.gsensor);
+
+        mRegisteredSensor = false;
+        mSensorManager = (SensorManager) getSystemService(this.SENSOR_SERVICE);
+        mGyroSensor = mSensorManager.getDefaultSensor(Sensor.TYPE_GYROSCOPE);
+
+        mGyroNameView = (TextView) this.findViewById(R.id.gsensor_tv_info);
+        mGyroValueView = (TextView) this.findViewById(R.id.gsensor_xyz);
+        mGyroNameView.setText(getString(R.string.GSensor_tips));
+        mGyroValueView.setText("X:\nY:\nZ");
+        successButton = (Button) this.findViewById(R.id.gsensor_bt_ok);
+        failButton = (Button) this.findViewById(R.id.gsensor_bt_failed);
+        successButton.setEnabled(false);
+        successButton.setOnClickListener(new Button.OnClickListener() {
+
+            @Override
+            public void onClick(View v) {
+                // TODO Auto-generated method stub
+                Intent intent = new Intent(Gyro.this, FactoryMode.class);
+                setResult(FactoryMode.TEST_OK, intent);
+                finish();
+            }
+
+        });
+        failButton.setOnClickListener(new Button.OnClickListener() {
+
+            @Override
+            public void onClick(View v) {
+                // TODO Auto-generated method stub
+                Intent intent = new Intent(Gyro.this, FactoryMode.class);
+                setResult(FactoryMode.TEST_FAIL, intent);
+                finish();
+            }
+
+        });
+    }
+
+    @Override
+    public void onAccuracyChanged(Sensor sensor, int accuracy) {
+        // TODO Auto-generated method stub
+    }
+
+    @Override
+    protected void onPause() {
+        // TODO Auto-generated method stub
+        if (mRegisteredSensor) {
+            mSensorManager.unregisterListener(this);
+            mRegisteredSensor = false;
+        }
+        super.onPause();
+    }
+
+    @Override
+    protected void onResume() {
+        // TODO Auto-generated method stub
+        super.onResume();
+        List<Sensor> sensors = mSensorManager.getSensorList(Sensor.TYPE_GYROSCOPE);
+        if (sensors.size() > 0) {
+            Sensor sensor = sensors.get(0);
+            mRegisteredSensor = mSensorManager.registerListener(this, sensor,
+                    SensorManager.SENSOR_DELAY_FASTEST);
+        }
+    }
+
+    @Override
+    public void onSensorChanged(SensorEvent event) {
+        if (event.sensor.getType() == Sensor.TYPE_GYROSCOPE) {
+
+            /*
+             * Viewed from the x, y, z axis of the forward position in the
+             * original orientation of the device, if the device is rotated
+             * counterclockwise, you will receive positive; otherwise, it is
+             * negative
+             */
+            if (mTimestamp != 0) {
+
+                final float dT = (event.timestamp - mTimestamp) * NS2S;
+
+                angle[0] += event.values[0] * dT;
+                angle[1] += event.values[1] * dT;
+                angle[2] += event.values[2] * dT;
+                // The converted angle in radians
+                float anglex = (float) Math.toDegrees(angle[0]);
+                float angley = (float) Math.toDegrees(angle[1]);
+                float anglez = (float) Math.toDegrees(angle[2]);
+
+                Log.d(TAG, "anglex------------>" + anglex);
+                Log.d(TAG, "angley------------>" + angley);
+                Log.d(TAG, "anglez------------>" + anglez);
+                Log.d(TAG, "gyroscopeSensor.getMinDelay()----------->" + mGyroSensor.getMinDelay());
+                mGyroValueView.setText("X:" + anglex + "\nY:" + angley + "\nZ:" + anglez);
+
+                if (checkSeonsorState(anglex, angley, anglez)) {
+                    mHandler.sendEmptyMessageDelayed(EVENT_CHECK_RESULT, CHECK_RESULT_DELAY_TIME);
+                }
+            }
+            mTimestamp = event.timestamp;
+        }
+    }
+
+    private boolean checkSeonsorState(float x, float y, float z) {
+        if (Math.abs(xOldValues - x) > F_ZERO) {
+            xSuccessCount++;
+        }
+        if (Math.abs(yOldValues - y) > F_ZERO) {
+            ySuccessCount++;
+        }
+        if (Math.abs(zOldValues - z) > F_ZERO) {
+            zSuccessCount++;
+        }
+        xOldValues = x;
+        yOldValues = y;
+        zOldValues = z;
+
+        if ((xSuccessCount >= MIN_SUCCESS_COUNT) && (ySuccessCount >= MIN_SUCCESS_COUNT)
+                && (zSuccessCount >= MIN_SUCCESS_COUNT)) {
+            return true;
+        }
+        return false;
+    }
+
+    @Override
+    public boolean onKeyUp(int keyCode, KeyEvent event) {
+        switch (keyCode) {
+            case KeyEvent.KEYCODE_MENU:
+                return true;
+
+            case KeyEvent.KEYCODE_BACK:
+                    Intent intent = new Intent(Gyro.this, FactoryMode.class);
+                    setResult(FactoryMode.TEST_CANCEL, intent);
+                    finish();
+                    return true;
+        }
+        return super.onKeyUp(keyCode, event);
+    }
+
+}
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/sensor/LSensor.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/sensor/LSensor.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/sensor/LSensor.java	(revision 1055)
@@ -0,0 +1,133 @@
+package com.mediatek.factorymode.sensor;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.hardware.Sensor;
+import android.hardware.SensorEvent;
+import android.hardware.SensorEventListener;
+import android.hardware.SensorManager;
+import android.os.Bundle;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.TextView;
+
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.R;
+import com.mediatek.factorymode.earphone.Earphone;
+
+public class LSensor extends Activity implements SensorEventListener{
+	private SensorManager sensorManager = null;
+	private Sensor lightSensor = null;
+	private TextView accuracy_view= null;
+	private TextView value_0 = null;
+	private TextView value_1 = null;
+	private TextView value_2 = null;
+	private Button succesButton ;
+	private Button failButton ;
+	private float sensorValue = 0;
+	private boolean sensorFlag = false;
+	
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+		//getWindow().addFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		setContentView(R.layout.lsensor);
+		
+		sensorManager = (SensorManager)getSystemService(this.SENSOR_SERVICE);
+		lightSensor = sensorManager.getDefaultSensor(Sensor.TYPE_LIGHT);
+		accuracy_view = (TextView)this.findViewById(R.id.lsensor_accuracy);
+		value_0 = (TextView)this.findViewById(R.id.lsensor_value);
+		succesButton = (Button)this.findViewById(R.id.lsensor_bt_ok);
+		failButton = (Button)this.findViewById(R.id.lsensor_bt_failed);
+		succesButton.setEnabled(false);
+		succesButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(LSensor.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intent);
+				finish();
+			}
+			
+		});
+		failButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(LSensor.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_FAIL,intent);
+				finish();
+			}
+			
+		});
+	}
+
+	@Override
+	public void onAccuracyChanged(Sensor sensor, int accuracy) {
+		// TODO Auto-generated method stub
+		if(sensor.getType() == Sensor.TYPE_LIGHT){
+			accuracy_view.setText("accuracy:"+accuracy);
+		}
+	}
+
+	@Override
+	protected void onPause() {
+		// TODO Auto-generated method stub
+		super.onPause();
+		sensorManager.unregisterListener(this, lightSensor);
+	}
+
+	@Override
+	protected void onResume() {
+		// TODO Auto-generated method stub
+		super.onResume();
+		sensorManager.registerListener(this,lightSensor, SensorManager.SENSOR_DELAY_NORMAL);
+	}
+
+	@Override
+	protected void onDestroy() {
+		//getWindow().clearFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		super.onDestroy();
+	}
+	
+	@Override
+	public void onSensorChanged(SensorEvent event) {
+		// TODO Auto-generated method stub
+		if(event.sensor.getType() == Sensor.TYPE_LIGHT){
+		
+
+			float[] values = event.values;
+			if(sensorFlag == false && values[0] != sensorValue){
+					sensorValue = values[0];
+					sensorFlag = true;
+			}
+			value_0.setText(" "+values[0]);
+			if(sensorValue != values[0] && sensorValue != 0){
+				succesButton.setEnabled(true);
+				Intent intent = new Intent(LSensor.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intent);
+				finish();
+			}
+		}
+	}
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(LSensor.this, FactoryMode.class);
+			setResult(FactoryMode.TEST_CANCEL,intent);
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/sensor/MSensor.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/sensor/MSensor.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/sensor/MSensor.java	(revision 1055)
@@ -0,0 +1,149 @@
+package com.mediatek.factorymode.sensor;
+
+import java.util.List;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.hardware.Sensor;
+import android.hardware.SensorEvent;
+import android.hardware.SensorEventListener;
+import android.hardware.SensorManager;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Message;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.TextView;
+
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.R;
+
+public class MSensor extends Activity implements SensorEventListener{
+	SensorManager sensorManager = null;
+	Sensor magneticSensor = null;
+	TextView magnetic_view= null;
+	TextView value_0 = null;
+	TextView value_1 = null;
+	TextView value_2 = null;
+	Button successButton;
+	Button failButton;
+	private boolean mRegisteredSensor;
+	
+	private static final int EVENT_CHECK_RESULT = 100;
+	private static final int CHECK_RESULT_DELAY_TIME = 3000;
+	private Handler mHandler = new Handler() {
+		@Override
+		public void handleMessage(Message msg) {
+			switch(msg.what) {
+				case EVENT_CHECK_RESULT:
+					Intent intent = new Intent(MSensor.this, FactoryMode.class);
+					setResult(FactoryMode.TEST_OK,intent);
+					finish();
+					break;
+			}
+			super.handleMessage(msg);
+		}
+	};
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+		//getWindow().addFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		setContentView(R.layout.msensor);
+		mRegisteredSensor = false;
+		sensorManager = (SensorManager)getSystemService(this.SENSOR_SERVICE);
+		magneticSensor = sensorManager.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);
+		magnetic_view = (TextView)this.findViewById(R.id.msensor_tv_info);
+		value_0 = (TextView)this.findViewById(R.id.msensor_xyz);
+		magnetic_view.setText(getString(R.string.MSensor_tips));
+		value_0.setText("X:\nY:\nZ");
+		successButton = (Button)this.findViewById(R.id.msensor_bt_ok);
+		failButton = (Button)this.findViewById(R.id.msensor_bt_failed);
+		successButton.setEnabled(false);
+		successButton.setOnClickListener(new Button.OnClickListener(){
+			
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(MSensor.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intent);
+				finish();
+			}
+		});
+		failButton.setOnClickListener(new Button.OnClickListener(){
+			
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(MSensor.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_FAIL,intent);
+				finish();
+			}
+		});
+	}
+	
+	@Override
+	public void onAccuracyChanged(Sensor sensor, int accuracy) {
+		// TODO Auto-generated method stub
+		if(sensor.getType() == Sensor.TYPE_MAGNETIC_FIELD){
+		}
+	}
+	
+	@Override
+	protected void onPause() {
+		// TODO Auto-generated method stub
+		if (mRegisteredSensor) {
+			sensorManager.unregisterListener(this);
+			mRegisteredSensor = false;
+		}
+		super.onPause();
+	}
+	
+	@Override
+	protected void onResume() {
+		// TODO Auto-generated method stub
+		super.onResume();
+		//sensorManager.registerListener(this,magneticSensor, SensorManager.SENSOR_DELAY_NORMAL);
+		List<Sensor> sensors = sensorManager.getSensorList(Sensor.TYPE_MAGNETIC_FIELD);
+		if (sensors.size() > 0) {
+			Sensor sensor = sensors.get(0);
+			mRegisteredSensor = sensorManager.registerListener(this, sensor, SensorManager.SENSOR_DELAY_FASTEST);
+		}
+	}
+
+	@Override
+	protected void onDestroy() {
+		//getWindow().clearFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		super.onDestroy();
+	}
+	
+	@Override
+	public void onSensorChanged(SensorEvent event) {
+		// TODO Auto-generated method stub
+		if(event.sensor.getType() == Sensor.TYPE_MAGNETIC_FIELD){
+			float[] values = event.values;
+			value_0.setText("X:"+values[0]+"\nY:"+values[1]+"\nZ:"+values[2]);
+			if((values[0] != 0) || (values[1] != 0) || (values[2] != 0)){
+				successButton.setEnabled(true);
+				mHandler.sendEmptyMessageDelayed(EVENT_CHECK_RESULT, CHECK_RESULT_DELAY_TIME);
+			}
+		}
+	}
+
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(MSensor.this, FactoryMode.class);
+			setResult(FactoryMode.TEST_CANCEL,intent);
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/sensor/OSensor.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/sensor/OSensor.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/sensor/OSensor.java	(revision 1055)
@@ -0,0 +1,165 @@
+package com.mediatek.factorymode.sensor;
+
+import java.util.List;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.content.Context;
+import android.hardware.Sensor;
+import android.hardware.SensorEvent;
+import android.hardware.SensorEventListener;
+import android.hardware.SensorManager;
+import android.os.Bundle;
+import android.util.Log;
+import android.view.View;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.TextView;
+import android.view.KeyEvent;
+
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.R;
+
+public class OSensor extends Activity implements SensorEventListener{
+	
+	private TextView values;
+	private Button succesButton;
+	private Button failButton;
+	
+	private SensorManager mSensorManager;
+	private Sensor oSensor;
+	private float X;
+	private float Y;
+	private float Z;
+	private final int MIN_SUCCESS_COUNT = 3;
+	private final float F_ZERO = 0.00001f;
+	private int xSuccessCount;
+	private int ySuccessCount;
+	private int zSuccessCount;
+	private float xOldValues;
+	private float yOldValues;
+	private float zOldValues;
+	private boolean mRegisteredSensor = false;
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+		setContentView(R.layout.osensor);
+		
+		init();
+		mSensorManager = (SensorManager) getSystemService(Context.SENSOR_SERVICE);
+		oSensor = mSensorManager.getDefaultSensor(Sensor.TYPE_ORIENTATION);
+		//mSensorManager.registerListener(myListener, oSensor, SensorManager.SENSOR_DELAY_GAME);
+	}
+	
+	@Override    
+	public void onAccuracyChanged(Sensor sensor, int accuracy) {
+		// TODO Auto-generated method stub
+	}
+	
+	@Override    
+	public void onSensorChanged(SensorEvent event) {
+		// TODO Auto-generated method stub
+		if(event.sensor.getType()==Sensor.TYPE_ORIENTATION){
+			X = event.values[SensorManager.DATA_X];
+			Y = event.values[SensorManager.DATA_Y];
+			Z = event.values[SensorManager.DATA_Z];
+			values.setText("x: "+X+"\n"+"Y: "+Y+"\n"+"Z: "+Z);
+			if(checkSeonsorState(X,Y,Z)){
+				succesButton.setEnabled(true);
+				Intent intent = new Intent(OSensor.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intent);
+				finish();
+			}
+		}
+	}
+	
+	public void init(){
+		values = (TextView) findViewById(R.id.osensor_degree);
+		succesButton = (Button) findViewById(R.id.osensor_bt_ok);
+		succesButton.setEnabled(false);
+		failButton = (Button) findViewById(R.id.osensor_bt_failed);
+		succesButton.setOnClickListener(new View.OnClickListener() {
+			
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				
+			}
+		});
+		failButton.setOnClickListener(new View.OnClickListener() {
+			
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(OSensor.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_FAIL,intent);
+				finish();
+			}
+		});	
+	}
+	
+	@Override
+	protected void onPause() {
+		// TODO Auto-generated method stub
+		
+		if (mRegisteredSensor) {
+			mSensorManager.unregisterListener(this);
+			mRegisteredSensor = false;
+		}
+		super.onPause();
+	}
+
+	@Override
+	protected void onResume() {
+		// TODO Auto-generated method stub
+		super.onResume();
+		//sensorManager.registerListener(this,orientationSensor, SensorManager.SENSOR_DELAY_NORMAL);
+		List<Sensor> sensors = mSensorManager.getSensorList(Sensor.TYPE_ORIENTATION);
+
+		if (sensors.size() > 0) {
+			Sensor sensor = sensors.get(0);
+			mRegisteredSensor = mSensorManager.registerListener(this, sensor, SensorManager.SENSOR_DELAY_FASTEST);
+		}
+	}
+	
+	@Override
+	protected void onDestroy() {
+		super.onDestroy();
+	}
+	
+	private boolean checkSeonsorState(float x,float y,float z){
+		if(Math.abs(xOldValues - x) > F_ZERO){
+			xSuccessCount++;
+		}
+		if(Math.abs(yOldValues - y) > F_ZERO){
+			ySuccessCount++;
+		}
+		if(Math.abs(zOldValues - z) > F_ZERO){
+			zSuccessCount++;
+		}
+		xOldValues = x;
+		yOldValues = y;
+		zOldValues = z;
+		
+		if((xSuccessCount >= MIN_SUCCESS_COUNT) && (ySuccessCount >= MIN_SUCCESS_COUNT) && (zSuccessCount >= MIN_SUCCESS_COUNT)){
+			return true;
+		}
+		return false;
+	}
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(OSensor.this, FactoryMode.class);
+			setResult(FactoryMode.TEST_CANCEL,intent);
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/finger/Finger.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/finger/Finger.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/finger/Finger.java	(revision 1055)
@@ -0,0 +1,126 @@
+package com.mediatek.factorymode.finger;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.TextView;
+
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.R;
+import com.mediatek.factorymode.earphone.Earphone;
+
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.content.BroadcastReceiver;
+import android.util.Log;
+import android.content.Context;
+
+import android.content.ComponentName;
+
+public class Finger extends Activity{
+	private static final int PROGRESS_BAR_MAX = 10000;
+	private Button succesButton ;
+	private Button failButton ;
+	
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+		//getWindow().addFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		setContentView(R.layout.finger);
+
+        
+
+		
+		succesButton = (Button)this.findViewById(R.id.finger_bt_ok);
+		failButton = (Button)this.findViewById(R.id.finger_bt_failed);
+		succesButton.setEnabled(false);
+		succesButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(Finger.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intent);
+				finish();
+			}
+			
+		});
+		failButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(Finger.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_FAIL,intent);
+				finish();
+			}
+			
+		});
+		  IntentFilter mfilter = new IntentFilter();
+      mfilter.addAction("intent.action.finger_FACTORY_MODE_TEST");
+      registerReceiver(new BroadcastReceiver() {
+			@Override
+			public void onReceive(Context context, Intent intent) {
+				    Log.v("onReceive", "duxingheng---onReceive");
+				    succesButton.setEnabled(true);
+			}
+      }, mfilter);
+      Intent i = new Intent();
+      i.setComponent(new ComponentName("com.android.settings","com.android.settings.fingerprint.FingerprintEnrollFindSensor"));
+      byte[] token = new byte[69];
+      i.putExtra("hw_auth_token", token);
+      i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+      startActivity(i);
+      Log.v("Finger", "duxingheng---onCreate");
+	}
+	
+	
+	public void testFiniah() {
+				succesButton.setEnabled(true);
+				Intent intentResult = new Intent(Finger.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intentResult);
+				finish();
+	}
+
+
+
+
+
+	@Override
+	protected void onPause() {
+		// TODO Auto-generated method stub
+		super.onPause();
+	}
+
+	@Override
+	protected void onResume() {
+		// TODO Auto-generated method stub
+		super.onResume();
+	}
+
+	@Override
+	protected void onDestroy() {
+		//getWindow().clearFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		super.onDestroy();
+	}
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(Finger.this, FactoryMode.class);
+			setResult(FactoryMode.TEST_CANCEL,intent);
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/BatteryLogService.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/BatteryLogService.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/BatteryLogService.java	(revision 1055)
@@ -0,0 +1,214 @@
+package com.mediatek.factorymode;
+
+import android.app.AlertDialog;
+import android.app.Service;
+import android.content.BroadcastReceiver;
+import android.content.ComponentName;
+import android.content.Context;
+import android.content.Intent;
+import android.graphics.Color;
+import android.os.BatteryManager;
+import android.os.Environment;
+import android.os.storage.StorageManager;
+import android.util.Log;
+
+import android.app.ActivityManager;
+import android.app.Activity;
+import android.app.PendingIntent;
+import android.content.IntentFilter;
+import android.os.Binder;
+import android.os.CountDownTimer;
+import android.os.IBinder;
+import android.os.StatFs;
+import android.os.SystemClock;
+import android.os.SystemProperties;
+import android.os.Handler;
+import android.os.Message;
+import android.telephony.TelephonyManager;
+import android.text.format.Time;
+import android.widget.Toast;
+import com.mediatek.factorymode.BatteryLog;
+import com.mediatek.factorymode.ChargeAlertDialog;
+import com.mediatek.factorymode.FactoryMode;
+
+import java.text.SimpleDateFormat;
+import java.util.Date;
+import java.util.SimpleTimeZone;
+import java.io.FileReader;
+import java.io.IOException;
+
+public class BatteryLogService extends Service {
+  private final IBinder mBinder = new ServiceBinder();
+
+  private static final  String TAG = "BatteryLogService";
+  private static final int EVENT_CHECK_RESULT = 100;
+  private static final int TEST_RESULT_OK = 0;
+  private static final int TEST_RESULT_FAIL = 1;
+  private static final int TEST_RESULT_FULL_TIPS = 2;
+  private static final int TEST_RESULT_TESTING = 3;
+  private static final int TEST_RESULT_CHARGE_TIPS = 4;
+  private static final int TEST_RESULT_FIRST = 5;
+  private static final int TEST_RESULT_TEMPERATURE_ERROR = 6;
+  private static final long COUNT_DOWN = 10900;
+  //private static long countdown= 0;
+  public static int result = TEST_RESULT_CHARGE_TIPS;
+  public static int electronic = 0;
+  public static int mVoltage;
+  private static int mStatus;
+  private static int mTemperature;
+  public static double mVoltagePercent;
+  private long CRSDT = 2000;//CHECK_RESULT_START_DELAY_TIME
+  private Toast mToast;
+  public static int counter=0;
+  private static final String BATTERY_ELECTRONIC = "/sys/class/power_supply/battery/chg_current";
+ 
+  @Override
+  public void onCreate() {
+    super.onCreate();
+    Log.d(TAG," onCreate");
+    IntentFilter filter = new IntentFilter();
+    filter.addAction(Intent.ACTION_BATTERY_CHANGED);
+    registerReceiver(mIntentReceiver, filter);
+  }
+  
+  @Override
+  public void onDestroy() {
+    super.onDestroy();
+    unregisterReceiver(mIntentReceiver);
+  }
+  private BroadcastReceiver mIntentReceiver = new BroadcastReceiver() {
+    @Override
+    public void onReceive(Context context,Intent intent){
+      String action = intent.getAction();
+      int plugged = intent.getIntExtra("plugged", 0);
+      mVoltage = intent.getIntExtra("voltage", 0);
+      int level = intent.getIntExtra("level", 0);
+      int scale = intent.getIntExtra("scale", 100);
+      mStatus = intent.getIntExtra("status", 0);
+      mTemperature = intent.getIntExtra("temperature", 0);
+      Log.d(TAG,"mTemperature = " + mTemperature);
+      mVoltagePercent =(double)level/scale;
+      if (plugged == BatteryManager.BATTERY_PLUGGED_AC || plugged == BatteryManager.BATTERY_PLUGGED_USB) {
+        if(!FactoryMode.isCharging) {
+          result = TEST_RESULT_FIRST;
+          sendResult(result,0,0,0);
+          if(FactoryMode.isAutoTest && FactoryMode.shouldCharge){
+            ChargeAlertDialog.ChargeAlertDialog.finish();
+          }
+          FactoryMode.isCharging = true;
+          mHandler.sendEmptyMessageDelayed(EVENT_CHECK_RESULT, CRSDT);//delay 2s to check result
+        }
+      }else{
+        if(FactoryMode.isCharging) {
+          result = TEST_RESULT_CHARGE_TIPS;
+          electronic = 0;
+          sendResult(result,0,0,0);
+          counter = 0;
+          FactoryMode.isCharging = false;
+          mHandler.removeMessages(EVENT_CHECK_RESULT);
+          if(FactoryMode.isAutoTest && FactoryMode.shouldCharge){
+            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+            intent.setClass(context, ChargeAlertDialog.class);
+            context.startActivity(intent);
+          }
+        }
+      }
+    }
+  };
+  
+  private void checkChargingResult() {
+    Log.d(TAG,"voltage="+mVoltage+"mA");
+    if(FactoryMode.isCharging) {
+      if(mStatus == BatteryManager.BATTERY_STATUS_FULL){
+        result = TEST_RESULT_FULL_TIPS;
+        sendResult(result,electronic,0,0);
+        return;
+      }
+      if(mTemperature < 0 || mTemperature > 500){
+        result = TEST_RESULT_TEMPERATURE_ERROR;
+        sendResult(result,electronic,0,0);
+        return;
+      }
+      electronic = getBatteryElectronic();
+      if(((electronic < 400 && mVoltage < 4100)||(electronic < 100 && mVoltage >= 4100)) && counter < 3){
+        result = TEST_RESULT_TESTING;
+        timer.start();
+        counter++;
+        return;
+      }
+      if((electronic >= 400 && mVoltage < 4100)||(electronic >= 100 && mVoltage >= 4100)) {
+        result = TEST_RESULT_OK;
+      } else {
+        result = TEST_RESULT_FAIL;
+      }
+      sendResult(result,electronic,counter,0);
+    }
+  }
+  
+  private Handler mHandler = new Handler() {
+    @Override
+    public void handleMessage(Message msg) {
+      switch(msg.what) {
+        case EVENT_CHECK_RESULT:
+          checkChargingResult();
+          break;
+      }
+      super.handleMessage(msg);
+    }
+  };
+  
+  private int getBatteryElectronic() {
+    char[] buffer = new char[1024];
+    float batteryElectronic = 0;
+    FileReader file = null;
+    try {
+      file = new FileReader(BATTERY_ELECTRONIC);
+      int len = file.read(buffer, 0, 1024);
+      batteryElectronic = Float.valueOf((new String(buffer, 0, len)));
+      if (file != null) {
+        file.close();
+        file = null;
+      }
+    } catch (Exception e) {
+      try {
+        if (file != null) {
+          file.close();
+          file = null;
+        }
+      } catch (IOException io) {
+        Log.e(TAG, "getBatteryElectronic fail");
+      }
+    }
+    return (int)batteryElectronic;
+  };
+  
+  private void sendResult(int result,int electronic,int counter,long countdown){
+    Intent intent = new Intent("techain.intent.action.BTRB");
+    intent.putExtra("result", result);
+    intent.putExtra("electronic", electronic);
+    intent.putExtra("counter", counter);
+    intent.putExtra("countdown", countdown);
+    this.sendBroadcast(intent);
+  }
+  @Override
+  public IBinder onBind(Intent intent) {
+    return mBinder;
+  }
+  
+  public class ServiceBinder extends Binder {
+    BatteryLogService getService() {
+      return BatteryLogService.this;
+    }
+  }
+  
+  private CountDownTimer timer = new CountDownTimer(COUNT_DOWN,1000){
+    @Override
+    public void onTick(long countdown){
+      sendResult(result,electronic,counter,countdown/1000);
+    }
+    @Override
+    public void onFinish(){
+      checkChargingResult();//delay 10s to check again if failed.
+    }
+  };
+}
\ No newline at end of file
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/signal/Signal.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/signal/Signal.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/signal/Signal.java	(revision 1055)
@@ -0,0 +1,86 @@
+package com.mediatek.factorymode.signal;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.net.Uri;
+import android.os.Bundle;
+import android.util.Log;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.WindowManager;
+import android.widget.Button;
+
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.R;
+
+public class Signal extends Activity{
+	
+	private Button successbutton;
+	private Button failbuttonButton;
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+		//getWindow().addFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		setContentView(R.layout.signal);
+		
+		successbutton = (Button)this.findViewById(R.id.signal_bt_ok);
+		failbuttonButton = (Button)this.findViewById(R.id.signal_bt_failed);
+		successbutton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(Signal.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intent);
+				finish();
+			}
+			
+		});
+		failbuttonButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(Signal.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_FAIL,intent);
+				finish();
+			}
+			
+		});
+		Intent callIntent = new Intent(Intent.ACTION_DIAL,Uri.parse("tel:112"));
+		callIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+		startActivity(callIntent);
+	}
+	@Override
+	protected void onRestart() {
+		// TODO Auto-generated method stub
+		super.onRestart();
+	}
+	@Override
+	protected void onResume() {
+		// TODO Auto-generated method stub
+		super.onResume();
+	}
+	
+	@Override
+	protected void onDestroy() {
+		//getWindow().clearFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		super.onDestroy();
+	}
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(Signal.this, FactoryMode.class);
+			setResult(FactoryMode.TEST_CANCEL,intent);
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/hall/Hall.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/hall/Hall.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/hall/Hall.java	(revision 1055)
@@ -0,0 +1,115 @@
+package com.mediatek.factorymode.hall;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.TextView;
+
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.R;
+
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.content.BroadcastReceiver;
+import android.util.Log;
+import android.content.Context;
+
+public class Hall extends Activity{
+	private Button succesButton ;
+	private Button failButton ;
+	
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+		//getWindow().addFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		setContentView(R.layout.hall);
+
+
+		
+		succesButton = (Button)this.findViewById(R.id.hall_bt_ok);
+		failButton = (Button)this.findViewById(R.id.hall_bt_failed);
+		succesButton.setEnabled(false);
+		succesButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(Hall.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intent);
+				finish();
+			}
+			
+		});
+		failButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(Hall.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_FAIL,intent);
+				finish();
+			}
+			
+		});
+		
+		
+		  IntentFilter mfilter = new IntentFilter();
+      mfilter.addAction("intent.action.HALL_FACTORY_MODE_TEST");
+      registerReceiver(new BroadcastReceiver() {
+			@Override
+			public void onReceive(Context context, Intent intent) {
+				Log.v("HALL", "HALL_FACTORY_MODE_TEST");
+				testFiniah();
+			}
+        }, mfilter);
+	}
+	
+	
+	public void testFiniah() {
+				succesButton.setEnabled(true);
+				Intent intentResult = new Intent(Hall.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intentResult);
+				finish();
+	}
+
+
+	@Override
+	protected void onPause() {
+		// TODO Auto-generated method stub
+		super.onPause();
+	}
+
+	@Override
+	protected void onResume() {
+		// TODO Auto-generated method stub
+		super.onResume();
+	}
+
+	@Override
+	protected void onDestroy() {
+		//getWindow().clearFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		super.onDestroy();
+	}
+	
+
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(Hall.this, FactoryMode.class);
+			setResult(FactoryMode.TEST_CANCEL,intent);
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/micophone/SubMicRecorder.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/micophone/SubMicRecorder.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/micophone/SubMicRecorder.java	(revision 1055)
@@ -0,0 +1,255 @@
+package com.mediatek.factorymode.micophone;
+
+import java.io.File;
+import java.io.FileReader;
+import java.io.IOException;
+import java.util.Calendar;
+import java.util.Locale;
+
+import android.app.Activity;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.media.MediaPlayer;
+import android.media.MediaRecorder;
+import android.os.Bundle;
+import android.os.Environment;
+import android.text.format.DateFormat;
+import android.util.Log;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.WindowManager;
+import android.widget.Button;
+
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.R;
+import com.mediatek.factorymode.VUMeter;
+import android.media.AudioSystem;
+
+import android.os.Handler;
+import android.os.Message;
+
+public class SubMicRecorder extends Activity {
+
+	private Button micsuccesButton ;
+	private Button micfailButton ;
+	private Button spesuccesButton ;
+	private Button spefailButton ;
+	private Button testheadbButton;
+	
+	private MediaRecorder mRecorder = null;
+	private MediaPlayer mPlayer = null;
+	private String  curPath = null ;
+	private VUMeter mVUMeter;
+	
+	private static final int TEST_IDLE = 0;
+	private static final int TEST_RECORDERING = 1;
+	private static final int TEST_PLAYYING =2;
+	private int curTestState = TEST_IDLE; 
+	//private static final String INTERNAL_MEMORY_DIR = "/data/data/com.mediatek.factorymode/files/"; 
+	private static final String INTERNAL_MEMORY_DIR = "/sdcard/temp/";
+	private static final String TEST_FILE_NAME = "testingMicRecorder.amr";
+	 
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+		//getWindow().addFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		setContentView(R.layout.submicrecorder);
+		testheadbButton =(Button)this.findViewById(R.id.mic_bt_start);
+	
+		micsuccesButton = (Button)this.findViewById(R.id.mic_bt_ok);
+		micfailButton = (Button)this.findViewById(R.id.mic_bt_failed);
+		
+		mVUMeter = (VUMeter)this.findViewById(R.id.uvMeter);
+		mVUMeter.setVisibility(View.GONE);
+		micsuccesButton.setEnabled(false);
+		micsuccesButton.setOnClickListener(new Button.OnClickListener(){
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(SubMicRecorder.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intent);
+				finish();
+			}
+		});
+		micfailButton.setOnClickListener(new Button.OnClickListener(){
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(SubMicRecorder.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_FAIL,intent);
+				finish();
+			}
+		});
+		testheadbButton.setOnClickListener(new View.OnClickListener() {
+			@Override
+			public void onClick(View v) {
+				if(curTestState == TEST_IDLE){
+					AudioSystem.setParameters("SET_MIC_CHOOSE=2");
+					startRecorder();
+					testheadbButton.setText(getString(R.string.Mic_stop));
+					testheadbButton.setClickable(false);
+					mHandler.sendEmptyMessageDelayed(TEST_IDLE , 1000);
+				}else if(curTestState == TEST_RECORDERING){
+					stopRecorder();
+					
+					playRecordfile();
+					testheadbButton.setText(getString(R.string.stopplayer));
+					micsuccesButton.setEnabled(true);
+					testheadbButton.setClickable(false);
+					mHandler.sendEmptyMessageDelayed(TEST_RECORDERING , 1000);
+				}else if(curTestState == TEST_PLAYYING) {
+					stopplay();
+					AudioSystem.setParameters("SET_MIC_CHOOSE=0");
+					testheadbButton.setText(getString(R.string.Mic_start));
+					testheadbButton.setClickable(false);
+					mHandler.sendEmptyMessageDelayed(TEST_PLAYYING , 1000);
+				}
+			}
+		});
+		testheadbButton.setText(getString(R.string.Mic_start));
+	}
+	private static final String HEADSET_STATE_PATH = "/sys/class/switch/h2w/state";
+	public static int getHeadsetState() {
+		try {
+			FileReader file = new FileReader(HEADSET_STATE_PATH);
+			char[] buffer = new char[1024];
+			int len = file.read(buffer, 0, 1024);
+			int headsetState = Integer.valueOf((new String(buffer, 0, len)).trim());
+            Log.v("SubMicRecorder", "---------------" + headsetState);
+			return headsetState;
+		} catch (Exception e) {
+			return 0;
+		}
+	}
+	
+	private Handler mHandler = new Handler(){
+		@Override
+		public void handleMessage(Message msg) {
+			super.handleMessage(msg);
+			if (msg.what == TEST_IDLE) {
+				curTestState = TEST_RECORDERING;
+			}else if (msg.what == TEST_RECORDERING) {
+				curTestState = TEST_PLAYYING;
+			}else if (msg.what == TEST_PLAYYING) {
+				curTestState = TEST_IDLE;
+			}
+			testheadbButton.setClickable(true);
+		}
+	};
+	
+	void startRecorder(){
+		//File file = new File("/sdcard/"+ "YY"+ new DateFormat().format("yyyyMMdd_hhmmss",Calendar.getInstance(Locale.CHINA)) + ".amr");
+		String path = INTERNAL_MEMORY_DIR + TEST_FILE_NAME;
+		boolean bRet = isFolderExists(INTERNAL_MEMORY_DIR);
+		Log.v("SubMicRecorder", "bRet---------------" + bRet + ", path = " + path);
+		File file = new File(path);
+		if(file.exists()) {
+			file.delete();
+		}
+		
+		curPath = file.getPath();
+		mRecorder = new MediaRecorder();
+		mRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);
+		mRecorder.setOutputFormat(MediaRecorder.OutputFormat.DEFAULT);
+		mRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.DEFAULT);
+		mRecorder.setOutputFile(file.getAbsolutePath());
+		try {
+			file.createNewFile();
+			file.setReadable(true, false);
+			file.setWritable(true, false);
+			mRecorder.prepare();
+			mRecorder.start();
+		} catch (IllegalStateException e) {
+			e.printStackTrace();
+		} catch (IOException e) {
+			e.printStackTrace();
+		}
+		mVUMeter.setRecorder(mRecorder);
+	}
+	private void stopRecorder(){
+		if (mRecorder != null) {
+			mRecorder.stop();
+			mRecorder.release();
+			mRecorder = null;
+		}
+	}
+	private void playRecordfile(){
+		mPlayer = new MediaPlayer();
+		mPlayer.reset();
+		try{
+			mPlayer.setDataSource(curPath);
+			mPlayer.prepare();
+			mPlayer.start();
+		} catch (IllegalStateException e) {
+			e.printStackTrace();
+		} catch (IOException e) {
+			e.printStackTrace();
+		}
+		testheadbButton.setText(getString(R.string.stopplayer));
+	}
+	private void stopplay(){
+		if (mPlayer != null) {
+			mPlayer.stop();
+			mPlayer.release();
+			mPlayer = null;
+			testheadbButton.setText(getString(R.string.Mic_start));
+		}
+	}
+	
+	@Override
+	public void onStop() {
+		if (mRecorder != null) {
+			mRecorder.stop();
+			mRecorder.release();
+			mRecorder = null;
+		}
+		if (mPlayer != null) {
+			mPlayer.stop();
+			mPlayer.release();
+			mPlayer = null;
+		}
+		String path = INTERNAL_MEMORY_DIR + TEST_FILE_NAME;
+		File file = new File(path);
+		if(file.exists()) {
+			file.delete();
+		}
+		super.onStop();
+	}
+	
+	@Override
+	protected void onDestroy() {
+		//getWindow().clearFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		AudioSystem.setParameters("SET_MIC_CHOOSE=0");
+		Log.v("MicRecorder", "---------SubMicRecorder------");
+		super.onDestroy();
+	}
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(SubMicRecorder.this, FactoryMode.class);
+			setResult(FactoryMode.TEST_CANCEL,intent);
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+	public static boolean isFolderExists(String strFolder) {
+		File file = new File(strFolder);
+		if (!file.exists()) {
+			if (file.mkdirs()) {
+				return true;
+			} else {
+				return false;
+			}
+		}
+		return true;
+	}
+}
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/micophone/MicRecorder.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/micophone/MicRecorder.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/micophone/MicRecorder.java	(revision 1055)
@@ -0,0 +1,256 @@
+package com.mediatek.factorymode.micophone;
+
+import java.io.File;
+import java.io.FileReader;
+import java.io.IOException;
+import java.util.Calendar;
+import java.util.Locale;
+
+import android.app.Activity;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.media.MediaPlayer;
+import android.media.MediaRecorder;
+import android.os.Bundle;
+import android.os.Environment;
+import android.text.format.DateFormat;
+import android.util.Log;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.WindowManager;
+import android.widget.Button;
+
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.R;
+import com.mediatek.factorymode.VUMeter;
+import android.media.AudioSystem;
+
+import android.os.Handler;
+import android.os.Message;
+
+public class MicRecorder extends Activity {
+
+	private Button micsuccesButton ;
+	private Button micfailButton ;
+	private Button spesuccesButton ;
+	private Button spefailButton ;
+	private Button testheadbButton;
+	
+	private MediaRecorder mRecorder = null;
+	private MediaPlayer mPlayer = null;
+	private String  curPath = null ;
+	private VUMeter mVUMeter;
+	
+	private static final int TEST_IDLE = 0;
+	private static final int TEST_RECORDERING = 1;
+	private static final int TEST_PLAYYING =2;
+	private int curTestState = TEST_IDLE; 
+	//private static final String INTERNAL_MEMORY_DIR = "/data/data/com.mediatek.factorymode/files/"; 
+	private static final String INTERNAL_MEMORY_DIR = "/sdcard/temp/";
+	private static final String TEST_FILE_NAME = "testingMicRecorder.amr";
+	 
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+		//getWindow().addFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		setContentView(R.layout.micrecorder);
+		testheadbButton =(Button)this.findViewById(R.id.mic_bt_start);
+	
+		micsuccesButton = (Button)this.findViewById(R.id.mic_bt_ok);
+		micfailButton = (Button)this.findViewById(R.id.mic_bt_failed);
+		
+		mVUMeter = (VUMeter)this.findViewById(R.id.uvMeter);
+		mVUMeter.setVisibility(View.GONE);
+		micsuccesButton.setEnabled(false);
+		micsuccesButton.setOnClickListener(new Button.OnClickListener(){
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(MicRecorder.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intent);
+				finish();
+			}
+		});
+		micfailButton.setOnClickListener(new Button.OnClickListener(){
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(MicRecorder.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_FAIL,intent);
+				finish();
+			}
+		});
+		testheadbButton.setOnClickListener(new View.OnClickListener() {
+			@Override
+			public void onClick(View v) {
+				if(curTestState == TEST_IDLE){
+					AudioSystem.setParameters("SET_MIC_CHOOSE=1");
+					startRecorder();
+					testheadbButton.setText(getString(R.string.Mic_stop));
+					testheadbButton.setClickable(false);
+					mHandler.sendEmptyMessageDelayed(TEST_IDLE , 1000);
+				}else if(curTestState == TEST_RECORDERING){
+					stopRecorder();
+					
+					playRecordfile();
+					testheadbButton.setText(getString(R.string.stopplayer));
+					micsuccesButton.setEnabled(true);
+					testheadbButton.setClickable(false);
+					mHandler.sendEmptyMessageDelayed(TEST_RECORDERING , 1000);
+				}else if(curTestState == TEST_PLAYYING) {
+					stopplay();
+					AudioSystem.setParameters("SET_MIC_CHOOSE=0");
+					testheadbButton.setText(getString(R.string.Mic_start));
+					testheadbButton.setClickable(false);
+					mHandler.sendEmptyMessageDelayed(TEST_PLAYYING , 1000);
+				}
+			}
+		});
+		testheadbButton.setText(getString(R.string.Mic_start));
+	}
+	private static final String HEADSET_STATE_PATH = "/sys/class/switch/h2w/state";
+	public static int getHeadsetState() {
+		try {
+			FileReader file = new FileReader(HEADSET_STATE_PATH);
+			char[] buffer = new char[1024];
+			int len = file.read(buffer, 0, 1024);
+			int headsetState = Integer.valueOf((new String(buffer, 0, len)).trim());
+			Log.v("MicRecorder", "---------------" + headsetState);
+			return headsetState;
+		} catch (Exception e) {
+			return 0;
+		}
+	}
+	
+	private Handler mHandler = new Handler(){
+		@Override
+		public void handleMessage(Message msg) {
+			super.handleMessage(msg);
+			if (msg.what == TEST_IDLE) {
+				curTestState = TEST_RECORDERING;
+			}else if (msg.what == TEST_RECORDERING) {
+				curTestState = TEST_PLAYYING;
+			}else if (msg.what == TEST_PLAYYING) {
+				curTestState = TEST_IDLE;
+			}
+			testheadbButton.setClickable(true);
+		}
+	};
+	
+	void startRecorder(){
+		//File file = new File("/sdcard/"+ "YY"+ new DateFormat().format("yyyyMMdd_hhmmss",Calendar.getInstance(Locale.CHINA)) + ".amr");
+		String path = INTERNAL_MEMORY_DIR + TEST_FILE_NAME;
+		boolean bRet = isFolderExists(INTERNAL_MEMORY_DIR);
+		Log.v("MicRecorder", "bRet---------------" + bRet + ", path = " + path);
+		File file = new File(path);
+		if(file.exists()) {
+			file.delete();
+		}
+		
+		curPath = file.getPath();
+		mRecorder = new MediaRecorder();
+		mRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);
+		mRecorder.setOutputFormat(MediaRecorder.OutputFormat.DEFAULT);
+		mRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.DEFAULT);
+		mRecorder.setOutputFile(file.getAbsolutePath());
+		try {
+			file.createNewFile();
+			file.setReadable(true, false);
+			file.setWritable(true, false);
+			mRecorder.prepare();
+			mRecorder.start();
+		} catch (IllegalStateException e) {
+			e.printStackTrace();
+		} catch (IOException e) {
+			e.printStackTrace();
+		}
+		mVUMeter.setRecorder(mRecorder);
+	}
+	private void stopRecorder(){
+		if (mRecorder != null) {
+			mRecorder.stop();
+			mRecorder.release();
+			mRecorder = null;
+		}
+	}
+	private void playRecordfile(){
+		mPlayer = new MediaPlayer();
+		mPlayer.reset();
+		try{
+			mPlayer.setDataSource(curPath);
+			mPlayer.prepare();
+			mPlayer.start();
+		} catch (IllegalStateException e) {
+			e.printStackTrace();
+		} catch (IOException e) {
+			e.printStackTrace();
+		}
+		testheadbButton.setText(getString(R.string.stopplayer));
+	}
+	private void stopplay(){
+		if (mPlayer != null) {
+			mPlayer.stop();
+			mPlayer.release();
+			mPlayer = null;
+			testheadbButton.setText(getString(R.string.Mic_start));
+		}
+	}
+	
+	@Override
+	public void onStop() {
+		if (mRecorder != null) {
+			mRecorder.stop();
+			mRecorder.release();
+			mRecorder = null;
+		}
+		if (mPlayer != null) {
+			mPlayer.stop();
+			mPlayer.release();
+			mPlayer = null;
+		}
+		String path = INTERNAL_MEMORY_DIR + TEST_FILE_NAME;
+		File file = new File(path);
+		if(file.exists()) {
+			file.delete();
+		}
+		super.onStop();
+	}
+	
+	@Override
+	protected void onDestroy() {
+		//getWindow().clearFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		AudioSystem.setParameters("SET_MIC_CHOOSE=0");
+		Log.v("MicRecorder", "---------MicRecorder------");
+		super.onDestroy();
+	}
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(MicRecorder.this, FactoryMode.class);
+			setResult(FactoryMode.TEST_CANCEL,intent);
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+	
+	public static boolean isFolderExists(String strFolder) {
+		File file = new File(strFolder);
+		if (!file.exists()) {
+			if (file.mkdirs()) {
+				return true;
+			} else {
+				return false;
+			}
+		}
+		return true;
+	}
+}
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/fmradio/FMRadio.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/fmradio/FMRadio.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/fmradio/FMRadio.java	(revision 1055)
@@ -0,0 +1,89 @@
+package com.mediatek.factorymode.fmradio;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.net.Uri;
+import android.os.Bundle;
+import android.util.Log;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.WindowManager;
+import android.widget.Button;
+
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.R;
+
+public class FMRadio extends Activity{
+	
+	private Button successbutton;
+	private Button failbuttonButton;
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+		//getWindow().addFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		setContentView(R.layout.fmradio);
+		
+		successbutton = (Button)this.findViewById(R.id.fm_bt_ok);
+		failbuttonButton = (Button)this.findViewById(R.id.fm_bt_failed);
+		successbutton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				//Intent broadcastIntent = new Intent("FactoryModeSendFmStop");
+				//sendBroadcast(broadcastIntent);
+				Intent intent = new Intent(FMRadio.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intent);
+				finish();
+			}
+			
+		});
+		failbuttonButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				//Intent broadcastIntent = new Intent("FactoryModeSendFmStop");
+				//sendBroadcast(broadcastIntent);
+				Intent intent = new Intent(FMRadio.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_FAIL,intent);
+				finish();
+			}
+			
+		});
+		Intent intent = new Intent();
+		intent.setClassName("com.tct.fmradio", "com.tct.fmradio.ui.FMActivity");
+		startActivity(intent);
+	}
+	@Override
+	protected void onRestart() {
+		// TODO Auto-generated method stub
+		super.onRestart();
+	}
+	@Override
+	protected void onResume() {
+		// TODO Auto-generated method stub
+		super.onResume();
+	}
+	
+	@Override
+	protected void onDestroy() {
+		super.onDestroy();
+	}
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(FMRadio.this, FactoryMode.class);
+			setResult(FactoryMode.TEST_CANCEL,intent);
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/NvRAMAgent.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/NvRAMAgent.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/NvRAMAgent.java	(revision 1055)
@@ -0,0 +1,203 @@
+/* Copyright Statement:
+ *
+ * This software/firmware and related documentation ("MediaTek Software") are
+ * protected under relevant copyright laws. The information contained herein is
+ * confidential and proprietary to MediaTek Inc. and/or its licensors. Without
+ * the prior written permission of MediaTek inc. and/or its licensors, any
+ * reproduction, modification, use or disclosure of MediaTek Software, and
+ * information contained herein, in whole or in part, shall be strictly
+ * prohibited.
+ *
+ * MediaTek Inc. (C) 2010. All rights reserved.
+ *
+ * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
+ * THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
+ * RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO RECEIVER
+ * ON AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL
+ * WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR
+ * NONINFRINGEMENT. NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH
+ * RESPECT TO THE SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY,
+ * INCORPORATED IN, OR SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES
+ * TO LOOK ONLY TO SUCH THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO.
+ * RECEIVER EXPRESSLY ACKNOWLEDGES THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO
+ * OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES CONTAINED IN MEDIATEK
+ * SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK SOFTWARE
+ * RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
+ * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S
+ * ENTIRE AND CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE
+ * RELEASED HEREUNDER WILL BE, AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE
+ * MEDIATEK SOFTWARE AT ISSUE, OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE
+ * CHARGE PAID BY RECEIVER TO MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
+ *
+ * The following software/firmware and/or related documentation ("MediaTek
+ * Software") have been modified by MediaTek Inc. All revisions are subject to
+ * any receiver's applicable license agreements with MediaTek Inc.
+ */
+
+/*
+ * This file is auto-generated.  DO NOT MODIFY.
+ * Original file: NvRAMAgent.aidl
+ */
+
+package com.mediatek.factorymode;
+
+import android.os.IBinder;
+
+public interface NvRAMAgent extends android.os.IInterface {
+    /** Local-side IPC implementation stub class. */
+    public abstract static class Stub extends android.os.Binder implements NvRAMAgent {
+        private static final java.lang.String DESCRIPTOR = "NvRAMAgent";
+        /** Construct the stub at attach it to the interface. */
+        public Stub() {
+            this.attachInterface(this, DESCRIPTOR);
+        }
+        /**
+         * Cast an IBinder object into an NvRAMAgent interface,
+         * generating a proxy if needed.
+         */
+        public static NvRAMAgent asInterface(android.os.IBinder obj) {
+            if ((obj == null)) {
+                return null;
+            }
+            android.os.IInterface iin = (android.os.IInterface)obj.queryLocalInterface(DESCRIPTOR);
+            if (((iin != null) && (iin instanceof NvRAMAgent))) {
+                return ((NvRAMAgent)iin);
+            }
+            return new NvRAMAgent.Stub.Proxy(obj);
+        }
+        public android.os.IBinder asBinder() {
+            return this;
+        }
+        public boolean onTransact(int code, android.os.Parcel data, android.os.Parcel reply, int flags)
+                throws android.os.RemoteException {
+            switch (code) {
+                case INTERFACE_TRANSACTION: {
+                    reply.writeString(DESCRIPTOR);
+                    return true;
+                }
+                case TRANSACTION_READFILE: {
+                    data.enforceInterface(DESCRIPTOR);
+                    int _arg0;
+                    _arg0 = data.readInt();
+                    byte[] _result = this.readFile(_arg0);
+                    reply.writeNoException();
+                    reply.writeByteArray(_result);
+                    return true;
+                }
+                case TRANSACTION_WRITEFILE: {
+                    data.enforceInterface(DESCRIPTOR);
+                    int _arg0;
+                    _arg0 = data.readInt();
+                    byte[] _arg1;
+                    _arg1 = data.createByteArray();
+                    int _result = this.writeFile(_arg0, _arg1);
+                    reply.writeNoException();
+                    reply.writeInt(_result);
+                    return true;
+                }
+                default: {
+                    break;
+                }
+            }
+            return super.onTransact(code, data, reply, flags);
+        }
+        private static class Proxy implements NvRAMAgent {
+            private android.os.IBinder mRemote;
+            Proxy(android.os.IBinder remote) {
+                mRemote = remote;
+            }
+            public android.os.IBinder asBinder() {
+                return mRemote;
+            }
+            public java.lang.String getInterfaceDescriptor() {
+                return DESCRIPTOR;
+            }
+            public byte[] readFile(int file_lid) throws android.os.RemoteException {
+                android.os.Parcel _data = android.os.Parcel.obtain();
+                android.os.Parcel _reply = android.os.Parcel.obtain();
+                byte[] _result;
+
+                try {
+                    _data.writeInterfaceToken(DESCRIPTOR);
+                    _data.writeInt(file_lid);
+                    mRemote.transact(Stub.TRANSACTION_READFILE, _data, _reply, 0);
+                    _reply.readException();
+                    _result = _reply.createByteArray();
+                } finally {
+                    _reply.recycle();
+                    _data.recycle();
+                }
+
+                return _result;
+            }
+            public int writeFile(int file_lid, byte[] buff) throws android.os.RemoteException {
+                android.os.Parcel _data = android.os.Parcel.obtain();
+                android.os.Parcel _reply = android.os.Parcel.obtain();
+                int _result;
+
+                try {
+                    _data.writeInterfaceToken(DESCRIPTOR);
+                    _data.writeInt(file_lid);
+                    _data.writeByteArray(buff);
+                    mRemote.transact(Stub.TRANSACTION_WRITEFILE, _data, _reply, 0);
+                    _reply.readException();
+                    _result = _reply.readInt();
+                } finally {
+                    _reply.recycle();
+                    _data.recycle();
+                }
+
+                return _result;
+            }
+
+            public byte[] readFileByName(String filename) throws android.os.RemoteException {
+                android.os.Parcel _data = android.os.Parcel.obtain();
+                android.os.Parcel _reply = android.os.Parcel.obtain();
+                byte[] _result;
+
+                try {
+                    _data.writeInterfaceToken(DESCRIPTOR);
+                    _data.writeString(filename);
+                    mRemote.transact(Stub.TRANSACTION_READFILEBYNAME, _data, _reply, 0);
+                    _reply.readException();
+                    _result = _reply.createByteArray();
+                } finally {
+                    _reply.recycle();
+                    _data.recycle();
+                }
+
+                return _result;
+            }
+
+            public int writeFileByName(String filename, byte[] buff)
+                throws android.os.RemoteException {
+                android.os.Parcel _data = android.os.Parcel.obtain();
+                android.os.Parcel _reply = android.os.Parcel.obtain();
+                int _result;
+
+                try {
+                    _data.writeInterfaceToken(DESCRIPTOR);
+                    _data.writeString(filename);
+                    _data.writeByteArray(buff);
+                    mRemote.transact(Stub.TRANSACTION_WRITEFILEBYNAME, _data, _reply, 0);
+                    _reply.readException();
+                    _result = _reply.readInt();
+                } finally {
+                    _reply.recycle();
+                    _data.recycle();
+                }
+
+                return _result;
+            }
+        }
+        static final int TRANSACTION_READFILE = (IBinder.FIRST_CALL_TRANSACTION + 0);
+        static final int TRANSACTION_WRITEFILE = (IBinder.FIRST_CALL_TRANSACTION + 1);
+        static final int TRANSACTION_READFILEBYNAME = (IBinder.FIRST_CALL_TRANSACTION + 2);
+        static final int TRANSACTION_WRITEFILEBYNAME = (IBinder.FIRST_CALL_TRANSACTION + 3);
+    }
+    public byte[] readFile(int file_lid) throws android.os.RemoteException;
+    public int writeFile(int file_lid, byte[] buff) throws android.os.RemoteException;
+    public byte[] readFileByName(String filepath) throws android.os.RemoteException;
+    public int writeFileByName(String filepath, byte[] buff) throws android.os.RemoteException;
+}
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/flashlight/FlashLight.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/flashlight/FlashLight.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/flashlight/FlashLight.java	(revision 1055)
@@ -0,0 +1,268 @@
+package com.mediatek.factorymode.flashlight;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.graphics.SurfaceTexture;
+import android.hardware.Camera;
+import android.hardware.Camera.Parameters;
+import android.hardware.camera2.CameraAccessException;
+import android.hardware.camera2.CameraCaptureSession;
+import android.hardware.camera2.CameraCharacteristics;
+import android.hardware.camera2.CameraDevice;
+import android.hardware.camera2.CameraManager;
+import android.hardware.camera2.CameraMetadata;
+import android.hardware.camera2.CaptureRequest;
+import android.hardware.camera2.params.StreamConfigurationMap;
+import android.os.Build;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Looper;
+import android.os.Message;
+import android.util.Log;
+import android.view.KeyEvent;
+import android.view.Surface;
+import android.view.View;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.TextView;
+
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.R;
+
+import java.util.ArrayList;  
+import java.util.List;
+
+public class FlashLight extends Activity{
+  private final String TAG = "FlashLightTest";
+  private Button succesButton ;
+  private Button failButton ;
+  private Camera camera;
+  private int count;
+  public final static int OPEN_CAMERA = 1011;
+  public final static int CLOSE_CAMERA = 1012;
+  private CameraManager manager = null;
+  private CameraDevice cameraDevice;
+  private CameraCaptureSession captureSession = null;
+  private CaptureRequest request = null;
+  private SurfaceTexture surfaceTexture;
+  private Surface surface;
+  private String cameraId = null;
+  private boolean isSupportFlashCamera2 = false;
+  private boolean isOpen = false;
+  private final CameraCaptureSession.StateCallback stateCallback = new CameraCaptureSession.StateCallback() {
+    public void onConfigured(CameraCaptureSession arg0) {
+      captureSession = arg0;
+      CaptureRequest.Builder builder;
+      try {
+        builder = cameraDevice.createCaptureRequest(CameraDevice.TEMPLATE_PREVIEW);
+        builder.set(CaptureRequest.FLASH_MODE, CameraMetadata.FLASH_MODE_TORCH);
+        builder.addTarget(surface);
+        request = builder.build();
+        captureSession.capture(request, null, null);
+      } catch (CameraAccessException e) {
+        Log.e(TAG, e.getMessage());
+      }
+    };
+    public void onConfigureFailed(CameraCaptureSession arg0) {
+    };
+  };
+  
+  @Override
+  protected void onCreate(Bundle savedInstanceState) {
+    // TODO Auto-generated method stub
+    super.onCreate(savedInstanceState);
+    //getWindow().addFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+    getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_IMMERSIVE_GESTURE_ISOLATED);		
+    setContentView(R.layout.flashlight);
+    count = 0;
+    succesButton = (Button)this.findViewById(R.id.flashlight_bt_ok);
+    failButton = (Button)this.findViewById(R.id.flashlight_bt_failed);
+    succesButton.setOnClickListener(new Button.OnClickListener(){
+      
+      @Override
+      public void onClick(View v) {
+        // TODO Auto-generated method stub
+        Intent intent = new Intent(FlashLight.this, FactoryMode.class);
+        setResult(FactoryMode.TEST_OK,intent);
+        finish();
+      }
+    });
+    failButton.setOnClickListener(new Button.OnClickListener(){
+      
+      @Override
+      public void onClick(View v) {
+        // TODO Auto-generated method stub
+        Intent intent = new Intent(FlashLight.this, FactoryMode.class);
+        setResult(FactoryMode.TEST_FAIL,intent);
+        finish();
+      }
+    });
+    this.manager = (CameraManager) getSystemService(Context.CAMERA_SERVICE);
+    initCamera2();
+    handler.sendEmptyMessage(OPEN_CAMERA);
+  }
+  
+  Handler handler = new Handler(Looper.getMainLooper()) {
+    @Override
+    public void handleMessage(Message msg) {
+      switch (msg.what) {
+        case OPEN_CAMERA:
+          if (isLOLLIPOP()) {
+            try {
+              openCamera2Flash();
+            } catch (CameraAccessException e) {
+              Log.e(TAG, e.getMessage());
+            } catch (Exception e) {
+              e.printStackTrace();
+            }
+          } else {
+            turnLightOnCamera(camera);
+          }
+          isOpen = true;
+          count++;
+          handler.sendEmptyMessageDelayed(CLOSE_CAMERA , 400);
+          break;
+        case CLOSE_CAMERA:
+          if (isOpen) {
+            if (isLOLLIPOP()) {
+              if (cameraDevice != null) {
+                cameraDevice.close();
+              }
+            } else {
+              turnLightOffCamera(camera);
+            }
+            isOpen = false;
+          }
+          if( 0 < count && count < 6){
+            handler.sendEmptyMessageDelayed(OPEN_CAMERA , 1000);
+          }
+        default:
+          break;
+      }
+    }
+  };
+  
+  private void createCaptureSession() {
+    this.surfaceTexture = new SurfaceTexture(0, false);
+    this.surface = new Surface(this.surfaceTexture);
+    ArrayList localArrayList = new ArrayList(1);
+    localArrayList.add(this.surface);
+    try {
+      this.cameraDevice.createCaptureSession(localArrayList, this.stateCallback, null);
+    } catch (CameraAccessException e) {
+      Log.e(TAG, e.getMessage());
+    }
+  }
+  
+  private void openCamera2Flash() throws CameraAccessException {
+    manager.openCamera(cameraId, new CameraDevice.StateCallback() {
+      
+      @Override
+      public void onOpened(CameraDevice camera) {
+        cameraDevice = camera;
+        createCaptureSession();
+      }
+      
+      @Override
+      public void onError(CameraDevice camera, int error) {
+      }
+      @Override
+      public void onDisconnected(CameraDevice camera) {
+      }
+    }, null);
+  }
+  
+  private void initCamera2() {
+    try {
+      for (String cameraId : this.manager.getCameraIdList()) {
+        CameraCharacteristics characteristics = this.manager.getCameraCharacteristics(cameraId);
+        // ���˵�ǰ������ͷ
+        Integer facing = characteristics.get(CameraCharacteristics.LENS_FACING);
+        if (facing != null && facing == CameraCharacteristics.LENS_FACING_FRONT) {
+          continue;
+        }
+        StreamConfigurationMap map = characteristics.get(CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP);
+        if (map == null) {
+          continue;
+        }
+        this.cameraId = cameraId;
+        // �ж��豸�Ƿ�֧�������
+        this.isSupportFlashCamera2 = characteristics.get(CameraCharacteristics.FLASH_INFO_AVAILABLE);
+      }
+    } catch (CameraAccessException e) {
+      Log.e(TAG, e.getMessage());
+    }
+  }
+  
+  public void turnLightOnCamera(Camera mCamera) {
+    Camera.Parameters parameters = camera.getParameters();
+    List<String> flashModes = parameters.getSupportedFlashModes();
+    String flashMode = parameters.getFlashMode();
+    if (!Camera.Parameters.FLASH_MODE_TORCH.equals(flashMode)) {
+      // ���������
+      if (flashModes.contains(Camera.Parameters.FLASH_MODE_TORCH)) {
+        parameters.setFlashMode(Camera.Parameters.FLASH_MODE_TORCH);
+        mCamera.setParameters(parameters);
+      }
+    }
+  }
+  
+  public void turnLightOffCamera(Camera mCamera) {
+    Camera.Parameters parameters = mCamera.getParameters();
+    List<String> flashModes = parameters.getSupportedFlashModes();
+    String flashMode = parameters.getFlashMode();
+    if (!Camera.Parameters.FLASH_MODE_OFF.equals(flashMode)) {
+      // �ر������
+      if (flashModes.contains(Camera.Parameters.FLASH_MODE_OFF)) {
+        parameters.setFlashMode(Camera.Parameters.FLASH_MODE_OFF);
+        mCamera.setParameters(parameters);  
+      }
+    }
+  }
+  
+  private boolean isLOLLIPOP() {
+    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
+      return true;
+    } else {
+      return false;
+    }
+  }
+  
+  @Override
+  protected void onPause() {
+    // TODO Auto-generated method stub
+    super.onPause();
+  }
+  
+  @Override
+  protected void onResume() {
+    // TODO Auto-generated method stub
+    super.onResume();
+  }
+  
+  @Override
+  protected void onDestroy() {
+    //getWindow().clearFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+    count = 0;
+    handler.removeMessages(1011);
+    handler.removeMessages(1012);
+    handler.sendEmptyMessage(CLOSE_CAMERA);
+    super.onDestroy();
+  }
+  
+  @Override
+  public boolean onKeyUp(int keyCode, KeyEvent event) {
+    switch (keyCode) {
+      case KeyEvent.KEYCODE_MENU:
+        return true;
+      case KeyEvent.KEYCODE_BACK:
+        Intent intent = new Intent(FlashLight.this, FactoryMode.class);
+        setResult(FactoryMode.TEST_CANCEL,intent);
+        finish();
+        return true;
+    }
+    return super.onKeyUp(keyCode, event);
+  }
+}
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/Iris.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/Iris.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/Iris.java	(revision 1055)
@@ -0,0 +1,103 @@
+package com.mediatek.factorymode;
+
+
+
+import android.app.Activity;
+
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Message;
+import android.util.Log;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.WindowManager;
+
+import android.widget.Button;
+
+import android.widget.TextView;
+
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.R;
+
+
+public class Iris extends Activity {
+	private TextView btstate;
+	
+	private static String TAG ="Iris";
+	
+	private Button succesButton ;
+	private Button failButton ;
+	
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+		getWindow().setFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON,WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
+		if(savedInstanceState == null){
+			Intent intent = new Intent();
+			intent.setClassName("com.android.systemui", "com.irisking.scanner.IrisActivity");
+			//intent.putExtra("IsInFactoryModeTest", true);
+			//intent.putExtra("FactoryModeTestCameraId", 0);
+			intent.putExtra("isFMode", true);
+			startActivity(intent);
+			Log.v(TAG, " onCreate   savedInstanceState" + savedInstanceState);
+		}
+		setContentView(R.layout.iris);
+		succesButton = (Button)this.findViewById(R.id.camera_btok);
+		failButton = (Button)this.findViewById(R.id.camera_btfailed);
+		
+		succesButton.setOnClickListener(new Button.OnClickListener(){
+			
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(Iris.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intent);
+				finish();
+			}
+			
+		});
+		failButton.setOnClickListener(new Button.OnClickListener(){
+			
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(Iris.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_FAIL,intent);
+				finish();
+			}
+			
+		});
+		
+		
+	}
+
+	@Override
+	protected void onDestroy() {
+		// TODO Auto-generated method stub
+		
+		super.onDestroy();
+	}
+
+	
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(Iris.this, FactoryMode.class);
+			setResult(FactoryMode.TEST_CANCEL,intent);
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/backlight/BackLight.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/backlight/BackLight.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/backlight/BackLight.java	(revision 1055)
@@ -0,0 +1,105 @@
+package com.mediatek.factorymode.backlight;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.WindowManager;
+import android.widget.Button;
+
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.R;
+import com.mediatek.factorymode.earphone.Earphone;
+
+public class BackLight extends Activity {
+	private Button succesButton ;
+	private Button failButton ;
+	private boolean  lcd_off_flag = false;
+	private boolean  lcd_on_flag = false;
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+		//getWindow().addFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		setContentView(R.layout.backlight);
+		Button display_lcd_on = (Button)this.findViewById(R.id.Display_lcd_on);
+		display_lcd_on.setOnClickListener(new Button.OnClickListener(){
+			public void onClick(View v)
+			{
+				WindowManager.LayoutParams lp = getWindow().getAttributes();
+				lp.screenBrightness = 1.0f;
+				getWindow().setAttributes(lp);
+				lcd_on_flag  = true;
+				if(lcd_off_flag == true && lcd_on_flag == true){
+					succesButton.setEnabled(true);
+				}else{
+					succesButton.setEnabled(false);
+				}
+			}
+		});
+		Button display_lcd_off = (Button)this.findViewById(R.id.Display_lcd_off);
+		display_lcd_off.setOnClickListener(new Button.OnClickListener(){
+			public void onClick(View v)
+			{
+				WindowManager.LayoutParams lp = getWindow().getAttributes();
+
+				lp.screenBrightness = 0.1f;
+
+				getWindow().setAttributes(lp);
+				lcd_off_flag = true;
+				if(lcd_off_flag == true && lcd_on_flag == true){
+					succesButton.setEnabled(true);
+				}else{
+					succesButton.setEnabled(false);
+				}
+			}
+		});
+		succesButton = (Button)this.findViewById(R.id.display_bt_ok);
+		failButton = (Button)this.findViewById(R.id.display_bt_failed);
+		succesButton.setEnabled(false);
+		succesButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(BackLight.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intent);
+				finish();
+			}
+			
+		});
+		failButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(BackLight.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_FAIL,intent);
+				finish();
+			}
+			
+		});
+		}
+	
+	@Override
+	protected void onDestroy() {
+		//getWindow().clearFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		super.onDestroy();
+	}
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(BackLight.this, FactoryMode.class);
+			setResult(FactoryMode.TEST_CANCEL,intent);
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/camera/SubCamera.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/camera/SubCamera.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/camera/SubCamera.java	(revision 1055)
@@ -0,0 +1,109 @@
+
+package com.mediatek.factorymode.camera;
+
+import java.io.BufferedOutputStream;
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.content.pm.ActivityInfo;
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
+import android.graphics.PixelFormat;
+import android.hardware.Camera;
+import android.hardware.Camera.AutoFocusCallback;
+import android.hardware.Camera.PictureCallback;
+import android.hardware.Camera.ShutterCallback;
+import android.os.Bundle;
+import android.os.Environment;
+import android.util.Log;
+import android.view.KeyEvent;
+import android.view.SurfaceHolder;
+import android.view.SurfaceView;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.content.res.Configuration;
+
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.R;
+import com.mediatek.factorymode.memory.Memory;
+
+public class SubCamera extends Activity {
+	public static final String TAG = "SubCamera";
+	private Button succesButton;
+	private Button failButton;
+	
+	@Override
+	public void onCreate(Bundle savedInstanceState) {
+		super.onCreate(savedInstanceState);
+		if(savedInstanceState == null){
+			Intent intent = new Intent();
+      intent.setClassName("com.mediatek.camera", "com.mediatek.camera.CameraActivity");
+      intent.setAction("android.action.FactoryModeTest");
+      intent.putExtra("FactoryModeTestCameraId", 1);
+      startActivity(intent);
+			Log.v(TAG, " onCreate   savedInstanceState" + savedInstanceState);
+		}
+		setContentView(R.layout.camera);
+		
+		setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
+		succesButton = (Button)this.findViewById(R.id.camera_btok);
+		failButton = (Button)this.findViewById(R.id.camera_btfailed);
+		succesButton.setOnClickListener(new Button.OnClickListener(){
+			
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(SubCamera.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intent);
+				finish();
+			}
+			
+		});
+		failButton.setOnClickListener(new Button.OnClickListener(){
+			
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(SubCamera.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_FAIL,intent);
+				finish();
+			}
+			
+		});
+	}
+	
+	@Override
+	public void onConfigurationChanged(Configuration newConfig) {
+		super.onConfigurationChanged(newConfig);
+		Log.v(TAG, "sparrow1 onConfigurationChanged");
+	}
+	
+	@Override
+	protected void onDestroy() {
+		super.onDestroy();
+		Log.v(TAG, " onDestroy");
+	}
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(SubCamera.this, FactoryMode.class);
+			setResult(FactoryMode.TEST_CANCEL,intent);
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/camera/CameraTest.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/camera/CameraTest.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/camera/CameraTest.java	(revision 1055)
@@ -0,0 +1,109 @@
+package com.mediatek.factorymode.camera;
+
+import java.io.BufferedOutputStream;
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.content.pm.ActivityInfo;
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
+import android.graphics.PixelFormat;
+import android.hardware.Camera;
+import android.hardware.Camera.AutoFocusCallback;
+import android.hardware.Camera.PictureCallback;
+import android.hardware.Camera.ShutterCallback;
+import android.os.Bundle;
+import android.os.Environment;
+import android.util.Log;
+import android.view.KeyEvent;
+import android.view.SurfaceHolder;
+import android.view.SurfaceView;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.content.res.Configuration;
+
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.R;
+import com.mediatek.factorymode.memory.Memory;
+
+public class CameraTest extends Activity {
+
+	public static final String TAG = "CameraTest";
+	private Button succesButton;
+	private Button failButton;
+	
+	@Override  
+	public void onCreate(Bundle savedInstanceState) {
+		super.onCreate(savedInstanceState);
+		if(savedInstanceState == null){
+			Intent intent = new Intent();
+      intent.setClassName("com.mediatek.camera", "com.mediatek.camera.CameraActivity");
+      intent.setAction("android.action.FactoryModeTest");
+      intent.putExtra("FactoryModeTestCameraId", 0);
+      startActivity(intent);
+			Log.v(TAG, " onCreate   savedInstanceState" + savedInstanceState);
+		}
+		setContentView(R.layout.camera);
+		
+		setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
+		succesButton = (Button)this.findViewById(R.id.camera_btok);
+		failButton = (Button)this.findViewById(R.id.camera_btfailed);
+		succesButton.setOnClickListener(new Button.OnClickListener(){
+			
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(CameraTest.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intent);
+				finish();
+			}
+			
+		});
+		failButton.setOnClickListener(new Button.OnClickListener(){
+			
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(CameraTest.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_FAIL,intent);
+				finish();
+			}
+			
+		});
+	}
+	
+	@Override
+	public void onConfigurationChanged(Configuration newConfig) {
+		super.onConfigurationChanged(newConfig);
+		Log.v(TAG, "sparrow1 onConfigurationChanged");
+	}
+	
+	@Override
+	protected void onDestroy() {
+		super.onDestroy();
+		Log.v(TAG, " onDestroy");
+	}
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(CameraTest.this, FactoryMode.class);
+			setResult(FactoryMode.TEST_CANCEL,intent);
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}  
\ No newline at end of file
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/gps/GPS.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/gps/GPS.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/gps/GPS.java	(revision 1055)
@@ -0,0 +1,252 @@
+package com.mediatek.factorymode.gps;
+
+import android.app.Activity;
+import android.app.PendingIntent;
+import android.app.PendingIntent.CanceledException;
+import android.content.ContentResolver;
+import android.content.Context;
+import android.content.Intent;
+import android.location.GpsSatellite;
+import android.location.GpsStatus;
+import android.location.Location;
+import android.location.LocationListener;
+import android.location.LocationManager;
+import android.net.Uri;
+import android.os.Bundle;
+import android.provider.Settings;
+import android.util.Log;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.Chronometer;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.R;
+import com.mediatek.factorymode.R.string;
+
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+
+public class GPS extends Activity {
+	static final String TAG = "FactoryMode/GPS";
+	private TextView gps_state_id;
+	private TextView gps_satellite_id;
+	private TextView gps_signal_id;
+	private TextView gps_result_id;
+	private Chronometer gps_time_id;
+	private Button succesButton ;
+	private Button failButton ;
+	private long exitTime = 0;
+	private LocationManager mLocationManager;
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+		//getWindow().addFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		setContentView(R.layout.gps);
+		gps_state_id = (TextView) this.findViewById(R.id.gps_state_id);
+		gps_satellite_id = (TextView) this.findViewById(R.id.gps_satellite_id);
+		gps_signal_id = (TextView) this.findViewById(R.id.gps_signal_id);
+		gps_result_id = (TextView) this.findViewById(R.id.gps_result_id);
+		
+		succesButton = (Button)this.findViewById(R.id.gps_bt_ok);
+		failButton = (Button)this.findViewById(R.id.gps_bt_failed);
+		succesButton.setEnabled(false);
+		
+		gps_time_id = (Chronometer) this.findViewById(R.id.gps_time_id);
+		gps_time_id.setFormat(getString(R.string.GPS_time));
+		gps_time_id.start();
+		
+		gps_satellite_id.setText(getString(R.string.GPS_satelliteNum)+0);
+		gps_signal_id.setText(getString(R.string.GPS_Signal)+"nosignal");
+		mLocationManager = (LocationManager) this.getSystemService(Context.LOCATION_SERVICE);
+		openGPSSettings();
+		getLocation(); 
+		
+		succesButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(GPS.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intent);
+				finish();
+			}
+			
+		});
+		failButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(GPS.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_FAIL,intent);
+				finish();
+			}
+			
+		});
+
+	}
+
+	@Override
+	protected void onDestroy() {
+		// TODO Auto-generated method stub
+		//getWindow().clearFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		mLocationManager.removeUpdates(locationListener);
+		mLocationManager.removeGpsStatusListener(statusListener);
+		/*
+		Intent gpsIntent = new Intent();
+		gpsIntent.setClassName("com.android.settings","com.android.settings.widget.SettingsAppWidgetProvider");
+		gpsIntent.addCategory("android.intent.category.ALTERNATIVE");
+		gpsIntent.setData(Uri.parse("custom:3"));
+		try {
+			PendingIntent.getBroadcast(this, 0, gpsIntent, 0).send();
+		}
+		catch (CanceledException e) {
+			e.printStackTrace();
+		}*/
+		super.onDestroy();
+	}
+
+	private void openGPSSettings() {
+		/*
+		LocationManager alm = (LocationManager) this.getSystemService(Context.LOCATION_SERVICE);
+		if (alm.isProviderEnabled(android.location.LocationManager.GPS_PROVIDER)) {
+			gps_state_id.setText(getString(R.string.GPS_connect));
+			return;
+		}
+		Intent gpsIntent = new Intent();
+		gpsIntent.setClassName("com.android.settings","com.android.settings.widget.SettingsAppWidgetProvider");
+		gpsIntent.addCategory("android.intent.category.ALTERNATIVE");
+		gpsIntent.setData(Uri.parse("custom:3"));
+		try {
+			gps_state_id.setText(getString(R.string.GPS_connect));
+			PendingIntent.getBroadcast(this, 0, gpsIntent, 0).send();
+		}
+		catch (CanceledException e) {
+			e.printStackTrace();
+		}
+		//ContentResolver resolver = this.getContentResolver();
+		//Settings.Secure.setLocationProviderEnabled(resolver, LocationManager.GPS_PROVIDER,true);
+		*/
+		int currentMode = Settings.Secure.getInt(getContentResolver(), Settings.Secure.LOCATION_MODE, Settings.Secure.LOCATION_MODE_OFF);
+		Log.d(TAG, "openGPSSettings: currentMode = " + currentMode);
+		if(currentMode != Settings.Secure.LOCATION_MODE_SENSORS_ONLY) {
+			int newMode = Settings.Secure.LOCATION_MODE_SENSORS_ONLY;
+			Intent intent = new Intent("com.android.settings.location.MODE_CHANGING");
+			intent.putExtra("CURRENT_MODE", currentMode);
+			intent.putExtra("NEW_MODE", newMode);
+			sendBroadcast(intent, android.Manifest.permission.WRITE_SECURE_SETTINGS);
+			Settings.Secure.putInt(getContentResolver(), Settings.Secure.LOCATION_MODE, newMode);
+		}
+	}
+	
+	private static boolean getGpsState(Context context) {
+		ContentResolver resolver = context.getContentResolver();
+		boolean open = Settings.Secure.isLocationProviderEnabled(resolver, LocationManager.GPS_PROVIDER);
+		System.out.println("getGpsState:"+open);
+		return open;
+	}
+	private void getLocation() {
+		// Criteria criteria = new Criteria();
+		// criteria.setAccuracy(Criteria.ACCURACY_FINE);
+		// criteria.setAltitudeRequired(false);
+		// criteria.setBearingRequired(false);
+		// criteria.setCostAllowed(true);
+		// criteria.setPowerRequirement(Criteria.POWER_LOW);
+		// String provider = locationManager.getBestProvider(criteria, true);
+		String provider = LocationManager.GPS_PROVIDER;
+		Location location = mLocationManager.getLastKnownLocation(provider);
+		if (location == null)
+			location = mLocationManager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);
+		updateToNewLocation(location);
+		mLocationManager.requestLocationUpdates(provider, 1000, 0, locationListener);
+		mLocationManager.addGpsStatusListener(statusListener);
+	}
+	
+	private List<GpsSatellite> numSatelliteList = new ArrayList<GpsSatellite>();
+	private final GpsStatus.Listener statusListener = new GpsStatus.Listener() {
+		public void onGpsStatusChanged(int event) {
+			GpsStatus status = mLocationManager.getGpsStatus(null);
+			updateGpsStatus(event, status);
+		}
+	};
+
+	private void updateGpsStatus(int event, GpsStatus status) {
+		if (event == GpsStatus.GPS_EVENT_SATELLITE_STATUS) {
+			int maxSatellites = status.getMaxSatellites();
+			Iterator<GpsSatellite> it = status.getSatellites().iterator();
+			numSatelliteList.clear();
+			int count = 0;
+			while (it.hasNext() && count <= maxSatellites) {
+				GpsSatellite s = it.next();
+				numSatelliteList.add(s);
+				count++;
+			}
+		}
+		gps_satellite_id.setText(getString(R.string.GPS_satelliteNum)+numSatelliteList.size() );
+		// yaoming, After receiving the satellite around (3 star) to automatically jump to the next test, 20130426
+		if(numSatelliteList.size()==0){
+			gps_signal_id.setText(getString(R.string.GPS_Signal)+numSatelliteList.size());
+		}else if (numSatelliteList.size()>3){
+			gps_signal_id.setText(getString(R.string.GPS_Signal)+getString(R.string.GPS_normal));
+			succesButton.setEnabled(true);
+			Intent intent = new Intent(GPS.this, FactoryMode.class);
+			setResult(FactoryMode.TEST_OK,intent);
+			finish();
+			succesButton.setEnabled(true);
+		}else{
+			gps_signal_id.setText(getString(R.string.GPS_Signal)+numSatelliteList.size());
+		}
+	}
+	
+	private void updateToNewLocation(Location location) {
+		TextView tv1;
+		// tv1 = (TextView) this.findViewById(R.id.tv1);
+		if (location != null) {
+		} else {
+		}
+	}
+
+	private final LocationListener locationListener = new LocationListener() {
+		public void onLocationChanged(Location location) {
+			if (location != null) {
+				updateToNewLocation(location);
+			}
+		}
+		
+		public void onProviderDisabled(String provider) {
+			updateToNewLocation(null);
+		}
+
+		public void onProviderEnabled(String provider) {
+		}
+
+		public void onStatusChanged(String provider, int status, Bundle extras) {
+		}
+	};
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+      if((System.currentTimeMillis()-exitTime) > 2000 && FactoryMode.isAutoTest){
+        Toast.makeText(getApplicationContext(), getString(R.string.exit_message), Toast.LENGTH_SHORT).show();
+        exitTime = System.currentTimeMillis();
+      } else {
+        Intent intent = new Intent(GPS.this, FactoryMode.class);
+        setResult(FactoryMode.TEST_CANCEL,intent);
+        finish();
+      }
+      return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/gps/YGPS.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/gps/YGPS.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/gps/YGPS.java	(revision 1055)
@@ -0,0 +1,17 @@
+package com.mediatek.factorymode.gps;
+
+import com.mediatek.factorymode.R;
+
+import android.app.Activity;
+import android.os.Bundle;
+
+public class YGPS extends Activity{
+
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+		setContentView(R.layout.ygps);
+	}
+
+}
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/Report.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/Report.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/Report.java	(revision 1055)
@@ -0,0 +1,181 @@
+package com.mediatek.factorymode;
+
+import android.app.Activity;
+import android.os.Bundle;
+import android.widget.TextView;
+public class Report extends Activity{
+	
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+		if(!FactoryMode.isAutoTest){
+			setTitle(R.string.SingleTestReport);
+		}else{
+			setTitle(R.string.AutoTestReport);
+		}
+		setContentView(R.layout.report);
+		TextView report_success = (TextView)this.findViewById(R.id.report_success);
+		TextView report_fail =(TextView)this.findViewById(R.id.report_failed);
+		TextView report_default =(TextView)this.findViewById(R.id.report_default);
+		String testsuccess = new String();
+		String testfail = new String();
+		String testdefault= new String();
+		int battery_test_pass_count = 0;
+		int battery_test_fail_count = 0;
+		for(int i = 0;i<FactoryMode.testitem.length;i++ ) {
+			String string = getStringbyitemid(FactoryMode.testitem[i]);
+			if((FactoryMode.isAutoTest ? FactoryMode.autotestResult[i]:FactoryMode.testResult[i])== FactoryMode.TEST_OK) {
+				if(i == getIndex(FactoryMode.TESTITEM_POWER) || i == getIndex(FactoryMode.TESTITEM_SMT)){
+					battery_test_pass_count ++;
+					if(battery_test_pass_count == 1){
+						testsuccess = testsuccess + "|" + getString(R.string.battery_name);
+					}
+				}else{
+					testsuccess = testsuccess + "|"+string;
+				}
+			}else if((FactoryMode.isAutoTest ? FactoryMode.autotestResult[i]:FactoryMode.testResult[i])== FactoryMode.TEST_FAIL) {
+				if(i == getIndex(FactoryMode.TESTITEM_POWER) || i == getIndex(FactoryMode.TESTITEM_SMT)){
+					battery_test_fail_count ++;
+					if(battery_test_fail_count > 1){
+						testfail = testfail + "|" + getString(R.string.battery_name);
+					}
+				}else{
+					testfail = testfail + "|" +string;
+				}
+			}else {
+				testdefault = testdefault + "|"+string;
+			}
+		}
+		report_success.setText(getString(R.string.report_ok)+testsuccess);
+		report_fail.setText(getString(R.string.report_failed)+testfail);
+		report_default.setText(getString(R.string.report_notest)+testdefault);
+		FactoryMode.isAutoTest = false;
+	}
+	private int getIndex(int testCode) {
+		int index = 0;
+		for(int i = 0;i < FactoryMode.testitem.length; i++) {
+			if(testCode == FactoryMode.testitem[i]){
+				index = i;
+				break;
+			}
+		}
+		return index;
+	}
+	private String getStringbyitemid(int item_id) {
+		String str = null;
+		switch (item_id) {
+		case FactoryMode.TESTITEM_VERSION:
+			str = getString(R.string.version_info);
+			break;
+		case FactoryMode.TESTITEM_TOUCH:
+			str = getString(R.string.touchscreen_name);
+			break;
+		case FactoryMode.TESTITEM_LCD:
+			str = getString(R.string.lcd_name);
+			break;
+		case FactoryMode.TESTITEM_GPS:
+			str = getString(R.string.gps_name);
+			break;
+		case FactoryMode.TESTITEM_POWER:
+			str = getString(R.string.battery_name);
+			break;
+		case FactoryMode.TESTITEM_KEY:
+			str = getString(R.string.KeyCode_name);
+			break;
+		case FactoryMode.TESTITEM_SPEAKER:
+			str = getString(R.string.speaker_name);
+			break;
+		case FactoryMode.TESTITEM_HEADSET:
+			str = getString(R.string.headset_name);
+			break;
+		case FactoryMode.TESTITEM_MIC:
+			str = getString(R.string.microphone_name);
+			break;
+		case FactoryMode.SUBTESTITEM_MIC:
+			str = getString(R.string.submicrophone_name);
+			break;
+		case FactoryMode.TESTITEM_LSENSORCALI:
+			str = getString(R.string.lsensor_cali_name);
+			break;
+		case FactoryMode.TESTITEM_RECEIVER:
+			str = getString(R.string.earphone_name);
+			break;
+		case FactoryMode.TESTITEM_WIFI:
+			str = getString(R.string.wifi_name);
+			break;
+		case FactoryMode.TESTITEM_BT:
+			str = getString(R.string.bluetooth_name);
+			break;
+		case FactoryMode.TESTITEM_SHAKE:
+			str = getString(R.string.vibrator_name);
+			break;
+		case FactoryMode.TESTITEM_CALL:
+			str = getString(R.string.telephone_name);
+			break;
+		case FactoryMode.TESTITEM_BL:
+			str = getString(R.string.backlight_name);
+			break;
+		case FactoryMode.TESTITEM_MEMORY:
+			str = getString(R.string.memory_name);
+			break;
+		case FactoryMode.TESTITEM_GSENSOR:
+			str = getString(R.string.gsensor_name);
+			break;
+		case FactoryMode.TESTITEM_MSENSOR:
+			str = getString(R.string.msensor_name);
+			break;
+		case FactoryMode.TESTITEM_LSENSOR:
+			str = getString(R.string.lsensor_name);
+			break;
+		case FactoryMode.TESTITEM_DSENSOR:
+			str = getString(R.string.psensor_name);
+			break;
+		case FactoryMode.TESTITEM_TCARD:
+			str = getString(R.string.sdcard_name);
+			break;
+		case FactoryMode.TESTITEM_BCAMERA:
+			str = getString(R.string.camera_name);
+			break;
+		case FactoryMode.TESTITEM_FCAMERA:
+			str = getString(R.string.subcamera_name);
+			break;
+	//	case FactoryMode.TESTITEM_IRIS:
+		//	str = getString(R.string.iris_name);
+			//break;
+		case FactoryMode.TESTITEM_FM:
+			str = getString(R.string.FMRadio);
+			break;
+		case FactoryMode.TESTITEM_SIM:
+			str = getString(R.string.SimCard);
+			break;
+		case FactoryMode.TESTITEM_LED:
+			str = getString(R.string.Led);
+			break;
+		case FactoryMode.TESTITEM_HALL:
+			str = getString(R.string.Hall);
+			break;
+	  case FactoryMode.TESTITEM_FINGER:
+			str = getString(R.string.finger);
+			break;
+		case FactoryMode.TESTITEM_FLASHLIGHT:
+			str = getString(R.string.flashlight);
+			break;
+		case FactoryMode.TESTITEM_OSENSOR:
+			str = getString(R.string.OSensor);
+			break;
+		case FactoryMode.TESTITEM_NFC:
+			str = getString(R.string.nfc_name);
+			break;
+		case FactoryMode.TESTITEM_GYRO:
+			str = getString(R.string.gyro);
+			break;
+		case FactoryMode.TESTITEM_SMT:
+			str = getString(R.string.smt_name);
+			break;	
+		default:
+			break;
+		}
+		return str;
+	}
+}
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/BatteryLog.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/BatteryLog.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/BatteryLog.java	(revision 1055)
@@ -0,0 +1,325 @@
+package com.mediatek.factorymode;
+
+import android.app.Activity;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.graphics.Color;
+import android.os.BatteryManager;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Message;
+import android.os.SystemClock;
+import android.text.format.Time;
+import android.util.Log;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import com.mediatek.factorymode.BatteryLogService;
+import com.mediatek.factorymode.FactoryMode;
+
+import java.text.SimpleDateFormat;
+import java.util.Date;
+import java.util.SimpleTimeZone;
+import java.io.FileReader;
+import java.io.IOException;
+
+public class BatteryLog extends Activity {
+
+  private static final String TAG = "BatteryLog";
+  private static final int TEST_RESULT_OK = 0;
+  private static final int TEST_RESULT_FAIL = 1;
+  private static final int TEST_RESULT_FULL_TIPS = 2;
+  private static final int TEST_RESULT_TESTING = 3;
+  private static final int TEST_RESULT_CHARGE_TIPS = 4;
+  private static final int TEST_RESULT_FIRST = 5;
+  private static final int TEST_RESULT_TEMPERATURE_ERROR = 6;
+  private static final int EVENT_COUNT_DOWN = 42;
+  private static int result = TEST_RESULT_CHARGE_TIPS;
+  private static int electronic = 0;
+  private static int counter = 0;
+  private static long countdown = 0;
+  private IntentFilter mIntentFilter;
+  private TextView mstatus;
+  private TextView mlevel;
+  private TextView mscale;
+  private TextView mhealth;
+  private TextView mvoltage;
+  private TextView mtemperature;
+  private TextView mtechnology;
+  private TextView muptime;
+  private TextView melectronic;
+  private TextView mcharger_type;
+  private TextView mcharger_result;
+  private Button successButton;
+  private Button failButton;
+  private int mVoltage;
+  private Long mChargetime = null;
+  private long exitTime = 0;
+
+  @Override
+  protected void onCreate(Bundle savedInstanceState) {
+    // TODO Auto-generated method stub
+    super.onCreate(savedInstanceState);
+    //getWindow().addFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+    setContentView(R.layout.battery_info);
+    if(FactoryMode.isAutoTest){
+      FactoryMode.shouldCharge = false;
+    }
+    IntentFilter filter = new IntentFilter();
+
+    mstatus = (TextView) this.findViewById(R.id.status);
+    mlevel = (TextView) this.findViewById(R.id.level);
+    mscale = (TextView) this.findViewById(R.id.scale);
+    mhealth = (TextView) this.findViewById(R.id.health);
+    mvoltage = (TextView) this.findViewById(R.id.voltage);
+    mtemperature = (TextView) this.findViewById(R.id.temperature);
+    mtechnology = (TextView) this.findViewById(R.id.technology);
+    muptime = (TextView) this.findViewById(R.id.uptime);
+    melectronic = (TextView) this.findViewById(R.id.electronic);
+    mcharger_type = (TextView) this.findViewById(R.id.charger_type);
+    mcharger_result = (TextView) this.findViewById(R.id.charger_result);
+    
+    successButton = (Button)this.findViewById(R.id.battery_bt_ok);
+    failButton = (Button)this.findViewById(R.id.battery_bt_failed);
+    successButton.setEnabled(false);
+    Long timeLong = SystemClock.elapsedRealtime();
+    timeLong = timeLong/1000;
+    long hour = timeLong/3600;
+    long minute = (timeLong%3600)/60;
+    long second = (timeLong%3600)%60;
+    muptime.setText(hour+getString(R.string.hour)+minute+getString(R.string.minute)+second+getString(R.string.second));
+    
+    successButton.setOnClickListener(new Button.OnClickListener(){
+      @Override
+      public void onClick(View v) {
+        // TODO Auto-generated method stub
+        Intent intent = new Intent(BatteryLog.this, FactoryMode.class);
+        setResult(FactoryMode.TEST_OK,intent);
+        finish();
+      }
+    });
+    
+    failButton.setOnClickListener(new Button.OnClickListener(){
+      @Override
+      public void onClick(View v) {
+        // TODO Auto-generated method stub
+        Intent intent = new Intent(BatteryLog.this, FactoryMode.class);
+        setResult(FactoryMode.TEST_FAIL,intent);
+        finish();
+      }
+    });
+  }
+  
+  @Override
+  protected void onResume() {
+    super.onResume();
+    result = BatteryLogService.result;
+    electronic = BatteryLogService.electronic;
+    Log.d(TAG, "electronic=" + electronic+"   result"+result+"   BB");
+    if(BatteryLogService.result !=TEST_RESULT_TESTING){
+      setResultText(result,electronic,counter,countdown);
+    }
+    IntentFilter filter = new IntentFilter();
+    filter.addAction(Intent.ACTION_BATTERY_CHANGED);
+    filter.addAction("techain.intent.action.BTRB");
+    registerReceiver(mIntentReceiver, filter);
+  }
+
+  @Override
+  protected void onPause() {
+    super.onPause();
+    unregisterReceiver(mIntentReceiver);
+  }
+  
+  @Override
+  protected void onDestroy() {
+    //getWindow().clearFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+    super.onDestroy();
+  }
+  
+  private BroadcastReceiver mIntentReceiver = new BroadcastReceiver() {
+    @Override
+    public void onReceive(Context context, Intent intent) {
+      Log.d(TAG, "onReceive: Action = " + intent.getAction());
+      String action = intent.getAction();
+      int plugged = intent.getIntExtra("plugged", 0);
+      if (action.equals(Intent.ACTION_BATTERY_CHANGED)) {
+        int status = intent.getIntExtra("status", 0);
+        int health = intent.getIntExtra("health", 0);
+        boolean present = intent.getBooleanExtra("present", false);
+        int level = intent.getIntExtra("level", 0);
+        int scale = intent.getIntExtra("scale", 0);
+        int icon_small = intent.getIntExtra("icon-small", 0);
+        int voltage = intent.getIntExtra("voltage", 0);
+        mVoltage = voltage;
+        int temperature = intent.getIntExtra("temperature", 0);
+        String technology = intent.getStringExtra("technology");
+        
+        String statusString = "";
+        switch (status) {
+          case BatteryManager.BATTERY_STATUS_UNKNOWN:
+            statusString =getResources().getString(R.string.charger_unknown);// "unknown";
+            break;
+          case BatteryManager.BATTERY_STATUS_CHARGING:
+            statusString =getResources().getString(R.string.charger_charging);// "charging";
+         // battery_image.setImageResource(R.drawable.stat_sys_battery_charge);
+         // battery_image.getDrawable().setLevel(level);
+         // successButton.setEnabled(true);
+            break;
+          case BatteryManager.BATTERY_STATUS_DISCHARGING:
+            statusString = getResources().getString(R.string.charger_discharging);
+         // battery_image.setImageResource(R.drawable.stat_sys_battery);
+         // battery_image.getDrawable().setLevel(level);
+            break;
+          case BatteryManager.BATTERY_STATUS_NOT_CHARGING:
+            statusString = getResources().getString(R.string.charger_not_charging);
+            break;
+          case BatteryManager.BATTERY_STATUS_FULL:
+            statusString = getResources().getString(R.string.charger_full);
+          //successButton.setEnabled(true);
+            break;
+        }
+        
+        String healthString = "";
+        switch (health) {
+          case BatteryManager.BATTERY_HEALTH_UNKNOWN:
+            healthString = "unknown";
+            break;
+          case BatteryManager.BATTERY_HEALTH_GOOD:
+            healthString = "good";
+            break;
+          case BatteryManager.BATTERY_HEALTH_OVERHEAT:
+            healthString = "overheat";
+            break;
+          case BatteryManager.BATTERY_HEALTH_DEAD:
+            healthString = "dead";
+            break;
+          case BatteryManager.BATTERY_HEALTH_OVER_VOLTAGE:
+            healthString = "voltage";
+            break;
+          case BatteryManager.BATTERY_HEALTH_UNSPECIFIED_FAILURE:
+            healthString = "unspecified failure";
+            break;
+        }
+        
+        String acString = "";
+        switch (plugged) {
+          case BatteryManager.BATTERY_PLUGGED_AC:
+            acString = getResources().getString(R.string.charger_connected) + " & " + "AC";// "plugged ac";
+            break;
+          case BatteryManager.BATTERY_PLUGGED_USB:
+            acString = getResources().getString(R.string.charger_connected) + " & " + "USB";//"plugged usb";
+            break;
+          default:
+            acString = getResources().getString(R.string.charger_disconnected);
+            break;
+        }
+        
+        BatteryLog.this.mstatus.setText(statusString);
+        BatteryLog.this.mhealth.setText(healthString);
+        BatteryLog.this.mlevel.setText(""+level+"%");
+        BatteryLog.this.mscale.setText(""+scale);
+        BatteryLog.this.mvoltage.setText("" + voltage + getString(R.string.battery_info_voltage_units));
+        BatteryLog.this.mtemperature.setText(""+tenthsToFixedString(temperature) + getResources().getString(R.string.battery_info_temperature_units));
+        BatteryLog.this.mtechnology.setText(technology);
+      //BatteryLog.this.melectronic.setText(getBatteryElectronic() + "mA");
+        BatteryLog.this.mcharger_type.setText(acString);
+        
+        Log.d("Battery", "" + intent.getIntExtra("level", 0));
+        Log.d("Battery", "" + intent.getIntExtra("scale", 0));
+        Log.d("Battery", "" + intent.getIntExtra("voltage", 0));
+        Log.d("Battery", "" + intent.getIntExtra("temperature", 0));
+        Log.d("Battery", "ss" + intent.getIntExtra("status", BatteryManager.BATTERY_STATUS_CHARGING));
+        Log.d("Battery", "" + intent.getIntExtra("plugged", 0));
+        Log.d("Battery", "" + intent.getIntExtra("health", BatteryManager.BATTERY_HEALTH_UNKNOWN));
+      }
+      if (action.equals("techain.intent.action.BTRB")) {
+        result = intent.getIntExtra("result", 0);
+        Log.d(TAG,"result="+result);
+        electronic = intent.getIntExtra("electronic", 0);
+        counter = intent.getIntExtra("counter", 0);
+        countdown =intent.getLongExtra("countdown",0);
+        BatteryLog.this.melectronic.setText(electronic + "mA");
+        setResultText(result,electronic,counter,countdown);
+        Log.d(TAG, "electronic=" + electronic+"   result"+result+"   AA");
+      }
+    }
+  };
+  
+  private final String tenthsToFixedString(int x) {
+    float tens = (float)x / 10;
+    return String.valueOf(tens);
+  }
+  
+  private void setResultText(int result,int electronic,int counter,long countdown){
+    String resultString = "";
+    switch (result) {
+      case TEST_RESULT_OK:
+        successButton.setEnabled(true);
+        resultString = getResources().getString(R.string.charger_success);
+        mcharger_result.setTextColor(Color.GREEN);
+        break;
+      case TEST_RESULT_FAIL:
+        successButton.setEnabled(false);
+        resultString = getResources().getString(R.string.charger_failed);
+        mcharger_result.setTextColor(Color.RED);
+        break;
+      case TEST_RESULT_FULL_TIPS:
+        successButton.setEnabled(false);
+        resultString = getResources().getString(R.string.charger_tips);
+        mcharger_result.setTextColor(Color.RED);
+        break;
+      case TEST_RESULT_TESTING:
+        successButton.setEnabled(false);
+        resultString = getResources().getString(R.string.charger_retry_tips,countdown,4-counter);
+        mcharger_result.setTextColor(Color.WHITE);
+        break;
+      case TEST_RESULT_CHARGE_TIPS:
+        successButton.setEnabled(false);
+        resultString = getResources().getString(R.string.charge_message);
+        mcharger_result.setTextColor(Color.RED);
+        break;
+      case TEST_RESULT_FIRST:
+        successButton.setEnabled(false);
+        resultString = getResources().getString(R.string.charger_start_tips);
+        mcharger_result.setTextColor(Color.WHITE);
+        break;
+      case TEST_RESULT_TEMPERATURE_ERROR:
+        successButton.setEnabled(false);
+        resultString = getResources().getString(R.string.charger_temperature_error);
+        mcharger_result.setTextColor(Color.RED);
+        break;
+    }
+    if((electronic >= 400 && BatteryLogService.mVoltage < 4100) || (electronic >= 100 && BatteryLogService.mVoltage >= 4100)) {
+      melectronic.setText(electronic + "mA");
+      melectronic.setTextColor(Color.GREEN);
+    } else if (electronic < 400 && BatteryLogService.mVoltage < 4100) {
+      melectronic.setText(electronic + "mA" + " < 400mA");
+      melectronic.setTextColor(Color.RED);
+    } else if (electronic < 100 && BatteryLogService.mVoltage >= 4100) {
+      melectronic.setText(electronic + "mA" + " < 100mA");
+      melectronic.setTextColor(Color.RED);
+    }
+    mcharger_result.setText(resultString);
+  }
+  
+  @Override
+  public boolean onKeyUp(int keyCode, KeyEvent event) {
+    switch (keyCode) {
+      case KeyEvent.KEYCODE_MENU:
+        return true;
+      case KeyEvent.KEYCODE_BACK:
+        Intent intent = new Intent(BatteryLog.this, FactoryMode.class);
+        setResult(FactoryMode.TEST_CANCEL,intent);
+        finish();
+        return true;
+    }
+    return super.onKeyUp(keyCode, event);
+  }
+}
\ No newline at end of file
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/sdcard/SDCard.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/sdcard/SDCard.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/sdcard/SDCard.java	(revision 1055)
@@ -0,0 +1,131 @@
+package com.mediatek.factorymode.sdcard;
+
+import java.io.File;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.os.Bundle;
+import android.os.Environment;
+import android.os.StatFs;
+import android.os.storage.StorageManager;
+import android.os.SystemProperties;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.TextView;
+
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.R;
+import com.mediatek.factorymode.R.string;
+import com.mediatek.factorymode.earphone.Earphone;
+
+public class SDCard extends Activity {
+	
+	public static final String TAG = "SDCard"; 
+	private static String SD_CARD = SystemProperties.get("vold.path.external_sd");
+	private TextView sdcardinfo;
+	private Button succesButton;
+	private Button failButton;
+	
+	private StorageManager mStorageManager;
+	
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+		//getWindow().addFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		setContentView(R.layout.sdcard);
+		//liuzhixiang 2012.3.12 begin
+		//bug 648,ver:308v3,factory pattern fixture test: application factory model stops unexpectedly.
+		sdcardinfo = (TextView)this.findViewById(R.id.sdcard_info);
+		//liuzhixiang 2012.3.12 end
+		succesButton = (Button)this.findViewById(R.id.sdcard_bt_ok);
+		failButton = (Button)this.findViewById(R.id.sdcard_bt_failed);
+		succesButton.setEnabled(false);
+		
+		mStorageManager = (StorageManager)this.getSystemService(Context.STORAGE_SERVICE);
+		//SD_CARD = Environment.getLegacyExternalStorageDirectory().getPath();
+		if (mStorageManager.getVolumeState(SD_CARD).equals(Environment.MEDIA_MOUNTED)) {
+			//liuzhixiang 2012.3.12 begin
+			//bug 648,ver:308v3,factory pattern fixture test: application factory model stops unexpectedly.
+			//sdcardinfo = (TextView)this.findViewById(R.id.sdcard_info);
+			//liuzhixiang 2012.3.12 end
+			long availableMB =getAvailaleSize();
+			long totalMB = getAllSize();
+			sdcardinfo.setText(getString(R.string.sdcard_tips_success)+"\n\n"
+												+getString(R.string.sdcard_totalsize)+ totalMB + " MB\n\n"
+												+getString(R.string.sdcard_freesize)+ availableMB + " MB");
+			// yaoming, If SD is ok, jumps to next test, 20130426
+			if(totalMB != 0){
+				succesButton.setEnabled(true);
+				Intent intent = new Intent(SDCard.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intent);
+				//finish();
+			}
+		} else {
+			sdcardinfo.setText(getString(R.string.sdcard_tips_failed));
+		}
+		succesButton.setOnClickListener(new Button.OnClickListener(){
+			
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(SDCard.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intent);
+				finish();
+			}
+			
+		});
+		failButton.setOnClickListener(new Button.OnClickListener(){
+			
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(SDCard.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_FAIL,intent);
+				finish();
+			}
+			
+		});
+	}
+
+	@Override
+	protected void onDestroy() {
+		//getWindow().clearFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		super.onDestroy();
+	}
+	
+	public long getAvailaleSize() {
+		//File path = Environment.getExternalStorageDirectory(); 
+		StatFs stat = new StatFs(SD_CARD);
+		long blockSize = stat.getBlockSize();
+		long availableBlocks = stat.getAvailableBlocks();
+		//return availableBlocks * blockSize;
+		return (availableBlocks * blockSize)/1024 /1024;
+	}
+
+	public long getAllSize() {
+		//File path = Environment.getExternalStorageDirectory();
+		StatFs stat = new StatFs(SD_CARD);
+		long blockSize = stat.getBlockSize();
+		long availableBlocks = stat.getBlockCount();
+		return (availableBlocks * blockSize)/1024 /1024;
+	}
+
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(SDCard.this, FactoryMode.class);
+			setResult(FactoryMode.TEST_CANCEL,intent);
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/audio/AudioTest.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/audio/AudioTest.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/audio/AudioTest.java	(revision 1055)
@@ -0,0 +1,5 @@
+package com.mediatek.factorymode.audio;
+
+public class AudioTest {
+
+}
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/earphone/Earphone.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/earphone/Earphone.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/earphone/Earphone.java	(revision 1055)
@@ -0,0 +1,105 @@
+package com.mediatek.factorymode.earphone;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.media.AudioManager;
+import android.media.MediaPlayer;
+import android.os.Bundle;
+import android.os.SystemProperties;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.WindowManager;
+import android.widget.Button;
+
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.KeyCode;
+import com.mediatek.factorymode.R;
+
+public class Earphone extends Activity{
+	private AudioManager audiomanager;
+	private Button succesButton ;
+	private Button failButton ;
+	MediaPlayer mpbg ;
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+		SystemProperties.set("persist.sys.testearphone", "1");
+		//getWindow().addFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		setContentView(R.layout.speaker);
+		audiomanager = (AudioManager) this.getSystemService(this.AUDIO_SERVICE);
+		audiomanager.setSpeakerphoneOn(false); 
+		//audiomanager.setRouting(AudioManager.MODE_RINGTONE,AudioManager.ROUTE_EARPIECE,AudioManager.ROUTE_ALL);
+		//setVolumeControlStream(AudioManager.STREAM_RING);
+		audiomanager.setMode(AudioManager.MODE_IN_CALL);
+		succesButton = (Button)this.findViewById(R.id.speaker_bt_ok);
+		failButton = (Button)this.findViewById(R.id.speaker_bt_failed);
+		succesButton.setOnClickListener(new Button.OnClickListener(){
+			
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(Earphone.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intent);
+				finish();
+			}
+			
+		});
+		failButton.setOnClickListener(new Button.OnClickListener(){
+			
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(Earphone.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_FAIL,intent);
+				finish();
+			}
+			
+		});
+		playonce();
+	}
+	@Override
+	protected void onDestroy() {
+		// TODO Auto-generated method stub
+		//getWindow().clearFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		//audiomanager.setMode(AudioManager.MODE_NORMAL);
+		super.onDestroy();
+		//mpbg.pause();
+		//mpbg.release();
+	}
+	
+	@Override
+	protected void onStop() {
+		super.onStop();
+		SystemProperties.set("persist.sys.testearphone", "0");
+		if(mpbg != null) {
+			mpbg.pause();
+			mpbg.release();
+			mpbg = null;
+		}
+		if(audiomanager != null) {
+			audiomanager.setMode(AudioManager.MODE_NORMAL);
+		}
+	}
+	
+	protected void playonce(){
+		mpbg = MediaPlayer.create(this,R.raw.tada);
+		mpbg.setLooping(true);
+		mpbg.start();
+	}
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(Earphone.this, FactoryMode.class);
+			setResult(FactoryMode.TEST_CANCEL,intent);
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/lcd/LCD.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/lcd/LCD.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/lcd/LCD.java	(revision 1055)
@@ -0,0 +1,194 @@
+package com.mediatek.factorymode.lcd;
+
+import java.util.Timer;
+import java.util.TimerTask;
+
+import android.R.bool;
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.graphics.Color;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Message;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.R;
+
+import android.util.Log;
+
+public class LCD extends Activity {
+
+	private int colorindex = 1;
+	private static final int COLORRED = 1;
+	private static final int COLORGREEN = 2;
+	private static final int COLORBLUE = 3;
+	private static final int COLORWHITE = 4;
+	private static final int COLORGRAY = 5;
+	private static final int COLOR_MAX = 6;
+	
+	private TextView lcdtextview;
+	private Button succesButton ;
+	private Button failButton ;
+	private Toast mToast;
+
+	Timer timer = new Timer();
+	
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+		this.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN); 
+		requestWindowFeature(Window.FEATURE_NO_TITLE); 
+		setContentView(R.layout.lcd);
+		lcdtextview = (TextView)this.findViewById(R.id.test_color_text1);
+		succesButton = (Button)findViewById(R.id.lcd_bt_ok);
+		failButton = (Button)findViewById(R.id.lcd_bt_failed);
+		succesButton.setVisibility(View.GONE);
+		failButton.setVisibility(View.GONE);
+		colorindex = 1;
+		succesButton.setOnClickListener(new Button.OnClickListener(){
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(LCD.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intent);
+				finish();
+			}
+		});
+		failButton.setOnClickListener(new Button.OnClickListener(){
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(LCD.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_FAIL,intent);
+				finish();
+			}
+			
+		});
+		
+		mToast = Toast.makeText(this, getString(R.string.lcd_hint), Toast.LENGTH_LONG);
+		mToast.show();
+		Message message = new Message();
+		message.what= colorindex;
+		handler.sendMessage(message);
+		/*
+		timer.scheduleAtFixedRate(new TimerTask() {
+			public void run()
+			{
+				colorindex++;
+				Message message = new Message();
+				message.what= colorindex;
+				handler.sendMessage(message);
+			}
+		}, 0, 1000);
+		*/
+	}
+
+	@Override
+	protected void onDestroy() {
+		if(timer != null) {
+			timer.cancel();
+		}
+		
+		if(mToast != null) {
+			mToast.cancel();
+		}
+		super.onDestroy();
+	}
+	private Handler handler = new Handler() {
+
+		@Override
+		public void handleMessage(Message msg) {
+			// TODO Auto-generated method stub
+
+			if (colorindex >= COLOR_MAX) {
+				/*
+				colorindex = 1;
+				timer.cancel();
+				AlertDialog.Builder dialog=new AlertDialog.Builder(LCD.this);
+				dialog.setTitle(getString(R.string.Report)).setMessage(getString(R.string.Report)).setPositiveButton(getString(R.string.Success), new DialogInterface.OnClickListener() {
+					@Override
+					public void onClick(DialogInterface dialog, int which) {
+						goback(RESULT_OK);
+					}
+				}).setNegativeButton(getString(R.string.Failed), new DialogInterface.OnClickListener() {
+					public void onClick(DialogInterface dialog, int which) {
+						goback(RESULT_CANCELED);
+					}
+				}).create().show();
+			 */
+				lcdtextview.setVisibility(View.GONE);
+				succesButton.setVisibility(View.VISIBLE);
+				failButton.setVisibility(View.VISIBLE);
+			}
+			
+			switch (colorindex) {
+			case COLORRED:
+				lcdtextview.setBackgroundColor(Color.RED);
+				break;
+			case COLORGREEN:
+				lcdtextview.setBackgroundColor(Color.GREEN);
+				break;
+			case COLORBLUE:
+				lcdtextview.setBackgroundColor(Color.BLUE);
+				break;
+				
+			case COLORWHITE:
+				lcdtextview.setBackgroundColor(Color.WHITE);
+				break;
+				
+			case COLORGRAY:
+				lcdtextview.setBackgroundColor(Color.GRAY);
+				break;
+				
+			default:
+				break;
+			}
+			super.handleMessage(msg);
+		}
+	};
+	private void goback(int flag) {
+		// TODO Auto-generated method stub
+		Intent intent=new Intent();
+		intent.setClass(LCD.this, FactoryMode.class);
+		setResult(flag,intent);
+		finish();
+	}
+	
+	@Override
+	public boolean onKeyDown(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_HOME:
+			colorindex++;
+			Message message = new Message();
+			message.what= colorindex;
+			handler.sendMessage(message);
+			break;
+		}
+		return super.onKeyDown(keyCode, event);
+	}
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(LCD.this, FactoryMode.class);
+			setResult(FactoryMode.TEST_CANCEL,intent);
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/KeyCode.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/KeyCode.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/KeyCode.java	(revision 1055)
@@ -0,0 +1,253 @@
+package com.mediatek.factorymode;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+
+import android.app.Activity;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.os.Bundle;
+import android.util.Log;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.GridView;
+import android.widget.SimpleAdapter;
+
+public class KeyCode extends Activity {
+
+	public static final int KEY_START = 0;
+	public static final int KEY_MENU = 0;
+	public static final int KEY_HOME = 1;
+	public static final int KEY_BACK = 2;
+	public static final int KEY_SEARCH = 3;
+	public static final int KEY_VOLUME_DOWN = 4;
+	public static final int KEY_VOLUME_UP = 5;
+	public static final int KEY_MAX = 6;
+
+	private GridView gridview;
+	ArrayList<HashMap<String, Object>> lstImageItem;
+	SimpleAdapter saImageItems;
+	Button succesButton ;
+	Button failButton ;
+
+	private boolean keymenutested = false;
+	private boolean keyhometested = false;
+	private boolean keybacktested = false;
+	private boolean keysearchtested = false;
+	private boolean keyvldtested = false;
+	private boolean keyvlutested = false;
+	
+	private int keymenupressedcount = 0;
+	private int keybackpressedcount = 0;
+
+	private boolean keymenuFlag = false;
+	private boolean keyhomeFlag = false;
+	private boolean keybackFlag = false;
+	private boolean keyupFlag = false;
+	private boolean keydownFlag = false;
+	HashMap<String, Object> map_menu = new HashMap<String, Object>();
+	HashMap<String, Object> map_home = new HashMap<String, Object>();
+	HashMap<String, Object> map_back = new HashMap<String, Object>();
+//	HashMap<String, Object> map_search = new HashMap<String, Object>();
+	HashMap<String, Object> map_vldown = new HashMap<String, Object>();
+	HashMap<String, Object> map_vlup = new HashMap<String, Object>();
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+		//getWindow().addFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		setContentView(R.layout.keycode);
+		gridview = (GridView) this.findViewById(R.id.keycode_grid);
+		lstImageItem = new ArrayList<HashMap<String, Object>>();
+		saImageItems = new SimpleAdapter(this, 
+				lstImageItem,
+				R.layout.keycode_grid,
+
+				new String[] { "imageView" },
+
+				new int[] { R.id.imgview });
+		map_menu.put("imageView", R.drawable.menu);
+		lstImageItem.add(map_menu);
+		map_home.put("imageView", R.drawable.home);
+		lstImageItem.add(map_home);
+		map_back.put("imageView", R.drawable.back);
+		lstImageItem.add(map_back);
+//		map_search.put("imageView", R.drawable.search);
+//		lstImageItem.add(map_search);
+		map_vldown.put("imageView", R.drawable.vldown);
+		lstImageItem.add(map_vldown);
+		map_vlup.put("imageView", R.drawable.vlup);
+		lstImageItem.add(map_vlup);
+		gridview.setAdapter(saImageItems);
+		succesButton = (Button)this.findViewById(R.id.keycode_bt_ok);
+		failButton = (Button)this.findViewById(R.id.keycode_bt_failed);
+		succesButton.setEnabled(false);
+		succesButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(KeyCode.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intent);
+				finish();
+			}
+			
+		});
+		failButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(KeyCode.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_FAIL,intent);
+				finish();
+			}
+			
+		});
+		// gridview.setOnItemClickListener(new ItemClickListener());
+	}
+  @Override
+  protected void onResume() {
+    super.onResume();
+    IntentFilter filter = new IntentFilter();
+    filter.addAction("techain.intent.action.KCTB");
+    registerReceiver(mIntentReceiver, filter);
+  }
+  
+  @Override
+  protected void onPause() {
+    super.onPause();
+    unregisterReceiver(mIntentReceiver);
+  }
+  
+  @Override
+  protected void onDestroy() {
+    //getWindow().clearFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+    super.onDestroy();
+  }
+  
+  private BroadcastReceiver mIntentReceiver = new BroadcastReceiver() {
+    @Override
+    public void onReceive(Context context, Intent intent) {
+      Log.d("KeyCode", "onReceive: Action = " + intent.getAction());
+      String action = intent.getAction();
+      if (action.equals("techain.intent.action.KCTB")) {
+        keymenupressedcount++;
+        if (!keymenutested) {
+          lstImageItem.remove(map_menu);
+          keymenutested = true;
+          keymenuFlag = true;
+        }
+        CheckResult();
+      }
+    }
+  };
+  
+  private void CheckResult(){
+    if( keymenuFlag == true &&
+        keyhomeFlag == true &&
+        keybackFlag == true &&
+        keyupFlag == true &&
+        keydownFlag == true){
+      succesButton.setEnabled(true);
+      Intent intent = new Intent(KeyCode.this, FactoryMode.class);
+      setResult(FactoryMode.TEST_OK,intent);
+      finish();
+    }
+    gridview.setAdapter(saImageItems);
+  }
+  
+	@Override
+	public boolean onKeyDown(int keyCode, KeyEvent event) {
+		// int selectkey = 0;
+		// TODO Auto-generated method stub
+		boolean isVolumeKey = false;
+		
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_APP_SWITCH:
+		case KeyEvent.KEYCODE_MENU:
+			// selectkey = KEY_MENU;
+			keymenupressedcount++;
+			if (!keymenutested) {
+				lstImageItem.remove(map_menu);
+				keymenutested = true;
+				keymenuFlag = true;
+			}
+			break;
+		case KeyEvent.KEYCODE_HOME:
+			// selectkey = KEY_HOME;
+			if (!keyhometested) {
+				lstImageItem.remove(map_home);
+				keyhometested = true;
+				keyhomeFlag = true;
+			
+			}
+			break;
+		case KeyEvent.KEYCODE_BACK:
+			// selectkey = KEY_BACK;
+			keybackpressedcount++;
+			if (!keybacktested) {
+				lstImageItem.remove(map_back);
+				keybacktested = true;
+				keybackFlag = true;
+
+			}
+			break;
+		case KeyEvent.KEYCODE_SEARCH:
+			// selectkey = KEY_SEARCH;
+			if (!keysearchtested) {
+//				lstImageItem.remove(map_search);
+				keysearchtested = true;
+			}
+			break;
+		case KeyEvent.KEYCODE_VOLUME_DOWN:
+			// selectkey = KEY_VOLUME_DOWN;
+			if (!keyvldtested) {
+				lstImageItem.remove(map_vldown);
+				keyvldtested = true;
+				keydownFlag = true;
+				isVolumeKey = true;
+			}
+			break;
+		case KeyEvent.KEYCODE_VOLUME_UP:
+			// selectkey = KEY_VOLUME_UP;
+			if (!keyvlutested) {
+				lstImageItem.remove(map_vlup);
+				keyvlutested = true;
+				keyupFlag = true;
+				isVolumeKey = true;
+			}
+			break;
+		}
+		CheckResult();
+		if(isVolumeKey) return true;
+		
+		return super.onKeyDown(keyCode, event);
+	}
+
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		// TODO Auto-generated method stub
+
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			return true;
+			
+		case KeyEvent.KEYCODE_HOME:
+		case KeyEvent.KEYCODE_SEARCH:
+		case KeyEvent.KEYCODE_VOLUME_DOWN:
+		case KeyEvent.KEYCODE_VOLUME_UP:
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/led/Led.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/led/Led.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/led/Led.java	(revision 1055)
@@ -0,0 +1,120 @@
+package com.mediatek.factorymode.led;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.app.NotificationManager;
+import android.app.Notification;
+
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.R;
+import android.graphics.drawable.Icon;
+import android.app.PendingIntent;
+import android.content.BroadcastReceiver;
+
+public class Led extends Activity {
+	private Button succesButton ;
+	private Button failButton ;
+	private boolean  led_blue_flag = false;
+	private boolean  led_red_flag = false;
+	NotificationManager gNotMgr = null;
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+		//getWindow().addFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		setContentView(R.layout.led);
+		gNotMgr = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);
+		Button display_led_red = (Button)this.findViewById(R.id.Display_led_red);
+		display_led_red.setOnClickListener(new Button.OnClickListener(){
+			public void onClick(View v)
+			{
+				Intent sendled = new Intent(); 
+				sendled.setAction("com.mediatek.factorymode.led.action_red");
+				Led.this.sendBroadcast(sendled);
+				
+				led_red_flag = true;			
+				if(led_blue_flag == true && led_red_flag == true){
+					succesButton.setEnabled(true);
+				}else{
+					succesButton.setEnabled(false);
+				}
+			}
+		});
+		Button display_led_blue = (Button)this.findViewById(R.id.Display_led_blue);
+		display_led_blue.setOnClickListener(new Button.OnClickListener(){
+			public void onClick(View v){
+				Intent sendled = new Intent(); 
+				sendled.setAction("com.mediatek.factorymode.led.action_blue");
+				Led.this.sendBroadcast(sendled);
+				led_blue_flag = true;
+				if(led_blue_flag == true && led_red_flag == true){
+					succesButton.setEnabled(true);
+				}else{
+					succesButton.setEnabled(false);
+				}
+			}
+		});
+		succesButton = (Button)this.findViewById(R.id.display_bt_ok);
+		failButton = (Button)this.findViewById(R.id.display_bt_failed);
+		succesButton.setEnabled(false);
+		succesButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(Led.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intent);
+				LedOff();				
+				finish();
+			}
+			
+		});
+		failButton.setOnClickListener(new Button.OnClickListener(){
+
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(Led.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_FAIL,intent);
+				LedOff();
+				finish();
+			}
+			
+		});
+		}
+		
+		private void LedOff()
+		{
+			Intent sendled = new Intent(); 
+			sendled.setAction("com.mediatek.factorymode.led.action_off");
+			Led.this.sendBroadcast(sendled);
+		}
+	
+	@Override
+	protected void onDestroy() {
+		//getWindow().clearFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		super.onDestroy();
+		gNotMgr.cancel(10086);
+	}
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(Led.this, FactoryMode.class);
+			setResult(FactoryMode.TEST_CANCEL,intent);
+			LedOff();
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/bluetooth/Bluetooth.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/bluetooth/Bluetooth.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/bluetooth/Bluetooth.java	(revision 1055)
@@ -0,0 +1,180 @@
+package com.mediatek.factorymode.bluetooth;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import android.app.Activity;
+import android.bluetooth.BluetoothAdapter;
+import android.bluetooth.BluetoothDevice;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Message;
+import android.util.Log;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.WindowManager;
+import android.widget.ArrayAdapter;
+import android.widget.Button;
+import android.widget.ListView;
+import android.widget.SimpleAdapter;
+import android.widget.TextView;
+
+import com.mediatek.factorymode.FactoryMode;
+import com.mediatek.factorymode.R;
+import com.mediatek.factorymode.vibratortest.Vibratortest;
+
+public class Bluetooth extends Activity {
+	private TextView btstate;
+	private ListView btlistview;
+	private BluetoothAdapter btadapter;
+	private ArrayAdapter<String> adapter;
+	private Button succesButton ;
+	private Button failButton ;
+	Handler handlerBluetooth;
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+		setContentView(R.layout.btlist);
+		btstate = (TextView) this.findViewById(R.id.bt_state_id);
+		btlistview = (ListView) this.findViewById(R.id.listView1); 
+		adapter = new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1);
+		btlistview.setAdapter(adapter);
+		btadapter = BluetoothAdapter.getDefaultAdapter();
+		if (btadapter == null) {
+			btstate.setText("not support bluetooth");
+		} else {
+			if (!btadapter.isEnabled()) {
+				btstate.setText(getString(R.string.Bluetooth_opening));
+				btadapter.enable();
+			} else {
+				BluetoothAdapter bluetooth = BluetoothAdapter.getDefaultAdapter();
+				String BTAddress = bluetooth.isEnabled() ? bluetooth.getAddress() : null;
+				if (BTAddress == null) 
+				{
+					// device not BT capable 
+					BTAddress  = "unavailable";
+				}
+				btstate.setText(getString(R.string.Bluetooth_open)+"\nBlueTooth Address: " + BTAddress);
+			}
+			IntentFilter intentFilter = new IntentFilter();
+			intentFilter.addAction(BluetoothDevice.ACTION_FOUND);
+			intentFilter.addAction(BluetoothDevice.ACTION_BOND_STATE_CHANGED);
+			intentFilter.addAction(BluetoothAdapter.ACTION_SCAN_MODE_CHANGED);
+			intentFilter.addAction(BluetoothAdapter.ACTION_STATE_CHANGED);
+			intentFilter.addAction(BluetoothAdapter.ACTION_DISCOVERY_FINISHED);
+			this.registerReceiver(receiver, intentFilter);
+			btadapter.startDiscovery();
+		}
+		succesButton = (Button)this.findViewById(R.id.bttest_ok);
+		failButton = (Button)this.findViewById(R.id.bttest_failed);
+		succesButton.setEnabled(false);
+		succesButton.setOnClickListener(new Button.OnClickListener(){
+			
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(Bluetooth.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intent);
+				finish();
+			}
+			
+		});
+		failButton.setOnClickListener(new Button.OnClickListener(){
+			
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(Bluetooth.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_FAIL,intent);
+				finish();
+			}
+			
+		});
+		
+		handlerBluetooth = new Handler() {
+			@Override
+			public void handleMessage(Message msg) {
+				super.handleMessage(msg);
+				if (msg.what == 0x1232) {
+						Intent intent = new Intent(Bluetooth.this, FactoryMode.class);
+						setResult(FactoryMode.TEST_OK,intent);
+						finish();
+				}
+			}
+		};
+	}
+
+	@Override
+	protected void onDestroy() {
+		// TODO Auto-generated method stub
+		if(btadapter !=null){
+			btadapter.disable();
+		}
+		super.onDestroy();
+	}
+
+	private BroadcastReceiver receiver = new BroadcastReceiver() {
+		@Override
+		public void onReceive(Context context, Intent intent) {
+			String action = intent.getAction();
+			Log.d("BT>>>>>>>>>>>>>action", action);
+			if (BluetoothDevice.ACTION_FOUND.equals(action)) {
+				BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
+				Log.d("BT>>>>>>>>>>>>>"+device.getName(), "22222:"+device.getAddress());
+				adapter.add("device name:" + device.getName() 
+									+ "\ndevice addr:" + device.getAddress());
+				btlistview.setAdapter(adapter);
+				succesButton.setEnabled(true);
+				succesButton.setEnabled(true);
+				Message msg = new Message();
+				msg.what = 0x1232;
+				handlerBluetooth.sendMessage(msg);
+			} else if (BluetoothAdapter.ACTION_STATE_CHANGED.equals(action)) {
+				String stateExtra = BluetoothAdapter.EXTRA_STATE;
+				int btstates = intent.getIntExtra(stateExtra, -1);
+				if ((btstates == BluetoothAdapter.STATE_TURNING_ON) || (btstates == BluetoothAdapter.STATE_ON)) {
+					btstate.setText(getString(R.string.Bluetooth_open));
+					if(btstates == BluetoothAdapter.STATE_ON){
+						BluetoothAdapter bluetooth = BluetoothAdapter.getDefaultAdapter();
+						String BTAddress = bluetooth.isEnabled() ? bluetooth.getAddress() : null;
+						if (BTAddress == null) {
+							// device not BT capable
+							BTAddress  = "unavailable";
+						}
+						btstate.setText(getString(R.string.Bluetooth_open)+"\nBlueTooth MAC: " + BTAddress);
+					}
+					btadapter.startDiscovery();
+				} else if ((btstates == BluetoothAdapter.STATE_TURNING_OFF) || (btstates == BluetoothAdapter.STATE_OFF)) {
+					btstate.setText(getString(R.string.Bluetooth_closed));
+				}
+			}else if (BluetoothDevice.ACTION_BOND_STATE_CHANGED.equals(action)) {
+				BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
+			}else if((BluetoothAdapter.ACTION_DISCOVERY_FINISHED).equals(action)){
+				//btadapter.cancelDiscovery();
+			}
+		}
+	};
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(Bluetooth.this, FactoryMode.class);
+			setResult(FactoryMode.TEST_CANCEL,intent);
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/Speaker.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/Speaker.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/Speaker.java	(revision 1055)
@@ -0,0 +1,225 @@
+package com.mediatek.factorymode;
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.FileReader;
+import java.io.IOException;
+import java.util.Timer;
+import java.util.TimerTask;
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.media.AudioManager;
+import android.media.MediaPlayer;
+import android.net.Uri;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Message;
+import android.os.storage.StorageManager;
+import android.util.Log;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.WindowManager;
+import android.widget.Button;
+
+import com.mediatek.factorymode.R;
+import com.mediatek.storage.StorageManagerEx;
+
+import android.app.Service;
+import android.os.IBinder;
+import android.widget.ProgressBar;
+import android.widget.Toast;
+
+import android.os.Environment;
+import java.io.File;
+public class Speaker extends Activity{
+	
+	private static final String TAG = "Speaker";
+	private AudioManager audiomanager;
+	
+	private Button succesButton;
+	private Button failButton;
+	public static MediaPlayer mMediaPlayer = null;
+	private final String musicName = StorageManagerEx.getExternalStoragePath()+"/test.mp3";
+	private int maxVolume = 50;
+	private int curVolume = 20;
+	private int stepVolume = 0;
+	private AudioManager audioMgr = null;
+	
+	boolean isSdcard = false;
+	boolean isExist = false;
+	
+	Timer timer;
+	TimerTask task;
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+		//getWindow().addFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		setContentView(R.layout.speaker);
+		audiomanager = (AudioManager) this.getSystemService(this.AUDIO_SERVICE);
+		audiomanager.setSpeakerphoneOn(true); 
+		succesButton = (Button)this.findViewById(R.id.speaker_bt_ok);
+		failButton = (Button)this.findViewById(R.id.speaker_bt_failed);
+		mMediaPlayer = new MediaPlayer();
+		audioMgr = (AudioManager) getSystemService(Context.AUDIO_SERVICE);
+		maxVolume = audioMgr.getStreamMaxVolume(AudioManager.STREAM_MUSIC);
+		curVolume = maxVolume / 2;
+		stepVolume = maxVolume / 6;
+		/*
+		succesButton.setEnabled(false);
+		String status = Environment.getExternalStorageState();
+		if(status.equals(Environment.MEDIA_MOUNTED)){
+			isSdcard = true;
+		}
+		File file = new File(musicName);
+		isExist = file.exists();
+		if(isExist && isSdcard){
+			succesButton.setEnabled(true);
+		}
+		*/
+		succesButton.setOnClickListener(new Button.OnClickListener(){
+			
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(Speaker.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_OK,intent);
+				finish();
+				if (mMediaPlayer != null) {
+					mMediaPlayer.stop();
+					mMediaPlayer.release();
+					mMediaPlayer = null;
+				}
+				if (timer != null) {
+					timer.cancel();
+					timer = null;
+				}
+			}
+			
+		});
+		failButton.setOnClickListener(new Button.OnClickListener(){
+			
+			@Override
+			public void onClick(View v) {
+				// TODO Auto-generated method stub
+				Intent intent = new Intent(Speaker.this, FactoryMode.class);
+				setResult(FactoryMode.TEST_FAIL,intent);
+				finish();
+				if (mMediaPlayer != null) {
+					mMediaPlayer.stop();
+					mMediaPlayer.release();
+					mMediaPlayer = null;
+				}
+				if (timer != null) {
+					timer.cancel();
+					timer = null;
+				}
+			}
+			
+		});
+		playonce();
+	}
+	Handler updateBarHandler = new Handler() {
+		@Override
+		public void handleMessage(Message msg) {
+			super.handleMessage(msg);
+			if (msg.what == 0x1231) {
+				Log.v(TAG, "yaoming_thread" + "----------start handle");
+				curVolume += stepVolume;
+				if (curVolume >= maxVolume) {
+					curVolume = maxVolume;
+				}
+				audioMgr.setStreamVolume(AudioManager.STREAM_MUSIC, curVolume, AudioManager.FLAG_PLAY_SOUND);
+			}
+		}
+	};
+	@Override
+	protected void onRestart() {
+		super.onRestart();
+	}
+	@Override
+	protected void onResume() {
+		super.onResume();
+	}
+	@Override
+	protected void onDestroy() {
+		// TODO Auto-generated method stub
+		//getWindow().clearFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		//audiomanager.setSpeakerphoneOn(false);
+		super.onDestroy();
+		//mpbg.pause();
+		//mpbg.release();
+	}
+	
+	@Override
+	protected void onStop() {
+		if(audiomanager != null) {
+			audiomanager.setSpeakerphoneOn(false);
+		}
+		super.onStop();
+		Intent intent = new Intent(Speaker.this, FactoryMode.class);
+		setResult(RESULT_CANCELED,intent);
+		finish();
+		if (mMediaPlayer != null) {
+			mMediaPlayer.pause();
+			mMediaPlayer.release();
+			mMediaPlayer = null;
+		}
+		if (timer != null) {
+			timer.cancel();
+			timer = null;
+		}
+	}
+	
+	protected void playonce() {
+		try {
+			mMediaPlayer.reset();
+			mMediaPlayer.release();
+			mMediaPlayer = MediaPlayer.create(this, Uri.parse("file://" + musicName));
+			
+			if(mMediaPlayer == null){
+				mMediaPlayer = MediaPlayer.create(this,R.raw.tada);
+				mMediaPlayer.setLooping(true);
+				//return;
+			}
+			
+			if(mMediaPlayer != null){
+				mMediaPlayer.start();
+				TimerTask task = new TimerTask() {
+					public void run() {
+						Message msg = new Message();
+						msg.what = 0x1231;
+						updateBarHandler.sendMessage(msg);
+					}
+				};
+				if (timer == null) {
+					timer = new Timer(true);
+				}
+				if (timer != null && task != null) {
+					timer.schedule(task, 3000, 3000); 
+				}
+			}else{
+				Intent intent = new Intent(Speaker.this, FactoryMode.class);
+				setResult(RESULT_CANCELED, intent);
+				finish();
+			}
+		} catch (Exception e) {
+			e.printStackTrace();
+		}
+	}
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(Speaker.this, FactoryMode.class);
+			setResult(FactoryMode.TEST_CANCEL,intent);
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
