Index: kernel-4.4/drivers/leds/led-core.c
===================================================================
--- kernel-4.4/drivers/leds/led-core.c	(revision 2318)
+++ kernel-4.4/drivers/leds/led-core.c	(revision 2319)
@@ -124,6 +124,7 @@
 		     unsigned long *delay_on,
 		     unsigned long *delay_off)
 {
+	pr_err("func = %s, line = %d \n", __FUNCTION__, __LINE__);
 	if (!(led_cdev->flags & LED_BLINK_ONESHOT) &&
 	    led_cdev->blink_set &&
 	    !led_cdev->blink_set(led_cdev, delay_on, delay_off))
@@ -132,7 +133,7 @@
 	/* blink with 1 Hz as default if nothing specified */
 	if (!*delay_on && !*delay_off)
 		*delay_on = *delay_off = 500;
-
+	pr_err("func = %s, line = %d, (int)*delay_on %d, (int)*delay_off = %d \n", __FUNCTION__, __LINE__, (int)*delay_on, (int)*delay_off);
 	led_set_software_blink(led_cdev, *delay_on, *delay_off);
 }
 
Index: kernel-4.4/drivers/misc/mediatek/leds/mt6739/mtk_leds.c
===================================================================
--- kernel-4.4/drivers/misc/mediatek/leds/mt6739/mtk_leds.c	(revision 2318)
+++ kernel-4.4/drivers/misc/mediatek/leds/mt6739/mtk_leds.c	(revision 2319)
@@ -567,15 +567,29 @@
 		break;
 #endif
 	case MT65XX_LED_PMIC_NLED_ISINK1:
+		/*
 		pmic_set_register_value(PMIC_ISINK_CH1_EN, NLED_OFF);
 		pmic_set_register_value(PMIC_RG_DRV_ISINK1_CK_PDN, 0);
 		pmic_set_register_value(PMIC_ISINK_CH1_MODE, ISINK_PWM_MODE);
-		pmic_set_register_value(PMIC_ISINK_CH1_STEP, ISINK_3);	/* 16mA */
+		pmic_set_register_value(PMIC_ISINK_CH1_STEP, ISINK_3);	// 16mA 
 		pmic_set_register_value(PMIC_ISINK_DIM1_DUTY, duty);
 		pmic_set_register_value(PMIC_ISINK_DIM1_FSEL, pmic_freqsel_array[time_index]);
 		pmic_set_register_value(PMIC_ISINK_CH1_BIAS_EN, NLED_ON);
 		pmic_set_register_value(PMIC_ISINK_CHOP1_EN, NLED_ON);
 		pmic_set_register_value(PMIC_ISINK_CH1_EN, NLED_ON);
+		*/
+		pmic_set_register_value(PMIC_ISINK_CH1_MODE,ISINK_BREATH_MODE);
+        pmic_set_register_value(PMIC_ISINK_CH1_STEP, ISINK_3);
+        pmic_set_register_value(PMIC_ISINK_BREATH1_TR1_SEL, 0x04);
+        pmic_set_register_value(PMIC_ISINK_BREATH1_TR2_SEL, 0x04);
+        pmic_set_register_value(PMIC_ISINK_BREATH1_TF1_SEL, 0x04);
+        pmic_set_register_value(PMIC_ISINK_BREATH1_TF2_SEL, 0x04);
+        pmic_set_register_value(PMIC_ISINK_BREATH1_TON_SEL, 0x02);
+        pmic_set_register_value(PMIC_ISINK_BREATH1_TOFF_SEL, 0x03);
+        pmic_set_register_value(PMIC_ISINK_DIM1_DUTY, 15);
+        pmic_set_register_value(PMIC_ISINK_DIM1_FSEL, 11);
+		pmic_set_register_value(PMIC_ISINK_CH1_EN,NLED_ON);
+
 		break;
 	default:
 		LEDS_DEBUG("[LEDS] pmic_type %d is not handled\n", pmic_type);
@@ -980,7 +994,11 @@
 	    container_of(led_cdev, struct mt65xx_led_data, cdev);
 	static int got_wake_lock;
 	struct nled_setting nled_tmp_setting = { 0, 0, 0 };
-return 0;
+	pr_err("func = %s, line = %d, (int)*delay_on %d, (int)*delay_off = %d \n", __FUNCTION__, __LINE__, (int)*delay_on, (int)*delay_off);
+	pr_err("func = %s, line = %d, led_data->cust.mode %d, led_data->cust.data = %d \n", __FUNCTION__, __LINE__, led_data->cust.mode, (int)led_data->cust.data);
+	pr_err("func = %s, line = %d, led_data->delay_on %d, led_data->delay_off = %d \n", __FUNCTION__, __LINE__, led_data->delay_on,led_data->delay_off);
+	pr_err("func = %s, line = %d, MT65XX_LED_MODE_PMIC %d, MT65XX_LED_PMIC_NLED_ISINK0 = %d, MT65XX_LED_PMIC_NLED_ISINK1 = %d \n",__FUNCTION__, __LINE__, MT65XX_LED_MODE_PMIC, MT65XX_LED_PMIC_NLED_ISINK0, MT65XX_LED_PMIC_NLED_ISINK1);
+	//return 0;
 	/* only allow software blink when delay_on or delay_off changed */
 	if (*delay_on != led_data->delay_on
 	    || *delay_off != led_data->delay_off) {
@@ -989,7 +1007,10 @@
 		if (led_data->delay_on && led_data->delay_off) {	/* enable blink */
 			led_data->level = 255;	/* when enable blink  then to set the level  (255) */
 			/* AP PWM all support OLD mode */
+			pr_err("func = %s, line = %d, (int)*delay_on %d, (int)*delay_off = %d \n", __FUNCTION__, __LINE__, (int)*delay_on, (int)*delay_off);
+			
 			if (led_data->cust.mode == MT65XX_LED_MODE_PWM) {
+				pr_err("func = %s, line = %d \n", __FUNCTION__, __LINE__);
 				nled_tmp_setting.nled_mode = NLED_BLINK;
 				nled_tmp_setting.blink_off_time =
 				    led_data->delay_off;
@@ -1004,6 +1025,9 @@
 #endif
 					led_data->cust.data == MT65XX_LED_PMIC_NLED_ISINK1
 					)) {
+						
+				pr_err("func = %s, line = %d \n", __FUNCTION__, __LINE__);
+				
 				nled_tmp_setting.nled_mode = NLED_BLINK;
 				nled_tmp_setting.blink_off_time =
 				    led_data->delay_off;
@@ -1013,12 +1037,15 @@
 						  &nled_tmp_setting);
 				return 0;
 			} else if (!got_wake_lock) {
+				pr_err("func = %s, line = %d \n", __FUNCTION__, __LINE__);
 				wake_lock(&leds_suspend_lock);
 				got_wake_lock = 1;
 			}
 		} else if (!led_data->delay_on && !led_data->delay_off) {	/* disable blink */
+				pr_err("func = %s, line = %d, (int)*delay_on %d, (int)*delay_off = %d \n", __FUNCTION__, __LINE__, (int)*delay_on, (int)*delay_off);
 			/* AP PWM all support OLD mode */
 			if (led_data->cust.mode == MT65XX_LED_MODE_PWM) {
+				pr_err("func = %s, line = %d \n", __FUNCTION__, __LINE__);
 				nled_tmp_setting.nled_mode = NLED_OFF;
 				mt_led_set_pwm(led_data->cust.data,
 					       &nled_tmp_setting);
@@ -1029,10 +1056,12 @@
 #endif
 					led_data->cust.data == MT65XX_LED_PMIC_NLED_ISINK1
 					)) {
+			    pr_err("func = %s, line = %d \n", __FUNCTION__, __LINE__);
 				mt_brightness_set_pmic(led_data->cust.data, 0,
 						       0);
 				return 0;
 			} else if (got_wake_lock) {
+				pr_err("func = %s, line = %d \n", __FUNCTION__, __LINE__);
 				wake_unlock(&leds_suspend_lock);
 				got_wake_lock = 0;
 			}
