Index: packages/apps/Contacts/src/com/mediatek/contacts/list/ContactListMultiChoiceActivity.java
===================================================================
--- packages/apps/Contacts/src/com/mediatek/contacts/list/ContactListMultiChoiceActivity.java	(revision 8032)
+++ packages/apps/Contacts/src/com/mediatek/contacts/list/ContactListMultiChoiceActivity.java	(revision 8033)
@@ -34,6 +34,7 @@
  */
 package com.mediatek.contacts.list;
 
+import android.Manifest;
 import android.app.ActionBar;
 import android.app.ActionBar.LayoutParams;
 import android.app.Activity;
@@ -40,11 +41,15 @@
 import android.app.Fragment;
 import android.content.Context;
 import android.content.Intent;
+import android.content.pm.PackageManager;
 import android.content.res.Configuration;
 import android.graphics.Color;
 import android.graphics.Typeface;
 import android.net.Uri;
 import android.os.Bundle;
+import android.os.Trace;
+import android.support.v4.app.ActivityCompat;
+import android.support.v4.content.ContextCompat;
 import android.text.TextUtils;
 import android.view.LayoutInflater;
 import android.view.Menu;
@@ -58,6 +63,7 @@
 import android.widget.SearchView;
 import android.widget.SearchView.OnCloseListener;
 import android.widget.SearchView.OnQueryTextListener;
+import android.widget.Toast;
 
 import com.android.contacts.ContactsActivity;
 import com.android.contacts.R;
@@ -69,6 +75,9 @@
 import com.mediatek.contacts.list.DropMenu.DropDownMenu;
 import com.mediatek.contacts.util.Log;
 
+import java.util.ArrayList;
+import java.util.Arrays;
+
 /**
  * Displays a list of contacts (or phone numbers or postal addresses) for the
  * purposes of selecting multiple contacts.
@@ -81,6 +90,21 @@
 
     private static final int SUBACTIVITY_ADD_TO_EXISTING_CONTACT = 0;
     public static final int CONTACTGROUPLISTACTIVITY_RESULT_CODE = 1;
+    private static final int PERMISSIONS_REQUEST_ALL_PERMISSIONS = 1;
+    private static final String[] REQUIRED_PERMISSIONS = new String[]{
+            Manifest.permission.ACCESS_FINE_LOCATION, // Location Group
+            Manifest.permission.READ_CONTACTS, // Contacts group
+            Manifest.permission.READ_CALL_LOG, // Permission group phone
+            Manifest.permission.READ_CALENDAR, // Calendar group
+            Manifest.permission.READ_SMS, // SMS group
+            Manifest.permission.READ_PHONE_STATE,
+            Manifest.permission.WRITE_CONTACTS,
+            Manifest.permission.CALL_PHONE,
+            Manifest.permission.GET_ACCOUNTS,
+            Manifest.permission.ACCESS_COARSE_LOCATION,
+            Manifest.permission.READ_EXTERNAL_STORAGE,
+            Manifest.permission.WRITE_EXTERNAL_STORAGE
+    };
 
     private static final String KEY_ACTION_CODE = "actionCode";
     private static final int DEFAULT_DIRECTORY_RESULT_LIMIT = 20;
@@ -125,10 +149,6 @@
     protected void onCreate(Bundle savedState) {
         super.onCreate(savedState);
 
-        if (RequestPermissionsActivity.startPermissionActivity(this)) {
-            Log.i(TAG,"[onCreate]startPermissionActivity,return.");
-            return;
-        }
         // for ct new feature
         Intent mmsIntent = this.getIntent();
         Log.i(TAG, "[onCreate]...");
@@ -156,7 +176,7 @@
 
         setContentView(R.layout.contact_picker);
 
-        configureListFragment();
+        requestPermissions();
 
         // Disable Search View in listview
         if (mSearchView != null) {
@@ -166,7 +186,62 @@
         showActionBar(SelectionMode.ListMode);
     }
 
+    private void requestPermissions() {
+        Trace.beginSection("requestPermissions");
+        try {
+            // Construct a list of missing permissions
+            final ArrayList<String> unsatisfiedPermissions = new ArrayList<>();
+            for (String permission : REQUIRED_PERMISSIONS) {
+                if (checkSelfPermission(permission)
+                        != PackageManager.PERMISSION_GRANTED) {
+                    unsatisfiedPermissions.add(permission);
+                }
+            }
+            if (unsatisfiedPermissions.size() == 0) {
+                configureListFragment();
+            } else {
+                ActivityCompat.requestPermissions(
+                        this,
+                        unsatisfiedPermissions.toArray(new String[unsatisfiedPermissions.size()]),
+                        PERMISSIONS_REQUEST_ALL_PERMISSIONS);
+            }
+        } finally {
+            Trace.endSection();
+        }
+    }
+
     @Override
+    public int checkSelfPermission(String permission) {
+        return ContextCompat.checkSelfPermission(this, permission);
+    }
+
+    private boolean isAllGranted(String permissions[], int[] grantResult) {
+        for (int i = 0; i < permissions.length; i++) {
+            if (grantResult[i] != PackageManager.PERMISSION_GRANTED
+                    && isPermissionRequired(permissions[i])) {
+                return false;
+            }
+        }
+        return true;
+    }
+
+    private boolean isPermissionRequired(String p) {
+        return Arrays.asList(REQUIRED_PERMISSIONS).contains(p);
+    }
+
+    @Override
+    public void onRequestPermissionsResult(
+            int requestCode, String permissions[], int[] grantResults) {
+        if (permissions != null && permissions.length > 0
+                && isAllGranted(permissions, grantResults)) {
+            configureListFragment();
+        } else {
+            Toast.makeText(this, R.string.missing_required_permission, Toast.LENGTH_SHORT).show();
+            finish();
+        }
+    }
+
+    @Override
     protected void onDestroy() {
         ///M:[ALPS03432590] dismiss select all menu onDestroy() @{
         if (mSelectionMenu != null && mSelectionMenu.isShown()) {
