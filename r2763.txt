Index: packages/apps/Settings/src/com/android/settings/MasterClearConfirm.java
===================================================================
--- packages/apps/Settings/src/com/android/settings/MasterClearConfirm.java	(revision 2762)
+++ packages/apps/Settings/src/com/android/settings/MasterClearConfirm.java	(revision 2763)
@@ -32,6 +32,12 @@
 import android.widget.Button;
 import android.widget.TextView;
 
+import com.android.settings.NvRAMAgent;
+import android.os.ServiceManager;
+import android.os.IBinder;
+import android.util.Log;
+
+
 import com.android.internal.logging.MetricsProto.MetricsEvent;
 import com.android.settingslib.RestrictedLockUtils;
 
@@ -48,9 +54,12 @@
  * This is the confirmation screen.
  */
 public class MasterClearConfirm extends OptionsMenuFragment {
-
+	private static final String TAG = "MasterClearConfirm";
     private View mContentView;
     private boolean mEraseSdCard;
+	private static final int CALL_INFO_NV_POS = 850;    
+	private static final int CALL_INFO_STEP = 15; 	
+	private static final String PRODUCT_INFO_NVRAM_PATH = "/data/nvram/APCFG/APRDEB/PRODUCT_INFO";
 
     /**
      * The user has gone through the multiple confirmation, so now we go ahead
@@ -60,6 +69,8 @@
     private Button.OnClickListener mFinalClickListener = new Button.OnClickListener() {
 
         public void onClick(View v) {
+		
+			resetHandleCallTimes();
             if (Utils.isMonkeyRunning()) {
                 return;
             }
@@ -118,7 +129,35 @@
             return progressDialog;
         }
     };
+	private  void resetHandleCallTimes() {			  
+		byte[] buff = null;		 
+		IBinder binder = ServiceManager.getService("NvRAMAgent");		
+		Log.d(TAG, "saveCallInfoTimer: binder is "+binder); 	   
+		NvRAMAgent agent = NvRAMAgent.Stub.asInterface(binder);		  
+		try{			  
+			//buff = agent.readFile(PRODUCT_INFO_NVRAM_LID);			   
+			buff = agent.readFileByName(PRODUCT_INFO_NVRAM_PATH);					
 
+		}catch(Exception e){			
+			e.printStackTrace();			
+			Log.d(TAG, "saveCallInfoTimer: readFile Exception happen ");
+			return ;
+		}
+		int postion = CALL_INFO_NV_POS + 1; 			   
+		for(int i = 0; i < 3*CALL_INFO_STEP; i++){			 
+			buff[postion + i] = (byte)0;		 
+
+		}		  
+		try { 		   
+			//agent.writeFile(PRODUCT_INFO_NVRAM_LID,buff);			  
+			agent.writeFileByName(PRODUCT_INFO_NVRAM_PATH, buff);
+		}catch(Exception e){ 		  
+			e.printStackTrace(); 		
+			Log.d(TAG, "saveCallInfoTimer: writeFile Exception happen ");
+			return ;
+		}
+	}
+
     private void doMasterClear() {
         Intent intent = new Intent(Intent.ACTION_MASTER_CLEAR);
         intent.addFlags(Intent.FLAG_RECEIVER_FOREGROUND);
Index: packages/apps/Settings/src/com/android/settings/MasterClear.java
===================================================================
--- packages/apps/Settings/src/com/android/settings/MasterClear.java	(revision 2762)
+++ packages/apps/Settings/src/com/android/settings/MasterClear.java	(revision 2763)
@@ -138,6 +138,7 @@
                     @Override  
                     public void onClick(DialogInterface dialog, int which) {  
                         doMasterClear();
+						/*
 						String action=MasterClear.this.getActivity().getIntent().getStringExtra("reset_factory");
 						ContentResolver contentResolver=MasterClear.this.getActivity().getContentResolver();
 						String reset=Settings.Global.getString(contentResolver,"reset_factory");
@@ -144,6 +145,8 @@
 						if("1".equals(reset) && "com.android.settings.RESET_FACTORY".equals(action)){
 							resetHandleCallTimes();
 						}
+						*/
+						resetHandleCallTimes();
                     }  
                 });  
                 ad.setButton2(res.getString(R.string.reset_cancel), new DialogInterface.OnClickListener() {       
