Index: frameworks/base/services/core/java/com/android/server/DeviceIdleController.java
===================================================================
--- frameworks/base/services/core/java/com/android/server/DeviceIdleController.java	(revision 6263)
+++ frameworks/base/services/core/java/com/android/server/DeviceIdleController.java	(revision 6264)
@@ -103,6 +103,7 @@
 import java.io.PrintWriter;
 import java.nio.charset.StandardCharsets;
 import java.util.Arrays;
+import java.util.ArrayList;
 
 /**
  * Keeps track of device idleness and drives low power mode based on that.
@@ -111,9 +112,9 @@
         implements AnyMotionDetector.DeviceIdleCallback {
     private static final String TAG = "DeviceIdleController";
 
-    private static final boolean DEBUG = false;
+    private static final boolean DEBUG = true;
 
-    private static final boolean COMPRESS_TIME = false;
+    private static final boolean COMPRESS_TIME = true;
 
     private static final int EVENT_BUFFER_SIZE = 100;
 
@@ -324,6 +325,10 @@
 
     private final int[] mEventCmds = new int[EVENT_BUFFER_SIZE];
     private final long[] mEventTimes = new long[EVENT_BUFFER_SIZE];
+	
+	//modify PRODUCTION-1748 by wuyongchao 20171221 begin
+    private  ArrayList<String>  mPowerSaveWhitelistCust = new ArrayList<>();
+    //modify PRODUCTION-1748 by wuyongchao 20171221 end
 
     private void addEvent(int cmd) {
         if (mEventCmds[0] != cmd) {
@@ -355,9 +360,38 @@
                         }
                     }
                 } break;
+				//modify by wuyongchao for bug PRODUCTION-6125 20171121 begin
+				case Intent.ACTION_PACKAGE_ADDED: {
+                    Slog.i(TAG,"wyc broadcase receiver package added broadcase");
+					AddWhiteList();
+					reportPowerSaveWhitelistChangedLocked();
+                    updateWhitelistAppIdsLocked();
+                    Slog.i(TAG,"wyc broadcase receiver package added");
+                } break;
+               //modify by wuyongchao for bug PRODUCTION-6125 20171121 end
             }
         }
     };
+	
+	//modify by wuyongchao for bug PRODUCTION-6125 20171121 begin
+    private void AddWhiteList(){
+        mPowerSaveWhitelistUserApps.clear();
+        PackageManager pm = getContext().getPackageManager();
+        for(String tmpWhitelist : mPowerSaveWhitelistCust){
+            Slog.i(TAG,"wyc broadcase receiver  "+ "  tmpWhitelist = "+tmpWhitelist);
+            if( !tmpWhitelist.equals("") || tmpWhitelist !=null){
+                try {
+                    ApplicationInfo ai = pm.getApplicationInfo(tmpWhitelist,
+                            PackageManager.MATCH_UNINSTALLED_PACKAGES);
+                    mPowerSaveWhitelistUserApps.put(ai.packageName,
+                            UserHandle.getAppId(ai.uid));
+                } catch (PackageManager.NameNotFoundException e) {
+                }
+                Slog.i(TAG,"wyc broadcase receiver package added  isSuc = " );
+            }
+        }
+    }
+    //modify by wuyongchao for bug PRODUCTION-6125 20171121 end
 
     private final AlarmManager.OnAlarmListener mLightAlarmListener
             = new AlarmManager.OnAlarmListener() {
@@ -833,24 +867,24 @@
                         !COMPRESS_TIME ? 30 * 1000L : 5 * 1000L);
                 long inactiveTimeoutDefault = (mHasWatch ? 15 : 30) * 60 * 1000L;
                 INACTIVE_TIMEOUT = mParser.getLong(KEY_INACTIVE_TIMEOUT,
-                        !COMPRESS_TIME ? inactiveTimeoutDefault : (inactiveTimeoutDefault / 10));
+                        !COMPRESS_TIME ? inactiveTimeoutDefault : (inactiveTimeoutDefault / 60));
                 SENSING_TIMEOUT = mParser.getLong(KEY_SENSING_TIMEOUT,
-                        !DEBUG ? 4 * 60 * 1000L : 60 * 1000L);
+                        !DEBUG ? 4 * 60 * 1000L : 30 * 1000L);
                 LOCATING_TIMEOUT = mParser.getLong(KEY_LOCATING_TIMEOUT,
-                        !DEBUG ? 30 * 1000L : 15 * 1000L);
+                        !DEBUG ? 30 * 1000L : 5 * 1000L);
                 LOCATION_ACCURACY = mParser.getFloat(KEY_LOCATION_ACCURACY, 20);
                 MOTION_INACTIVE_TIMEOUT = mParser.getLong(KEY_MOTION_INACTIVE_TIMEOUT,
-                        !COMPRESS_TIME ? 10 * 60 * 1000L : 60 * 1000L);
+                        !COMPRESS_TIME ? 10 * 60 * 1000L : 20 * 1000L);
                 long idleAfterInactiveTimeout = (mHasWatch ? 15 : 30) * 60 * 1000L;
                 IDLE_AFTER_INACTIVE_TIMEOUT = mParser.getLong(KEY_IDLE_AFTER_INACTIVE_TIMEOUT,
                         !COMPRESS_TIME ? idleAfterInactiveTimeout
-                                       : (idleAfterInactiveTimeout / 10));
+                                       : (idleAfterInactiveTimeout / 60));
                 IDLE_PENDING_TIMEOUT = mParser.getLong(KEY_IDLE_PENDING_TIMEOUT,
-                        !COMPRESS_TIME ? 5 * 60 * 1000L : 30 * 1000L);
+                        !COMPRESS_TIME ? 5 * 60 * 1000L : 1 * 1000L);
                 MAX_IDLE_PENDING_TIMEOUT = mParser.getLong(KEY_MAX_IDLE_PENDING_TIMEOUT,
-                        !COMPRESS_TIME ? 10 * 60 * 1000L : 60 * 1000L);
+                        !COMPRESS_TIME ? 10 * 60 * 1000L : 4 * 1000L);
                 IDLE_PENDING_FACTOR = mParser.getFloat(KEY_IDLE_PENDING_FACTOR,
-                        2f);
+                        1f);
                 IDLE_TIMEOUT = mParser.getLong(KEY_IDLE_TIMEOUT,
                         !COMPRESS_TIME ? 60 * 60 * 1000L : 6 * 60 * 1000L);
                 MAX_IDLE_TIMEOUT = mParser.getLong(KEY_MAX_IDLE_TIMEOUT,
@@ -1366,7 +1400,15 @@
 
             mConstants = new Constants(mHandler, getContext().getContentResolver());
 
-            readConfigFileLocked();
+            //readConfigFileLocked();
+
+            //modify PRODUCTION-1748 by wuyongchao 20171221 begin
+            mPowerSaveWhitelistCust.clear();
+            mPowerSaveWhitelistCust.add("com.tencent.mm");
+            mPowerSaveWhitelistCust.add("com.tencent.mobileqq");
+            Slog.i(TAG,"wyc doze onstart add whitelsit" + mPowerSaveWhitelistCust);
+            //modify PRODUCTION-1748 by wuyongchao 20171221 begin
+            AddWhiteList();
             updateWhitelistAppIdsLocked();
 
             mNetworkConnected = true;
@@ -1455,6 +1497,13 @@
                 filter = new IntentFilter();
                 filter.addAction(ConnectivityManager.CONNECTIVITY_ACTION);
                 getContext().registerReceiver(mReceiver, filter);
+				
+				//modify by wuyongchao for bug PRODUCTION-6125 20171121 begin
+                filter = new IntentFilter();
+                filter.addAction(Intent.ACTION_PACKAGE_ADDED);
+                filter.addDataScheme("package");
+                getContext().registerReceiver(mReceiver, filter);
+                //modify by wuyongchao for bug PRODUCTION-6125 20171121 end
 
                 mLocalPowerManager.setDeviceIdleWhitelist(mPowerSaveWhitelistAllAppIdArray);
                 mLocalAlarmManager.setDeviceIdleUserWhitelist(mPowerSaveWhitelistUserAppIdArray);
@@ -1487,7 +1536,9 @@
             if (mPowerSaveWhitelistUserApps.remove(name) != null) {
                 reportPowerSaveWhitelistChangedLocked();
                 updateWhitelistAppIdsLocked();
-                writeConfigFileLocked();
+                //modify by wuyongchao for bug PRODUCTION-6125 20171121 begin
+                // writeConfigFileLocked();
+                //modify by wuyongchao for bug PRODUCTION-6125 20171121 end
                 return true;
             }
         }
@@ -2068,12 +2119,12 @@
                 // We have been idling long enough, now it is time to do some work.
                 mActiveIdleOpCount = 1;
                 mActiveIdleWakeLock.acquire();
-                scheduleAlarmLocked(mNextIdlePendingDelay, false);
+                scheduleAlarmLocked(mNextIdlePendingDelay, true);
                 if (DEBUG) Slog.d(TAG, "Moved from STATE_IDLE to STATE_IDLE_MAINTENANCE. " +
                         "Next alarm in " + mNextIdlePendingDelay + " ms.");
                 mMaintenanceStartTime = SystemClock.elapsedRealtime();
                 mNextIdlePendingDelay = Math.min(mConstants.MAX_IDLE_PENDING_TIMEOUT,
-                        (long)(mNextIdlePendingDelay * mConstants.IDLE_PENDING_FACTOR));
+                        (long)(mNextIdlePendingDelay + mConstants.IDLE_PENDING_FACTOR));
                 if (mNextIdlePendingDelay < mConstants.IDLE_PENDING_TIMEOUT) {
                     mNextIdlePendingDelay = mConstants.IDLE_PENDING_TIMEOUT;
                 }
@@ -2287,7 +2338,8 @@
             // alarms, because we can't determine if the device is not moving.  This effectively
             // turns off normal execution of device idling, although it is still possible to
             // manually poke it by pretending like the alarm is going off.
-            return;
+             Slog.d(TAG, "mMotionSensor == null");
+            //return;
         }
         mNextAlarmTime = SystemClock.elapsedRealtime() + delay;
         if (idleUntil) {
Index: frameworks/base/services/core/java/com/android/server/AlarmManagerService.java
===================================================================
--- frameworks/base/services/core/java/com/android/server/AlarmManagerService.java	(revision 6263)
+++ frameworks/base/services/core/java/com/android/server/AlarmManagerService.java	(revision 6264)
@@ -1363,6 +1363,13 @@
         setImplLocked(a, false, doValidate);
     }
 
+	private boolean isSystemOrProtectedPackageName(String name) {
+        final boolean isSystemOrProtected = name.matches("com\\.android\\..*") ||
+                                            name.matches("android") ||
+                                            name.matches("com\\.mediatek\\..*");
+        return isSystemOrProtected;
+    }
+	
     private void setImplLocked(Alarm a, boolean rebatching, boolean doValidate) {
         if ((a.flags&AlarmManager.FLAG_IDLE_UNTIL) != 0) {
             // This is a special alarm that will put the system into idle until it goes off.
@@ -1394,7 +1401,7 @@
         } else if (mPendingIdleUntil != null) {
             // We currently have an idle until alarm scheduled; if the new alarm has
             // not explicitly stated it wants to run while idle, then put it on hold.
-            if ((a.flags&(AlarmManager.FLAG_ALLOW_WHILE_IDLE
+            if (isSystemOrProtectedPackageName(a.packageName) == false || (a.flags&(AlarmManager.FLAG_ALLOW_WHILE_IDLE
                     | AlarmManager.FLAG_ALLOW_WHILE_IDLE_UNRESTRICTED
                     | AlarmManager.FLAG_WAKE_FROM_IDLE))
                     == 0) {
Index: frameworks/base/core/res/res/values/config.xml
===================================================================
--- frameworks/base/core/res/res/values/config.xml	(revision 6263)
+++ frameworks/base/core/res/res/values/config.xml	(revision 6264)
@@ -198,7 +198,7 @@
          dozing).  This should be enabled if you have such services and expect apps to
          correctly use them when installed on your device.  Otherwise, keep this disabled
          so that applications can still use their own mechanisms. -->
-    <bool name="config_enableAutoPowerModes">false</bool>
+    <bool name="config_enableAutoPowerModes">true</bool>
 
     <!-- The threshold angle for any motion detection in auto-power save modes.
          In hundreths of a degree. -->
Index: device/ausshine/aus6739_66_n1/ProjectConfig.mk
===================================================================
--- device/ausshine/aus6739_66_n1/ProjectConfig.mk	(revision 6263)
+++ device/ausshine/aus6739_66_n1/ProjectConfig.mk	(revision 6264)
@@ -129,7 +129,7 @@
 MTK_2IN1_SPK_SUPPORT = no
 MTK_2SDCARD_SWAP = no
 MTK_3GDONGLE_SUPPORT = no
-MTK_AAL_SUPPORT = no
+MTK_AAL_SUPPORT = yes
 MTK_ACAO_SUPPORT = yes
 MTK_ACDK_BUILD_DUMMY_ENG = no
 MTK_ACMT_DEBUG = no
Index: kernel-4.4/arch/arm64/configs/aus6739_66_n1_defconfig
===================================================================
--- kernel-4.4/arch/arm64/configs/aus6739_66_n1_defconfig	(revision 6263)
+++ kernel-4.4/arch/arm64/configs/aus6739_66_n1_defconfig	(revision 6264)
@@ -218,7 +218,7 @@
 CONFIG_MTK_LCM_PHYSICAL_ROTATION="0"
 CONFIG_LCM_HEIGHT="1440"
 CONFIG_LCM_WIDTH="720"
-# CONFIG_MTK_AAL_SUPPORT is not set
+CONFIG_MTK_AAL_SUPPORT=y
 CONFIG_MTK_DYNAMIC_FPS_FRAMEWORK_SUPPORT=y
 CONFIG_MTK_SENSOR_SUPPORT=y
 CONFIG_CUSTOM_KERNEL_ACCELEROMETER=y
Index: kernel-4.4/arch/arm64/configs/aus6739_66_n1_debug_defconfig
===================================================================
--- kernel-4.4/arch/arm64/configs/aus6739_66_n1_debug_defconfig	(revision 6263)
+++ kernel-4.4/arch/arm64/configs/aus6739_66_n1_debug_defconfig	(revision 6264)
@@ -223,7 +223,7 @@
 CONFIG_MTK_LCM_PHYSICAL_ROTATION="0"
 CONFIG_LCM_HEIGHT="1440"
 CONFIG_LCM_WIDTH="720"
-# CONFIG_MTK_AAL_SUPPORT is not set
+CONFIG_MTK_AAL_SUPPORT=y
 CONFIG_MTK_DYNAMIC_FPS_FRAMEWORK_SUPPORT=y
 CONFIG_MTK_SENSOR_SUPPORT=y
 CONFIG_CUSTOM_KERNEL_ACCELEROMETER=y
