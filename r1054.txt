Index: vendor/mediatek/proprietary/packages/apps/Calendar/Android.mk
===================================================================
--- vendor/mediatek/proprietary/packages/apps/Calendar/Android.mk	(revision 1053)
+++ vendor/mediatek/proprietary/packages/apps/Calendar/Android.mk	(revision 1054)
@@ -37,6 +37,7 @@
         android-common-chips
 
 LOCAL_JAVA_LIBRARIES += mediatek-framework
+LOCAL_SRC_FILES += $(call all-java-files-under, ../../../../common/packages/apps/Plugins/src/com/mediatek/calendar/plugin)
 
 #LOCAL_JACK_ENABLED := disabled
 
@@ -45,6 +46,7 @@
 #LOCAL_SDK_VERSION := current
 
 LOCAL_RESOURCE_DIR := $(addprefix $(LOCAL_PATH)/, $(res_dirs))
+LOCAL_AAPT_FLAGS := --auto-add-overlay --extra-packages com.mediatek.common.plugin
 
 LOCAL_PACKAGE_NAME := MtkCalendar
 LOCAL_OVERRIDES_PACKAGES := Calendar
@@ -67,6 +69,7 @@
 LOCAL_AAPT_FLAGS += --extra-packages com.android.datetimepicker
 LOCAL_AAPT_FLAGS += --extra-packages com.android.timezonepicker
 
+LOCAL_JAVA_LIBRARIES += com.mediatek.calendar.ext
 include $(BUILD_PACKAGE)
 
 # Use the following include to make our test apk.
Index: vendor/mediatek/proprietary/packages/apps/Calendar/src/com/android/calendar/month/MonthWeekEventsView.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/Calendar/src/com/android/calendar/month/MonthWeekEventsView.java	(revision 1053)
+++ vendor/mediatek/proprietary/packages/apps/Calendar/src/com/android/calendar/month/MonthWeekEventsView.java	(revision 1054)
@@ -848,8 +848,8 @@
             canvas.drawText(mDayNumbers[i], x, y, mMonthNumPaint);
 
             ///M: do the extension here @{
-            OPExtensionFactory.getLunarExtension(mContext).drawLunarString(mContext, canvas, mMonthNumPaint,
-                    x, y, getDayFromLocation(x));
+            OPExtensionFactory.getLunarCommonExtension(mContext).drawLunarString(mContext, canvas, mMonthNumPaint,
+                    x, y, getDayFromLocation(x));//lance modify for Lunar
             ///@}
 
             if (isBold) {
Index: vendor/mediatek/proprietary/packages/apps/Calendar/src/com/android/calendar/CalendarViewAdapter.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/Calendar/src/com/android/calendar/CalendarViewAdapter.java	(revision 1053)
+++ vendor/mediatek/proprietary/packages/apps/Calendar/src/com/android/calendar/CalendarViewAdapter.java	(revision 1054)
@@ -208,10 +208,10 @@
                     weekDay.setVisibility(View.VISIBLE);
                     weekDay.setText(buildDayOfWeek() +
                             /** M: lunar calendar enhancement. @{ */
-                            OPExtensionFactory.getLunarExtension(mContext).buildLunarDate(null,
+                            OPExtensionFactory.getLunarCommonExtension(mContext).buildLunarDate(null,
                             mTimeZone, mMilliTime)
                             /**@}*/
-                            );
+                            );//lance modify for Lunar
                     date.setText(buildFullDate());
                     break;
                 default:
Index: vendor/mediatek/proprietary/packages/apps/Calendar/src/com/android/calendar/EventInfoFragment.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/Calendar/src/com/android/calendar/EventInfoFragment.java	(revision 1053)
+++ vendor/mediatek/proprietary/packages/apps/Calendar/src/com/android/calendar/EventInfoFragment.java	(revision 1054)
@@ -1645,8 +1645,8 @@
                 System.currentTimeMillis(), localTimezone, mAllDay, context);
 
         /** M: lunar calendar enhancement. @{ */
-        displayedDatetime += OPExtensionFactory.getLunarExtension(mContext).getLunarDisplayedDate(
-                localTimezone, mStartMillis, mEndMillis, mAllDay);
+        displayedDatetime += OPExtensionFactory.getLunarCommonExtension(mContext).getLunarDisplayedDate(
+                localTimezone, mStartMillis, mEndMillis, mAllDay);//lance modify for Lunar
         /**@}*/
 
         String displayedTimezone = null;
Index: vendor/mediatek/proprietary/packages/apps/Calendar/src/com/android/calendar/event/EditEventView.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/Calendar/src/com/android/calendar/event/EditEventView.java	(revision 1053)
+++ vendor/mediatek/proprietary/packages/apps/Calendar/src/com/android/calendar/event/EditEventView.java	(revision 1054)
@@ -957,7 +957,7 @@
             boolean timeSelectedWasStartTime, boolean dateSelectedWasStartDate,
             boolean showDatePicker, int[] selectedDate, /** M: */ boolean isRestoredView) {
         ///M: #extension# @{
-        mExt = OPExtensionFactory.getEditEventViewExtension(activity);
+        mExt = OPExtensionFactory.getEditEventViewCommonExtension(activity);//lance modify for Lunar
         ///@}
 
         mActivity = activity;
Index: vendor/mediatek/proprietary/packages/apps/Calendar/src/com/android/calendar/agenda/AgendaByDayAdapter.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/Calendar/src/com/android/calendar/agenda/AgendaByDayAdapter.java	(revision 1053)
+++ vendor/mediatek/proprietary/packages/apps/Calendar/src/com/android/calendar/agenda/AgendaByDayAdapter.java	(revision 1054)
@@ -238,7 +238,7 @@
             String dayViewText = Utils.getDayOfWeekString(row.mDay, mTodayJulianDay, millis,
                     mContext);
             /** M: lunar calendar enhancement. @{ */
-            dayViewText += OPExtensionFactory.getLunarExtension(mContext).buildLunarDate(date, null, -1);
+            dayViewText += OPExtensionFactory.getLunarCommonExtension(mContext).buildLunarDate(date, null, -1); //lance modify for Lunar
             /**@}*/
 
             // Build text for the date
Index: vendor/mediatek/proprietary/packages/apps/Calendar/src/com/mediatek/calendar/plugin/LunarPlugin.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/Calendar/src/com/mediatek/calendar/plugin/LunarPlugin.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/Calendar/src/com/mediatek/calendar/plugin/LunarPlugin.java	(revision 1054)
@@ -0,0 +1,67 @@
+package com.mediatek.calendar.plugin;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.text.format.Time;
+import android.util.Log;
+
+import com.mediatek.calendar.ext.DefaultLunarExtension;
+import com.mediatek.calendar.plugin.lunar.LunarMonthViewExt;
+import com.mediatek.calendar.plugin.lunar.LunarUtil;
+import com.mediatek.common.PluginImpl;
+
+@PluginImpl(interfaceName="com.mediatek.calendar.ext.ILunarExt")
+public class LunarPlugin extends DefaultLunarExtension {
+
+    private static final String TAG = "LunarPlugin";
+    private Context mContext;
+    private LunarUtil mLunarUtil;
+
+    public LunarPlugin(Context context) {
+        Log.d(TAG, "LunarPlugin constuctor");
+        mContext = context;
+        mLunarUtil = LunarUtil.getInstance(context);
+    }
+
+     /**
+     * Gets lunar date or lunar date range of a event according to the given startMillis
+     * and endMillis of this event
+     * @param localTimezone the current time zone
+     * @param startMillis   the start time of a event
+     * @param endMillis     the and time of a event
+     * @param allDay        whether the event is all day event
+     * @return lunar date like: 农历[闰]xx月xx
+     *         or lunar date range like:农历[闰]xx月(初|十|廿|卅)x - [闰]xx月(初|十|廿|卅)x
+     */
+    @Override
+    public String getLunarDisplayedDate(String localTimezone, long startMillis,
+            long endMillis, boolean allDay) {
+        return mLunarUtil.getLunarDisplayedDate(mContext, localTimezone, startMillis, endMillis,
+                allDay);
+    }
+
+    /**
+     * Build lunar date according the given gregorian date or time
+     * @param date if it is null, timezone and milliTime must be assigned
+     * @return lunar date string like : [闰]xx月(初|十|廿|卅)x
+     */
+    @Override
+    public String buildLunarDate(Time date, String timeZone, long milliTime) {
+        return mLunarUtil.buildLunarDate(mContext, date, timeZone, milliTime);
+    }
+
+    /** Draw lunar in the box(x ,y) of the month view if needed
+     * @param canvas        the canvas to draw
+     * @param monthNumPaint the paint of the month number
+     * @param x             the x of the number's right-bottom
+     * @param y             the y of the number's right-bottom
+     */
+    @Override
+    public void drawLunarString(Context hostContext, Canvas canvas, Paint monthNumPaint,
+            int x, int y, Time weekDay) {
+                android.util.Log.d("lancelot","drawLunarString");
+        LunarMonthViewExt.drawLunarString(hostContext, mContext, canvas, monthNumPaint, x, y, weekDay);
+    }
+
+}
Index: vendor/mediatek/proprietary/packages/apps/Calendar/src/com/mediatek/calendar/plugin/lunar/LunarSimpleMonthView.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/Calendar/src/com/mediatek/calendar/plugin/lunar/LunarSimpleMonthView.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/Calendar/src/com/mediatek/calendar/plugin/lunar/LunarSimpleMonthView.java	(revision 1054)
@@ -0,0 +1,731 @@
+/*
+ * Copyright (C) 2013 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mediatek.calendar.plugin.lunar;
+
+import android.content.Context;
+import android.content.res.Resources;
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.graphics.Paint.Align;
+import android.graphics.Paint.Style;
+import android.graphics.Rect;
+import android.graphics.Typeface;
+import android.os.Bundle;
+import android.support.v4.view.ViewCompat;
+import android.support.v4.view.accessibility.AccessibilityNodeInfoCompat;
+import android.support.v4.widget.ExploreByTouchHelper;
+import android.text.format.DateFormat;
+import android.text.format.DateUtils;
+import android.text.format.Time;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.accessibility.AccessibilityEvent;
+import android.view.accessibility.AccessibilityNodeInfo;
+
+import com.android.datetimepicker.R;
+import com.android.datetimepicker.Utils;
+import com.mediatek.calendar.plugin.lunar.LunarSimpleMonthAdapter.CalendarDay;
+
+import java.security.InvalidParameterException;
+import java.util.Calendar;
+import java.util.Formatter;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Locale;
+
+/**
+ * A calendar-like view displaying a specified month and the appropriate selectable day numbers
+ * within the specified month.
+ */
+public class LunarSimpleMonthView extends View {
+    private static final String TAG = "SimpleMonthView";
+
+    /**
+     * These params can be passed into the view to control how it appears.
+     * {@link #VIEW_PARAMS_WEEK} is the only required field, though the default
+     * values are unlikely to fit most layouts correctly.
+     */
+    /**
+     * This sets the height of this week in pixels
+     */
+    public static final String VIEW_PARAMS_HEIGHT = "height";
+    /**
+     * This specifies the position (or weeks since the epoch) of this week,
+     * calculated using {@link Utils#getWeeksSinceEpochFromJulianDay}
+     */
+    public static final String VIEW_PARAMS_MONTH = "month";
+    /**
+     * This specifies the position (or weeks since the epoch) of this week,
+     * calculated using {@link Utils#getWeeksSinceEpochFromJulianDay}
+     */
+    public static final String VIEW_PARAMS_YEAR = "year";
+    /**
+     * This sets one of the days in this view as selected {@link Time#SUNDAY}
+     * through {@link Time#SATURDAY}.
+     */
+    public static final String VIEW_PARAMS_SELECTED_DAY = "selected_day";
+    /**
+     * Which day the week should start on. {@link Time#SUNDAY} through
+     * {@link Time#SATURDAY}.
+     */
+    public static final String VIEW_PARAMS_WEEK_START = "week_start";
+    /**
+     * How many days to display at a time. Days will be displayed starting with
+     * {@link #mWeekStart}.
+     */
+    public static final String VIEW_PARAMS_NUM_DAYS = "num_days";
+    /**
+     * Which month is currently in focus, as defined by {@link Time#month}
+     * [0-11].
+     */
+    public static final String VIEW_PARAMS_FOCUS_MONTH = "focus_month";
+    /**
+     * If this month should display week numbers. false if 0, true otherwise.
+     */
+    public static final String VIEW_PARAMS_SHOW_WK_NUM = "show_wk_num";
+
+    protected static final int DEFAULT_HEIGHT = 32;
+    protected static final int MIN_HEIGHT = 10;
+    protected static final int DEFAULT_SELECTED_DAY = -1;
+    protected static final int DEFAULT_WEEK_START = Calendar.SUNDAY;
+    protected static final int DEFAULT_NUM_DAYS = 7;
+    protected static final int DEFAULT_SHOW_WK_NUM = 0;
+    protected static final int DEFAULT_FOCUS_MONTH = -1;
+    protected static final int DEFAULT_NUM_ROWS = 6;
+    protected static final int MAX_NUM_ROWS = 6;
+
+    private static final int SELECTED_CIRCLE_ALPHA = 60;
+
+    protected static final int DAY_SEPARATOR_WIDTH = 1;
+    protected int mMiniDayNumberTextSize;
+    protected int mMonthLabelTextSize;
+    protected int mMonthDayLabelTextSize;
+    protected int mMonthHeaderSize;
+    protected int mDaySelectedCircleSize;
+
+    // used for scaling to the device density
+    protected static float mScale = 0;
+
+    // affects the padding on the sides of this view
+    protected int mPadding = 0;
+
+    private String mDayOfWeekTypeface;
+    private String mMonthTitleTypeface;
+
+    protected Paint mMonthNumPaint;
+    protected Paint mMonthTitlePaint;
+    protected Paint mMonthTitleBGPaint;
+    protected Paint mSelectedCirclePaint;
+    protected Paint mMonthDayLabelPaint;
+
+    private final Formatter mFormatter;
+    private final StringBuilder mStringBuilder;
+
+    // The Julian day of the first day displayed by this item
+    protected int mFirstJulianDay = -1;
+    // The month of the first day in this week
+    protected int mFirstMonth = -1;
+    // The month of the last day in this week
+    protected int mLastMonth = -1;
+
+    protected int mMonth;
+
+    protected int mYear;
+    // Quick reference to the width of this view, matches parent
+    protected int mWidth;
+    // The height this view should draw at in pixels, set by height param
+    protected int mRowHeight = DEFAULT_HEIGHT;
+    // If this view contains the today
+    protected boolean mHasToday = false;
+    // Which day is selected [0-6] or -1 if no day is selected
+    protected int mSelectedDay = -1;
+    // Which day is today [0-6] or -1 if no day is today
+    protected int mToday = DEFAULT_SELECTED_DAY;
+    // Which day of the week to start on [0-6]
+    protected int mWeekStart = DEFAULT_WEEK_START;
+    // How many days to display
+    protected int mNumDays = DEFAULT_NUM_DAYS;
+    // The number of days + a spot for week number if it is displayed
+    protected int mNumCells = mNumDays;
+    // The left edge of the selected day
+    protected int mSelectedLeft = -1;
+    // The right edge of the selected day
+    protected int mSelectedRight = -1;
+
+    private final Calendar mCalendar;
+    private final Calendar mDayLabelCalendar;
+    private final MonthViewTouchHelper mTouchHelper;
+
+    private int mNumRows = DEFAULT_NUM_ROWS;
+
+    // Optional listener for handling day click actions
+    private OnDayClickListener mOnDayClickListener;
+    // Whether to prevent setting the accessibility delegate
+    private boolean mLockAccessibilityDelegate;
+
+    protected int mDayTextColor;
+    protected int mTodayNumberColor;
+    protected int mMonthTitleColor;
+    protected int mMonthTitleBGColor;
+
+    /** M: @{ */
+    LunarUtil mLunar;
+
+    protected int mLunarMiniDayNumTextSize;
+    protected int mLunarDaySelectedCircleSize;
+
+    protected int mLunarMoveup;
+    protected int mLunarGap;
+
+    protected int mLunarDayTextColor;
+
+    protected Paint mLunarDayNumPaint;
+    /**@}*/
+
+    public LunarSimpleMonthView(Context context, Context pluginContext) {
+        super(context);
+
+        Resources res = context.getResources();
+        mLunar = LunarUtil.getInstance(pluginContext);
+
+        mDayLabelCalendar = Calendar.getInstance();
+        mCalendar = Calendar.getInstance();
+
+        mDayOfWeekTypeface = res.getString(R.string.day_of_week_label_typeface);
+        mMonthTitleTypeface = res.getString(R.string.sans_serif);
+
+        mDayTextColor = res.getColor(R.color.date_picker_text_normal);
+        mTodayNumberColor = res.getColor(R.color.blue);
+        mMonthTitleColor = res.getColor(R.color.white);
+        mMonthTitleBGColor = res.getColor(R.color.circle_background);
+
+        mStringBuilder = new StringBuilder(50);
+        mFormatter = new Formatter(mStringBuilder, Locale.getDefault());
+
+        mMiniDayNumberTextSize = res.getDimensionPixelSize(R.dimen.day_number_size);
+        mMonthLabelTextSize = res.getDimensionPixelSize(R.dimen.month_label_size);
+        mMonthDayLabelTextSize = res.getDimensionPixelSize(R.dimen.month_day_label_text_size);
+        mMonthHeaderSize = res.getDimensionPixelOffset(R.dimen.month_list_item_header_height);
+        mDaySelectedCircleSize = res
+                .getDimensionPixelSize(R.dimen.day_number_select_circle_radius);
+
+        mRowHeight = (res.getDimensionPixelOffset(R.dimen.date_picker_view_animator_height)
+                - mMonthHeaderSize) / MAX_NUM_ROWS;
+
+        // Set up accessibility components.
+        mTouchHelper = new MonthViewTouchHelper(this);
+        ViewCompat.setAccessibilityDelegate(this, mTouchHelper);
+        ViewCompat.setImportantForAccessibility(this, ViewCompat.IMPORTANT_FOR_ACCESSIBILITY_YES);
+        mLockAccessibilityDelegate = true;
+
+        /** M: @{*/
+        mLunarDayTextColor = res.getColor(com.android.calendar.R.color.lunar_date_picker_text_normal);
+        mLunarMiniDayNumTextSize = res.getDimensionPixelSize(com.android.calendar.R.dimen.lunar_day_number_size);
+        mLunarDaySelectedCircleSize = res.getDimensionPixelSize(com.android.calendar.R.dimen.lunar_day_number_select_circle_radius);
+        mLunarMoveup = res.getDimensionPixelSize(com.android.calendar.R.dimen.lunar_moveup);
+        mLunarGap = res.getDimensionPixelSize(com.android.calendar.R.dimen.lunar_gap);
+        /** @} */
+
+        // Sets up any standard paints that will be used
+        initView();
+    }
+
+    @Override
+    public void setAccessibilityDelegate(AccessibilityDelegate delegate) {
+        // Workaround for a JB MR1 issue where accessibility delegates on
+        // top-level ListView items are overwritten.
+        if (!mLockAccessibilityDelegate) {
+            super.setAccessibilityDelegate(delegate);
+        }
+    }
+
+    public void setOnDayClickListener(OnDayClickListener listener) {
+        mOnDayClickListener = listener;
+    }
+
+    @Override
+    public boolean dispatchHoverEvent(MotionEvent event) {
+        // First right-of-refusal goes the touch exploration helper.
+        if (mTouchHelper.dispatchHoverEvent(event)) {
+            return true;
+        }
+        return super.dispatchHoverEvent(event);
+    }
+
+    @Override
+    public boolean onTouchEvent(MotionEvent event) {
+        switch (event.getAction()) {
+            case MotionEvent.ACTION_UP:
+                final int day = getDayFromLocation(event.getX(), event.getY());
+                if (day >= 0) {
+                    onDayClick(day);
+                }
+                break;
+        }
+        return true;
+    }
+
+    /**
+     * Sets up the text and style properties for painting. Override this if you
+     * want to use a different paint.
+     */
+    protected void initView() {
+        mMonthTitlePaint = new Paint();
+        mMonthTitlePaint.setFakeBoldText(true);
+        mMonthTitlePaint.setAntiAlias(true);
+        mMonthTitlePaint.setTextSize(mMonthLabelTextSize);
+        mMonthTitlePaint.setTypeface(Typeface.create(mMonthTitleTypeface, Typeface.BOLD));
+        mMonthTitlePaint.setColor(mDayTextColor);
+        mMonthTitlePaint.setTextAlign(Align.CENTER);
+        mMonthTitlePaint.setStyle(Style.FILL);
+
+        mMonthTitleBGPaint = new Paint();
+        mMonthTitleBGPaint.setFakeBoldText(true);
+        mMonthTitleBGPaint.setAntiAlias(true);
+        mMonthTitleBGPaint.setColor(mMonthTitleBGColor);
+        mMonthTitleBGPaint.setTextAlign(Align.CENTER);
+        mMonthTitleBGPaint.setStyle(Style.FILL);
+
+        mSelectedCirclePaint = new Paint();
+        mSelectedCirclePaint.setFakeBoldText(true);
+        mSelectedCirclePaint.setAntiAlias(true);
+        mSelectedCirclePaint.setColor(mTodayNumberColor);
+        mSelectedCirclePaint.setTextAlign(Align.CENTER);
+        mSelectedCirclePaint.setStyle(Style.FILL);
+        mSelectedCirclePaint.setAlpha(SELECTED_CIRCLE_ALPHA);
+
+        mMonthDayLabelPaint = new Paint();
+        mMonthDayLabelPaint.setAntiAlias(true);
+        mMonthDayLabelPaint.setTextSize(mMonthDayLabelTextSize);
+        mMonthDayLabelPaint.setColor(mDayTextColor);
+        mMonthDayLabelPaint.setTypeface(Typeface.create(mDayOfWeekTypeface, Typeface.NORMAL));
+        mMonthDayLabelPaint.setStyle(Style.FILL);
+        mMonthDayLabelPaint.setTextAlign(Align.CENTER);
+        mMonthDayLabelPaint.setFakeBoldText(true);
+
+        mMonthNumPaint = new Paint();
+        mMonthNumPaint.setAntiAlias(true);
+        mMonthNumPaint.setTextSize(mMiniDayNumberTextSize);
+        mMonthNumPaint.setStyle(Style.FILL);
+        mMonthNumPaint.setTextAlign(Align.CENTER);
+        mMonthNumPaint.setFakeBoldText(false);
+
+        /** M: use mDayOfWeekTypeface. @{ */
+        mLunarDayNumPaint = new Paint();
+        mLunarDayNumPaint.setAntiAlias(true);
+        mLunarDayNumPaint.setTextSize(mLunarMiniDayNumTextSize);
+        mLunarDayNumPaint.setColor(mDayTextColor);
+        mLunarDayNumPaint.setTypeface(Typeface.create(mDayOfWeekTypeface, Typeface.NORMAL));
+        mLunarDayNumPaint.setStyle(Style.FILL);
+        mLunarDayNumPaint.setTextAlign(Align.CENTER);
+        mLunarDayNumPaint.setFakeBoldText(true);
+        /**@}*/
+    }
+
+    @Override
+    protected void onDraw(Canvas canvas) {
+        drawMonthTitle(canvas);
+        drawMonthDayLabels(canvas);
+        drawMonthNums(canvas);
+    }
+
+    private int mDayOfWeekStart = 0;
+
+    /**
+     * Sets all the parameters for displaying this week. The only required
+     * parameter is the week number. Other parameters have a default value and
+     * will only update if a new value is included, except for focus month,
+     * which will always default to no focus month if no value is passed in. See
+     * {@link #VIEW_PARAMS_HEIGHT} for more info on parameters.
+     *
+     * @param params A map of the new parameters, see
+     *            {@link #VIEW_PARAMS_HEIGHT}
+     */
+    public void setMonthParams(HashMap<String, Integer> params) {
+        if (!params.containsKey(VIEW_PARAMS_MONTH) && !params.containsKey(VIEW_PARAMS_YEAR)) {
+            throw new InvalidParameterException("You must specify the month and year for this view");
+        }
+        setTag(params);
+        // We keep the current value for any params not present
+        if (params.containsKey(VIEW_PARAMS_HEIGHT)) {
+            mRowHeight = params.get(VIEW_PARAMS_HEIGHT);
+            if (mRowHeight < MIN_HEIGHT) {
+                mRowHeight = MIN_HEIGHT;
+            }
+        }
+        if (params.containsKey(VIEW_PARAMS_SELECTED_DAY)) {
+            mSelectedDay = params.get(VIEW_PARAMS_SELECTED_DAY);
+        }
+
+        // Allocate space for caching the day numbers and focus values
+        mMonth = params.get(VIEW_PARAMS_MONTH);
+        mYear = params.get(VIEW_PARAMS_YEAR);
+
+        // Figure out what day today is
+        final Time today = new Time(Time.getCurrentTimezone());
+        today.setToNow();
+        mHasToday = false;
+        mToday = -1;
+
+        mCalendar.set(Calendar.MONTH, mMonth);
+        mCalendar.set(Calendar.YEAR, mYear);
+        mCalendar.set(Calendar.DAY_OF_MONTH, 1);
+        mDayOfWeekStart = mCalendar.get(Calendar.DAY_OF_WEEK);
+
+        if (params.containsKey(VIEW_PARAMS_WEEK_START)) {
+            mWeekStart = params.get(VIEW_PARAMS_WEEK_START);
+        } else {
+            mWeekStart = mCalendar.getFirstDayOfWeek();
+        }
+
+        mNumCells = Utils.getDaysInMonth(mMonth, mYear);
+        for (int i = 0; i < mNumCells; i++) {
+            final int day = i + 1;
+            if (sameDay(day, today)) {
+                mHasToday = true;
+                mToday = day;
+            }
+        }
+        mNumRows = calculateNumRows();
+
+        // Invalidate cached accessibility information.
+        mTouchHelper.invalidateRoot();
+    }
+
+    public void reuse() {
+        mNumRows = DEFAULT_NUM_ROWS;
+        requestLayout();
+    }
+
+    private int calculateNumRows() {
+        int offset = findDayOffset();
+        int dividend = (offset + mNumCells) / mNumDays;
+        int remainder = (offset + mNumCells) % mNumDays;
+        return (dividend + (remainder > 0 ? 1 : 0));
+    }
+
+    private boolean sameDay(int day, Time today) {
+        return mYear == today.year &&
+                mMonth == today.month &&
+                day == today.monthDay;
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        setMeasuredDimension(MeasureSpec.getSize(widthMeasureSpec), mRowHeight * mNumRows
+                + mMonthHeaderSize);
+    }
+
+    @Override
+    protected void onSizeChanged(int w, int h, int oldw, int oldh) {
+        Rect realRect = new Rect();
+        getGlobalVisibleRect(realRect);
+        mWidth = realRect.right - realRect.left;
+
+        mPadding = (mWidth - mWidth / (mNumDays * 2) * (mNumDays * 2)) / 2;
+        // Invalidate cached accessibility information.
+        mTouchHelper.invalidateRoot();
+    }
+
+    private String getMonthAndYearString() {
+        int flags = DateUtils.FORMAT_SHOW_DATE | DateUtils.FORMAT_SHOW_YEAR
+                | DateUtils.FORMAT_NO_MONTH_DAY;
+        mStringBuilder.setLength(0);
+        long millis = mCalendar.getTimeInMillis();
+        return DateUtils.formatDateRange(getContext(), mFormatter, millis, millis, flags,
+                Time.getCurrentTimezone()).toString();
+    }
+
+    private void drawMonthTitle(Canvas canvas) {
+        int x = (mWidth + 2 * mPadding) / 2;
+        int y = (mMonthHeaderSize - mMonthDayLabelTextSize) / 2 + (mMonthLabelTextSize / 3);
+        canvas.drawText(getMonthAndYearString(), x, y, mMonthTitlePaint);
+    }
+
+    private void drawMonthDayLabels(Canvas canvas) {
+        int y = mMonthHeaderSize - (mMonthDayLabelTextSize / 2);
+        int dayWidthHalf = (mWidth - mPadding * 2) / (mNumDays * 2);
+
+        for (int i = 0; i < mNumDays; i++) {
+            int calendarDay = (i + mWeekStart) % mNumDays;
+            int x = (2 * i + 1) * dayWidthHalf + mPadding;
+            mDayLabelCalendar.set(Calendar.DAY_OF_WEEK, calendarDay);
+            canvas.drawText(mDayLabelCalendar.getDisplayName(Calendar.DAY_OF_WEEK, Calendar.SHORT,
+                    Locale.getDefault()).toUpperCase(Locale.getDefault()), x, y,
+                    mMonthDayLabelPaint);
+        }
+    }
+
+    /**
+     * Draws the week and month day numbers for this week. Override this method
+     * if you need different placement.
+     *
+     * @param canvas The canvas to draw on
+     */
+    protected void drawMonthNums(Canvas canvas) {
+        int y = (((mRowHeight + mMiniDayNumberTextSize) / 2) - DAY_SEPARATOR_WIDTH)
+                + mMonthHeaderSize;
+        int dayWidthHalf = (mWidth - mPadding * 2) / (mNumDays * 2);
+        int j = findDayOffset();
+        /** M: */
+        boolean showLunar = mLunar.canShowLunarCalendar();
+        if (showLunar) {
+            y = y - mLunarMoveup;
+        }
+        for (int dayNumber = 1; dayNumber <= mNumCells; dayNumber++) {
+            int x = (2 * j + 1) * dayWidthHalf + mPadding;
+            if (mSelectedDay == dayNumber) {
+                /** M: */
+                int cy;
+                int circleSize;
+                if (!showLunar) {
+                    cy = y - (mMiniDayNumberTextSize / 3);
+                    circleSize = mDaySelectedCircleSize;
+                } else {
+                    cy = y + mLunarGap / 2;
+                    circleSize = mLunarDaySelectedCircleSize;
+                }
+                canvas.drawCircle(x, cy, circleSize, mSelectedCirclePaint);
+                /**@}*/
+            }
+
+            if (mHasToday && mToday == dayNumber) {
+                mMonthNumPaint.setColor(mTodayNumberColor);
+            } else {
+                mMonthNumPaint.setColor(mDayTextColor);
+            }
+            canvas.drawText(String.format("%d", dayNumber), x, y, mMonthNumPaint);
+
+            /** M: @{*/
+            if (showLunar) {
+                String lunarDay = mLunar.getLunarDay(mYear, mMonth + 1, dayNumber);
+                if (mHasToday && mToday == dayNumber) {
+                    mLunarDayNumPaint.setColor(mTodayNumberColor);
+                } else {
+                    mLunarDayNumPaint.setColor(mDayTextColor);
+                }
+                canvas.drawText(lunarDay, x, y + mLunarGap + mLunarMiniDayNumTextSize, mLunarDayNumPaint);
+            }
+            /**@}*/
+            j++;
+            if (j == mNumDays) {
+                j = 0;
+                y += mRowHeight;
+            }
+        }
+    }
+
+    private int findDayOffset() {
+        return (mDayOfWeekStart < mWeekStart ? (mDayOfWeekStart + mNumDays) : mDayOfWeekStart)
+                - mWeekStart;
+    }
+
+
+    /**
+     * Calculates the day that the given x position is in, accounting for week
+     * number. Returns the day or -1 if the position wasn't in a day.
+     *
+     * @param x The x position of the touch event
+     * @return The day number, or -1 if the position wasn't in a day
+     */
+    public int getDayFromLocation(float x, float y) {
+        int dayStart = mPadding;
+        if (x < dayStart || x > mWidth - mPadding) {
+            return -1;
+        }
+        // Selection is (x - start) / (pixels/day) == (x -s) * day / pixels
+        int row = (int) (y - mMonthHeaderSize) / mRowHeight;
+        int column = (int) ((x - dayStart) * mNumDays / (mWidth - dayStart - mPadding));
+
+        int day = column - findDayOffset() + 1;
+        day += row * mNumDays;
+        if (day < 1 || day > mNumCells) {
+            return -1;
+        }
+        return day;
+    }
+
+    /**
+     * Called when the user clicks on a day. Handles callbacks to the
+     * {@link OnDayClickListener} if one is set.
+     *
+     * @param day The day that was clicked
+     */
+    private void onDayClick(int day) {
+        if (mOnDayClickListener != null) {
+            mOnDayClickListener.onDayClick(this, new CalendarDay(mYear, mMonth, day));
+        }
+
+        // This is a no-op if accessibility is turned off.
+        mTouchHelper.sendEventForVirtualView(day, AccessibilityEvent.TYPE_VIEW_CLICKED);
+    }
+
+    /**
+     * @return The date that has accessibility focus, or {@code null} if no date
+     *         has focus
+     */
+    public CalendarDay getAccessibilityFocus() {
+        final int day = mTouchHelper.getFocusedVirtualView();
+        if (day >= 0) {
+            return new CalendarDay(mYear, mMonth, day);
+        }
+        return null;
+    }
+
+    /**
+     * Clears accessibility focus within the view. No-op if the view does not
+     * contain accessibility focus.
+     */
+    public void clearAccessibilityFocus() {
+        mTouchHelper.clearFocusedVirtualView();
+    }
+
+    /**
+     * Attempts to restore accessibility focus to the specified date.
+     *
+     * @param day The date which should receive focus
+     * @return {@code false} if the date is not valid for this month view, or
+     *         {@code true} if the date received focus
+     */
+    public boolean restoreAccessibilityFocus(CalendarDay day) {
+        if ((day.year != mYear) || (day.month != mMonth) || (day.day > mNumCells)) {
+            return false;
+        }
+        mTouchHelper.setFocusedVirtualView(day.day);
+        return true;
+    }
+
+    /**
+     * Provides a virtual view hierarchy for interfacing with an accessibility
+     * service.
+     */
+    private class MonthViewTouchHelper extends ExploreByTouchHelper {
+        private static final String DATE_FORMAT = "dd MMMM yyyy";
+
+        private final Rect mTempRect = new Rect();
+        private final Calendar mTempCalendar = Calendar.getInstance();
+
+        public MonthViewTouchHelper(View host) {
+            super(host);
+        }
+
+        public void setFocusedVirtualView(int virtualViewId) {
+            getAccessibilityNodeProvider(LunarSimpleMonthView.this).performAction(
+                    virtualViewId, AccessibilityNodeInfoCompat.ACTION_ACCESSIBILITY_FOCUS, null);
+        }
+
+        public void clearFocusedVirtualView() {
+            final int focusedVirtualView = getFocusedVirtualView();
+            if (focusedVirtualView != ExploreByTouchHelper.INVALID_ID) {
+                getAccessibilityNodeProvider(LunarSimpleMonthView.this).performAction(
+                        focusedVirtualView, AccessibilityNodeInfoCompat.ACTION_CLEAR_ACCESSIBILITY_FOCUS, null);
+            }
+        }
+
+        @Override
+        protected int getVirtualViewAt(float x, float y) {
+            final int day = getDayFromLocation(x, y);
+            if (day >= 0) {
+                return day;
+            }
+            return ExploreByTouchHelper.INVALID_ID;
+        }
+
+        @Override
+        protected void getVisibleVirtualViews(List<Integer> virtualViewIds) {
+            for (int day = 1; day <= mNumCells; day++) {
+                virtualViewIds.add(day);
+            }
+        }
+
+        @Override
+        protected void onPopulateEventForVirtualView(int virtualViewId, AccessibilityEvent event) {
+            event.setContentDescription(getItemDescription(virtualViewId));
+        }
+
+        @Override
+        protected void onPopulateNodeForVirtualView(int virtualViewId, AccessibilityNodeInfoCompat node) {
+            getItemBounds(virtualViewId, mTempRect);
+
+            node.setContentDescription(getItemDescription(virtualViewId));
+            node.setBoundsInParent(mTempRect);
+            node.addAction(AccessibilityNodeInfo.ACTION_CLICK);
+
+            if (virtualViewId == mSelectedDay) {
+                node.setSelected(true);
+            }
+
+        }
+
+        @Override
+        protected boolean onPerformActionForVirtualView(int virtualViewId, int action, Bundle arguments) {
+            switch (action) {
+                case AccessibilityNodeInfo.ACTION_CLICK:
+                    onDayClick(virtualViewId);
+                    return true;
+            }
+
+            return false;
+        }
+
+        /**
+         * Calculates the bounding rectangle of a given time object.
+         *
+         * @param day The day to calculate bounds for
+         * @param rect The rectangle in which to store the bounds
+         */
+        private void getItemBounds(int day, Rect rect) {
+            final int offsetX = mPadding;
+            final int offsetY = mMonthHeaderSize;
+            final int cellHeight = mRowHeight;
+            final int cellWidth = ((mWidth - (2 * mPadding)) / mNumDays);
+            final int index = ((day - 1) + findDayOffset());
+            final int row = (index / mNumDays);
+            final int column = (index % mNumDays);
+            final int x = (offsetX + (column * cellWidth));
+            final int y = (offsetY + (row * cellHeight));
+
+            rect.set(x, y, (x + cellWidth), (y + cellHeight));
+        }
+
+        /**
+         * Generates a description for a given time object. Since this
+         * description will be spoken, the components are ordered by descending
+         * specificity as DAY MONTH YEAR.
+         *
+         * @param day The day to generate a description for
+         * @return A description of the time object
+         */
+        private CharSequence getItemDescription(int day) {
+            mTempCalendar.set(mYear, mMonth, day);
+            final CharSequence date = DateFormat.format(DATE_FORMAT, mTempCalendar.getTimeInMillis());
+
+            if (day == mSelectedDay) {
+                return getContext().getString(R.string.item_is_selected, date);
+            }
+
+            return date;
+        }
+    }
+
+    /**
+     * Handles callbacks when the user clicks on a time object.
+     */
+    public interface OnDayClickListener {
+        public void onDayClick(LunarSimpleMonthView view, CalendarDay day);
+    }
+}
Index: vendor/mediatek/proprietary/packages/apps/Calendar/src/com/mediatek/calendar/plugin/lunar/LunarDatePickerDialog.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/Calendar/src/com/mediatek/calendar/plugin/lunar/LunarDatePickerDialog.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/Calendar/src/com/mediatek/calendar/plugin/lunar/LunarDatePickerDialog.java	(revision 1054)
@@ -0,0 +1,493 @@
+/*
+ * Copyright (C) 2013 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mediatek.calendar.plugin.lunar;
+
+import android.animation.ObjectAnimator;
+import android.app.Activity;
+import android.content.Context;
+import android.content.res.Resources;
+import android.os.Bundle;
+import android.os.SystemClock;
+import android.os.Vibrator;
+import android.text.format.DateUtils;
+import android.util.Log;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.view.ViewGroup;
+import android.view.Window;
+import android.view.WindowManager;
+import android.view.animation.AlphaAnimation;
+import android.view.animation.Animation;
+import android.widget.Button;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import com.android.datetimepicker.R;
+import com.android.datetimepicker.Utils;
+import com.android.datetimepicker.date.AccessibleDateAnimator;
+import com.android.datetimepicker.date.DatePickerDialog;
+import com.android.datetimepicker.date.DatePickerDialog.OnDateSetListener;
+import com.android.datetimepicker.date.YearPickerView;
+import com.mediatek.calendar.plugin.lunar.LunarSimpleMonthAdapter.CalendarDay;
+
+import java.text.SimpleDateFormat;
+import java.util.ArrayList;
+import java.util.Calendar;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.Locale;
+
+/**
+ * Dialog allowing users to select a date.
+ */
+public class LunarDatePickerDialog extends DatePickerDialog implements
+        OnClickListener, DatePickerController {
+
+    private static final String TAG = "DatePickerDialog";
+
+    private static final int UNINITIALIZED = -1;
+    private static final int MONTH_AND_DAY_VIEW = 0;
+    private static final int YEAR_VIEW = 1;
+
+    private static final String KEY_SELECTED_YEAR = "year";
+    private static final String KEY_SELECTED_MONTH = "month";
+    private static final String KEY_SELECTED_DAY = "day";
+    private static final String KEY_LIST_POSITION = "list_position";
+    private static final String KEY_WEEK_START = "week_start";
+    private static final String KEY_YEAR_START = "year_start";
+    private static final String KEY_YEAR_END = "year_end";
+    private static final String KEY_CURRENT_VIEW = "current_view";
+    private static final String KEY_LIST_POSITION_OFFSET = "list_position_offset";
+    /** M: */
+    private static final String KEY_SHOW_LUNAR_HEADER = "show_lunar_header";
+
+    private static final int DEFAULT_START_YEAR = 1900;
+    private static final int DEFAULT_END_YEAR = 2100;
+
+    private static final int ANIMATION_DURATION = 300;
+    private static final int ANIMATION_DELAY = 500;
+
+    private SimpleDateFormat mYearFormat = new SimpleDateFormat("yyyy", Locale.getDefault());
+    private SimpleDateFormat mDayFormat = new SimpleDateFormat("dd", Locale.getDefault());
+
+    private final Calendar mCalendar = Calendar.getInstance();
+    private OnDateSetListener mCallBack;
+    private HashSet<OnDateChangedListener> mListeners = new HashSet<OnDateChangedListener>();
+
+    private AccessibleDateAnimator mAnimator;
+
+    private TextView mDayOfWeekView;
+    private LinearLayout mMonthAndDayView;
+    private TextView mSelectedMonthTextView;
+    private TextView mSelectedDayTextView;
+    private TextView mYearView;
+    private DayPickerView mDayPickerView;
+    private YearPickerView mYearPickerView;
+    private Button mDoneButton;
+
+    private int mCurrentView = UNINITIALIZED;
+
+    private int mWeekStart = mCalendar.getFirstDayOfWeek();
+    private int mMinYear = DEFAULT_START_YEAR;
+    private int mMaxYear = DEFAULT_END_YEAR;
+
+    private Vibrator mVibrator;
+    private long mLastVibrate;
+
+    private boolean mDelayAnimation = true;
+
+    // Accessibility strings.
+    private String mDayPickerDescription;
+    private String mSelectDay;
+    private String mYearPickerDescription;
+    private String mSelectYear;
+
+    /** M: @{*/
+    private Context mPluginContext;         // used to construct LunarUtil
+    private LunarUtil mLunar;
+    private boolean mShowLunarHeader = false;
+    /**@}*/
+
+    /**
+     * The callback used to notify other date picker components of a change in selected date.
+     */
+    interface OnDateChangedListener {
+
+        public void onDateChanged();
+    }
+
+
+    public LunarDatePickerDialog() {
+    }
+
+    public LunarDatePickerDialog(Context pluginContext) {
+        mPluginContext = pluginContext;
+    }
+
+    /**
+     * @param callBack How the parent is notified that the date is set.
+     * @param year The initial year of the dialog.
+     * @param monthOfYear The initial month of the dialog.
+     * @param dayOfMonth The initial day of the dialog.
+     */
+    public static LunarDatePickerDialog newInstance(OnDateSetListener callBack, int year,
+            int monthOfYear, int dayOfMonth, Context pluginContext) {
+        LunarDatePickerDialog ret = new LunarDatePickerDialog(pluginContext);
+        ret.initialize(callBack, year, monthOfYear, dayOfMonth);
+        return ret;
+    }
+
+    public void initialize(OnDateSetListener callBack, int year, int monthOfYear, int dayOfMonth) {
+        mCallBack = callBack;
+        mCalendar.set(Calendar.YEAR, year);
+        mCalendar.set(Calendar.MONTH, monthOfYear);
+        mCalendar.set(Calendar.DAY_OF_MONTH, dayOfMonth);
+    }
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        final Activity activity = getActivity();
+        Log.d(TAG, "onCreate getActivity() = " + activity);
+        activity.getWindow().setSoftInputMode(
+                WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
+        mVibrator = (Vibrator) activity.getSystemService(Context.VIBRATOR_SERVICE);
+        if (savedInstanceState != null) {
+            mCalendar.set(Calendar.YEAR, savedInstanceState.getInt(KEY_SELECTED_YEAR));
+            mCalendar.set(Calendar.MONTH, savedInstanceState.getInt(KEY_SELECTED_MONTH));
+            mCalendar.set(Calendar.DAY_OF_MONTH, savedInstanceState.getInt(KEY_SELECTED_DAY));
+        }
+        /// M: initialize the mLunar after the activity create @{
+        mLunar = LunarUtil.getInstance(mPluginContext);
+        /// @}
+    }
+
+    @Override
+    @SuppressWarnings("PMD")
+    public void onSaveInstanceState(Bundle outState) {
+        super.onSaveInstanceState(outState);
+        outState.putInt(KEY_SELECTED_YEAR, mCalendar.get(Calendar.YEAR));
+        outState.putInt(KEY_SELECTED_MONTH, mCalendar.get(Calendar.MONTH));
+        outState.putInt(KEY_SELECTED_DAY, mCalendar.get(Calendar.DAY_OF_MONTH));
+        outState.putInt(KEY_WEEK_START, mWeekStart);
+        outState.putInt(KEY_YEAR_START, mMinYear);
+        outState.putInt(KEY_YEAR_END, mMaxYear);
+        outState.putInt(KEY_CURRENT_VIEW, mCurrentView);
+        /** M: */
+        outState.putBoolean(KEY_SHOW_LUNAR_HEADER, mShowLunarHeader);
+        int listPosition = -1;
+        if (mCurrentView == MONTH_AND_DAY_VIEW) {
+            listPosition = mDayPickerView.getMostVisiblePosition();
+        } else if (mCurrentView == YEAR_VIEW) {
+            listPosition = mYearPickerView.getFirstVisiblePosition();
+            outState.putInt(KEY_LIST_POSITION_OFFSET, mYearPickerView.getFirstPositionOffset());
+        }
+        outState.putInt(KEY_LIST_POSITION, listPosition);
+    }
+
+    @Override
+    public View onCreateView(LayoutInflater inflater, ViewGroup container,
+            Bundle savedInstanceState) {
+        super.onCreateView(inflater, container, savedInstanceState);
+        Log.d(TAG, "onCreateView: ");
+        getDialog().getWindow().requestFeature(Window.FEATURE_NO_TITLE);
+
+        Log.d(TAG, "R.layout.date_picker_dialog = " + R.layout.date_picker_dialog);
+        View view = inflater.inflate(R.layout.date_picker_dialog, null);
+
+        mDayOfWeekView = (TextView) view.findViewById(R.id.date_picker_header);
+        mMonthAndDayView = (LinearLayout) view.findViewById(R.id.date_picker_month_and_day);
+        mMonthAndDayView.setOnClickListener(this);
+        mSelectedMonthTextView = (TextView) view.findViewById(R.id.date_picker_month);
+        mSelectedDayTextView = (TextView) view.findViewById(R.id.date_picker_day);
+        mYearView = (TextView) view.findViewById(R.id.date_picker_year);
+        mYearView.setOnClickListener(this);
+
+        int listPosition = -1;
+        int listPositionOffset = 0;
+        int currentView = MONTH_AND_DAY_VIEW;
+        if (savedInstanceState != null) {
+            mWeekStart = savedInstanceState.getInt(KEY_WEEK_START);
+            mMinYear = savedInstanceState.getInt(KEY_YEAR_START);
+            mMaxYear = savedInstanceState.getInt(KEY_YEAR_END);
+            currentView = savedInstanceState.getInt(KEY_CURRENT_VIEW);
+            listPosition = savedInstanceState.getInt(KEY_LIST_POSITION);
+            listPositionOffset = savedInstanceState.getInt(KEY_LIST_POSITION_OFFSET);
+            /** M: */
+            mShowLunarHeader = savedInstanceState.getBoolean(KEY_SHOW_LUNAR_HEADER, false)
+                    && mLunar.canShowLunarCalendar();
+        }
+
+        final Activity activity = getActivity();
+        mDayPickerView = new DayPickerView(activity, this, mPluginContext);
+        mYearPickerView = new YearPickerView(activity, this);
+
+        Resources res = getResources();
+        mDayPickerDescription = res.getString(R.string.day_picker_description);
+        mSelectDay = res.getString(R.string.select_day);
+        mYearPickerDescription = res.getString(R.string.year_picker_description);
+        mSelectYear = res.getString(R.string.select_year);
+
+        mAnimator = (AccessibleDateAnimator) view.findViewById(R.id.animator);
+        mAnimator.addView(mDayPickerView);
+        mAnimator.addView(mYearPickerView);
+        mAnimator.setDateMillis(mCalendar.getTimeInMillis());
+        // TODO: Replace with animation decided upon by the design team.
+        Animation animation = new AlphaAnimation(0.0f, 1.0f);
+        animation.setDuration(ANIMATION_DURATION);
+        mAnimator.setInAnimation(animation);
+        // TODO: Replace with animation decided upon by the design team.
+        Animation animation2 = new AlphaAnimation(1.0f, 0.0f);
+        animation2.setDuration(ANIMATION_DURATION);
+        mAnimator.setOutAnimation(animation2);
+
+        mDoneButton = (Button) view.findViewById(R.id.done);
+        mDoneButton.setOnClickListener(new OnClickListener() {
+
+            @Override
+            public void onClick(View v) {
+                tryVibrate();
+                if (mCallBack != null) {
+                    mCallBack.onDateSet(LunarDatePickerDialog.this, mCalendar.get(Calendar.YEAR),
+                            mCalendar.get(Calendar.MONTH), mCalendar.get(Calendar.DAY_OF_MONTH));
+                }
+                dismiss();
+            }
+        });
+
+        updateDisplay(false);
+        setCurrentView(currentView);
+
+        if (listPosition != -1) {
+            if (currentView == MONTH_AND_DAY_VIEW) {
+                mDayPickerView.postSetSelection(listPosition);
+            } else if (currentView == YEAR_VIEW) {
+                mYearPickerView.postSetSelectionFromTop(listPosition, listPositionOffset);
+            }
+        }
+        return view;
+    }
+
+    private void setCurrentView(final int viewIndex) {
+        long millis = mCalendar.getTimeInMillis();
+
+        switch (viewIndex) {
+            case MONTH_AND_DAY_VIEW:
+                ObjectAnimator pulseAnimator = Utils.getPulseAnimator(mMonthAndDayView, 0.9f,
+                        1.05f);
+                if (mDelayAnimation) {
+                    pulseAnimator.setStartDelay(ANIMATION_DELAY);
+                    mDelayAnimation = false;
+                }
+                mDayPickerView.onDateChanged();
+                if (mCurrentView != viewIndex) {
+                    mMonthAndDayView.setSelected(true);
+                    mYearView.setSelected(false);
+                    mAnimator.setDisplayedChild(MONTH_AND_DAY_VIEW);
+                    mCurrentView = viewIndex;
+                }
+                pulseAnimator.start();
+
+                int flags = DateUtils.FORMAT_SHOW_DATE;
+                String dayString = DateUtils.formatDateTime(getActivity(), millis, flags);
+                mAnimator.setContentDescription(mDayPickerDescription + ": " + dayString);
+                Utils.tryAccessibilityAnnounce(mAnimator, mSelectDay);
+                break;
+            case YEAR_VIEW:
+                pulseAnimator = Utils.getPulseAnimator(mYearView, 0.85f, 1.1f);
+                if (mDelayAnimation) {
+                    pulseAnimator.setStartDelay(ANIMATION_DELAY);
+                    mDelayAnimation = false;
+                }
+                mYearPickerView.onDateChanged();
+                if (mCurrentView != viewIndex) {
+                    mMonthAndDayView.setSelected(false);
+                    mYearView.setSelected(true);
+                    mAnimator.setDisplayedChild(YEAR_VIEW);
+                    mCurrentView = viewIndex;
+                }
+                pulseAnimator.start();
+
+                CharSequence yearString = mYearFormat.format(millis);
+                mAnimator.setContentDescription(mYearPickerDescription + ": " + yearString);
+                Utils.tryAccessibilityAnnounce(mAnimator, mSelectYear);
+                break;
+        }
+    }
+
+    private void updateDisplay(boolean announce) {
+        if (mDayOfWeekView != null) {
+            mDayOfWeekView.setText(mCalendar.getDisplayName(Calendar.DAY_OF_WEEK, Calendar.LONG,
+                    Locale.getDefault()).toUpperCase(Locale.getDefault()));
+        }
+        /** M: @{ */
+        if (mShowLunarHeader) {
+            ArrayList<String> lunarDay = mLunar.getLunarYMD(mCalendar.get(Calendar.YEAR),
+                    mCalendar.get(Calendar.MONTH) + 1, mCalendar.get(Calendar.DAY_OF_MONTH));
+
+            mSelectedMonthTextView.setText(lunarDay.get(LunarUtil.MONTH));
+            mSelectedDayTextView.setText(lunarDay.get(LunarUtil.MONTH_DAY));
+            // the year is still the gregorian calendar year.
+            mYearView.setText(mYearFormat.format(mCalendar.getTime()));
+        } else {
+            /** @}*/
+            mSelectedMonthTextView.setText(mCalendar.getDisplayName(Calendar.MONTH, Calendar.SHORT,
+                    Locale.getDefault()).toUpperCase(Locale.getDefault()));
+            mSelectedDayTextView.setText(mDayFormat.format(mCalendar.getTime()));
+            mYearView.setText(mYearFormat.format(mCalendar.getTime()));
+        }
+
+        // Accessibility.
+        long millis = mCalendar.getTimeInMillis();
+        mAnimator.setDateMillis(millis);
+        int flags = DateUtils.FORMAT_SHOW_DATE | DateUtils.FORMAT_NO_YEAR;
+        String monthAndDayText = DateUtils.formatDateTime(getActivity(), millis, flags);
+        mMonthAndDayView.setContentDescription(monthAndDayText);
+
+        if (announce) {
+            flags = DateUtils.FORMAT_SHOW_DATE | DateUtils.FORMAT_SHOW_YEAR;
+            String fullDateText = DateUtils.formatDateTime(getActivity(), millis, flags);
+            Utils.tryAccessibilityAnnounce(mAnimator, fullDateText);
+        }
+    }
+
+    public void setFirstDayOfWeek(int startOfWeek) {
+        if (startOfWeek < Calendar.SUNDAY || startOfWeek > Calendar.SATURDAY) {
+            throw new IllegalArgumentException("Value must be between Calendar.SUNDAY and " +
+                    "Calendar.SATURDAY");
+        }
+        mWeekStart = startOfWeek;
+        if (mDayPickerView != null) {
+            mDayPickerView.onChange();
+        }
+    }
+
+    public void setYearRange(int startYear, int endYear) {
+        if (endYear <= startYear) {
+            throw new IllegalArgumentException("Year end must be larger than year start");
+        }
+        mMinYear = startYear;
+        mMaxYear = endYear;
+        if (mDayPickerView != null) {
+            mDayPickerView.onChange();
+        }
+    }
+
+    public void setOnDateSetListener(OnDateSetListener listener) {
+        mCallBack = listener;
+    }
+
+    // If the newly selected month / year does not contain the currently selected day number,
+    // change the selected day number to the last day of the selected month or year.
+    //      e.g. Switching from Mar to Apr when Mar 31 is selected -> Apr 30
+    //      e.g. Switching from 2012 to 2013 when Feb 29, 2012 is selected -> Feb 28, 2013
+    private void adjustDayInMonthIfNeeded(int month, int year) {
+        int day = mCalendar.get(Calendar.DAY_OF_MONTH);
+        int daysInMonth = Utils.getDaysInMonth(month, year);
+        if (day > daysInMonth) {
+            mCalendar.set(Calendar.DAY_OF_MONTH, daysInMonth);
+        }
+    }
+
+    @Override
+    public void onClick(View v) {
+        tryVibrate();
+        if (v.getId() == R.id.date_picker_year) {
+            setCurrentView(YEAR_VIEW);
+        } else if (v.getId() == R.id.date_picker_month_and_day) {
+            setCurrentView(MONTH_AND_DAY_VIEW);
+        }
+    }
+
+    @Override
+    public void onYearSelected(int year) {
+        adjustDayInMonthIfNeeded(mCalendar.get(Calendar.MONTH), year);
+        mCalendar.set(Calendar.YEAR, year);
+        updatePickers();
+        setCurrentView(MONTH_AND_DAY_VIEW);
+        updateDisplay(true);
+    }
+
+    @Override
+    public void onDayOfMonthSelected(int year, int month, int day) {
+        mCalendar.set(Calendar.YEAR, year);
+        mCalendar.set(Calendar.MONTH, month);
+        mCalendar.set(Calendar.DAY_OF_MONTH, day);
+        updatePickers();
+        updateDisplay(true);
+    }
+
+    private void updatePickers() {
+        Iterator<OnDateChangedListener> iterator = mListeners.iterator();
+        while (iterator.hasNext()) {
+            iterator.next().onDateChanged();
+        }
+    }
+
+    @Override
+    public CalendarDay getSelectedDay() {
+        return new CalendarDay(mCalendar);
+    }
+
+    @Override
+    public int getMinYear() {
+        return mMinYear;
+    }
+
+    @Override
+    public int getMaxYear() {
+        return mMaxYear;
+    }
+
+    @Override
+    public int getFirstDayOfWeek() {
+        return mWeekStart;
+    }
+
+    @Override
+    public void registerOnDateChangedListener(OnDateChangedListener listener) {
+        mListeners.add(listener);
+    }
+
+    @Override
+    public void unregisterOnDateChangedListener(OnDateChangedListener listener) {
+        mListeners.remove(listener);
+    }
+
+    /**
+     * Try to vibrate. To prevent this becoming a single continuous vibration, nothing will
+     * happen if we have vibrated very recently.
+     */
+    @Override
+    public void tryVibrate() {
+        if (mVibrator != null) {
+            long now = SystemClock.uptimeMillis();
+            // We want to try to vibrate each individual tick discretely.
+            if (now - mLastVibrate >= 125) {
+                mVibrator.vibrate(5);
+                mLastVibrate = now;
+            }
+        }
+    }
+
+    /** M: @{*/
+    public void setShowLunarHeader(boolean showLunarHeader) {
+        mShowLunarHeader = showLunarHeader;
+    }
+    /** @} */
+}
\ No newline at end of file
Index: vendor/mediatek/proprietary/packages/apps/Calendar/src/com/mediatek/calendar/plugin/lunar/DatePickerController.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/Calendar/src/com/mediatek/calendar/plugin/lunar/DatePickerController.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/Calendar/src/com/mediatek/calendar/plugin/lunar/DatePickerController.java	(revision 1054)
@@ -0,0 +1,44 @@
+/*
+ * Copyright (C) 2013 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mediatek.calendar.plugin.lunar;
+
+import com.mediatek.calendar.plugin.lunar.LunarDatePickerDialog.OnDateChangedListener;
+import com.mediatek.calendar.plugin.lunar.LunarSimpleMonthAdapter.CalendarDay;
+
+/**
+ * Controller class to communicate among the various components of the date picker dialog.
+ */
+public interface DatePickerController {
+
+    void onYearSelected(int year);
+
+    void onDayOfMonthSelected(int year, int month, int day);
+
+    void registerOnDateChangedListener(OnDateChangedListener listener);
+
+    void unregisterOnDateChangedListener(OnDateChangedListener listener);
+
+    CalendarDay getSelectedDay();
+
+    int getFirstDayOfWeek();
+
+    int getMinYear();
+
+    int getMaxYear();
+
+    void tryVibrate();
+}
Index: vendor/mediatek/proprietary/packages/apps/Calendar/src/com/mediatek/calendar/plugin/lunar/LunarUtil.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/Calendar/src/com/mediatek/calendar/plugin/lunar/LunarUtil.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/Calendar/src/com/mediatek/calendar/plugin/lunar/LunarUtil.java	(revision 1054)
@@ -0,0 +1,646 @@
+package com.mediatek.calendar.plugin.lunar;
+
+import android.content.Context;
+import android.content.res.Resources;
+import android.text.TextUtils;
+import android.text.format.Time;
+import android.util.Log;
+
+import java.util.ArrayList;
+import java.util.Calendar;
+import java.util.Locale;
+
+import com.android.calendar.R;
+
+/**
+ *#Lunar#
+ * A Util class  for Lunar
+ *
+ */
+public class LunarUtil {
+    private static final String TAG = "LunarUtil";
+
+    public static final int LEAP_MONTH = 0;
+    public static final int NORMAL_MONTH = 1;
+    public static final int DECREATE_A_LUANR_YEAR = -1;
+    public static final int INCREASE_A_LUANR_YEAR = 1;
+    public static final String DELIM = ";";
+
+    ///M: these strings are inited in constructor @{
+    private String[] mMonthNumberArray;
+    private String[] mTensPrefixArray;
+    private String mLunarTextLeap;
+    private String mLunarTextTensDay;
+    private String mLunarTextTwentithDay;
+    private String mLunarTextThirtiethDay;
+    private String mLunarTextYear;
+    private String mLunarTextMonth;
+    private String mLunarTextDay;
+
+    private String[] mSolarTermNamesArray;
+    private String mLunarFestCHUNJIE;
+    private String mLunarFestDUANWU;
+    private String mLunarFestZHONGQIU;
+    private String mLunarFestYUANDAN;
+    private String mLunarFestLAODONG;
+    private String mLunarFestGUOQING;
+    private String mLunarFestYUANXIAO;
+    private String mLunarFestQIXI;
+    private String mLunarFestCHONGYANG;
+    private String mLunarFestQINGNIAN;
+    private String mLunarFestQINGREN;
+    private String mLunarFestFUNV;
+    private String mLunarFestZHISHU;
+    private String mLunarFestYUREN;
+    private String mLunarFestERTONG;
+    private String mLunarFestJIANDANG;
+    private String mLunarFestJIANJUN;
+    private String mLunarFestJIAOSHI;
+    private String mLunarFestSHENGDAN;
+    ///@}
+
+    /**
+     * All days have solar term form 1970.1 to 1936.12
+     * Line represents on year.
+     */
+    private int[] mSolarTermDays;
+
+    private static final int LUNAR2GRE_START_CHECK_DAY = 400;
+
+    /// M: an index refer to word "闰".
+    private static final int LUNAR_WORD_RUN = 1;
+
+    public static final int YEAR = 0;
+    public static final int MONTH = 1;
+    public static final int MONTH_DAY = 2;
+
+
+    /**
+     * get a lunar day's chnese String.
+     * @param lunarDay the number of which day
+     * @return the chnese string that the luanr day corresponded. like:初二,初二三.
+     */
+    public String getLunarDayString(int lunarDay) {
+        int n = lunarDay % 10 == 0 ? 9 : lunarDay % 10 - 1;
+        if (lunarDay < 0 || lunarDay > 30) {
+            return "";
+        }
+
+        String ret;
+        switch (lunarDay) {
+        case 10:
+            ret = mLunarTextTensDay;
+            break;
+        case 20:
+            ret = mLunarTextTwentithDay;
+            break;
+        case 30:
+            ret = mLunarTextThirtiethDay;
+            break;
+        default:
+            ret = mTensPrefixArray[lunarDay / 10] + mMonthNumberArray[n];
+            break;
+        }
+
+        return ret;
+    }
+
+    /**
+     *get the lunar date string by calendar
+     * @param cal   Gregorian calendar objectw
+     * @return   the lunar date string like:xx年[闰]xx月初xx
+     */
+    public String getLunarDateString(Calendar cal) {
+        int gregorianYear = cal.get(Calendar.YEAR);
+        int gregorianMonth = cal.get(Calendar.MONTH) + 1;
+        int gregorianDay = cal.get(Calendar.DAY_OF_MONTH);
+
+        int lunarDate[] = mLunarAlgorithm.calculateLunarByGregorian(gregorianYear, gregorianMonth,
+                gregorianDay);
+
+        return getLunarDateString(lunarDate[0], lunarDate[1], lunarDate[2], lunarDate[3]);
+    }
+
+    /**
+     * get the lunar date string,like xx年[闰]xx月初xx
+     *
+     * @param gregorianYear
+     * @param gregorianMonth
+     * @param gregorianDay
+     * @return the lunar date string like:xx年[闰]xx月初xx
+     */
+    public String getLunarDateString(int gregorianYear, int gregorianMonth, int gregorianDay) {
+        int lunarDate[] = mLunarAlgorithm.calculateLunarByGregorian(gregorianYear, gregorianMonth,
+                gregorianDay);
+        return getLunarDateString(lunarDate[0], lunarDate[1], lunarDate[2], lunarDate[3]);
+    }
+
+    /**
+     * The really function produce lunar date string.
+     * @param lunarYear
+     * @param lunarMonth
+     * @param lunarDay
+     * @param leapMonthCode  LEAP_MONTH or NORMAL_MONTH
+     * @return the lunar date string like:xx年[闰]xx月初xx
+     */
+    private String getLunarDateString(int lunarYear, int lunarMonth, int lunarDay, int leapMonthCode) {
+        /// M: If the leapMonthCode is LEAP_MONTH show special word by getSpecialWord function, because
+        //  should show "閏" in TC, "闰" in SC.
+        String luanrDateString = lunarYear + mLunarTextYear
+                + (leapMonthCode == LEAP_MONTH ? getSpecialWord(LUNAR_WORD_RUN) : "")
+                + mMonthNumberArray[lunarMonth - 1] + mLunarTextMonth + getLunarDayString(lunarDay);
+        return luanrDateString;
+    }
+
+    /**
+     * get Solar term.
+     * @param year,the Gregorian year
+     * @param month,the Gregorian month
+     * @return The two days which have solar term in xx year  xx month
+     * @return null if the day is not the solar term, otherwise return the solar term name.
+     */
+    public String getSolarTerm(int gregorianYear, int gregorianMonth, int gregorianDay) {
+
+        int days[] = getAMonthSolarTermDays(gregorianYear, gregorianMonth);
+        if ((gregorianDay != days[0]) && (gregorianDay != days[1])) {
+            return null;
+        }
+
+        String names[] = getAMonthSolarTermNames(gregorianMonth);
+        if (gregorianDay == days[0]) {
+            return names[0];
+        } else if (gregorianDay == days[1]) {
+            return names[1];
+        }
+        return null;
+    }
+    ///@}
+
+    /*
+     * @param year,the Gregorian year
+     * @param month,the Gregorian month
+     * @return The two days which have solar term in xx year  xx month
+     */
+    private int[] getAMonthSolarTermDays(int gregorianYear, int gregorianMonth) {
+        int firstSolarTermIndex = (gregorianMonth - 1) * 2;
+        int days[] = { 0, 0 };
+
+        if (gregorianYear > 1969 && gregorianYear < 2037) {
+            int firstSolarTermDay = mSolarTermDays[(gregorianYear - 1970) * 24 + firstSolarTermIndex];
+            int secondSolarTermDay = mSolarTermDays[(gregorianYear - 1970) * 24 + firstSolarTermIndex + 1];
+            days[0] = firstSolarTermDay;
+            days[1] = secondSolarTermDay;
+        }
+        return days;
+    }
+
+    /*
+     * @param month,the Gregorian month base 1.
+     * @return The two solar term names in xx month,failed will return {"",""}
+     */
+    private String[] getAMonthSolarTermNames(int gregorianMonth) {
+        if (gregorianMonth < 1 || gregorianMonth > 12) {
+            Log.e(TAG, "getAMonthSolarTermNames(),param gregorianMonth:" + gregorianMonth + " is error");
+            String solarTerms[] = {"", ""};
+            return solarTerms;
+        }
+        int firstSolarTermIndex = gregorianMonth * 2 - 1;
+        return new String[] {
+                getSolarTermNameByIndex(firstSolarTermIndex),
+                getSolarTermNameByIndex(firstSolarTermIndex + 1) };
+    }
+
+    /**
+     * Change given year.month.day to Chinese string. Festival, SolarTerm, or
+     * Chinese number.
+     * in this method, the Lunar state is force updated to the
+     * transfered lunar date.
+     * @param gregorianYear
+     * @param gregorianMonth
+     * @param gregorianDay
+     * @return lunar festival chinese string,
+     */
+    public String getLunarFestivalChineseString(int gregorianYear, int gregorianMonth, int gregorianDay) {
+        StringBuilder chineseStringBuilder = new StringBuilder();
+        String chineseString = null;
+
+        chineseString = getGregFestival(gregorianMonth, gregorianDay);
+        if (!TextUtils.isEmpty(chineseString)) {
+            chineseStringBuilder.append(chineseString).append(DELIM);
+        }
+        int lunarDate[] = mLunarAlgorithm.calculateLunarByGregorian(gregorianYear, gregorianMonth,
+                gregorianDay);
+
+        chineseString = getLunarFestival(lunarDate[1], lunarDate[2], lunarDate[3]);
+        if (!TextUtils.isEmpty(chineseString)) {
+            chineseStringBuilder.append(chineseString).append(DELIM);
+        }
+        chineseString = getSolarTerm(gregorianYear, gregorianMonth, gregorianDay);
+        if (!TextUtils.isEmpty(chineseString)) {
+            chineseStringBuilder.append(chineseString).append(DELIM);
+        }
+        if (chineseStringBuilder.length() == 0) {
+            boolean isLeapMonth = lunarDate[3] == LEAP_MONTH ? true : false;
+            return getLunarNumber(lunarDate[1], lunarDate[2], isLeapMonth);
+        } else {
+            return chineseStringBuilder.toString();
+        }
+    }
+
+    /**
+     * get the current Lunar day number
+     * @param lunarDay
+     * @return the string as the lunar number day.
+     */
+    private String getLunarNumber(int lunarMonth, int lunarDay, boolean isLeapMonth) {
+        // The first day of each month will display like X月 or 闰X
+        if (lunarDay == 1) {
+            if (isLeapMonth) {
+                /// M: If the leapMonthCode is LEAP_MONTH show special word by
+                // getSpecialWord function, because should show "閏" in TC, "闰" in SC.
+                return getSpecialWord(LUNAR_WORD_RUN) + mMonthNumberArray[lunarMonth - 1];
+            }
+            return mMonthNumberArray[lunarMonth - 1] + mLunarTextMonth;
+        }
+        return getLunarDayString(lunarDay);
+    }
+
+    /**
+     * This Extension is for the festivals display.
+     * typically, the TC lunar will have different text displayed from SC Lunar.
+     */
+    private TcLunar mTcLunar;
+    private LunarAlgorithm mLunarAlgorithm;
+
+    /**
+     * Constructor
+     * @param context the context is for looking up via PluginManager
+     */
+    private LunarUtil(Context context) {
+        Log.d(TAG, "LunarUtil context = " + context);
+        mTcLunar = new TcLunar(context);
+        mLunarAlgorithm = new LunarAlgorithm(context);
+        Resources res = context.getResources();
+        initArrays(res);
+        initStrings(res);
+    }
+
+    private void initArrays(Resources res) {
+        mMonthNumberArray = res.getStringArray(R.array.month_number_array);
+        mTensPrefixArray = res.getStringArray(R.array.tens_prefix_array);
+        mSolarTermDays = res.getIntArray(R.array.solar_term_days);
+    }
+
+    private void initStrings(Resources res) {
+        mLunarTextLeap = res.getString(R.string.lunar_leap);
+        mLunarTextTensDay = res.getString(R.string.lunar_tenth_day);
+        mLunarTextTwentithDay = res.getString(R.string.lunar_twentieth_day);
+        mLunarTextThirtiethDay = res.getString(R.string.lunar_thirtieth_day);
+        mLunarTextYear = res.getString(R.string.lunar_year);
+        mLunarTextMonth = res.getString(R.string.lunar_month);
+        mLunarTextDay = res.getString(R.string.lunar_day);
+
+        mLunarFestCHUNJIE = res.getString(R.string.lunar_fest_chunjie);
+        mLunarFestDUANWU = res.getString(R.string.lunar_fest_duanwu);
+        mLunarFestZHONGQIU = res.getString(R.string.lunar_fest_zhongqiu);
+        mLunarFestYUANDAN = res.getString(R.string.lunar_fest_yuandan);
+        mLunarFestLAODONG = res.getString(R.string.lunar_fest_laodong);
+        mLunarFestGUOQING = res.getString(R.string.lunar_fest_guoqing);
+        mLunarFestYUANXIAO = res.getString(R.string.lunar_fest_yuanxiao);
+        mLunarFestQIXI = res.getString(R.string.lunar_fest_qixi);
+        mLunarFestCHONGYANG = res.getString(R.string.lunar_fest_chongyang);
+        mLunarFestQINGNIAN = res.getString(R.string.lunar_fest_qingnian);
+        mLunarFestQINGREN = res.getString(R.string.lunar_fest_qingren);
+        mLunarFestFUNV = res.getString(R.string.lunar_fest_funv);
+        mLunarFestZHISHU = res.getString(R.string.lunar_fest_zhishu);
+        mLunarFestYUREN = res.getString(R.string.lunar_fest_yuren);
+        mLunarFestERTONG = res.getString(R.string.lunar_fest_ertong);
+        mLunarFestJIANDANG = res.getString(R.string.lunar_fest_jiandang);
+        mLunarFestJIANJUN = res.getString(R.string.lunar_fest_jianjun);
+        mLunarFestJIAOSHI = res.getString(R.string.lunar_fest_jiaoshi);
+        mLunarFestSHENGDAN = res.getString(R.string.lunar_fest_shengdan);
+        mSolarTermNamesArray = res.getStringArray(R.array.sc_solar_terms);
+    }
+
+    /**
+     * Whether Lunar calendar can be shown in current system env.
+     * @return true if yes.
+     */
+    public boolean canShowLunarCalendar() {
+        return canShowSCLunar() ? true : mTcLunar.canShowTCLunar() ? true : false;
+    }
+
+    /**
+     * M: judge whether a day is a lunar festival
+     * @param lunarMonth
+     * @param lunarDay
+     * @param lunarMonthType lunar month type, is leap?
+     * @return festival text
+     */
+    private String getLunarFestival(int lunarMonth, int lunarDay, int lunarMonthType) {
+        if (LEAP_MONTH == lunarMonthType) {
+            return null;
+        }
+        if (canShowSCLunar()) {
+            if ((lunarMonth == 1) && (lunarDay == 1)) {
+                return mLunarFestCHUNJIE;
+            } else if ((lunarMonth == 5) && (lunarDay == 5)) {
+                return mLunarFestDUANWU;
+            } else if ((lunarMonth == 8) && (lunarDay == 15)) {
+                return mLunarFestZHONGQIU;
+            } else if ((lunarMonth == 1) && (lunarDay == 15)) {
+                return mLunarFestYUANXIAO;
+            } else if ((lunarMonth == 7) && (lunarDay == 7)) {
+                return mLunarFestQIXI;
+            } else if ((lunarMonth == 9) && (lunarDay == 9)) {
+                return mLunarFestCHONGYANG;
+            }
+        }
+
+        return mTcLunar.getLunarFestival(lunarMonth, lunarDay);
+    }
+
+    /**
+     * M: get the solar term text
+     * @param index
+     * @return null if not solar term
+     */
+    private String getSolarTermNameByIndex(int index) {
+        if (canShowSCLunar()) {
+            if (index < 1 || index > mSolarTermNamesArray.length) {
+                Log.e(TAG, "SolarTerm should between [1, 24]");
+                return null;
+            }
+            return mSolarTermNamesArray[index - 1];
+        }
+
+        return mTcLunar.getSolarTermNameByIndex(index);
+    }
+
+    /**
+     * M: if the date is a greg festival, return the text, or null if not
+     * @param gregorianMonth
+     * @param gregorianDay
+     * @return text or null
+     */
+    private String getGregFestival(int gregorianMonth, int gregorianDay) {
+        if (canShowSCLunar()) {
+            if ((gregorianMonth == 1) && (gregorianDay == 1)) {
+                return mLunarFestYUANDAN;
+            }
+            if (gregorianMonth == 5) {
+                if (gregorianDay == 1) {
+                    return mLunarFestLAODONG;
+                } else if (gregorianDay == 4) {
+                    return mLunarFestQINGNIAN;
+                }
+            }
+            if ((gregorianMonth == 10) && (gregorianDay == 1)) {
+                return mLunarFestGUOQING;
+            }
+            if ((gregorianMonth == 2) && (gregorianDay == 14)) {
+                return mLunarFestQINGREN;
+            }
+            if (gregorianMonth == 3) {
+                if (gregorianDay == 8) {
+                    return mLunarFestFUNV;
+                } else if (gregorianDay == 12) {
+                    return mLunarFestZHISHU;
+                }
+            }
+            if ((gregorianMonth == 4) && (gregorianDay == 1)) {
+                return mLunarFestYUREN;
+            }
+            if ((gregorianMonth == 6) && (gregorianDay == 1)) {
+                return mLunarFestERTONG;
+            }
+            if ((gregorianMonth == 7) && (gregorianDay == 1)) {
+                return mLunarFestJIANDANG;
+            }
+            if ((gregorianMonth == 8) && (gregorianDay == 1)) {
+                return mLunarFestJIANJUN;
+            }
+            if ((gregorianMonth == 9) && (gregorianDay) == 10) {
+                return mLunarFestJIAOSHI;
+            }
+            if ((gregorianMonth == 12) && (gregorianDay == 25)) {
+                return mLunarFestSHENGDAN;
+            }
+        }
+
+        return mTcLunar.getGregFestival(gregorianMonth, gregorianDay);
+    }
+
+    /**
+     * M: if the Locale is SC chinese, lunar can show
+     * @return true if can
+     */
+    private boolean canShowSCLunar() {
+        return Locale.getDefault().getCountry().equals("CN");
+        //return Locale.SIMPLIFIED_CHINESE.equals(Locale.getDefault());
+    }
+
+    private static LunarUtil sInstance;
+    public static LunarUtil getInstance(Context context) {
+        if (null == sInstance) {
+            Log.d(TAG, "getInstance null == sInstance new LunarUtil");
+            sInstance = new LunarUtil(context);
+        }
+        return sInstance;
+    }
+
+    /**
+     * M: Get the special word, If local language is SC, return the needed word in SC,
+     * else return the TC word.
+     * @param index refer to the special word.
+     * @return the word needed,like: "闰" need by LUNAR_WORD_RUN in SC, "閏" in TC.
+     */
+    public String getSpecialWord(int index) {
+        if (canShowSCLunar()) {
+            if (index == LUNAR_WORD_RUN) {
+                return mLunarTextLeap;
+            }
+        }
+        return mTcLunar.getSpecialWord(index);
+    }
+
+    /**
+     * get lunar day string of gregorian date.
+     * @param gregorianYear
+     * @param gregorianMonth (1-12)
+     * @param gregorianDay (1-31)
+     * @return lunar day string,
+     */
+    public String getLunarDay(int gregorianYear, int gregorianMonth, int gregorianDay) {
+
+        int lunarDate[] = mLunarAlgorithm.calculateLunarByGregorian(gregorianYear, gregorianMonth,
+                gregorianDay);
+        boolean isLeapMonth = lunarDate[3] == LEAP_MONTH ? true : false;
+        return getLunarNumber(lunarDate[1], lunarDate[2], isLeapMonth);
+    }
+
+    /**
+     * get lunar year, month and day string.
+     *
+     * @return ArrayList<String> is 3 elements array, position 0(YEAR) is year
+     *         string, position 1(MONTH) is month string, position 2(MONTH_DAY)
+     *         is day String.
+     */
+    public ArrayList<String> getLunarYMD(int gregorianYear, int gregorianMonth, int gregorianDay) {
+
+        int lunarDate[] = mLunarAlgorithm.calculateLunarByGregorian(gregorianYear, gregorianMonth,
+                gregorianDay);
+        int lunarMonth = lunarDate[1];
+        int lunarDay = lunarDate[2];
+        boolean isLeapMonth = lunarDate[3] == LEAP_MONTH ? true : false;
+        ArrayList<String> lunarString = new ArrayList<String>(2);
+        lunarString.add(YEAR, String.valueOf(lunarDate[0]));
+        // The first day of each month will display like X月 or 闰X
+        if (isLeapMonth) {
+            // If the leapMonthCode is LEAP_MONTH show special word by
+            // getSpecialWord function, because should show "閏" in TC, "闰" in
+            // SC.
+            lunarString.add(MONTH, getSpecialWord(LUNAR_WORD_RUN) + mMonthNumberArray[lunarMonth - 1]);
+        } else {
+            lunarString.add(MONTH, mMonthNumberArray[lunarMonth - 1] + mLunarTextMonth);
+        }
+
+        lunarString.add(MONTH_DAY, getLunarDayString(lunarDay));
+        return lunarString;
+    }
+
+    /**
+     * get lunar month and monthDay string.
+     * @param gregorianYear
+     * @param gregorianMonth (1-12)
+     * @param gregorianDay (1-31)
+     * @return String with the month and monthDay info.
+     */
+    public String getLunarMDString(int gregorianYear, int gregorianMonth, int gregorianDay) {
+        ArrayList<String> lunarArray = getLunarYMD(gregorianYear, gregorianMonth, gregorianDay);
+        String lunarString = lunarArray.get(MONTH) + lunarArray.get(MONTH_DAY);
+        return lunarString ;
+    }
+
+    public String formatLunarDateRange(Context context, Time startDate, Time endDate, boolean showDateRange) {
+        ArrayList<String> lunarStartDate = getLunarYMD(startDate.year, startDate.month + 1, startDate.monthDay);
+        ArrayList<String> lunarEndDate = getLunarYMD(endDate.year, endDate.month + 1, endDate.monthDay);
+
+        Time current = new Time(startDate.timezone);
+        current.setToNow();
+        int currentYear = current.year;
+        int startYear = Integer.valueOf(lunarStartDate.get(YEAR));
+        int endYear = Integer.valueOf(lunarEndDate.get(YEAR));
+        boolean showYear = false;
+        if (startDate.year != startYear || endDate.year != endYear
+                || startDate.year != endDate.year
+                || startYear != endYear
+                || startYear != currentYear || endYear != currentYear) {
+            showYear = true;
+        }
+
+        // if the start time and end time is in one day, then show date only.
+        if (!showDateRange) {
+            if (canShowSCLunar()) {
+                return context.getString(R.string.lunar_detail_info_fmt1, (showYear ? startYear + mLunarTextYear : "")
+                        + lunarStartDate.get(MONTH) + lunarStartDate.get(MONTH_DAY));
+            } else {
+                return mTcLunar.formatLunarDateRange(showYear, startYear, mLunarTextYear, lunarStartDate);
+            }
+
+        }
+
+        String lunarStartDateStr = "";
+        String lunarEndDateStr = "";
+        if (showYear) {
+            lunarStartDateStr = startYear + mLunarTextYear;
+            lunarEndDateStr = endYear + mLunarTextYear;
+        }
+
+        lunarStartDateStr += lunarStartDate.get(MONTH) + lunarStartDate.get(MONTH_DAY);
+        lunarEndDateStr += lunarEndDate.get(MONTH) + lunarEndDate.get(MONTH_DAY);
+
+        if (canShowSCLunar()) {
+            return context.getString(R.string.lunar_detail_info_fmt2, lunarStartDateStr, lunarEndDateStr);
+        } else {
+            return mTcLunar.formatLunarDateRange(lunarStartDateStr, lunarEndDateStr);
+        }
+
+    }
+
+    /**
+     * build lunar date according a specific date
+     * @param date if it is null, timezone and milliTime must be assigned
+     * @return lunar date string
+     */
+    public String buildLunarDate(Context context, Time date, String timeZone, long milliTime) {
+        String lunarDate = "";
+        if (canShowLunarCalendar()) {
+            if (date == null) {
+                date = new Time(timeZone);
+                date.set(milliTime);
+            }
+            lunarDate = getLunarMDString(date.year, date.month + 1, date.monthDay);
+            lunarDate = context.getString(R.string.lunar_info_fmt, lunarDate);
+        }
+        return lunarDate;
+    }
+
+    /**
+     * get lunar date for startMillis and endMillis,then format them
+     * @return lunar date string or lunar date string range which can be displayed directly
+     */
+    public String getLunarDisplayedDate(Context context, String localTimezone, long startMillis,
+            long endMillis, boolean allDay) {
+        if (!canShowLunarCalendar()) {
+            return "";
+        }
+        Time startDate = new Time(localTimezone);
+        startDate.set(startMillis);
+        startDate.normalize(false);
+        Time endDate = new Time(localTimezone);
+        endDate.set(endMillis);
+        if (allDay) {
+            endDate.monthDay -= 1;
+        }
+        endDate.normalize(false);
+
+        boolean showDateRange = true;
+        if ((startDate.year == endDate.year) && (startDate.month == endDate.month)
+                && (startDate.monthDay == endDate.monthDay)) {
+            showDateRange = false;
+            // if the date is today, no need to display lunar info.
+            if (isToday(startMillis, System.currentTimeMillis(), startDate.gmtoff,
+                    allDay, localTimezone)) {
+                return "";
+            }
+        }
+
+        return formatLunarDateRange(context, startDate, endDate, showDateRange);
+    }
+
+    private boolean isToday(long dayMillis, long currentMillis, long localGmtOffset, boolean allday,
+            String localTimezone) {
+        if (allday) {
+            // All day events require special timezone adjustment.
+            dayMillis = convertAlldayUtcToLocal(null, dayMillis, localTimezone);
+        }
+        int startDay = Time.getJulianDay(dayMillis, localGmtOffset);
+        int currentDay = Time.getJulianDay(currentMillis, localGmtOffset);
+        int days = startDay - currentDay;
+        if (days == 0) {
+            return true;
+        }
+        return false;
+    }
+
+    private long convertAlldayUtcToLocal(Time recycle, long utcTime, String tz) {
+        if (recycle == null) {
+            recycle = new Time();
+        }
+        recycle.timezone = Time.TIMEZONE_UTC;
+        recycle.set(utcTime);
+        recycle.timezone = tz;
+        return recycle.normalize(true);
+    }
+}
Index: vendor/mediatek/proprietary/packages/apps/Calendar/src/com/mediatek/calendar/plugin/lunar/LunarSimpleMonthAdapter.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/Calendar/src/com/mediatek/calendar/plugin/lunar/LunarSimpleMonthAdapter.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/Calendar/src/com/mediatek/calendar/plugin/lunar/LunarSimpleMonthAdapter.java	(revision 1054)
@@ -0,0 +1,241 @@
+/*
+ * Copyright (C) 2013 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mediatek.calendar.plugin.lunar;
+
+import android.annotation.SuppressLint;
+import android.content.Context;
+import android.text.format.Time;
+import android.util.Log;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.AbsListView.LayoutParams;
+import android.widget.BaseAdapter;
+
+import com.android.datetimepicker.date.MonthAdapter.CalendarDay;
+import com.mediatek.calendar.plugin.lunar.LunarSimpleMonthView.OnDayClickListener;
+
+import java.util.Calendar;
+import java.util.HashMap;
+
+/**
+ * An adapter for a list of {@link LunarSimpleMonthView} items.
+ */
+public class LunarSimpleMonthAdapter extends BaseAdapter implements OnDayClickListener {
+
+    private static final String TAG = "SimpleMonthAdapter";
+
+    private final Context mContext;
+    private final DatePickerController mController;
+
+    private CalendarDay mSelectedDay;
+
+    protected static int WEEK_7_OVERHANG_HEIGHT = 7;
+    protected static final int MONTHS_IN_YEAR = 12;
+
+    // add for construct LunarUtil
+    private Context mPluginContext;
+
+    /**
+     * A convenience class to represent a specific date.
+     */
+    public static class CalendarDay extends com.android.datetimepicker.date.MonthAdapter.CalendarDay {
+        private Calendar calendar;
+        private Time time;
+        int year;
+        int month;
+        int day;
+
+        public CalendarDay() {
+            setTime(System.currentTimeMillis());
+        }
+
+        public CalendarDay(long timeInMillis) {
+            setTime(timeInMillis);
+        }
+
+        public CalendarDay(Calendar calendar) {
+            year = calendar.get(Calendar.YEAR);
+            month = calendar.get(Calendar.MONTH);
+            day = calendar.get(Calendar.DAY_OF_MONTH);
+        }
+
+        public CalendarDay(int year, int month, int day) {
+            setDay(year, month, day);
+        }
+
+        public void set(CalendarDay date) {
+            year = date.year;
+            month = date.month;
+            day = date.day;
+        }
+
+        public void setDay(int year, int month, int day) {
+            this.year = year;
+            this.month = month;
+            this.day = day;
+        }
+
+        public void setJulianDay(int julianDay) {
+            if (time == null) {
+                time = new Time();
+            }
+            time.setJulianDay(julianDay);
+            setTime(time.toMillis(false));
+        }
+
+        private void setTime(long timeInMillis) {
+            if (calendar == null) {
+                calendar = Calendar.getInstance();
+            }
+            calendar.setTimeInMillis(timeInMillis);
+            month = calendar.get(Calendar.MONTH);
+            year = calendar.get(Calendar.YEAR);
+            day = calendar.get(Calendar.DAY_OF_MONTH);
+        }
+
+        public int getYear() {
+            return year;
+        }
+
+        public int getMonth() {
+            return month;
+        }
+
+        public int getDay() {
+            return day;
+        }
+    }
+
+    public LunarSimpleMonthAdapter(Context context,
+            DatePickerController controller, Context pluginContext) {
+        mContext = context;
+        mPluginContext = pluginContext;
+        mController = controller;
+        init();
+        setSelectedDay(mController.getSelectedDay());
+    }
+
+    /**
+     * Updates the selected day and related parameters.
+     *
+     * @param day The day to highlight
+     */
+    public void setSelectedDay(CalendarDay day) {
+        mSelectedDay = day;
+        notifyDataSetChanged();
+    }
+
+    public CalendarDay getSelectedDay() {
+        return mSelectedDay;
+    }
+
+    /**
+     * Set up the gesture detector and selected time
+     */
+    protected void init() {
+        mSelectedDay = new CalendarDay(System.currentTimeMillis());
+    }
+
+    @Override
+    public int getCount() {
+        return ((mController.getMaxYear() - mController.getMinYear()) + 1) * MONTHS_IN_YEAR;
+    }
+
+    @Override
+    public Object getItem(int position) {
+        return null;
+    }
+
+    @Override
+    public long getItemId(int position) {
+        return position;
+    }
+
+    @Override
+    public boolean hasStableIds() {
+        return true;
+    }
+
+    @SuppressLint("NewApi")
+    @SuppressWarnings("unchecked")
+    @Override
+    public View getView(int position, View convertView, ViewGroup parent) {
+        LunarSimpleMonthView v;
+        HashMap<String, Integer> drawingParams = null;
+        if (convertView != null) {
+            v = (LunarSimpleMonthView) convertView;
+            // We store the drawing parameters in the view so it can be recycled
+            drawingParams = (HashMap<String, Integer>) v.getTag();
+        } else {
+            v = new LunarSimpleMonthView(mContext, mPluginContext);
+            // Set up the new view
+            LayoutParams params = new LayoutParams(
+                    LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);
+            v.setLayoutParams(params);
+            v.setClickable(true);
+            v.setOnDayClickListener(this);
+        }
+        if (drawingParams == null) {
+            drawingParams = new HashMap<String, Integer>();
+        }
+        drawingParams.clear();
+
+        final int month = position % MONTHS_IN_YEAR;
+        final int year = position / MONTHS_IN_YEAR + mController.getMinYear();
+        Log.d(TAG, "Year: " + year + ", Month: " + month);
+
+        int selectedDay = -1;
+        if (isSelectedDayInMonth(year, month)) {
+            selectedDay = mSelectedDay.day;
+        }
+
+        // Invokes requestLayout() to ensure that the recycled view is set with the appropriate
+        // height/number of weeks before being displayed.
+        v.reuse();
+
+        drawingParams.put(LunarSimpleMonthView.VIEW_PARAMS_SELECTED_DAY, selectedDay);
+        drawingParams.put(LunarSimpleMonthView.VIEW_PARAMS_YEAR, year);
+        drawingParams.put(LunarSimpleMonthView.VIEW_PARAMS_MONTH, month);
+        drawingParams.put(LunarSimpleMonthView.VIEW_PARAMS_WEEK_START, mController.getFirstDayOfWeek());
+        v.setMonthParams(drawingParams);
+        v.invalidate();
+        return v;
+    }
+
+    private boolean isSelectedDayInMonth(int year, int month) {
+        return mSelectedDay.year == year && mSelectedDay.month == month;
+    }
+
+
+    @Override
+    public void onDayClick(LunarSimpleMonthView view, CalendarDay day) {
+        if (day != null) {
+            onDayTapped(day);
+        }
+    }
+
+    /**
+     * Maintains the same hour/min/sec but moves the day to the tapped day.
+     *
+     * @param day The day that was tapped
+     */
+    protected void onDayTapped(CalendarDay day) {
+        mController.tryVibrate();
+        mController.onDayOfMonthSelected(day.year, day.month, day.day);
+        setSelectedDay(day);
+    }
+}
Index: vendor/mediatek/proprietary/packages/apps/Calendar/src/com/mediatek/calendar/plugin/lunar/LunarMonthViewExt.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/Calendar/src/com/mediatek/calendar/plugin/lunar/LunarMonthViewExt.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/Calendar/src/com/mediatek/calendar/plugin/lunar/LunarMonthViewExt.java	(revision 1054)
@@ -0,0 +1,116 @@
+package com.mediatek.calendar.plugin.lunar;
+
+import android.content.Context;
+import android.content.res.Configuration;
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.graphics.Paint.Align;
+import android.text.format.Time;
+import android.util.Log;
+
+
+/**
+ * M: Lunar Extension for MonthView
+ * this extension would draw lunar text in the cell
+ */
+public class LunarMonthViewExt {
+
+    private static final String TAG = "LunarMonthViewExt";
+
+    private static final int PADDING_LUNAR_OFFSET = 2;
+    private static int sLunarOffsetXFromMonthNumber = -10;
+    private static int sLunarTextSize = 11;
+    private static boolean sIsScaled = false;
+
+    // A singleton
+    private static LunarMonthViewExt sInstance = null;
+
+    private final Paint mLunarTextPaint;
+    private final float mScale;
+    private final LunarUtil mLunarUtil;
+
+    /*
+     * A singleton.
+     * @param context the context of the view
+     */
+    private LunarMonthViewExt(Context hosContext, Context pluginContext) {
+        mScale = hosContext.getResources().getDisplayMetrics().density;
+        mLunarTextPaint = new Paint();
+        mLunarUtil = LunarUtil.getInstance(pluginContext);
+        initDimens();
+    }
+
+    /*
+     * A singleton.
+     */
+    synchronized private static void makeInstance(Context hosContext, Context pluginContext) {
+        sInstance = new LunarMonthViewExt(hosContext, pluginContext);
+    }
+
+    /**
+     * M: init the dimens, so that the lunar text size and location
+     * would self-suit to different screen sizes
+     */
+    private void initDimens() {
+        if (!sIsScaled) {
+            sLunarTextSize *= mScale;
+            sLunarOffsetXFromMonthNumber *= mScale;
+
+            sIsScaled = true;
+        }
+    }
+
+    public static void drawLunarString(Context hostContext, Context pluginContext, Canvas canvas, Paint monthNumPaint, int numX,
+            int numY, Time weekDay) {
+        if (sInstance == null) {
+            makeInstance(hostContext, pluginContext);
+        }
+
+        if (sInstance.canShowLunarCalendar()) {
+            sInstance.drawLunarString(hostContext, canvas, monthNumPaint, numX, numY, weekDay);
+        }
+    }
+
+    /** M: #Lunar# draw lunar in the box(x ,y) if needed.
+     * Actually, this function only retrieve the Lunar string with specific dilemma(;)
+     *
+     * @param canvas canvas to draw
+     * @param monthNumPaint the paint of the month number
+     * @param x the x of the number's right-bottom
+     * @param y the y of the number's right-bottom
+     */
+    private void drawLunarString(Context hostContext, Canvas canvas, Paint monthNumPaint, int x, int y, Time weekDay) {
+        if (weekDay == null) {
+            Log.e(TAG, "drawLunar(),time from (" + x + ") is null, return");
+            return;
+        }
+
+        String lunarText = mLunarUtil.getLunarFestivalChineseString(
+                weekDay.year, weekDay.month + 1, weekDay.monthDay);
+
+        mLunarTextPaint.set(monthNumPaint);
+        mLunarTextPaint.setTextSize(sLunarTextSize);
+
+        int orientation = hostContext.getResources().getConfiguration().orientation;
+        if (orientation == Configuration.ORIENTATION_PORTRAIT) {
+            mLunarTextPaint.setTextAlign(Align.CENTER);
+            String[] words = lunarText.split(LunarUtil.DELIM);
+            int wordX = x + sLunarOffsetXFromMonthNumber;
+            int wordY = y + sLunarTextSize;
+            for (String word : words) {
+                canvas.drawText(word, wordX, wordY, mLunarTextPaint);
+                wordY += (sLunarTextSize + PADDING_LUNAR_OFFSET);
+            }
+        } else {
+            final String landDelim = " ";
+            mLunarTextPaint.setTextAlign(Align.RIGHT);
+            canvas.drawText(lunarText.replace(LunarUtil.DELIM, landDelim).trim(),
+                    x + PADDING_LUNAR_OFFSET,
+                    y + sLunarTextSize, mLunarTextPaint);
+        }
+    }
+
+    private boolean canShowLunarCalendar() {
+        return mLunarUtil.canShowLunarCalendar();
+    }
+}
Index: vendor/mediatek/proprietary/packages/apps/Calendar/src/com/mediatek/calendar/plugin/lunar/DayPickerView.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/Calendar/src/com/mediatek/calendar/plugin/lunar/DayPickerView.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/Calendar/src/com/mediatek/calendar/plugin/lunar/DayPickerView.java	(revision 1054)
@@ -0,0 +1,511 @@
+/*
+ * Copyright (C) 2013 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.mediatek.calendar.plugin.lunar;
+
+import android.annotation.SuppressLint;
+import android.content.Context;
+import android.os.Build;
+import android.os.Bundle;
+import android.os.Handler;
+import android.util.AttributeSet;
+import android.util.Log;
+import android.view.View;
+import android.view.ViewConfiguration;
+import android.view.accessibility.AccessibilityEvent;
+import android.view.accessibility.AccessibilityNodeInfo;
+import android.widget.AbsListView;
+import android.widget.AbsListView.OnScrollListener;
+import android.widget.ListView;
+
+import com.android.datetimepicker.Utils;
+import com.mediatek.calendar.plugin.lunar.LunarDatePickerDialog.OnDateChangedListener;
+import com.mediatek.calendar.plugin.lunar.LunarSimpleMonthAdapter.CalendarDay;
+
+import java.text.SimpleDateFormat;
+import java.util.Calendar;
+import java.util.Locale;
+
+/**
+ * This displays a list of months in a calendar format with selectable days.
+ */
+public class DayPickerView extends ListView implements OnScrollListener, OnDateChangedListener {
+
+    private static final String TAG = "MonthFragment";
+
+    // Affects when the month selection will change while scrolling up
+    protected static final int SCROLL_HYST_WEEKS = 2;
+    // How long the GoTo fling animation should last
+    protected static final int GOTO_SCROLL_DURATION = 250;
+    // How long to wait after receiving an onScrollStateChanged notification
+    // before acting on it
+    protected static final int SCROLL_CHANGE_DELAY = 40;
+    // The number of days to display in each week
+    public static final int DAYS_PER_WEEK = 7;
+    public static final int LIST_TOP_OFFSET = -1; // so that the top line will be
+                                            // under the separator
+    // You can override these numbers to get a different appearance
+    protected int mNumWeeks = 6;
+    protected boolean mShowWeekNumber = false;
+    protected int mDaysPerWeek = 7;
+    private SimpleDateFormat mYearFormat = new SimpleDateFormat("yyyy", Locale.getDefault());
+
+    // These affect the scroll speed and feel
+    protected float mFriction = 1.0f;
+
+    protected Context mContext;
+    protected Handler mHandler;
+
+    // highlighted time
+    protected CalendarDay mSelectedDay = new CalendarDay();
+    protected LunarSimpleMonthAdapter mAdapter;
+
+    protected CalendarDay mTempDay = new CalendarDay();
+
+    private static float mScale = 0;
+    // When the week starts; numbered like Time.<WEEKDAY> (e.g. SUNDAY=0).
+    protected int mFirstDayOfWeek;
+    // The last name announced by accessibility
+    protected CharSequence mPrevMonthName;
+    // which month should be displayed/highlighted [0-11]
+    protected int mCurrentMonthDisplayed;
+    // used for tracking during a scroll
+    protected long mPreviousScrollPosition;
+    // used for tracking what state listview is in
+    protected int mPreviousScrollState = OnScrollListener.SCROLL_STATE_IDLE;
+    // used for tracking what state listview is in
+    protected int mCurrentScrollState = OnScrollListener.SCROLL_STATE_IDLE;
+
+    private DatePickerController mController;
+    private boolean mPerformingScroll;
+
+    // add for construct LunarUtil
+    private Context mPluginContext;
+
+    public DayPickerView(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        init(context);
+    }
+
+    public DayPickerView(Context context, DatePickerController controller, Context pluginContext) {
+        super(context);
+        mPluginContext = pluginContext;
+        init(context);
+        setController(controller);
+    }
+
+    public void setController(DatePickerController controller) {
+        mController = controller;
+        mController.registerOnDateChangedListener(this);
+        setUpAdapter();
+        setAdapter(mAdapter);
+        onDateChanged();
+    }
+
+    public void init(Context context) {
+        mHandler = new Handler();
+        setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
+        setDrawSelectorOnTop(false);
+
+        mContext = context;
+        setUpListView();
+    }
+
+    public void onChange() {
+        setUpAdapter();
+        setAdapter(mAdapter);
+    }
+
+    /**
+     * Creates a new adapter if necessary and sets up its parameters. Override
+     * this method to provide a custom adapter.
+     */
+    protected void setUpAdapter() {
+        if (mAdapter == null) {
+            mAdapter = new LunarSimpleMonthAdapter(getContext(), mController, mPluginContext);
+        } else {
+            mAdapter.setSelectedDay(mSelectedDay);
+            mAdapter.notifyDataSetChanged();
+        }
+        // refresh the view with the new parameters
+        mAdapter.notifyDataSetChanged();
+    }
+
+    /*
+     * Sets all the required fields for the list view. Override this method to
+     * set a different list view behavior.
+     */
+    protected void setUpListView() {
+        // Transparent background on scroll
+        setCacheColorHint(0);
+        // No dividers
+        setDivider(null);
+        // Items are clickable
+        setItemsCanFocus(true);
+        // The thumb gets in the way, so disable it
+        setFastScrollEnabled(false);
+        setVerticalScrollBarEnabled(false);
+        setOnScrollListener(this);
+        setFadingEdgeLength(0);
+        // Make the scrolling behavior nicer
+        setFriction(ViewConfiguration.getScrollFriction() * mFriction);
+    }
+
+    /**
+     * This moves to the specified time in the view. If the time is not already
+     * in range it will move the list so that the first of the month containing
+     * the time is at the top of the view. If the new time is already in view
+     * the list will not be scrolled unless forceScroll is true. This time may
+     * optionally be highlighted as selected as well.
+     *
+     * @param time The time to move to
+     * @param animate Whether to scroll to the given time or just redraw at the
+     *            new location
+     * @param setSelected Whether to set the given time as selected
+     * @param forceScroll Whether to recenter even if the time is already
+     *            visible
+     * @return Whether or not the view animated to the new location
+     */
+    public boolean goTo(CalendarDay day, boolean animate, boolean setSelected, boolean forceScroll) {
+
+        // Set the selected day
+        if (setSelected) {
+            mSelectedDay.set(day);
+        }
+
+        mTempDay.set(day);
+        final int position = (day.year - mController.getMinYear())
+                * LunarSimpleMonthAdapter.MONTHS_IN_YEAR + day.month;
+
+        View child;
+        int i = 0;
+        int top = 0;
+        // Find a child that's completely in the view
+        do {
+            child = getChildAt(i++);
+            if (child == null) {
+                break;
+            }
+            top = child.getTop();
+            if (Log.isLoggable(TAG, Log.DEBUG)) {
+                Log.d(TAG, "child at " + (i - 1) + " has top " + top);
+            }
+        } while (top < 0);
+
+        // Compute the first and last position visible
+        int selectedPosition;
+        if (child != null) {
+            selectedPosition = getPositionForView(child);
+        } else {
+            selectedPosition = 0;
+        }
+
+        if (setSelected) {
+            mAdapter.setSelectedDay(mSelectedDay);
+        }
+
+        if (Log.isLoggable(TAG, Log.DEBUG)) {
+            Log.d(TAG, "GoTo position " + position);
+        }
+        // Check if the selected day is now outside of our visible range
+        // and if so scroll to the month that contains it
+        if (position != selectedPosition || forceScroll) {
+            setMonthDisplayed(mTempDay);
+            mPreviousScrollState = OnScrollListener.SCROLL_STATE_FLING;
+            if (animate) {
+                smoothScrollToPositionFromTop(
+                        position, LIST_TOP_OFFSET, GOTO_SCROLL_DURATION);
+                return true;
+            } else {
+                postSetSelection(position);
+            }
+        } else if (setSelected) {
+            setMonthDisplayed(mSelectedDay);
+        }
+        return false;
+    }
+
+    public void postSetSelection(final int position) {
+        clearFocus();
+        post(new Runnable() {
+
+            @Override
+            public void run() {
+                setSelection(position);
+            }
+        });
+        onScrollStateChanged(this, OnScrollListener.SCROLL_STATE_IDLE);
+    }
+
+    /**
+     * Updates the title and selected month if the view has moved to a new
+     * month.
+     */
+    @Override
+    public void onScroll(
+            AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
+        LunarSimpleMonthView child = (LunarSimpleMonthView) view.getChildAt(0);
+        if (child == null) {
+            return;
+        }
+
+        // Figure out where we are
+        long currScroll = view.getFirstVisiblePosition() * child.getHeight() - child.getBottom();
+        mPreviousScrollPosition = currScroll;
+        mPreviousScrollState = mCurrentScrollState;
+    }
+
+    /**
+     * Sets the month displayed at the top of this view based on time. Override
+     * to add custom events when the title is changed.
+     */
+    protected void setMonthDisplayed(CalendarDay date) {
+        mCurrentMonthDisplayed = date.month;
+        invalidateViews();
+    }
+
+    @Override
+    public void onScrollStateChanged(AbsListView view, int scrollState) {
+        // use a post to prevent re-entering onScrollStateChanged before it
+        // exits
+        mScrollStateChangedRunnable.doScrollStateChange(view, scrollState);
+    }
+
+    protected ScrollStateRunnable mScrollStateChangedRunnable = new ScrollStateRunnable();
+
+    protected class ScrollStateRunnable implements Runnable {
+        private int mNewState;
+
+        /**
+         * Sets up the runnable with a short delay in case the scroll state
+         * immediately changes again.
+         *
+         * @param view The list view that changed state
+         * @param scrollState The new state it changed to
+         */
+        public void doScrollStateChange(AbsListView view, int scrollState) {
+            mHandler.removeCallbacks(this);
+            mNewState = scrollState;
+            mHandler.postDelayed(this, SCROLL_CHANGE_DELAY);
+        }
+
+        @Override
+        public void run() {
+            mCurrentScrollState = mNewState;
+            if (Log.isLoggable(TAG, Log.DEBUG)) {
+                Log.d(TAG,
+                        "new scroll state: " + mNewState + " old state: " + mPreviousScrollState);
+            }
+            // Fix the position after a scroll or a fling ends
+            if (mNewState == OnScrollListener.SCROLL_STATE_IDLE
+                    && mPreviousScrollState != OnScrollListener.SCROLL_STATE_IDLE
+                    && mPreviousScrollState != OnScrollListener.SCROLL_STATE_TOUCH_SCROLL) {
+                mPreviousScrollState = mNewState;
+                int i = 0;
+                View child = getChildAt(i);
+                while (child != null && child.getBottom() <= 0) {
+                    child = getChildAt(++i);
+                }
+                if (child == null) {
+                    // The view is no longer visible, just return
+                    return;
+                }
+                int firstPosition = getFirstVisiblePosition();
+                int lastPosition = getLastVisiblePosition();
+                boolean scroll = firstPosition != 0 && lastPosition != getCount() - 1;
+                final int top = child.getTop();
+                final int bottom = child.getBottom();
+                final int midpoint = getHeight() / 2;
+                if (scroll && top < LIST_TOP_OFFSET) {
+                    if (bottom > midpoint) {
+                        smoothScrollBy(top, GOTO_SCROLL_DURATION);
+                    } else {
+                        smoothScrollBy(bottom, GOTO_SCROLL_DURATION);
+                    }
+                }
+            } else {
+                mPreviousScrollState = mNewState;
+            }
+        }
+    }
+
+    /**
+     * Gets the position of the view that is most prominently displayed within the list view.
+     */
+    public int getMostVisiblePosition() {
+        final int firstPosition = getFirstVisiblePosition();
+        final int height = getHeight();
+
+        int maxDisplayedHeight = 0;
+        int mostVisibleIndex = 0;
+        int i = 0;
+        int bottom = 0;
+        while (bottom < height) {
+            View child = getChildAt(i);
+            if (child == null) {
+                break;
+            }
+            bottom = child.getBottom();
+            int displayedHeight = Math.min(bottom, height) - Math.max(0, child.getTop());
+            if (displayedHeight > maxDisplayedHeight) {
+                mostVisibleIndex = i;
+                maxDisplayedHeight = displayedHeight;
+            }
+            i++;
+        }
+        return firstPosition + mostVisibleIndex;
+    }
+
+    @Override
+    public void onDateChanged() {
+        goTo(mController.getSelectedDay(), false, true, true);
+    }
+
+    /**
+     * Attempts to return the date that has accessibility focus.
+     *
+     * @return The date that has accessibility focus, or {@code null} if no date
+     *         has focus.
+     */
+    private CalendarDay findAccessibilityFocus() {
+        final int childCount = getChildCount();
+        for (int i = 0; i < childCount; i++) {
+            final View child = getChildAt(i);
+            if (child instanceof LunarSimpleMonthView) {
+                final CalendarDay focus = ((LunarSimpleMonthView) child).getAccessibilityFocus();
+                if (focus != null) {
+                    if (Build.VERSION.SDK_INT == Build.VERSION_CODES.JELLY_BEAN_MR1) {
+                        // Clear focus to avoid ListView bug in Jelly Bean MR1.
+                        ((LunarSimpleMonthView) child).clearAccessibilityFocus();
+                    }
+                    return focus;
+                }
+            }
+        }
+
+        return null;
+    }
+
+    /**
+     * Attempts to restore accessibility focus to a given date. No-op if
+     * {@code day} is {@code null}.
+     *
+     * @param day The date that should receive accessibility focus
+     * @return {@code true} if focus was restored
+     */
+    private boolean restoreAccessibilityFocus(CalendarDay day) {
+        if (day == null) {
+            return false;
+        }
+
+        final int childCount = getChildCount();
+        for (int i = 0; i < childCount; i++) {
+            final View child = getChildAt(i);
+            if (child instanceof LunarSimpleMonthView) {
+                if (((LunarSimpleMonthView) child).restoreAccessibilityFocus(day)) {
+                    return true;
+                }
+            }
+        }
+
+        return false;
+    }
+
+    @Override
+    protected void layoutChildren() {
+        final CalendarDay focusedDay = findAccessibilityFocus();
+        super.layoutChildren();
+        if (mPerformingScroll) {
+            mPerformingScroll = false;
+        } else {
+            restoreAccessibilityFocus(focusedDay);
+        }
+    }
+
+    @Override
+    public void onInitializeAccessibilityEvent(AccessibilityEvent event) {
+        super.onInitializeAccessibilityEvent(event);
+        event.setItemCount(-1);
+   }
+
+    private String getMonthAndYearString(CalendarDay day) {
+        Calendar cal = Calendar.getInstance();
+        cal.set(day.year, day.month, day.day);
+
+        StringBuffer sbuf = new StringBuffer();
+        sbuf.append(cal.getDisplayName(Calendar.MONTH, Calendar.LONG, Locale.getDefault()));
+        sbuf.append(" ");
+        sbuf.append(mYearFormat.format(cal.getTime()));
+        return sbuf.toString();
+    }
+
+    /**
+     * Necessary for accessibility, to ensure we support "scrolling" forward and backward
+     * in the month list.
+     */
+    @Override
+    public void onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo info) {
+      super.onInitializeAccessibilityNodeInfo(info);
+      info.addAction(AccessibilityNodeInfo.ACTION_SCROLL_FORWARD);
+      info.addAction(AccessibilityNodeInfo.ACTION_SCROLL_BACKWARD);
+    }
+
+    /**
+     * When scroll forward/backward events are received, announce the newly scrolled-to month.
+     */
+    @SuppressLint("NewApi")
+    @Override
+    public boolean performAccessibilityAction(int action, Bundle arguments) {
+        if (action != AccessibilityNodeInfo.ACTION_SCROLL_FORWARD &&
+                action != AccessibilityNodeInfo.ACTION_SCROLL_BACKWARD) {
+            return super.performAccessibilityAction(action, arguments);
+        }
+
+        // Figure out what month is showing.
+        int firstVisiblePosition = getFirstVisiblePosition();
+        int month = firstVisiblePosition % 12;
+        int year = firstVisiblePosition / 12 + mController.getMinYear();
+        CalendarDay day = new CalendarDay(year, month, 1);
+
+        // Scroll either forward or backward one month.
+        if (action == AccessibilityNodeInfo.ACTION_SCROLL_FORWARD) {
+            day.month++;
+            if (day.month == 12) {
+                day.month = 0;
+                day.year++;
+            }
+        } else if (action == AccessibilityNodeInfo.ACTION_SCROLL_BACKWARD) {
+            View firstVisibleView = getChildAt(0);
+            // If the view is fully visible, jump one month back. Otherwise, we'll just jump
+            // to the first day of first visible month.
+            if (firstVisibleView != null && firstVisibleView.getTop() >= -1) {
+                // There's an off-by-one somewhere, so the top of the first visible item will
+                // actually be -1 when it's at the exact top.
+                day.month--;
+                if (day.month == -1) {
+                    day.month = 11;
+                    day.year--;
+                }
+            }
+        }
+
+        // Go to that month.
+        Utils.tryAccessibilityAnnounce(this, getMonthAndYearString(day));
+        goTo(day, true, false, true);
+        mPerformingScroll = true;
+        return true;
+    }
+}
Index: vendor/mediatek/proprietary/packages/apps/Calendar/src/com/mediatek/calendar/plugin/lunar/LunarAlgorithm.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/Calendar/src/com/mediatek/calendar/plugin/lunar/LunarAlgorithm.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/Calendar/src/com/mediatek/calendar/plugin/lunar/LunarAlgorithm.java	(revision 1054)
@@ -0,0 +1,240 @@
+package com.mediatek.calendar.plugin.lunar;
+
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+
+import android.content.Context;
+import android.content.res.Resources;
+import android.util.Log;
+
+import com.android.calendar.R;
+
+
+public class LunarAlgorithm {
+
+    private static final String TAG = "LunarAlgorithm";
+
+    private static final int LEAP_MONTH = 0;
+    private static final int NORMAL_MONTH = 1;
+
+    /* the lnuar calculate based on the year 1900 */
+    private static final int LUNAR_YEAR_BASE = 1900;
+    private static final int LUNAR_YEAR_END = 2038;
+
+    /* Lunar info consts, for calculating leap month. */
+    private final int[] mLunarInfoArray;
+
+    public LunarAlgorithm(Context context) {
+        Resources res = context.getResources();
+        mLunarInfoArray = res.getIntArray(R.array.lunar_info);
+    }
+
+    /**
+     * get the total number days of a lunar year.
+     *
+     * @param lunarYear which lunar year days number to return.
+     * @return A lunar year days total number.
+     */
+    private int daysOfLunarYear(int lunarYear) {
+        int i;
+        int sum = 348;
+        for (i = 0x8000; i > 0x8; i >>= 1) {
+            if ((mLunarInfoArray[lunarYear - 1900] & i) != 0) {
+                sum += 1;
+            }
+        }
+        return (sum + daysOfLeapMonthInLunarYear(lunarYear));
+    }
+
+    /**
+     * get a lunar year's leap month  total days number.
+     *
+     * @param lunarYear which lunar year
+     * @return the total days number of this lunar year's leap month. if this
+     *         luanr year hasn't leap,will return 0.
+     */
+    private int daysOfLeapMonthInLunarYear(int lunarYear) {
+        if (leapMonth(lunarYear) != 0) {
+            if ((mLunarInfoArray[lunarYear - 1900] & 0x10000) != 0) {
+                return 30;
+            } else {
+                return 29;
+            }
+        }
+        return 0;
+    }
+
+    /**
+     * get the total days number of a month
+     * @param luanrYear which lunar year.
+     * @param lunarMonth which lunar month
+     * @return the total days of this month
+     */
+    private int daysOfALunarMonth(int luanrYear, int lunarMonth) {
+        if ((mLunarInfoArray[luanrYear - 1900] & (0x10000 >> lunarMonth)) == 0) {
+            return 29;
+        }
+        return 30;
+    }
+
+    /**
+     * get the leap month of lunar year.
+     * @param lunarYear which lunar year to return.
+     * @return the number of the leapMonth.if hasn't leap
+     *         month will return 0.
+     */
+    private int leapMonth(int lunarYear) {
+        if (lunarYear < 1900 || lunarYear > 2100) {
+            Log.e(TAG, "get leapMonth:" + lunarYear + "is out of range.return 0.");
+            return 0;
+        }
+        return (int) (mLunarInfoArray[lunarYear - 1900] & 0xf);
+    }
+
+    /**
+     * parse gregorian date as 'yyyy-MM-dd' into Date object
+     */
+    private Date parseDate(int gregorianYear, int gregorianMonth, int gregorianDay) {
+        Date date = null;
+        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
+        try {
+            date = sdf.parse(gregorianYear + "-" + gregorianMonth + "-" + gregorianDay);
+        } catch (ParseException e) {
+            Log.e(TAG, "parseDate,parse date error.");
+            e.printStackTrace();
+        }
+        return date;
+    }
+
+    /**
+     * calculate the lunar year for currentDate which is a gregorian date.
+     * @param baseDate which is helpful to calculate. Usually it is the gregorian date of 1900.1.31.
+     * @param currentDate which gregorian date to convert
+     * @return the lunar year of the current date refers to
+     */
+    private int calculateLunarYear(int offsetDaysFromBaseDate, int[] lunar) {
+        int lunarYear;
+        int tempLunaryear;
+        int daysOfTempLunaryear = 0;
+        //start calculator the lunar year.
+        //loop use (offsetDaysFromBaseDate - daysOfTempLunaryear) until (offsetDaysFromBaseDate <= 0)
+        //daysOfTempLunaryear is the days of 1900,1901,1902,1903.......
+        //when loop end,daysOfTempLunaryear will <= 0
+        //if offsetDaysFromBaseDate = 0,tempLunaryear is the right lunar year
+        //if offsetDaysFromBaseDate < 0,tempLunaryear + 1 is the right lunar year.
+        for (tempLunaryear = LUNAR_YEAR_BASE;
+                tempLunaryear < LUNAR_YEAR_END && offsetDaysFromBaseDate > 0;
+                tempLunaryear++) {
+            daysOfTempLunaryear = daysOfLunarYear(tempLunaryear);
+            offsetDaysFromBaseDate -= daysOfTempLunaryear;
+        }
+        //if offsetDaysFromBaseDate < 0,calculate the previous year
+        if (offsetDaysFromBaseDate < 0) {
+            offsetDaysFromBaseDate += daysOfTempLunaryear;
+            tempLunaryear--;
+        }
+        lunar[0] = tempLunaryear;
+        return offsetDaysFromBaseDate;
+    }
+
+    /**
+     * calculate the lunar month and lunar day according luanrYear and offsetDaysFromBaseDate.
+     */
+    private void calculateLunarMonthAndDay(int offsetDaysFromBaseDate, int[] lunar) {
+        int lunarYear = lunar[0];
+        // get which month is leap month,if none 0.
+        int leapMonth = leapMonth(lunarYear);
+        //represent if minus the leap month days
+        boolean isMinusLeapMonthDays = false;
+
+        int tempLunarMonth;
+        int daysOfTempLunarMonth = 0;
+        //start calculate the lunar month
+        //now the value of offsetDaysFromBaseDate equals the day  of the lunar year,like:111/365
+        //when offsetDaysFromBaseDate <= 0,then tempLunarMonth <= the right lunar month
+        //so if offsetDaysFromBaseDate < 0,the previous lunar month is the right lunar month
+        //if offsetDaysFromBaseDate = 0,the tempLunarMonth si the right lunar month
+        for (tempLunarMonth = 1; tempLunarMonth < 13 && offsetDaysFromBaseDate > 0; tempLunarMonth++) {
+            // leap month
+            if (leapMonth > 0 && tempLunarMonth == (leapMonth + 1) && !isMinusLeapMonthDays) {
+                --tempLunarMonth;
+                isMinusLeapMonthDays = true;
+                daysOfTempLunarMonth = daysOfLeapMonthInLunarYear(lunarYear);
+            } else {
+                daysOfTempLunarMonth = daysOfALunarMonth(lunarYear, tempLunarMonth);
+            }
+            //Minus a the days of a month
+            offsetDaysFromBaseDate -= daysOfTempLunarMonth;
+
+            //reset isMinusLeapMonthDays status
+            if (isMinusLeapMonthDays && tempLunarMonth == (leapMonth + 1)) {
+                isMinusLeapMonthDays = false;
+            }
+        }
+        //if offsetDaysFromBaseDate == 0,it says  the tempLunarMonth is the leap month
+        //But now the value of tempLunarMonth = leapMonth + 1,so we should minus 1.
+        if (offsetDaysFromBaseDate == 0 && leapMonth > 0 && tempLunarMonth == leapMonth + 1) {
+            if (isMinusLeapMonthDays) {
+                isMinusLeapMonthDays = false;
+            } else {
+                isMinusLeapMonthDays = true;
+                --tempLunarMonth;
+            }
+        }
+        //if offsetDaysFromBaseDate < 0,calculate the previous lunar month
+        if (offsetDaysFromBaseDate < 0) {
+            offsetDaysFromBaseDate += daysOfTempLunarMonth;
+            --tempLunarMonth;
+        }
+        int lunarMonth = tempLunarMonth;
+
+        //start calculate the lunar day.
+        //now the value of the offsetDaysFromBaseDate equals the lunar day + 1,like:11/31
+        //only plus 1.
+        int lunarDay = offsetDaysFromBaseDate + 1;
+
+        lunar[1] = lunarMonth;
+        lunar[2] = lunarDay;
+        lunar[3] = isMinusLeapMonthDays ? LEAP_MONTH : NORMAL_MONTH;
+    }
+
+    /**
+     * convert gregorian date into lunar date
+     * @return lunar date,int[], 0: luanr year , 1: luanr month, 2 lunar day,
+     *         3 whether lunar month is leap month
+     */
+    public int[] calculateLunarByGregorian(int gregorianYear, int gregorianMonth, int gregorianDay) {
+        if (gregorianYear > LUNAR_YEAR_END) {
+            Log.e(TAG, "the gregorianYear is out of range, limit the year to " + LUNAR_YEAR_END);
+            gregorianYear = LUNAR_YEAR_END;
+        }
+        // default lunar date is : 2000.1.1
+        int lunar[] = { 2000, 1, 1, NORMAL_MONTH };
+
+        // The Gregorian date of 1900.1.31
+        Date baseDate = null;
+        // The Gregorian date of current Time
+        Date currentDate = null;
+
+        //parse baseDate
+        baseDate = parseDate(1900, 1, 31);
+        if (baseDate == null) {
+            Log.e(TAG, "baseDate is null,return lunar date:2000.1.1");
+            return lunar;
+        }
+        //parse currentDate
+        currentDate = parseDate(gregorianYear, gregorianMonth, gregorianDay);
+        if (currentDate == null) {
+            return lunar;
+        }
+
+        //Calculate the number of days offset from current date to 1990.1.31
+        int offsetDaysFromBaseDate = Math.round(((currentDate.getTime() - baseDate.getTime())
+                / 86400000.0f));
+        offsetDaysFromBaseDate = calculateLunarYear(offsetDaysFromBaseDate, lunar);
+        calculateLunarMonthAndDay(offsetDaysFromBaseDate, lunar);
+
+        return lunar;
+    }
+}
Index: vendor/mediatek/proprietary/packages/apps/Calendar/src/com/mediatek/calendar/plugin/lunar/TcLunar.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/Calendar/src/com/mediatek/calendar/plugin/lunar/TcLunar.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/Calendar/src/com/mediatek/calendar/plugin/lunar/TcLunar.java	(revision 1054)
@@ -0,0 +1,121 @@
+package com.mediatek.calendar.plugin.lunar;
+
+
+import android.content.Context;
+import android.content.res.Resources;
+import android.util.Log;
+
+import com.android.calendar.R;
+
+import java.util.ArrayList;
+
+public class TcLunar {
+
+    private static final String TAG = "TcLunar";
+
+    private String[] mSolarTermNames;
+    private String mLunarFestChunjie;
+    private String mLunarFestDuanwu;
+    private String mLunarFestZhongqiu;
+
+    /// M: word "閏".
+    private static String mLunarTextLeap;
+    /// M: an index refer to word "閏".
+    private static final int LUNAR_WORD_RUN = 1;
+
+    /**
+     * mContext will hold the Plugin's Context
+     */
+    private Context mContext;
+
+    public TcLunar(Context context) {
+        Log.d(TAG, "in constructor");
+        mContext = context;
+        loadResources();
+        Log.d(TAG, "load resources done");
+    }
+
+    public String getSolarTermNameByIndex(int index) {
+        if (canShowTCLunar()) {
+            if (index < 1 || index > mSolarTermNames.length) {
+                Log.e(TAG, "SolarTerm should between [1, 24]");
+                return null;
+            }
+            return mSolarTermNames[index - 1];
+        }
+        return "";
+    }
+
+    public String getLunarFestival(int lunarMonth, int lunarDay) {
+        if (canShowTCLunar()) {
+            if ((lunarMonth == 1) && (lunarDay == 1)) {
+                return mLunarFestChunjie;
+            } else if ((lunarMonth == 5) && (lunarDay == 5)) {
+                return mLunarFestDuanwu;
+            } else if ((lunarMonth == 8) && (lunarDay == 15)) {
+                return mLunarFestZhongqiu;
+            }
+        }
+        return "";
+    }
+
+    /**
+     * M: Get the special word in TC mode.
+     * @param index refer to the special word.
+     * @return the word needed,like: LUNAR_WORD_RUN refer to "閏" in TC.
+     */
+    public String getSpecialWord(int index) {
+        if (canShowTCLunar()) {
+            if (index == LUNAR_WORD_RUN) {
+                return mLunarTextLeap;
+            }
+        }
+        return "";
+    }
+
+    public String getGregFestival(int gregorianMonth, int gregorianDay) {
+        if (canShowTCLunar()) {
+
+        }
+        return "";
+    }
+
+    public String formatLunarDateRange(boolean showYear, int startYear, String lunarTextYear,
+            ArrayList<String>lunarStartDate) {
+
+        if (canShowTCLunar()) {
+            String string = mContext.getString(R.string.tc_lunar_detail_info_fmt1, (showYear ? startYear + lunarTextYear : "")
+                    + lunarStartDate.get(LunarUtil.MONTH) + lunarStartDate.get(LunarUtil.MONTH_DAY));
+            return string;
+        }
+        return "";
+    }
+
+    public String formatLunarDateRange(String lunarStartDateStr, String lunarEndDateStr) {
+        if (canShowTCLunar()) {
+            String string = mContext.getString(R.string.tc_lunar_detail_info_fmt2, lunarStartDateStr, lunarEndDateStr);
+            return string;
+        }
+        return "";
+    }
+
+    /**
+     * M: whether in current env can TC Lunar be shown
+     * @return traditional chinese can show TC Lunar, return true
+     */
+    public boolean canShowTCLunar() {
+        return false;
+    }
+
+    /**
+     * M: load the Traditional Chinese resources for displaying
+     */
+    private void loadResources() {
+        final Resources res = mContext.getResources();
+        mSolarTermNames = res.getStringArray(R.array.tc_solar_terms);
+        mLunarTextLeap = res.getString(R.string.tc_lunar_leap);
+        mLunarFestChunjie = res.getString(R.string.tc_lunar_fest_chunjie);
+        mLunarFestDuanwu = res.getString(R.string.tc_lunar_fest_duanwu);
+        mLunarFestZhongqiu = res.getString(R.string.tc_lunar_fest_zhongqiu);
+    }
+}
Index: vendor/mediatek/proprietary/packages/apps/Calendar/src/com/mediatek/calendar/plugin/EditEventViewExt.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/Calendar/src/com/mediatek/calendar/plugin/EditEventViewExt.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/Calendar/src/com/mediatek/calendar/plugin/EditEventViewExt.java	(revision 1054)
@@ -0,0 +1,183 @@
+package com.mediatek.calendar.plugin;
+
+import com.android.datetimepicker.date.DatePickerDialog;
+import com.android.datetimepicker.date.DatePickerDialog.OnDateSetListener;
+
+import java.util.TimeZone;
+
+import android.app.Activity;
+import android.content.Context;
+import android.text.TextUtils;
+import android.text.format.DateUtils;
+import android.text.format.Time;
+import android.util.Log;
+import android.view.View;
+import android.widget.Button;
+import android.widget.RadioButton;
+import android.widget.RadioGroup;
+import android.widget.TextView;
+import android.widget.RadioGroup.OnCheckedChangeListener;
+
+import com.android.calendar.CalendarEventModel;
+import com.android.calendar.R;
+import com.mediatek.calendar.LogUtil;
+import com.mediatek.calendar.ext.DefaultEditEventViewExt;
+import com.mediatek.calendar.plugin.lunar.LunarDatePickerDialog;
+import com.mediatek.calendar.plugin.lunar.LunarUtil;
+import com.mediatek.common.PluginImpl;
+
+@PluginImpl(interfaceName="com.mediatek.calendar.ext.IEditEventViewExt")
+public class EditEventViewExt extends DefaultEditEventViewExt {
+
+    private static final String TAG = "EditEventViewExt";
+    private Context mContext;
+    private LunarUtil mLunarUtil;
+
+    public EditEventViewExt(Context context) {
+        mContext = context;
+        mLunarUtil = LunarUtil.getInstance(context);
+    }
+
+    /**
+     * Sets additional Date Picker Switch UI Elements for EditEventView
+     * @param model model can provide some info
+     */
+    @Override
+    public void setDatePickerSwitchUi(final Activity activity, Object model,
+            final Button startDateButton, final Button endDateButton, final String timezone,
+            final Time startTime, final Time endTime) {
+
+        final CalendarEventModel calendarEventModel = (CalendarEventModel) model;
+        Log.d(TAG, "setDatePickerSwitchUi model = " + model);
+
+        RadioGroup radioGroup = (RadioGroup) activity.findViewById(R.id.switch_date_picker);
+        if (radioGroup == null) {
+            return;
+        }
+
+        if (mLunarUtil.canShowLunarCalendar()) {
+            radioGroup.setVisibility(View.VISIBLE);
+            RadioButton radioBtn = (RadioButton) activity.findViewById(
+                    calendarEventModel.mIsLunar ? R.id.switch_lunar : R.id.switch_gregorian);
+            if (radioBtn == null) {
+                LogUtil.d(TAG, "radio button is null, do nothing here.");
+            } else {
+                radioBtn.setChecked(true);
+            }
+            resetDateButton(activity, startDateButton, endDateButton, timezone, startTime, endTime);
+
+            //set the listener.
+            radioGroup.setOnCheckedChangeListener(new OnCheckedChangeListener() {
+                public void onCheckedChanged(RadioGroup group, int checkedId) {
+                    switch(checkedId) {
+                    case R.id.switch_lunar:
+                        Log.d(TAG, "radioGroup set switch_lunar");
+                        resetDateButton(activity, startDateButton, endDateButton, timezone, startTime, endTime);
+                        calendarEventModel.mIsLunar = true;
+                        break;
+                    case R.id.switch_gregorian:
+                    default:
+                        Log.d(TAG, "radioGroup set switch_gregorian");
+                        resetDateButton(activity, startDateButton, endDateButton, timezone, startTime, endTime);
+                        calendarEventModel.mIsLunar = false;
+                        break;
+                    }
+                }
+            });
+        } else {
+            /// M: Reset button state when no lunar available @{
+            RadioButton radioBtn = (RadioButton) activity.findViewById(R.id.switch_gregorian);
+            if (radioBtn == null) {
+                LogUtil.d(TAG, "radio button is null, do nothing here.");
+            } else {
+                radioBtn.setChecked(true);
+            }
+            resetDateButton(activity, startDateButton, endDateButton, timezone, startTime, endTime);
+            /// @}
+            radioGroup.setVisibility(View.GONE);
+        }
+    }
+
+    /**
+     * Gets the extended string such as lunar string to tell the Date
+     * @param millis the millis time
+     * @return "" means the extension won't handle the translation,
+     * other means the extension had changed the millis to lunar string.
+     */
+    @Override
+    public String getDateStringFromMillis(Activity activity, long millis) {
+        String dateString = "";
+        if (isEditingLunarDate(activity)) {
+            Time time = new Time();
+            time.set(millis);
+            dateString = mLunarUtil.getLunarDateString(time.year, time.month + 1, time.monthDay);
+        }
+        Log.d(TAG, "getDateStringFromMillis, millis = " + millis + " to dateString = " + dateString);
+        return dateString;
+    }
+
+    /**
+     * Constructs a new DatePickerDialog instance with the given initial field
+     * @param callBack    How the parent is notified that the date is set
+     * @param year        The initial year of the dialog
+     * @param monthOfYear The initial month of the dialog
+     * @param dayOfMonth  The initial day of the dialog
+     * @return a instance of DatePickerDialog
+     */
+    @Override
+    public DatePickerDialog createDatePickerDialog(Activity activity, OnDateSetListener listener,
+            int year, int monthOfYear, int dayOfMonth) {
+        Log.d(TAG, "createDatePickerDialog mContext = " + mContext);
+        LunarDatePickerDialog dialog = LunarDatePickerDialog.newInstance(listener, year,
+                monthOfYear, dayOfMonth, mContext);
+        dialog.setShowLunarHeader(isEditingLunarDate(activity));
+        return dialog;
+    }
+
+    private void resetDateButton(Activity activity, Button startDateButton, Button endDateButton,
+            String timezone, Time startTime, Time endTime) {
+        setDate(activity, startDateButton, timezone, startTime.toMillis(false /* use isDst */));
+        setDate(activity, endDateButton, timezone, endTime.toMillis(false /* use isDst */));
+    }
+
+    private void setDate(Activity activity, TextView view, String timezone, long millis) {
+        int flags = DateUtils.FORMAT_SHOW_DATE | DateUtils.FORMAT_SHOW_YEAR
+                | DateUtils.FORMAT_SHOW_WEEKDAY | DateUtils.FORMAT_ABBREV_MONTH
+                | DateUtils.FORMAT_ABBREV_WEEKDAY;
+
+        // Unfortunately, DateUtils doesn't support a timezone other than the
+        // default timezone provided by the system, so we have this ugly hack
+        // here to trick it into formatting our time correctly. In order to
+        // prevent all sorts of craziness, we synchronize on the TimeZone class
+        // to prevent other threads from reading an incorrect timezone from
+        // calls to TimeZone#getDefault()
+        // TODO fix this if/when DateUtils allows for passing in a timezone
+        String dateString = null;
+        synchronized (TimeZone.class) {
+            TimeZone.setDefault(TimeZone.getTimeZone(timezone));
+            ///M: #extension# the date string is extended
+            ///TODO: the whole "setDate" should be extended @{
+            dateString = getDateStringFromMillis(activity, millis);
+            ///@}
+            if (TextUtils.isEmpty(dateString)) {
+                dateString = DateUtils.formatDateTime(activity, millis, flags);
+            }
+            // setting the default back to null restores the correct behavior
+            TimeZone.setDefault(null);
+        }
+        view.setText(dateString);
+    }
+
+    private boolean isEditingLunarDate(Activity activity) {
+        RadioGroup radioGroup = (RadioGroup) activity.findViewById(R.id.switch_date_picker);
+        // Just make it more robust, radioGroup can't be null here.
+        if (radioGroup == null) {
+            Log.w(TAG, "isEditingLunarDate RadioGroup is null, how could be?");
+            return false;
+        }
+        boolean isLunarChecked = radioGroup.getCheckedRadioButtonId() == R.id.switch_lunar ? true : false;
+        Log.d(TAG, "isEditingLunarDate: " + isLunarChecked);
+        return isLunarChecked;
+    }
+
+}
Index: vendor/mediatek/proprietary/packages/apps/Calendar/src/com/mediatek/calendar/extension/OPExtensionFactory.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/Calendar/src/com/mediatek/calendar/extension/OPExtensionFactory.java	(revision 1053)
+++ vendor/mediatek/proprietary/packages/apps/Calendar/src/com/mediatek/calendar/extension/OPExtensionFactory.java	(revision 1054)
@@ -8,6 +8,7 @@
 import com.mediatek.calendar.ext.ILunarExt;
 import com.mediatek.calendar.ext.IEditEventViewExt;
 import com.mediatek.common.MPlugin;
+import com.mediatek.calendar.plugin.*;
 
 /**
  * M: this class is a factory to produce the operator plug-in object.
@@ -52,4 +53,25 @@
         }
         return sEditEventViewExt;
     }
+    
+	
+	//lance modify for Lunar @{
+    /*[issue31045] add begin by amw16,2015/11/03*/
+    public static ILunarExt getLunarCommonExtension(Context context) {
+    	if (sLunarExtension == null) {
+    		sLunarExtension = new LunarPlugin(context);
+    		LogUtil.i(TAG, "get lunar plugin failed, use default");
+    	}
+        return sLunarExtension;
+    }
+    
+    public static IEditEventViewExt getEditEventViewCommonExtension(Context context) {
+        if (sEditEventViewExt == null) {
+            sEditEventViewExt = new EditEventViewExt(context);
+            LogUtil.i(TAG, "get EditEventView plugin failed, use default");
+        }
+        return sEditEventViewExt;
+    }
+    /*[issue31045] add end by amw16,2015/11/03*/
+	// @}
 }
Index: vendor/mediatek/proprietary/packages/apps/Calendar/res/values/defaults.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/Calendar/res/values/defaults.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/Calendar/res/values/defaults.xml	(revision 1054)
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+/**
+ * Copyright (c) 2009, The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+-->
+<resources>
+<!-- OP01 default resource -->
+    <bool name="def_auto_time_op01">false</bool>
+    <bool name="def_auto_time_zone_op01">false</bool> 
+    <bool name="def_haptic_feedback_op01">false</bool>
+    <integer name="def_telephony_misc_feature_config_op01">7</integer>
+</resources>
Index: vendor/mediatek/proprietary/packages/apps/Calendar/res/values/lunar_const_arrays.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/Calendar/res/values/lunar_const_arrays.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/Calendar/res/values/lunar_const_arrays.xml	(revision 1054)
@@ -0,0 +1,1847 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <integer-array name="lunar_info">
+        <item>0x04bd8</item>
+        <item>0x04ae0</item>
+        <item>0x0a570</item>
+        <item>0x054d5</item>
+        <item>0x0d260</item>
+        <item>0x0d950</item>
+        <item>0x16554</item>
+        <item>0x056a0</item>
+        <item>0x09ad0</item>
+        <item>0x055d2</item>
+
+        <item>0x04ae0</item>
+        <item>0x0a5b6</item>
+        <item>0x0a4d0</item>
+        <item>0x0d250</item>
+        <item>0x1d255</item>
+        <item>0x0b540</item>
+        <item>0x0d6a0</item>
+        <item>0x0ada2</item>
+        <item>0x095b0</item>
+        <item>0x14977</item>
+
+        <item>0x04970</item>
+        <item>0x0a4b0</item>
+        <item>0x0b4b5</item>
+        <item>0x06a50</item>
+        <item>0x06d40</item>
+        <item>0x1ab54</item>
+        <item>0x02b60</item>
+        <item>0x09570</item>
+        <item>0x052f2</item>
+        <item>0x04970</item>
+
+        <item>0x06566</item>
+        <item>0x0d4a0</item>
+        <item>0x0ea50</item>
+        <item>0x06e95</item>
+        <item>0x05ad0</item>
+        <item>0x02b60</item>
+        <item>0x186e3</item>
+        <item>0x092e0</item>
+        <item>0x1c8d7</item>
+        <item>0x0c950</item>
+
+        <item>0x0d4a0</item>
+        <item>0x1d8a6</item>
+        <item>0x0b550</item>
+        <item>0x056a0</item>
+        <item>0x1a5b4</item>
+        <item>0x025d0</item>
+        <item>0x092d0</item>
+        <item>0x0d2b2</item>
+        <item>0x0a950</item>
+        <item>0x0b557</item>
+
+        <item>0x06ca0</item>
+        <item>0x0b550</item>
+        <item>0x15355</item>
+        <item>0x04da0</item>
+        <item>0x0a5d0</item>
+        <item>0x14573</item>
+        <item>0x052d0</item>
+        <item>0x0a9a8</item>
+        <item>0x0e950</item>
+        <item>0x06aa0</item>
+
+        <item>0x0aea6</item>
+        <item>0x0ab50</item>
+        <item>0x04b60</item>
+        <item>0x0aae4</item>
+        <item>0x0a570</item>
+        <item>0x05260</item>
+        <item>0x0f263</item>
+        <item>0x0d950</item>
+        <item>0x05b57</item>
+        <item>0x056a0</item>
+
+        <item>0x096d0</item>
+        <item>0x04dd5</item>
+        <item>0x04ad0</item>
+        <item>0x0a4d0</item>
+        <item>0x0d4d4</item>
+        <item>0x0d250</item>
+        <item>0x0d558</item>
+        <item>0x0b540</item>
+        <item>0x0b5a0</item>
+        <item>0x195a6</item>
+
+        <item>0x095b0</item>
+        <item>0x049b0</item>
+        <item>0x0a974</item>
+        <item>0x0a4b0</item>
+        <item>0x0b27a</item>
+        <item>0x06a50</item>
+        <item>0x06d40</item>
+        <item>0x0af46</item>
+        <item>0x0ab60</item>
+        <item>0x09570</item>
+
+        <item>0x04af5</item>
+        <item>0x04970</item>
+        <item>0x064b0</item>
+        <item>0x074a3</item>
+        <item>0x0ea50</item>
+        <item>0x06b58</item>
+        <item>0x055c0</item>
+        <item>0x0ab60</item>
+        <item>0x096d5</item>
+        <item>0x092e0</item>
+
+        <item>0x0c960</item>
+        <item>0x0d954</item>
+        <item>0x0d4a0</item>
+        <item>0x0da50</item>
+        <item>0x07552</item>
+        <item>0x056a0</item>
+        <item>0x0abb7</item>
+        <item>0x025d0</item>
+        <item>0x092d0</item>
+        <item>0x0cab5</item>
+
+        <item>0x0a950</item>
+        <item>0x0b4a0</item>
+        <item>0x0baa4</item>
+        <item>0x0ad50</item>
+        <item>0x055d9</item>
+        <item>0x04ba0</item>
+        <item>0x0a5b0</item>
+        <item>0x15176</item>
+        <item>0x052b0</item>
+        <item>0x0a930</item>
+
+        <item>0x07954</item>
+        <item>0x06aa0</item>
+        <item>0x0ad50</item>
+        <item>0x05b52</item>
+        <item>0x04b60</item>
+        <item>0x0a6e6</item>
+        <item>0x0a4e0</item>
+        <item>0x0d260</item>
+        <item>0x0ea65</item>
+        <item>0x0d530</item>
+
+        <item>0x05aa0</item>
+        <item>0x076a3</item>
+        <item>0x096d0</item>
+        <item>0x04bd7</item>
+        <item>0x04ad0</item>
+        <item>0x0a4d0</item>
+        <item>0x1d0b6</item>
+        <item>0x0d250</item>
+        <item>0x0d520</item>
+        <item>0x0dd45</item>
+
+        <item>0x0b5a0</item>
+        <item>0x056d0</item>
+        <item>0x055b2</item>
+        <item>0x049b0</item>
+        <item>0x0a577</item>
+        <item>0x0a4b0</item>
+        <item>0x0aa50</item>
+        <item>0x1b255</item>
+        <item>0x06d20</item>
+        <item>0x0ada0</item>
+    </integer-array>
+
+    <integer-array name="solar_term_days">
+        <item>6</item>
+        <item>20</item>
+        <item>4</item>
+        <item>19</item>
+        <item>6</item>
+        <item>21</item>
+        <item>5</item>
+        <item>20</item>
+        <item>6</item>
+        <item>21</item>
+        <item>6</item>
+        <item>22</item>
+        <item>7</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>9</item>
+        <item>24</item>
+        <item>8</item>
+        <item>23</item>
+        <item>7</item>
+        <item>22</item>
+
+        <item>6</item>
+        <item>21</item>
+        <item>4</item>
+        <item>19</item>
+        <item>6</item>
+        <item>21</item>
+        <item>5</item>
+        <item>21</item>
+        <item>6</item>
+        <item>22</item>
+        <item>6</item>
+        <item>22</item>
+        <item>8</item>
+        <item>23</item>
+        <item>8</item>
+        <item>24</item>
+        <item>8</item>
+        <item>24</item>
+        <item>9</item>
+        <item>24</item>
+        <item>8</item>
+        <item>23</item>
+        <item>8</item>
+        <item>22</item>
+
+        <item>6</item>
+        <item>21</item>
+        <item>5</item>
+        <item>19</item>
+        <item>5</item>
+        <item>20</item>
+        <item>5</item>
+        <item>20</item>
+        <item>5</item>
+        <item>21</item>
+        <item>5</item>
+        <item>21</item>
+        <item>7</item>
+        <item>23</item>
+        <item>7</item>
+        <item>23</item>
+        <item>7</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>7</item>
+        <item>22</item>
+        <item>7</item>
+        <item>22</item>
+
+        <item>5</item>
+        <item>20</item>
+        <item>4</item>
+        <item>19</item>
+        <item>6</item>
+        <item>21</item>
+        <item>5</item>
+        <item>20</item>
+        <item>6</item>
+        <item>21</item>
+        <item>6</item>
+        <item>21</item>
+        <item>7</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>7</item>
+        <item>22</item>
+        <item>7</item>
+        <item>22</item>
+
+        <item>6</item>
+        <item>20</item>
+        <item>4</item>
+        <item>19</item>
+        <item>6</item>
+        <item>21</item>
+        <item>5</item>
+        <item>20</item>
+        <item>6</item>
+        <item>21</item>
+        <item>6</item>
+        <item>22</item>
+        <item>7</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>9</item>
+        <item>24</item>
+        <item>8</item>
+        <item>22</item>
+        <item>7</item>
+        <item>22</item>
+
+        <item>6</item>
+        <item>20</item>
+        <item>4</item>
+        <item>19</item>
+        <item>6</item>
+        <item>21</item>
+        <item>5</item>
+        <item>21</item>
+        <item>6</item>
+        <item>22</item>
+        <item>6</item>
+        <item>22</item>
+        <item>8</item>
+        <item>23</item>
+        <item>8</item>
+        <item>24</item>
+        <item>8</item>
+        <item>24</item>
+        <item>9</item>
+        <item>24</item>
+        <item>8</item>
+        <item>23</item>
+        <item>8</item>
+        <item>22</item>
+
+        <item>6</item>
+        <item>21</item>
+        <item>4</item>
+        <item>19</item>
+        <item>5</item>
+        <item>20</item>
+        <item>4</item>
+        <item>20</item>
+        <item>5</item>
+        <item>21</item>
+        <item>5</item>
+        <item>21</item>
+        <item>7</item>
+        <item>23</item>
+        <item>7</item>
+        <item>23</item>
+        <item>7</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>7</item>
+        <item>22</item>
+        <item>7</item>
+        <item>22</item>
+
+        <item>5</item>
+        <item>20</item>
+        <item>4</item>
+        <item>19</item>
+        <item>5</item>
+        <item>21</item>
+        <item>5</item>
+        <item>20</item>
+        <item>5</item>
+        <item>21</item>
+        <item>6</item>
+        <item>21</item>
+        <item>7</item>
+        <item>23</item>
+        <item>7</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>7</item>
+        <item>22</item>
+        <item>7</item>
+        <item>22</item>
+
+        <item>5</item>
+        <item>20</item>
+        <item>4</item>
+        <item>19</item>
+        <item>6</item>
+        <item>21</item>
+        <item>5</item>
+        <item>20</item>
+        <item>6</item>
+        <item>21</item>
+        <item>6</item>
+        <item>22</item>
+        <item>7</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>8</item>
+        <item>24</item>
+        <item>8</item>
+        <item>23</item>
+        <item>7</item>
+        <item>22</item>
+
+        <item>6</item>
+        <item>20</item>
+        <item>4</item>
+        <item>19</item>
+        <item>6</item>
+        <item>21</item>
+        <item>5</item>
+        <item>21</item>
+        <item>6</item>
+        <item>22</item>
+        <item>6</item>
+        <item>22</item>
+        <item>8</item>
+        <item>23</item>
+        <item>8</item>
+        <item>24</item>
+        <item>8</item>
+        <item>23</item>
+        <item>9</item>
+        <item>24</item>
+        <item>8</item>
+        <item>23</item>
+        <item>8</item>
+        <item>22</item>
+
+        <item>6</item>
+        <item>21</item>
+        <item>4</item>
+        <item>19</item>
+        <item>5</item>
+        <item>20</item>
+        <item>4</item>
+        <item>20</item>
+        <item>5</item>
+        <item>21</item>
+        <item>5</item>
+        <item>21</item>
+        <item>7</item>
+        <item>23</item>
+        <item>7</item>
+        <item>23</item>
+        <item>7</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>7</item>
+        <item>22</item>
+        <item>7</item>
+        <item>21</item>
+
+        <item>5</item>
+        <item>20</item>
+        <item>4</item>
+        <item>19</item>
+        <item>5</item>
+        <item>21</item>
+        <item>5</item>
+        <item>20</item>
+        <item>5</item>
+        <item>21</item>
+        <item>6</item>
+        <item>21</item>
+        <item>7</item>
+        <item>23</item>
+        <item>7</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>7</item>
+        <item>22</item>
+        <item>7</item>
+        <item>22</item>
+
+        <item>5</item>
+        <item>20</item>
+        <item>4</item>
+        <item>19</item>
+        <item>6</item>
+        <item>21</item>
+        <item>5</item>
+        <item>20</item>
+        <item>6</item>
+        <item>21</item>
+        <item>6</item>
+        <item>22</item>
+        <item>7</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>8</item>
+        <item>24</item>
+        <item>8</item>
+        <item>22</item>
+        <item>7</item>
+        <item>22</item>
+
+        <item>6</item>
+        <item>20</item>
+        <item>4</item>
+        <item>19</item>
+        <item>6</item>
+        <item>21</item>
+        <item>5</item>
+        <item>20</item>
+        <item>6</item>
+        <item>21</item>
+        <item>6</item>
+        <item>22</item>
+        <item>8</item>
+        <item>23</item>
+        <item>8</item>
+        <item>24</item>
+        <item>8</item>
+        <item>23</item>
+        <item>9</item>
+        <item>24</item>
+        <item>8</item>
+        <item>23</item>
+        <item>8</item>
+        <item>22</item>
+
+        <item>6</item>
+        <item>21</item>
+        <item>4</item>
+        <item>19</item>
+        <item>5</item>
+        <item>20</item>
+        <item>4</item>
+        <item>20</item>
+        <item>5</item>
+        <item>21</item>
+        <item>5</item>
+        <item>21</item>
+        <item>7</item>
+        <item>23</item>
+        <item>7</item>
+        <item>23</item>
+        <item>7</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>7</item>
+        <item>22</item>
+        <item>7</item>
+        <item>21</item>
+
+        <item>5</item>
+        <item>20</item>
+        <item>4</item>
+        <item>19</item>
+        <item>5</item>
+        <item>20</item>
+        <item>5</item>
+        <item>20</item>
+        <item>5</item>
+        <item>21</item>
+        <item>6</item>
+        <item>21</item>
+        <item>7</item>
+        <item>23</item>
+        <item>7</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>7</item>
+        <item>22</item>
+        <item>7</item>
+        <item>22</item>
+
+        <item>5</item>
+        <item>20</item>
+        <item>4</item>
+        <item>19</item>
+        <item>6</item>
+        <item>21</item>
+        <item>5</item>
+        <item>20</item>
+        <item>6</item>
+        <item>21</item>
+        <item>6</item>
+        <item>22</item>
+        <item>7</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>8</item>
+        <item>24</item>
+        <item>8</item>
+        <item>22</item>
+        <item>7</item>
+        <item>22</item>
+
+        <item>6</item>
+        <item>20</item>
+        <item>4</item>
+        <item>19</item>
+        <item>6</item>
+        <item>21</item>
+        <item>5</item>
+        <item>20</item>
+        <item>6</item>
+        <item>21</item>
+        <item>6</item>
+        <item>22</item>
+        <item>8</item>
+        <item>23</item>
+        <item>8</item>
+        <item>24</item>
+        <item>8</item>
+        <item>23</item>
+        <item>9</item>
+        <item>24</item>
+        <item>8</item>
+        <item>23</item>
+        <item>7</item>
+        <item>22</item>
+
+        <item>6</item>
+        <item>21</item>
+        <item>4</item>
+        <item>19</item>
+        <item>5</item>
+        <item>20</item>
+        <item>4</item>
+        <item>20</item>
+        <item>5</item>
+        <item>21</item>
+        <item>5</item>
+        <item>21</item>
+        <item>7</item>
+        <item>23</item>
+        <item>7</item>
+        <item>23</item>
+        <item>7</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>7</item>
+        <item>22</item>
+        <item>7</item>
+        <item>21</item>
+
+        <item>5</item>
+        <item>20</item>
+        <item>4</item>
+        <item>18</item>
+        <item>5</item>
+        <item>20</item>
+        <item>5</item>
+        <item>20</item>
+        <item>5</item>
+        <item>21</item>
+        <item>6</item>
+        <item>21</item>
+        <item>7</item>
+        <item>23</item>
+        <item>7</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>7</item>
+        <item>22</item>
+        <item>7</item>
+        <item>22</item>
+
+        <item>5</item>
+        <item>20</item>
+        <item>4</item>
+        <item>19</item>
+        <item>6</item>
+        <item>21</item>
+        <item>5</item>
+        <item>20</item>
+        <item>6</item>
+        <item>21</item>
+        <item>6</item>
+        <item>21</item>
+        <item>7</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>8</item>
+        <item>24</item>
+        <item>8</item>
+        <item>22</item>
+        <item>7</item>
+        <item>22</item>
+
+        <item>6</item>
+        <item>20</item>
+        <item>4</item>
+        <item>19</item>
+        <item>6</item>
+        <item>21</item>
+        <item>5</item>
+        <item>20</item>
+        <item>6</item>
+        <item>21</item>
+        <item>6</item>
+        <item>22</item>
+        <item>7</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>9</item>
+        <item>24</item>
+        <item>8</item>
+        <item>23</item>
+        <item>7</item>
+        <item>22</item>
+
+        <item>6</item>
+        <item>21</item>
+        <item>4</item>
+        <item>19</item>
+        <item>5</item>
+        <item>20</item>
+        <item>4</item>
+        <item>20</item>
+        <item>5</item>
+        <item>21</item>
+        <item>5</item>
+        <item>21</item>
+        <item>7</item>
+        <item>22</item>
+        <item>7</item>
+        <item>23</item>
+        <item>7</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>7</item>
+        <item>22</item>
+        <item>7</item>
+        <item>21</item>
+
+        <item>5</item>
+        <item>20</item>
+        <item>4</item>
+        <item>18</item>
+        <item>5</item>
+        <item>20</item>
+        <item>5</item>
+        <item>20</item>
+        <item>5</item>
+        <item>21</item>
+        <item>6</item>
+        <item>21</item>
+        <item>7</item>
+        <item>23</item>
+        <item>7</item>
+        <item>23</item>
+        <item>7</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>7</item>
+        <item>22</item>
+        <item>7</item>
+        <item>22</item>
+
+        <item>5</item>
+        <item>20</item>
+        <item>4</item>
+        <item>19</item>
+        <item>6</item>
+        <item>21</item>
+        <item>5</item>
+        <item>20</item>
+        <item>6</item>
+        <item>21</item>
+        <item>6</item>
+        <item>22</item>
+        <item>7</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>7</item>
+        <item>22</item>
+        <item>7</item>
+        <item>22</item>
+
+        <item>6</item>
+        <item>20</item>
+        <item>4</item>
+        <item>19</item>
+        <item>6</item>
+        <item>21</item>
+        <item>5</item>
+        <item>20</item>
+        <item>6</item>
+        <item>21</item>
+        <item>6</item>
+        <item>22</item>
+        <item>7</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>9</item>
+        <item>24</item>
+        <item>8</item>
+        <item>23</item>
+        <item>7</item>
+        <item>22</item>
+
+        <item>6</item>
+        <item>21</item>
+        <item>4</item>
+        <item>19</item>
+        <item>5</item>
+        <item>20</item>
+        <item>4</item>
+        <item>20</item>
+        <item>5</item>
+        <item>21</item>
+        <item>5</item>
+        <item>21</item>
+        <item>7</item>
+        <item>22</item>
+        <item>7</item>
+        <item>23</item>
+        <item>7</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>7</item>
+        <item>22</item>
+        <item>7</item>
+        <item>21</item>
+
+        <item>5</item>
+        <item>20</item>
+        <item>4</item>
+        <item>18</item>
+        <item>5</item>
+        <item>20</item>
+        <item>5</item>
+        <item>20</item>
+        <item>5</item>
+        <item>21</item>
+        <item>6</item>
+        <item>21</item>
+        <item>7</item>
+        <item>23</item>
+        <item>7</item>
+        <item>23</item>
+        <item>7</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>7</item>
+        <item>22</item>
+        <item>7</item>
+        <item>22</item>
+
+        <item>5</item>
+        <item>20</item>
+        <item>4</item>
+        <item>19</item>
+        <item>6</item>
+        <item>21</item>
+        <item>5</item>
+        <item>20</item>
+        <item>6</item>
+        <item>21</item>
+        <item>6</item>
+        <item>21</item>
+        <item>7</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>7</item>
+        <item>22</item>
+        <item>7</item>
+        <item>22</item>
+
+        <item>6</item>
+        <item>20</item>
+        <item>4</item>
+        <item>19</item>
+        <item>6</item>
+        <item>21</item>
+        <item>5</item>
+        <item>20</item>
+        <item>6</item>
+        <item>21</item>
+        <item>6</item>
+        <item>22</item>
+        <item>7</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>9</item>
+        <item>24</item>
+        <item>8</item>
+        <item>23</item>
+        <item>7</item>
+        <item>22</item>
+
+        <item>6</item>
+        <item>21</item>
+        <item>4</item>
+        <item>19</item>
+        <item>5</item>
+        <item>20</item>
+        <item>4</item>
+        <item>20</item>
+        <item>5</item>
+        <item>21</item>
+        <item>5</item>
+        <item>21</item>
+        <item>7</item>
+        <item>22</item>
+        <item>7</item>
+        <item>23</item>
+        <item>7</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>7</item>
+        <item>22</item>
+        <item>7</item>
+        <item>21</item>
+
+        <item>5</item>
+        <item>20</item>
+        <item>4</item>
+        <item>18</item>
+        <item>5</item>
+        <item>20</item>
+        <item>5</item>
+        <item>20</item>
+        <item>5</item>
+        <item>21</item>
+        <item>5</item>
+        <item>21</item>
+        <item>7</item>
+        <item>23</item>
+        <item>7</item>
+        <item>23</item>
+        <item>7</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>7</item>
+        <item>22</item>
+        <item>7</item>
+        <item>22</item>
+
+        <item>5</item>
+        <item>20</item>
+        <item>4</item>
+        <item>19</item>
+        <item>6</item>
+        <item>21</item>
+        <item>5</item>
+        <item>20</item>
+        <item>6</item>
+        <item>21</item>
+        <item>6</item>
+        <item>21</item>
+        <item>7</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>7</item>
+        <item>22</item>
+        <item>7</item>
+        <item>22</item>
+
+        <item>6</item>
+        <item>20</item>
+        <item>4</item>
+        <item>19</item>
+        <item>6</item>
+        <item>21</item>
+        <item>5</item>
+        <item>20</item>
+        <item>6</item>
+        <item>21</item>
+        <item>6</item>
+        <item>22</item>
+        <item>7</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>9</item>
+        <item>24</item>
+        <item>8</item>
+        <item>23</item>
+        <item>7</item>
+        <item>22</item>
+
+        <item>6</item>
+        <item>21</item>
+        <item>4</item>
+        <item>19</item>
+        <item>5</item>
+        <item>20</item>
+        <item>4</item>
+        <item>20</item>
+        <item>5</item>
+        <item>21</item>
+        <item>5</item>
+        <item>21</item>
+        <item>7</item>
+        <item>22</item>
+        <item>7</item>
+        <item>23</item>
+        <item>7</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>7</item>
+        <item>22</item>
+        <item>7</item>
+        <item>21</item>
+
+        <item>5</item>
+        <item>20</item>
+        <item>4</item>
+        <item>18</item>
+        <item>5</item>
+        <item>20</item>
+        <item>5</item>
+        <item>20</item>
+        <item>5</item>
+        <item>21</item>
+        <item>5</item>
+        <item>21</item>
+        <item>7</item>
+        <item>23</item>
+        <item>7</item>
+        <item>23</item>
+        <item>7</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>7</item>
+        <item>22</item>
+        <item>7</item>
+        <item>22</item>
+
+        <item>5</item>
+        <item>20</item>
+        <item>4</item>
+        <item>19</item>
+        <item>6</item>
+        <item>21</item>
+        <item>5</item>
+        <item>20</item>
+        <item>6</item>
+        <item>21</item>
+        <item>6</item>
+        <item>21</item>
+        <item>7</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>7</item>
+        <item>22</item>
+        <item>7</item>
+        <item>22</item>
+
+        <item>6</item>
+        <item>20</item>
+        <item>4</item>
+        <item>19</item>
+        <item>6</item>
+        <item>21</item>
+        <item>5</item>
+        <item>20</item>
+        <item>6</item>
+        <item>21</item>
+        <item>6</item>
+        <item>22</item>
+        <item>7</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>9</item>
+        <item>24</item>
+        <item>8</item>
+        <item>22</item>
+        <item>7</item>
+        <item>22</item>
+
+        <item>6</item>
+        <item>20</item>
+        <item>4</item>
+        <item>19</item>
+        <item>5</item>
+        <item>20</item>
+        <item>4</item>
+        <item>20</item>
+        <item>5</item>
+        <item>21</item>
+        <item>5</item>
+        <item>21</item>
+        <item>7</item>
+        <item>22</item>
+        <item>7</item>
+        <item>23</item>
+        <item>7</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>7</item>
+        <item>22</item>
+        <item>7</item>
+        <item>21</item>
+
+        <item>5</item>
+        <item>20</item>
+        <item>3</item>
+        <item>18</item>
+        <item>5</item>
+        <item>20</item>
+        <item>4</item>
+        <item>20</item>
+        <item>5</item>
+        <item>21</item>
+        <item>5</item>
+        <item>21</item>
+        <item>7</item>
+        <item>23</item>
+        <item>7</item>
+        <item>23</item>
+        <item>7</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>7</item>
+        <item>22</item>
+        <item>7</item>
+        <item>22</item>
+
+        <item>5</item>
+        <item>20</item>
+        <item>4</item>
+        <item>19</item>
+        <item>6</item>
+        <item>21</item>
+        <item>5</item>
+        <item>20</item>
+        <item>5</item>
+        <item>21</item>
+        <item>6</item>
+        <item>21</item>
+        <item>7</item>
+        <item>23</item>
+        <item>7</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>7</item>
+        <item>22</item>
+        <item>7</item>
+        <item>22</item>
+
+        <item>6</item>
+        <item>20</item>
+        <item>4</item>
+        <item>19</item>
+        <item>6</item>
+        <item>21</item>
+        <item>5</item>
+        <item>20</item>
+        <item>6</item>
+        <item>21</item>
+        <item>6</item>
+        <item>22</item>
+        <item>7</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>8</item>
+        <item>24</item>
+        <item>8</item>
+        <item>23</item>
+        <item>7</item>
+        <item>22</item>
+
+        <item>6</item>
+        <item>21</item>
+        <item>4</item>
+        <item>19</item>
+        <item>5</item>
+        <item>20</item>
+        <item>4</item>
+        <item>20</item>
+        <item>5</item>
+        <item>20</item>
+        <item>5</item>
+        <item>21</item>
+        <item>7</item>
+        <item>22</item>
+        <item>7</item>
+        <item>23</item>
+        <item>7</item>
+        <item>22</item>
+        <item>8</item>
+        <item>23</item>
+        <item>7</item>
+        <item>22</item>
+        <item>7</item>
+        <item>21</item>
+
+        <item>5</item>
+        <item>20</item>
+        <item>4</item>
+        <item>18</item>
+        <item>5</item>
+        <item>20</item>
+        <item>4</item>
+        <item>20</item>
+        <item>5</item>
+        <item>21</item>
+        <item>5</item>
+        <item>21</item>
+        <item>7</item>
+        <item>22</item>
+        <item>7</item>
+        <item>23</item>
+        <item>7</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>7</item>
+        <item>22</item>
+        <item>7</item>
+        <item>22</item>
+
+        <item>5</item>
+        <item>20</item>
+        <item>4</item>
+        <item>19</item>
+        <item>6</item>
+        <item>21</item>
+        <item>5</item>
+        <item>20</item>
+        <item>5</item>
+        <item>21</item>
+        <item>6</item>
+        <item>21</item>
+        <item>7</item>
+        <item>23</item>
+        <item>7</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>7</item>
+        <item>22</item>
+        <item>7</item>
+        <item>22</item>
+
+        <item>6</item>
+        <item>20</item>
+        <item>4</item>
+        <item>19</item>
+        <item>6</item>
+        <item>21</item>
+        <item>5</item>
+        <item>20</item>
+        <item>6</item>
+        <item>21</item>
+        <item>6</item>
+        <item>22</item>
+        <item>7</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>8</item>
+        <item>24</item>
+        <item>8</item>
+        <item>22</item>
+        <item>7</item>
+        <item>22</item>
+
+        <item>6</item>
+        <item>20</item>
+        <item>4</item>
+        <item>19</item>
+        <item>5</item>
+        <item>20</item>
+        <item>4</item>
+        <item>19</item>
+        <item>5</item>
+        <item>20</item>
+        <item>5</item>
+        <item>21</item>
+        <item>7</item>
+        <item>22</item>
+        <item>7</item>
+        <item>23</item>
+        <item>7</item>
+        <item>22</item>
+        <item>8</item>
+        <item>23</item>
+        <item>7</item>
+        <item>22</item>
+        <item>7</item>
+        <item>21</item>
+
+        <item>5</item>
+        <item>20</item>
+        <item>3</item>
+        <item>18</item>
+        <item>5</item>
+        <item>20</item>
+        <item>4</item>
+        <item>20</item>
+        <item>5</item>
+        <item>21</item>
+        <item>5</item>
+        <item>21</item>
+        <item>7</item>
+        <item>23</item>
+        <item>7</item>
+        <item>23</item>
+        <item>7</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>7</item>
+        <item>22</item>
+        <item>7</item>
+        <item>21</item>
+
+        <item>5</item>
+        <item>20</item>
+        <item>4</item>
+        <item>18</item>
+        <item>5</item>
+        <item>20</item>
+        <item>5</item>
+        <item>20</item>
+        <item>5</item>
+        <item>21</item>
+        <item>6</item>
+        <item>21</item>
+        <item>7</item>
+        <item>23</item>
+        <item>7</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>7</item>
+        <item>22</item>
+        <item>7</item>
+        <item>22</item>
+
+        <item>5</item>
+        <item>20</item>
+        <item>4</item>
+        <item>19</item>
+        <item>6</item>
+        <item>21</item>
+        <item>5</item>
+        <item>20</item>
+        <item>6</item>
+        <item>21</item>
+        <item>6</item>
+        <item>21</item>
+        <item>7</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>8</item>
+        <item>24</item>
+        <item>8</item>
+        <item>22</item>
+        <item>7</item>
+        <item>22</item>
+
+        <item>6</item>
+        <item>20</item>
+        <item>4</item>
+        <item>19</item>
+        <item>5</item>
+        <item>20</item>
+        <item>4</item>
+        <item>19</item>
+        <item>5</item>
+        <item>20</item>
+        <item>5</item>
+        <item>21</item>
+        <item>7</item>
+        <item>22</item>
+        <item>7</item>
+        <item>23</item>
+        <item>7</item>
+        <item>22</item>
+        <item>8</item>
+        <item>23</item>
+        <item>7</item>
+        <item>22</item>
+        <item>6</item>
+        <item>21</item>
+
+        <item>5</item>
+        <item>20</item>
+        <item>3</item>
+        <item>18</item>
+        <item>5</item>
+        <item>20</item>
+        <item>4</item>
+        <item>20</item>
+        <item>5</item>
+        <item>21</item>
+        <item>5</item>
+        <item>21</item>
+        <item>7</item>
+        <item>22</item>
+        <item>7</item>
+        <item>23</item>
+        <item>7</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>7</item>
+        <item>22</item>
+        <item>7</item>
+        <item>21</item>
+
+        <item>5</item>
+        <item>20</item>
+        <item>4</item>
+        <item>18</item>
+        <item>5</item>
+        <item>20</item>
+        <item>5</item>
+        <item>20</item>
+        <item>5</item>
+        <item>21</item>
+        <item>6</item>
+        <item>21</item>
+        <item>7</item>
+        <item>23</item>
+        <item>7</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>7</item>
+        <item>22</item>
+        <item>7</item>
+        <item>22</item>
+
+        <item>5</item>
+        <item>20</item>
+        <item>4</item>
+        <item>19</item>
+        <item>6</item>
+        <item>21</item>
+        <item>5</item>
+        <item>20</item>
+        <item>6</item>
+        <item>21</item>
+        <item>6</item>
+        <item>22</item>
+        <item>7</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>7</item>
+        <item>22</item>
+        <item>7</item>
+        <item>22</item>
+
+        <item>6</item>
+        <item>20</item>
+        <item>4</item>
+        <item>19</item>
+        <item>5</item>
+        <item>20</item>
+        <item>4</item>
+        <item>19</item>
+        <item>5</item>
+        <item>20</item>
+        <item>5</item>
+        <item>21</item>
+        <item>6</item>
+        <item>22</item>
+        <item>7</item>
+        <item>23</item>
+        <item>7</item>
+        <item>22</item>
+        <item>8</item>
+        <item>23</item>
+        <item>7</item>
+        <item>22</item>
+        <item>6</item>
+        <item>21</item>
+
+        <item>5</item>
+        <item>20</item>
+        <item>3</item>
+        <item>18</item>
+        <item>5</item>
+        <item>20</item>
+        <item>4</item>
+        <item>20</item>
+        <item>5</item>
+        <item>21</item>
+        <item>5</item>
+        <item>21</item>
+        <item>7</item>
+        <item>22</item>
+        <item>7</item>
+        <item>23</item>
+        <item>7</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>7</item>
+        <item>22</item>
+        <item>7</item>
+        <item>21</item>
+
+        <item>5</item>
+        <item>20</item>
+        <item>4</item>
+        <item>18</item>
+        <item>5</item>
+        <item>20</item>
+        <item>5</item>
+        <item>20</item>
+        <item>5</item>
+        <item>21</item>
+        <item>6</item>
+        <item>21</item>
+        <item>7</item>
+        <item>23</item>
+        <item>7</item>
+        <item>23</item>
+        <item>7</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>7</item>
+        <item>22</item>
+        <item>7</item>
+        <item>22</item>
+
+        <item>5</item>
+        <item>20</item>
+        <item>4</item>
+        <item>19</item>
+        <item>6</item>
+        <item>21</item>
+        <item>5</item>
+        <item>20</item>
+        <item>6</item>
+        <item>21</item>
+        <item>6</item>
+        <item>21</item>
+        <item>7</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>7</item>
+        <item>22</item>
+        <item>7</item>
+        <item>22</item>
+
+        <item>6</item>
+        <item>20</item>
+        <item>4</item>
+        <item>19</item>
+        <item>5</item>
+        <item>20</item>
+        <item>4</item>
+        <item>19</item>
+        <item>5</item>
+        <item>20</item>
+        <item>5</item>
+        <item>21</item>
+        <item>6</item>
+        <item>22</item>
+        <item>7</item>
+        <item>22</item>
+        <item>7</item>
+        <item>22</item>
+        <item>8</item>
+        <item>23</item>
+        <item>7</item>
+        <item>22</item>
+        <item>6</item>
+        <item>21</item>
+
+        <item>5</item>
+        <item>20</item>
+        <item>3</item>
+        <item>18</item>
+        <item>5</item>
+        <item>20</item>
+        <item>4</item>
+        <item>20</item>
+        <item>5</item>
+        <item>21</item>
+        <item>5</item>
+        <item>21</item>
+        <item>7</item>
+        <item>22</item>
+        <item>7</item>
+        <item>23</item>
+        <item>7</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>7</item>
+        <item>22</item>
+        <item>7</item>
+        <item>21</item>
+
+        <item>5</item>
+        <item>20</item>
+        <item>4</item>
+        <item>18</item>
+        <item>5</item>
+        <item>20</item>
+        <item>5</item>
+        <item>20</item>
+        <item>5</item>
+        <item>21</item>
+        <item>6</item>
+        <item>21</item>
+        <item>7</item>
+        <item>23</item>
+        <item>7</item>
+        <item>23</item>
+        <item>7</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>7</item>
+        <item>22</item>
+        <item>7</item>
+        <item>22</item>
+
+        <item>5</item>
+        <item>20</item>
+        <item>4</item>
+        <item>19</item>
+        <item>6</item>
+        <item>21</item>
+        <item>5</item>
+        <item>20</item>
+        <item>6</item>
+        <item>21</item>
+        <item>6</item>
+        <item>21</item>
+        <item>7</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>7</item>
+        <item>22</item>
+        <item>7</item>
+        <item>22</item>
+
+        <item>6</item>
+        <item>20</item>
+        <item>4</item>
+        <item>19</item>
+        <item>5</item>
+        <item>20</item>
+        <item>4</item>
+        <item>19</item>
+        <item>5</item>
+        <item>20</item>
+        <item>5</item>
+        <item>21</item>
+        <item>6</item>
+        <item>22</item>
+        <item>7</item>
+        <item>22</item>
+        <item>7</item>
+        <item>22</item>
+        <item>8</item>
+        <item>23</item>
+        <item>7</item>
+        <item>22</item>
+        <item>6</item>
+        <item>21</item>
+
+        <item>5</item>
+        <item>20</item>
+        <item>3</item>
+        <item>18</item>
+        <item>5</item>
+        <item>20</item>
+        <item>4</item>
+        <item>20</item>
+        <item>5</item>
+        <item>21</item>
+        <item>5</item>
+        <item>21</item>
+        <item>7</item>
+        <item>22</item>
+        <item>7</item>
+        <item>23</item>
+        <item>7</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>7</item>
+        <item>22</item>
+        <item>7</item>
+        <item>21</item>
+
+        <item>5</item>
+        <item>20</item>
+        <item>4</item>
+        <item>18</item>
+        <item>5</item>
+        <item>20</item>
+        <item>5</item>
+        <item>20</item>
+        <item>5</item>
+        <item>21</item>
+        <item>5</item>
+        <item>21</item>
+        <item>7</item>
+        <item>23</item>
+        <item>7</item>
+        <item>23</item>
+        <item>7</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>7</item>
+        <item>22</item>
+        <item>7</item>
+        <item>22</item>
+
+        <item>5</item>
+        <item>20</item>
+        <item>4</item>
+        <item>19</item>
+        <item>6</item>
+        <item>21</item>
+        <item>5</item>
+        <item>20</item>
+        <item>5</item>
+        <item>21</item>
+        <item>6</item>
+        <item>21</item>
+        <item>7</item>
+        <item>23</item>
+        <item>7</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>8</item>
+        <item>23</item>
+        <item>7</item>
+        <item>22</item>
+        <item>7</item>
+        <item>22</item>
+
+        <item>6</item>
+        <item>20</item>
+        <item>4</item>
+        <item>19</item>
+        <item>5</item>
+        <item>20</item>
+        <item>4</item>
+        <item>19</item>
+        <item>5</item>
+        <item>20</item>
+        <item>5</item>
+        <item>21</item>
+        <item>6</item>
+        <item>22</item>
+        <item>7</item>
+        <item>22</item>
+        <item>7</item>
+        <item>22</item>
+        <item>8</item>
+        <item>23</item>
+        <item>7</item>
+        <item>22</item>
+        <item>6</item>
+        <item>21</item>
+
+    </integer-array>
+</resources>
\ No newline at end of file
Index: vendor/mediatek/proprietary/packages/apps/Calendar/res/values/calendar_strings.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/Calendar/res/values/calendar_strings.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/Calendar/res/values/calendar_strings.xml	(revision 1054)
@@ -0,0 +1,44 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+
+    <string name="lunar_fest_chunjie">春节</string>
+    <string name="lunar_fest_duanwu">端午节</string>
+    <string name="lunar_fest_zhongqiu">中秋节</string>
+    <string name="lunar_fest_yuandan">元旦</string>
+    <string name="lunar_fest_laodong">劳动节</string>
+    <string name="lunar_fest_guoqing">国庆节</string>
+    <string name="lunar_fest_yuanxiao">元宵节</string>
+    <string name="lunar_fest_qixi">七夕</string>
+    <string name="lunar_fest_chongyang">重阳节</string>
+    <string name="lunar_fest_qingnian">青年节</string>
+    <string name="lunar_fest_qingren">情人节</string>
+    <string name="lunar_fest_funv">妇女节</string>
+    <string name="lunar_fest_zhishu">植树节</string>
+    <string name="lunar_fest_yuren">愚人节</string>
+    <string name="lunar_fest_ertong">儿童节</string>
+    <string name="lunar_fest_jiandang">建党节</string>
+    <string name="lunar_fest_jianjun">建军节</string>
+    <string name="lunar_fest_jiaoshi">教师节</string>
+    <string name="lunar_fest_shengdan">圣诞节</string>
+
+    <string name="tc_lunar_fest_chunjie">春節</string>
+    <string name="tc_lunar_fest_duanwu">端午節</string>
+    <string name="tc_lunar_fest_zhongqiu">中秋節</string>
+
+    <string name="lunar_leap" translatable="false">闰</string>
+    <string name="tc_lunar_leap" translatable="false">閏</string>
+
+    <string name="lunar_tenth_day" translatable="false">初十</string>
+    <string name="lunar_twentieth_day" tanslatable="false">二十</string>
+    <string name="lunar_thirtieth_day" translatable="false">三十</string>
+    <string name="lunar_year" translatable="false">年</string>
+    <string name="lunar_month" translatable="false">月</string>
+    <string name="lunar_day" translatable="false">日</string>
+    <string name="lunar_info_fmt" translatable="false">"，%s"</string>
+    <string name="lunar_detail_info_fmt1" translatable="false">"，农历%s"</string>
+    <string name="lunar_detail_info_fmt2" formatted="false" translatable="false">"，﻿农历%s – %s"</string>
+
+    <string name="tc_lunar_detail_info_fmt1" translatable="false">"，農曆%s"</string>
+    <string name="tc_lunar_detail_info_fmt2" formatted="false" translatable="false">"，﻿農曆%s – %s"</string>
+
+</resources>
Index: vendor/mediatek/proprietary/packages/apps/Calendar/res/values/calendar_arrays.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/Calendar/res/values/calendar_arrays.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/Calendar/res/values/calendar_arrays.xml	(revision 1054)
@@ -0,0 +1,92 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string-array name="sc_solar_terms">
+        <item>小寒</item>
+        <item>大寒</item>
+        <item>立春</item>
+        <item>雨水</item>
+        <item>惊蛰</item>
+        <item>春分</item>
+        <item>清明</item>
+        <item>谷雨</item>
+        <item>立夏</item>
+        <item>小满</item>
+        <item>芒种</item>
+        <item>夏至</item>
+        <item>小暑</item>
+        <item>大暑</item>
+        <item>立秋</item>
+        <item>处暑</item>
+        <item>白露</item>
+        <item>秋分</item>
+        <item>寒露</item>
+        <item>霜降</item>
+        <item>立冬</item>
+        <item>小雪</item>
+        <item>大雪</item>
+        <item>冬至</item>
+    </string-array>
+    <string-array name="tc_solar_terms">
+        <item>小寒</item>
+        <item>大寒</item>
+        <item>立春</item>
+        <item>雨水</item>
+        <item>驚蟄</item>
+        <item>春分</item>
+        <item>清明</item>
+        <item>穀雨</item>
+        <item>立夏</item>
+        <item>小滿</item>
+        <item>芒種</item>
+        <item>夏至</item>
+        <item>小暑</item>
+        <item>大暑</item>
+        <item>立秋</item>
+        <item>處暑</item>
+        <item>白露</item>
+        <item>秋分</item>
+        <item>寒露</item>
+        <item>霜降</item>
+        <item>立冬</item>
+        <item>小雪</item>
+        <item>大雪</item>
+        <item>冬至</item>
+    </string-array>
+    <string-array name="month_number_array"
+        translatable="false">
+        <item>一</item>
+        <item>二</item>
+        <item>三</item>
+        <item>四</item>
+        <item>五</item>
+        <item>六</item>
+        <item>七</item>
+        <item>八</item>
+        <item>九</item>
+        <item>十</item>
+        <item>十一</item>
+        <item>十二</item>
+    </string-array>
+    <string-array name="lunar_month_array"
+        translatable="false">
+        <item>一月</item>
+        <item>二月</item>
+        <item>三月</item>
+        <item>四月</item>
+        <item>五月</item>
+        <item>六月</item>
+        <item>七月</item>
+        <item>八月</item>
+        <item>九月</item>
+        <item>十月</item>
+        <item>十一</item>
+        <item>十二</item>
+    </string-array>
+    <string-array name="tens_prefix_array"
+        translatable="false">
+        <item>初</item>
+        <item>十</item>
+        <item>廿</item>
+        <item>卅</item>
+    </string-array>
+</resources>
Index: vendor/mediatek/proprietary/packages/apps/Calendar/res/values/operator_record_params.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/Calendar/res/values/operator_record_params.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/Calendar/res/values/operator_record_params.xml	(revision 1054)
@@ -0,0 +1,76 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--* Copyright Statement:
+ *
+ * This software/firmware and related documentation ("MediaTek Software") are
+ * protected under relevant copyright laws. The information contained herein
+ * is confidential and proprietary to MediaTek Inc. and/or its licensors.
+ * Without the prior written permission of MediaTek inc. and/or its licensors,
+ * any reproduction, modification, use or disclosure of MediaTek Software,
+ * and information contained herein, in whole or in part, shall be strictly prohibited.
+ *
+ * MediaTek Inc. (C) 2013. All rights reserved.
+ *
+ * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
+ * THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
+ * RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO RECEIVER ON
+ * AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
+ * NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
+ * SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
+ * SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
+ * THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
+ * THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
+ * CONTAINED IN MEDIATEK SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK
+ * SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
+ * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND
+ * CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
+ * AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
+ * OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
+ * MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
+ *
+ * The following software/firmware and/or related documentation ("MediaTek Software")
+ * have been modified by MediaTek Inc. All revisions are subject to any receiver's
+ * applicable license agreements with MediaTek Inc.
+ */  -->
+<resources>
+    <!-- High voice qulity related pramameters -->
+    <integer-array name="operator_high_params">
+        <!-- Encode type is MediaRecorder.AudioEncoder.AAC -->
+        <item >3</item>
+        <!-- Audio channel is stereo  -->
+        <item >2</item>
+        <!-- Encode bitrate -->
+        <item >128000</item>
+        <!-- Sample rate -->
+        <item >48000</item>
+        <!-- Recording file outputFormat is MediaRecorder.OutputFormat.THREE_GPP -->
+        <item >1</item>
+    </integer-array>
+    <!-- Standard voice qulity related pramameters -->
+    <integer-array name="operator_standard_params">
+        <!-- Encode type is MediaRecorder.AudioEncoder.AAC -->
+        <item >3</item>
+        <!-- Audio channel is stereo  -->
+        <item >2</item>
+        <!-- Encode bitrate -->
+        <item >48000</item>
+        <!-- Sample rate -->
+        <item >32000</item>
+        <!-- Recording file outputFormat is MediaRecorder.OutputFormat.THREE_GPP -->
+        <item >1</item>
+    </integer-array>
+    <!-- Low voice qulity related pramameters -->
+    <integer-array name="operator_low_params">
+        <!-- Encode type is MediaRecorder.AudioEncoder.AMR_NB -->
+        <item >1</item>
+        <!-- Audio channel is mono  -->
+        <item >1</item>
+        <!-- Encode bitrate -->
+        <item >12200</item>
+        <!-- Sample rate -->
+        <item >8000</item>
+        <!-- Recording file outputFormat is MediaRecorder.OutputFormat.AMR_NB -->
+        <item >3</item>
+    </integer-array>
+</resources>
\ No newline at end of file
