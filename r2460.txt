Index: bootable/recovery/recovery.cpp
===================================================================
--- bootable/recovery/recovery.cpp	(revision 2459)
+++ bootable/recovery/recovery.cpp	(revision 2460)
@@ -118,9 +118,6 @@
 static const char *CACHE_ROOT = "/cache";
 static const char *DATA_ROOT = "/data";
 static const char *SDCARD_ROOT = "/sdcard";
-static const char *JRD_FOTA_RESULT_FILE = "/cache/recovery/last_fota.status"; //TCL FOTA
-//For AID_SYSTEM, AID_***
-#include "private/android_filesystem_config.h"
 static const char *TEMPORARY_LOG_FILE = "/tmp/recovery.log";
 static const char *TEMPORARY_INSTALL_FILE = "/tmp/last_install";
 static const char *LAST_KMSG_FILE = "/cache/recovery/last_kmsg";
@@ -1597,163 +1594,6 @@
     return __android_log_pmsg_file_write(logId, prio, name.c_str(), buf, len);
 }
 
-
-// TCL
-#include "minzip/SysUtil.h"
-#include "minzip/Zip.h"
-
-#define SCRIPT_NAME "META-INF/com/google/android/updater-script"
-
-static char *fota_incr_comment = "# ---- start making changes here ----";
-
-enum
-{
-    FOTA_UN,
-    FOTA_INCR,
-    FOTA_FULL,
-};
-
-static int kind_of_update = FOTA_UN;
-void get_update_kind(const char *update_package)
-{
-    int k = FOTA_UN;
-    ZipArchive za;
-    int err;
-
-    MemMapping map;
-    if (sysMapFile(update_package, &map) != 0) {
-	    LOGE("failed to map file %s\n", update_package);
-	    return;
-    }
-
-//    err = mzOpenZipArchive(update_package, &za);
-    err = mzOpenZipArchive(map.addr,map.length,&za);
-    if (err != 0) {
-//        fprintf(stderr, "Can't open %s\n(%s)\n", update_package, err != -1 ? strerror(err) : "bad");
-        fprintf(stderr, "Can't open %s\n(%s)\n",map.addr, err != -1 ? strerror(err) : "bad");
-        return;
-    }
-
-    const ZipEntry* script_entry = mzFindZipEntry(&za, SCRIPT_NAME);
-    if (script_entry == NULL) {
-        fprintf(stderr, "Can't find %s\n", SCRIPT_NAME);
-        return;
-    }
-
-    char* script = (char *)malloc(script_entry->uncompLen+1);
-    if (!mzReadZipEntry(&za, script_entry, script, script_entry->uncompLen)) {
-        fprintf(stderr, "Can't read %s\n", SCRIPT_NAME);
-        return;
-    }
-    script[script_entry->uncompLen] = '\0';
-
-    char* p;
-    for (p = script; *p != '\0'; p++) {
-        if (*p == '#') {
-            if (strcmp(p, fota_incr_comment) >= 0) {
-                k = FOTA_INCR;
-                break;
-            }
-        }
-    }
-
-    // not find incremental ota comment, it's full ota
-    if (*p == '\0')
-        k = FOTA_FULL;
-
-    free(script);
-    mzCloseZipArchive(&za);
-
-    kind_of_update = k;
-}
-
-static void write_file(const char *file_name, char *result)
-{
-    char  dir_name[256];
-
-    ensure_path_mounted(file_name);
-
-    strcpy(dir_name, file_name);
-    char *p = strrchr(dir_name, '/');
-    *p = 0;
-
-    fprintf(stdout, "dir_name = %s\n", dir_name);
-    mode_t proc_mask = umask(0);
-
-    if (opendir(dir_name) == NULL)  {
-        fprintf(stdout, "dir_name = '%s' does not exist, create it.\n", dir_name);
-        if (mkdir(dir_name, 0775))  {
-            fprintf(stdout, "can not create '%s' : %s\n", dir_name, strerror(errno));
-            umask(proc_mask);
-            return;
-        }
-        chown(dir_name, AID_SYSTEM, AID_SYSTEM);
-    }
-
-    int result_fd = open(file_name, O_RDWR | O_CREAT, 0666);
-    fchown(result_fd, AID_SYSTEM, AID_SYSTEM);
-
-    if (result_fd < 0) {
-        fprintf(stdout, "cannot open '%s' for output : %s\n", file_name, strerror(errno));
-        umask(proc_mask);
-        return;
-    }
-
-    //LOG_INFO("[%s] %s %d\n", __func__, file_name, result);
-
-    char buf[256];
-    strcpy(buf, "package install result:");
-    strcat(buf, result);
-    if (kind_of_update == FOTA_FULL) {
-        strcat(buf, "package install kind:full package\n");
-    }
-    write(result_fd, buf, strlen(buf));
-    close(result_fd);
-    umask(proc_mask);
-}
-
-static char *install_result = NULL;
-static void set_install_result(char *s)
-{
-    install_result = s;
-}
-
-static void write_result(int reason)
-{
-    switch (reason) {
-    case INSTALL_NO_SDCARD:
-        set_install_result("No SD-Card.\n");
-        break;
-    case INSTALL_NO_UPDATE_PACKAGE:
-        set_install_result("Can not find update.zip.\n");
-        break;
-    case INSTALL_NO_KEY:
-        set_install_result("Failed to load keys\n");
-        break;
-    case INSTALL_SIGNATURE_ERROR:
-        set_install_result("Signature verification failed\n");
-        break;
-    case INSTALL_CORRUPT:
-        set_install_result("The update.zip is corrupted\n");
-        break;
-    case INSTALL_FILE_SYSTEM_ERROR:
-        set_install_result("Can't create/copy file\n");
-        break;
-    case INSTALL_ERROR:
-        set_install_result("Update.zip is not correct\n");
-        break;
-    }
-
-    if (reason == INSTALL_SUCCESS) {
-        set_install_result("INSTALL SUCCESS\n");
-    }
-
-    fprintf(stdout, "[TCL]package install result:%s", install_result);
-
-    write_file(JRD_FOTA_RESULT_FILE, install_result);
-}
-// TCL end
-
 int main(int argc, char **argv) {
     // Take last pmsg contents and rewrite it to the current pmsg session.
     static const char filter[] = "recovery/";
@@ -2022,18 +1862,8 @@
     } else if (mt_main_backup_restore(status)) {
     } else if (!just_exit) {
         status = INSTALL_NONE;  // No command specified
-        ui->SetBackground(RecoveryUI::NO_COMMAND);
-        // http://b/17489952
-        // If this is an eng or userdebug build, automatically turn on the
-        // text display if no command is specified.
-        if (is_ro_debuggable()) {
-            ui->ShowText(true);
-        }
+        ui->ShowText(true);
     }
-    //TCL
-        get_update_kind(update_package);
-        write_result(status);
-//TCL end
 
     mt_main_write_result(status, update_package);
     if (!sideload_auto_reboot && (status == INSTALL_ERROR || status == INSTALL_CORRUPT)) {
@@ -2075,4 +1905,4 @@
     }
     // Should be unreachable.
     return EXIT_SUCCESS;
-}
+}
\ No newline at end of file
