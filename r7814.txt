Index: frameworks/base/cmds/suid/suid
===================================================================
--- frameworks/base/cmds/suid/suid	(revision 0)
+++ frameworks/base/cmds/suid/suid	(revision 7814)
@@ -0,0 +1,3 @@
+base=/system
+export CLASSPATH=$base/framework/suid.jar
+exec app_process $base/bin com.android.commands.suid.Suid "$@"
Index: frameworks/base/cmds/suid/Android.mk
===================================================================
--- frameworks/base/cmds/suid/Android.mk	(revision 0)
+++ frameworks/base/cmds/suid/Android.mk	(revision 7814)
@@ -0,0 +1,15 @@
+# Copyright 2008 The Android Open Source Project
+#
+LOCAL_PATH:= $(call my-dir)
+
+include $(CLEAR_VARS)
+LOCAL_SRC_FILES := $(call all-subdir-java-files)
+LOCAL_MODULE := suid
+include $(BUILD_JAVA_LIBRARY)
+
+include $(CLEAR_VARS)
+LOCAL_MODULE := suid
+LOCAL_SRC_FILES := suid
+LOCAL_MODULE_CLASS := EXECUTABLES
+LOCAL_MODULE_TAGS := optional
+include $(BUILD_PREBUILT)
Index: frameworks/base/cmds/suid/src/com/android/commands/suid/NvRAMAgent.java
===================================================================
--- frameworks/base/cmds/suid/src/com/android/commands/suid/NvRAMAgent.java	(revision 0)
+++ frameworks/base/cmds/suid/src/com/android/commands/suid/NvRAMAgent.java	(revision 7814)
@@ -0,0 +1,250 @@
+/* Copyright Statement:
+ *
+ * This software/firmware and related documentation ("MediaTek Software") are
+ * protected under relevant copyright laws. The information contained herein is
+ * confidential and proprietary to MediaTek Inc. and/or its licensors. Without
+ * the prior written permission of MediaTek inc. and/or its licensors, any
+ * reproduction, modification, use or disclosure of MediaTek Software, and
+ * information contained herein, in whole or in part, shall be strictly
+ * prohibited.
+ *
+ * MediaTek Inc. (C) 2010. All rights reserved.
+ *
+ * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
+ * THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
+ * RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO RECEIVER
+ * ON AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL
+ * WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR
+ * NONINFRINGEMENT. NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH
+ * RESPECT TO THE SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY,
+ * INCORPORATED IN, OR SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES
+ * TO LOOK ONLY TO SUCH THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO.
+ * RECEIVER EXPRESSLY ACKNOWLEDGES THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO
+ * OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES CONTAINED IN MEDIATEK
+ * SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK SOFTWARE
+ * RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
+ * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S
+ * ENTIRE AND CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE
+ * RELEASED HEREUNDER WILL BE, AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE
+ * MEDIATEK SOFTWARE AT ISSUE, OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE
+ * CHARGE PAID BY RECEIVER TO MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
+ *
+ * The following software/firmware and/or related documentation ("MediaTek
+ * Software") have been modified by MediaTek Inc. All revisions are subject to
+ * any receiver's applicable license agreements with MediaTek Inc.
+ */
+
+/*
+ * This file is auto-generated.  DO NOT MODIFY.
+ * Original file: NvRAMAgent.aidl
+ */
+
+package com.android.commands.suid;
+
+import android.os.IBinder;
+
+public interface NvRAMAgent extends android.os.IInterface {
+    /** Local-side IPC implementation stub class. */
+    public abstract static class Stub extends android.os.Binder implements NvRAMAgent {
+        private static final java.lang.String DESCRIPTOR = "NvRAMAgent";
+        /** Construct the stub at attach it to the interface. */
+        public Stub() {
+            this.attachInterface(this, DESCRIPTOR);
+        }
+        /**
+         * Cast an IBinder object into an NvRAMAgent interface,
+         * generating a proxy if needed.
+         */
+        public static NvRAMAgent asInterface(android.os.IBinder obj) {
+            if ((obj == null)) {
+                return null;
+            }
+            android.os.IInterface iin = (android.os.IInterface)obj.queryLocalInterface(DESCRIPTOR);
+            if (((iin != null) && (iin instanceof NvRAMAgent))) {
+                return ((NvRAMAgent)iin);
+            }
+            return new NvRAMAgent.Stub.Proxy(obj);
+        }
+        public android.os.IBinder asBinder() {
+            return this;
+        }
+        public boolean onTransact(int code, android.os.Parcel data, android.os.Parcel reply, int flags)
+                throws android.os.RemoteException {
+            switch (code) {
+                case INTERFACE_TRANSACTION: {
+                    reply.writeString(DESCRIPTOR);
+                    return true;
+                }
+                case TRANSACTION_readFile: {
+                    data.enforceInterface(DESCRIPTOR);
+                    int _arg0;
+                    _arg0 = data.readInt();
+                    byte[] _result = this.readFile(_arg0);
+                    reply.writeNoException();
+                    reply.writeByteArray(_result);
+                    return true;
+                }
+                case TRANSACTION_writeFile: {
+                    data.enforceInterface(DESCRIPTOR);
+                    int _arg0;
+                    _arg0 = data.readInt();
+                    byte[] _arg1;
+                    _arg1 = data.createByteArray();
+                    int _result = this.writeFile(_arg0, _arg1);
+                    reply.writeNoException();
+                    reply.writeInt(_result);
+                    return true;
+                }
+				case TRANSACTION_readFileByName:{
+					data.enforceInterface(DESCRIPTOR);
+					//System.out.println("NVRAM TRANSACTION_readFile="+data.readString());
+					String _arg0;
+					_arg0 = data.readString();
+					byte[] _result = this.readFileByName(_arg0);
+					reply.writeNoException();
+					reply.writeByteArray(_result);
+					return true;
+				      }
+				
+				case TRANSACTION_writeFileByName:{
+					data.enforceInterface(DESCRIPTOR);
+						String _arg0;
+					_arg0 = data.readString();
+					
+					
+					//System.out.println("NVRAM TRANSACTION_writeFile="+data.readString());
+					byte[] _arg1;
+					_arg1 = data.createByteArray();
+					int _result = this.writeFileByName(_arg0, _arg1);
+					reply.writeNoException();
+					reply.writeInt(_result);
+					return true;
+				}
+			}
+			
+			return super.onTransact(code, data, reply, flags);
+		}
+		
+		private static class Proxy implements NvRAMAgent
+		{
+			private android.os.IBinder mRemote;
+			Proxy(android.os.IBinder remote)
+			{
+				mRemote = remote;
+			}
+			
+			public android.os.IBinder asBinder()
+			{
+				return mRemote;
+			}
+			
+			public java.lang.String getInterfaceDescriptor()
+			{
+				return DESCRIPTOR;
+			}
+			
+			public byte[] readFile(int file_lid) throws android.os.RemoteException
+			{
+				android.os.Parcel _data = android.os.Parcel.obtain();
+				android.os.Parcel _reply = android.os.Parcel.obtain();
+				byte[] _result;
+				try {
+					_data.writeInterfaceToken(DESCRIPTOR);
+					_data.writeInt(file_lid);
+					mRemote.transact(Stub.TRANSACTION_readFile, _data, _reply, 0);
+					_reply.readException();
+					_result = _reply.createByteArray();
+				}
+				
+				finally {
+					_reply.recycle();
+					_data.recycle();
+				}
+				return _result;
+			}
+		
+			public int writeFile(int file_lid, byte[] buff) throws android.os.RemoteException
+			{
+				android.os.Parcel _data = android.os.Parcel.obtain();
+				android.os.Parcel _reply = android.os.Parcel.obtain();
+				int _result;
+				try {
+					_data.writeInterfaceToken(DESCRIPTOR);
+					_data.writeInt(file_lid);
+					_data.writeByteArray(buff);
+					mRemote.transact(Stub.TRANSACTION_writeFile, _data, _reply, 0);
+					_reply.readException();
+					_result = _reply.readInt();
+				}
+				finally {
+					_reply.recycle();
+					_data.recycle();
+				}
+				return _result;
+			}
+			
+			public byte[] readFileByName(String filename) throws android.os.RemoteException
+			{
+				android.os.Parcel _data = android.os.Parcel.obtain();
+				android.os.Parcel _reply = android.os.Parcel.obtain();
+				byte[] _result;
+
+				try 
+				{
+					_data.writeInterfaceToken(DESCRIPTOR);
+
+					_data.writeString(filename);
+					mRemote.transact(Stub.TRANSACTION_readFileByName, _data, _reply, 0);
+					_reply.readException();
+					_result = _reply.createByteArray();
+				}
+				finally 
+				{
+					_reply.recycle();
+					_data.recycle();
+				}
+				return _result;
+			}
+			public int writeFileByName(String filename, byte[] buff) throws android.os.RemoteException
+			{
+				android.os.Parcel _data = android.os.Parcel.obtain();
+				android.os.Parcel _reply = android.os.Parcel.obtain();
+				int _result;
+
+				
+					
+				//System.out.println("writeFile"+filename);	
+					
+				try 
+				{
+					_data.writeInterfaceToken(DESCRIPTOR);
+					_data.writeString(filename);
+
+					_data.writeByteArray(buff);
+					mRemote.transact(Stub.TRANSACTION_writeFileByName, _data, _reply, 0);
+					_reply.readException();
+					_result = _reply.readInt();
+				}
+				finally 
+				{
+					_reply.recycle();
+					_data.recycle();
+				}
+				return _result;
+			}
+			
+			
+			
+		}
+static final int TRANSACTION_readFile = (IBinder.FIRST_CALL_TRANSACTION + 0);
+static final int TRANSACTION_writeFile = (IBinder.FIRST_CALL_TRANSACTION + 1);
+static final int TRANSACTION_readFileByName = (IBinder.FIRST_CALL_TRANSACTION + 2);
+static final int TRANSACTION_writeFileByName = (IBinder.FIRST_CALL_TRANSACTION + 3);
+
+	}
+public byte[] readFile(int file_lid) throws android.os.RemoteException;
+public int writeFile(int file_lid, byte[] buff) throws android.os.RemoteException;
+public byte[] readFileByName(String filename) throws android.os.RemoteException;
+public int writeFileByName(String filename, byte[] buff) throws android.os.RemoteException;
+}
Index: frameworks/base/cmds/suid/src/com/android/commands/suid/Suid.java
===================================================================
--- frameworks/base/cmds/suid/src/com/android/commands/suid/Suid.java	(revision 0)
+++ frameworks/base/cmds/suid/src/com/android/commands/suid/Suid.java	(revision 7814)
@@ -0,0 +1,72 @@
+package com.android.commands.suid;
+
+import android.os.IBinder;
+import android.os.ServiceManager;
+import com.android.internal.os.BaseCommand;
+import java.io.PrintStream;
+import java.io.PrintWriter;
+import android.util.Log;
+
+public class Suid extends BaseCommand {
+	private static final String PRODUCT_INFO_NVRAM_PATH = "/data/nvram/APCFG/APRDEB/PRODUCT_INFO";
+
+	public static void main(String[] args) {
+		(new Suid()).run(args);
+
+	}
+
+	@Override
+	public void onRun() throws Exception {
+        Log.d("suid", "suid, begin");
+        String op = nextArgRequired();
+        Log.d("suid", "suid, op = " + op);
+        if (op.equals("dummytestfortechain")) {//for techain test
+    		byte[] buff = null;
+    		IBinder binder = ServiceManager.getService("NvRAMAgent");
+    		NvRAMAgent agent = NvRAMAgent.Stub.asInterface(binder);
+    		try {
+    			buff = agent.readFileByName(PRODUCT_INFO_NVRAM_PATH);
+    		} catch (Exception e) {
+    			e.printStackTrace();
+    			return;
+    		}
+
+    		String temp = "";
+    		for (int i = 401; i <= 432; i++) {
+    			temp += String.valueOf((char) buff[i]);
+    		}
+    		System.out.println("get suid = " + temp);
+    	} else if (op.length() == 32) {
+    		byte[] buff = null;
+    		IBinder binder = ServiceManager.getService("NvRAMAgent");
+    		NvRAMAgent agent = NvRAMAgent.Stub.asInterface(binder);
+    		try {
+    			buff = agent.readFileByName(PRODUCT_INFO_NVRAM_PATH);
+    		} catch (Exception e) {
+    			e.printStackTrace();
+    			return;
+    		}
+
+    		for (int i = 0; i < 32; i++) {
+    		    buff[401 + i] = (byte)op.charAt(i);
+    		}
+
+    		try {
+    			agent.writeFileByName(PRODUCT_INFO_NVRAM_PATH, buff);
+    		} catch (Exception e) {
+    			e.printStackTrace();
+    			return;
+    		}
+
+    		System.out.println("successfully");
+    	} else {
+    	    System.out.println("please enter 32 bits of suid");
+    	}
+    	Log.d("suid", "suid, end");
+	}
+
+	@Override
+	public void onShowUsage(PrintStream out) {
+        System.out.println("please enter suid");
+	}
+}
Index: frameworks/base/cmds/suid/MODULE_LICENSE_APACHE2
===================================================================
Index: frameworks/base/cmds/suid
===================================================================
--- frameworks/base/cmds/suid	(revision 0)
+++ frameworks/base/cmds/suid	(revision 7814)

Property changes on: frameworks/base/cmds/suid
___________________________________________________________________
Added: svn:mergeinfo
   Merged /L05A/CMCC_Version/ALPS-MP-N1.MP18-V1_AUS6739_66_N1_INHOUSE/frameworks/base/cmds/suid:r4446-4454,4676-4677,6842-6866,6964-7001,7185-7194
   Merged /L05A/Trunk/ALPS-MP-N1.MP18-OF.P53_K39V1_INHOUSE/frameworks/base/cmds/suid:r472,514,634-635,650,707,710,717,722,733,809,825,827,836,849,861,882-883,899,901,915,920-922,926,931,958-959,977,981,984,1019,1022
   Merged /L05A/Trunk/ALPS-MP-N1.MP18-OF.P33_K39V1_INHOUSE/frameworks/base/cmds/suid:r116,136,153,300
   Merged /mtk_release_version/MT6739/ALPS-MP-N1.MP18-V1_AUS6739_66_N1_INHOUSE/frameworks/base/cmds/suid:r1965-1973,2148-2395
