Index: frameworks/base/core/res/res/values/symbols.xml
===================================================================
--- frameworks/base/core/res/res/values/symbols.xml	(revision 2214)
+++ frameworks/base/core/res/res/values/symbols.xml	(revision 2215)
@@ -1563,6 +1563,7 @@
   <java-symbol type="id" name="title_container" />
   <java-symbol type="id" name="two" />
   <java-symbol type="id" name="zero" />
+  <java-symbol type="id" name="lv" />
   <java-symbol type="integer" name="config_carDockRotation" />
   <java-symbol type="integer" name="config_defaultUiModeType" />
   <java-symbol type="integer" name="config_deskDockRotation" />
@@ -1573,6 +1574,7 @@
   <java-symbol type="integer" name="config_longPressOnHomeBehavior" />
   <java-symbol type="layout" name="global_actions_item" />
   <java-symbol type="layout" name="global_actions_restart" />
+  <java-symbol type="layout" name="content_dialog" />
   <java-symbol type="layout" name="global_actions_silent_mode" />
   <java-symbol type="layout" name="recent_apps_dialog" />
   <java-symbol type="layout" name="screen_action_bar" />
@@ -2734,7 +2736,9 @@
   <java-symbol type="string" name="reboot" />
   <java-symbol type="string" name="reboot_confirm" />
   <java-symbol type="string" name="battery_countdown" />
-  
-  
 
+  <java-symbol type="id" name="line" />
+  <java-symbol type="id" name="power_dialog_info" />
+  <java-symbol type="id" name="content_dialog_line" />
+
 </resources>
Index: frameworks/base/core/res/res/values/config.xml
===================================================================
--- frameworks/base/core/res/res/values/config.xml	(revision 2214)
+++ frameworks/base/core/res/res/values/config.xml	(revision 2215)
@@ -2173,11 +2173,11 @@
          "restart" = restart device
          -->
     <string-array translatable="false" name="config_globalActionsList">
+        <item>restart</item>
         <item>power</item>
-        <item>restart</item>
         <item>bugreport</item>
         <item>users</item>
-		<item>airplane</item>
+        <item>airplane</item>
     </string-array>
 
     <!-- Number of milliseconds to hold a wake lock to ensure that drawing is fully
Index: frameworks/base/core/res/res/layout/global_actions_item.xml
===================================================================
--- frameworks/base/core/res/res/layout/global_actions_item.xml	(revision 2214)
+++ frameworks/base/core/res/res/layout/global_actions_item.xml	(revision 2215)
@@ -17,42 +17,53 @@
 <!-- RelativeLayouts have an issue enforcing minimum heights, so just
      work around this for now with LinearLayouts. -->
 <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="match_parent"
+    android:layout_width="wrap_content"
     android:layout_height="wrap_content"
-    android:minHeight="?android:attr/listPreferredItemHeight"
     android:orientation="horizontal"
-    android:paddingStart="8dip"
-    android:paddingEnd="16dip"
-    android:paddingTop="6dip"
-    android:paddingBottom="6dip"
     >
-    <ImageView android:id="@+id/icon"
-        android:layout_width="56dp"
-        android:layout_height="56dp"
-        android:layout_gravity="center"
-        android:layout_marginEnd="8dip"
-        android:scaleType="center"/>
 
     <LinearLayout
         android:orientation="vertical"
-        android:layout_width="match_parent"
+        android:layout_width="wrap_content"
         android:layout_height="wrap_content"
-        android:layout_gravity="center_vertical"
-        android:layout_marginEnd="8dip"
-        >
-        <TextView android:id="@+id/message"
+        android:layout_gravity="center_vertical">
+
+        <ImageView android:id="@+id/icon"
+            android:layout_width="110dp"
+            android:layout_height="50dp"
+            android:layout_gravity="center"
+            android:scaleType="center"/>
+
+        <LinearLayout
+            android:orientation="vertical"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
-            android:layout_gravity="top|start"
-            android:gravity="center_vertical|start"
-            android:textAppearance="?android:attr/textAppearanceLarge"
-            />
-        <TextView android:id="@+id/status"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="bottom|start"
-            android:minHeight="26dp"
-            android:textAppearance="?android:attr/textAppearanceSmall"
-            />
+            android:layout_gravity="center_horizontal"
+            >
+            <TextView android:id="@+id/message"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_marginRight="10dp"
+                android:layout_marginLeft="10dp"
+                android:gravity="center_horizontal"
+                android:textSize="15sp"
+                />
+            <TextView android:id="@+id/status"
+                android:layout_width="110dp"
+                android:layout_height="wrap_content"
+                android:gravity="bottom|center_horizontal"
+                android:minHeight="26dp"
+                android:textSize="11sp"
+                android:visibility="gone"
+                />
+        </LinearLayout>
+
     </LinearLayout>
+
+    <View
+        android:id="@+id/line"
+        android:layout_width="1dp"
+        android:layout_height="match_parent"
+        android:layout_marginTop="10dp"
+        android:background="#C2CCD2"/>
 </LinearLayout>
\ No newline at end of file
Index: frameworks/base/core/res/res/layout/content_dialog.xml
===================================================================
--- frameworks/base/core/res/res/layout/content_dialog.xml	(revision 0)
+++ frameworks/base/core/res/res/layout/content_dialog.xml	(revision 2215)
@@ -0,0 +1,42 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2008 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<!-- RelativeLayouts have an issue enforcing minimum heights, so just
+     work around this for now with LinearLayouts. -->
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:orientation="vertical" android:layout_width="match_parent"
+    android:layout_height="match_parent">
+
+    <com.android.server.policy.HorizontalListView
+        android:id="@+id/lv"
+        android:layout_width="match_parent"
+        android:layout_height="80dp"/>
+
+    <View
+        android:id="@+id/content_dialog_line"
+        android:layout_width="match_parent"
+        android:layout_height="5dp"
+        android:background="#009686"/>
+
+    <TextView
+        android:id="@+id/power_dialog_info"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_marginRight="10dp"
+        android:layout_marginLeft="10dp"
+
+        android:textSize="15sp"/>
+</LinearLayout>
Index: frameworks/base/services/core/java/com/android/server/policy/HorizontalListView.java
===================================================================
--- frameworks/base/services/core/java/com/android/server/policy/HorizontalListView.java	(revision 0)
+++ frameworks/base/services/core/java/com/android/server/policy/HorizontalListView.java	(revision 2215)
@@ -0,0 +1,386 @@
+package com.android.server.policy;
+
+import android.content.Context;
+import android.database.DataSetObserver;
+import android.graphics.Rect;
+import android.util.AttributeSet;
+import android.view.GestureDetector;
+import android.view.GestureDetector.OnGestureListener;
+import android.view.MotionEvent;
+import android.view.View;
+import android.widget.AdapterView;
+import android.widget.ListAdapter;
+import android.widget.Scroller;
+
+import java.util.LinkedList;
+import java.util.Queue;
+
+/*
+ * HorizontalListView.java v1.5
+ *
+ *
+ * The MIT License
+ * Copyright (c) 2011 Paul Soucy (paul@dev-smart.com)
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+ * THE SOFTWARE.
+ *
+ */
+
+public class HorizontalListView extends AdapterView<ListAdapter> {
+
+    public boolean mAlwaysOverrideTouch = true;
+    protected ListAdapter mAdapter;
+    private int mLeftViewIndex = -1;
+    private int mRightViewIndex = 0;
+    protected int mCurrentX;
+    protected int mNextX;
+    private int mMaxX = Integer.MAX_VALUE;
+    private int mDisplayOffset = 0;
+    protected Scroller mScroller;
+    private GestureDetector mGesture;
+    private Queue<View> mRemovedViewQueue = new LinkedList<View>();
+    private OnItemSelectedListener mOnItemSelected;
+    private OnItemClickListener mOnItemClicked;
+    private OnItemLongClickListener mOnItemLongClicked;
+    private boolean mDataChanged = false;
+
+
+    public HorizontalListView(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        initView();
+    }
+
+    private synchronized void initView() {
+        mLeftViewIndex = -1;
+        mRightViewIndex = 0;
+        mDisplayOffset = 0;
+        mCurrentX = 0;
+        mNextX = 0;
+        mMaxX = Integer.MAX_VALUE;
+        mScroller = new Scroller(getContext());
+        //mGesture = new GestureDetector(getContext(), mOnGesture);
+    }
+
+    @Override
+    public void setOnItemSelectedListener(AdapterView.OnItemSelectedListener listener) {
+        mOnItemSelected = listener;
+    }
+
+    @Override
+    public void setOnItemClickListener(AdapterView.OnItemClickListener listener) {
+        mOnItemClicked = listener;
+    }
+
+    @Override
+    public void setOnItemLongClickListener(AdapterView.OnItemLongClickListener listener) {
+        mOnItemLongClicked = listener;
+    }
+
+    private DataSetObserver mDataObserver = new DataSetObserver() {
+
+        @Override
+        public void onChanged() {
+            synchronized (HorizontalListView.this) {
+                mDataChanged = true;
+            }
+            invalidate();
+            requestLayout();
+        }
+
+        @Override
+        public void onInvalidated() {
+            reset();
+            invalidate();
+            requestLayout();
+        }
+
+    };
+
+    @Override
+    public ListAdapter getAdapter() {
+        return mAdapter;
+    }
+
+    @Override
+    public View getSelectedView() {
+        //TODO: implement
+        return null;
+    }
+
+    @Override
+    public void setAdapter(ListAdapter adapter) {
+        if (mAdapter != null) {
+            mAdapter.unregisterDataSetObserver(mDataObserver);
+        }
+        mAdapter = adapter;
+        mAdapter.registerDataSetObserver(mDataObserver);
+        reset();
+    }
+
+    private synchronized void reset() {
+        initView();
+        removeAllViewsInLayout();
+        requestLayout();
+    }
+
+    @Override
+    public void setSelection(int position) {
+        //TODO: implement
+    }
+
+    private void addAndMeasureChild(final View child, int viewPos) {
+        LayoutParams params = child.getLayoutParams();
+        if (params == null) {
+            params = new LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT);
+        }
+
+        addViewInLayout(child, viewPos, params, true);
+        child.measure(MeasureSpec.makeMeasureSpec(getWidth(), MeasureSpec.AT_MOST),
+                MeasureSpec.makeMeasureSpec(getHeight(), MeasureSpec.AT_MOST));
+    }
+
+
+    @Override
+    protected synchronized void onLayout(boolean changed, int left, int top, int right, int bottom) {
+        super.onLayout(changed, left, top, right, bottom);
+
+        if (mAdapter == null) {
+            return;
+        }
+
+        if (mDataChanged) {
+            int oldCurrentX = mCurrentX;
+            initView();
+            removeAllViewsInLayout();
+            mNextX = oldCurrentX;
+            mDataChanged = false;
+        }
+
+        if (mScroller.computeScrollOffset()) {
+            int scrollx = mScroller.getCurrX();
+            mNextX = scrollx;
+        }
+
+        if (mNextX <= 0) {
+            mNextX = 0;
+            mScroller.forceFinished(true);
+        }
+        if (mNextX >= mMaxX) {
+            mNextX = mMaxX;
+            mScroller.forceFinished(true);
+        }
+
+        int dx = mCurrentX - mNextX;
+
+        removeNonVisibleItems(dx);
+        fillList(dx);
+        positionItems(dx);
+
+        mCurrentX = mNextX;
+
+        if (!mScroller.isFinished()) {
+            post(new Runnable() {
+                @Override
+                public void run() {
+                    requestLayout();
+                }
+            });
+
+        }
+    }
+
+    private void fillList(final int dx) {
+        int edge = 0;
+        View child = getChildAt(getChildCount() - 1);
+        if (child != null) {
+            edge = child.getRight();
+        }
+        fillListRight(edge, dx);
+
+        edge = 0;
+        child = getChildAt(0);
+        if (child != null) {
+            edge = child.getLeft();
+        }
+        fillListLeft(edge, dx);
+
+
+    }
+
+    private void fillListRight(int rightEdge, final int dx) {
+        while (rightEdge + dx < getWidth() && mRightViewIndex < mAdapter.getCount()) {
+
+            View child = mAdapter.getView(mRightViewIndex, mRemovedViewQueue.poll(), this);
+            addAndMeasureChild(child, -1);
+            rightEdge += child.getMeasuredWidth();
+
+            if (mRightViewIndex == mAdapter.getCount() - 1) {
+                mMaxX = mCurrentX + rightEdge - getWidth();
+            }
+
+            if (mMaxX < 0) {
+                mMaxX = 0;
+            }
+            mRightViewIndex++;
+        }
+
+    }
+
+    private void fillListLeft(int leftEdge, final int dx) {
+        while (leftEdge + dx > 0 && mLeftViewIndex >= 0) {
+            View child = mAdapter.getView(mLeftViewIndex, mRemovedViewQueue.poll(), this);
+            addAndMeasureChild(child, 0);
+            leftEdge -= child.getMeasuredWidth();
+            mLeftViewIndex--;
+            mDisplayOffset -= child.getMeasuredWidth();
+        }
+    }
+
+    private void removeNonVisibleItems(final int dx) {
+        View child = getChildAt(0);
+        while (child != null && child.getRight() + dx <= 0) {
+            mDisplayOffset += child.getMeasuredWidth();
+            mRemovedViewQueue.offer(child);
+            removeViewInLayout(child);
+            mLeftViewIndex++;
+            child = getChildAt(0);
+
+        }
+
+        child = getChildAt(getChildCount() - 1);
+        while (child != null && child.getLeft() + dx >= getWidth()) {
+            mRemovedViewQueue.offer(child);
+            removeViewInLayout(child);
+            mRightViewIndex--;
+            child = getChildAt(getChildCount() - 1);
+        }
+    }
+
+    private void positionItems(final int dx) {
+        if (getChildCount() > 0) {
+            mDisplayOffset += dx;
+            int left = mDisplayOffset;
+            for (int i = 0; i < getChildCount(); i++) {
+                View child = getChildAt(i);
+                int childWidth = child.getMeasuredWidth();
+                child.layout(left, 0, left + childWidth, child.getMeasuredHeight());
+                left += childWidth + child.getPaddingRight();
+            }
+        }
+    }
+
+    public synchronized void scrollTo(int x) {
+        mScroller.startScroll(mNextX, 0, x - mNextX, 0);
+        requestLayout();
+    }
+
+    @Override
+    public boolean dispatchTouchEvent(MotionEvent ev) {
+        boolean handled = super.dispatchTouchEvent(ev);
+        //handled |= mGesture.onTouchEvent(ev);
+        return handled;
+    }
+
+    protected boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX,
+                              float velocityY) {
+        synchronized (HorizontalListView.this) {
+            mScroller.fling(mNextX, 0, (int) -velocityX, 0, 0, mMaxX, 0, 0);
+        }
+        requestLayout();
+
+        return true;
+    }
+
+    protected boolean onDown(MotionEvent e) {
+        mScroller.forceFinished(true);
+        return true;
+    }
+
+    private OnGestureListener mOnGesture = new GestureDetector.SimpleOnGestureListener() {
+
+        @Override
+        public boolean onDown(MotionEvent e) {
+            return HorizontalListView.this.onDown(e);
+        }
+
+        @Override
+        public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX,
+                               float velocityY) {
+            return HorizontalListView.this.onFling(e1, e2, velocityX, velocityY);
+        }
+
+        @Override
+        public boolean onScroll(MotionEvent e1, MotionEvent e2,
+                                float distanceX, float distanceY) {
+            synchronized (HorizontalListView.this) {
+                mNextX += (int) distanceX;
+            }
+            requestLayout();
+
+            return true;
+        }
+
+        @Override
+        public boolean onSingleTapConfirmed(MotionEvent e) {
+            for (int i = 0; i < getChildCount(); i++) {
+                View child = getChildAt(i);
+                if (isEventWithinView(e, child)) {
+                    if (mOnItemClicked != null) {
+                        mOnItemClicked.onItemClick(HorizontalListView.this, child, mLeftViewIndex + 1 + i, mAdapter.getItemId(mLeftViewIndex + 1 + i));
+                    }
+                    if (mOnItemSelected != null) {
+                        mOnItemSelected.onItemSelected(HorizontalListView.this, child, mLeftViewIndex + 1 + i, mAdapter.getItemId(mLeftViewIndex + 1 + i));
+                    }
+                    break;
+                }
+
+            }
+            return true;
+        }
+
+        @Override
+        public void onLongPress(MotionEvent e) {
+            int childCount = getChildCount();
+            for (int i = 0; i < childCount; i++) {
+                View child = getChildAt(i);
+                if (isEventWithinView(e, child)) {
+                    if (mOnItemLongClicked != null) {
+                        mOnItemLongClicked.onItemLongClick(HorizontalListView.this, child, mLeftViewIndex + 1 + i, mAdapter.getItemId(mLeftViewIndex + 1 + i));
+                    }
+                    break;
+                }
+
+            }
+        }
+
+        private boolean isEventWithinView(MotionEvent e, View child) {
+            Rect viewRect = new Rect();
+            int[] childPosition = new int[2];
+            child.getLocationOnScreen(childPosition);
+            int left = childPosition[0];
+            int right = left + child.getWidth();
+            int top = childPosition[1];
+            int bottom = top + child.getHeight();
+            viewRect.set(left, top, right, bottom);
+            return viewRect.contains((int) e.getRawX(), (int) e.getRawY());
+        }
+    };
+}
+
+
Index: frameworks/base/services/core/java/com/android/server/policy/GlobalActions.java
===================================================================
--- frameworks/base/services/core/java/com/android/server/policy/GlobalActions.java	(revision 2214)
+++ frameworks/base/services/core/java/com/android/server/policy/GlobalActions.java	(revision 2215)
@@ -80,6 +80,7 @@
 
 import java.util.ArrayList;
 import java.util.List;
+import android.view.Window;
 
 /**
  * Helper to show the global actions dialog.  Each item is an {@link Action} that
@@ -205,7 +206,10 @@
             ((SinglePressAction) mAdapter.getItem(0)).onPress();
         } else {
             WindowManager.LayoutParams attrs = mDialog.getWindow().getAttributes();
-            attrs.setTitle("GlobalActions");
+            //attrs.setTitle("GlobalActions");
+            attrs.x = 0;
+            attrs.y = 380;
+            attrs.width = 720;
             mDialog.getWindow().setAttributes(attrs);
             mDialog.show();
             mDialog.getWindow().getDecorView().setSystemUiVisibility(View.STATUS_BAR_DISABLE_EXPAND);
@@ -324,9 +328,18 @@
 
         GlobalActionsDialog dialog = new GlobalActionsDialog(mContext, params);
         dialog.setCanceledOnTouchOutside(false); // Handled by the custom class.
+        //dialog.getListView().setItemsCanFocus(true);
+        //dialog.getListView().setLongClickable(true);
+        dialog.getListView().setOnItemClickListener(new AdapterView.OnItemClickListener() {
+            @Override
+            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
 
-        dialog.getListView().setItemsCanFocus(true);
-        dialog.getListView().setLongClickable(true);
+                if (!(mAdapter.getItem(position) instanceof SilentModeTriStateAction)) {
+                    dialog.dismiss();
+                }
+                mAdapter.getItem(position).onPress();
+            }
+        });
         dialog.getListView().setOnItemLongClickListener(
                 new AdapterView.OnItemLongClickListener() {
                     @Override
@@ -339,6 +352,7 @@
                         return false;
                     }
         });
+        /*
 		LayoutInflater inflater=LayoutInflater.from(mContext);
 		View v = inflater.inflate(R.layout.global_actions_restart, null, false);
 		TextView view=(TextView)v.findViewById(R.id.status);
@@ -345,7 +359,7 @@
 		view.setText(R.string.global_action_enforce_restart);
 		dialog.getListView().addFooterView(v,null,false);
         dialog.getWindow().setType(WindowManager.LayoutParams.TYPE_KEYGUARD_DIALOG);
-
+*/
         dialog.setOnDismissListener(this);
 
         return dialog;
@@ -959,7 +973,7 @@
 
             if (statusView != null) {
                 statusView.setText(on ? mEnabledStatusMessageResId : mDisabledStatusMessageResId);
-                statusView.setVisibility(View.VISIBLE);
+                //statusView.setVisibility(View.VISIBLE);
                 statusView.setEnabled(enabled);
             }
             v.setEnabled(enabled);
@@ -1203,8 +1217,9 @@
     private static final class GlobalActionsDialog extends Dialog implements DialogInterface {
         private final Context mContext;
         private final int mWindowTouchSlop;
-        private final AlertController mAlert;
+        //private final AlertController mAlert;
         private final MyAdapter mAdapter;
+        private HorizontalListView mHorizontalListView;
 
         private EnableAccessibilityController mEnableAccessibilityController;
 
@@ -1212,14 +1227,28 @@
         private boolean mCancelOnUp;
 
         public GlobalActionsDialog(Context context, AlertParams params) {
-            super(context, getDialogTheme(context));
+            //super(context, getDialogTheme(context));
+            super(context);
             mContext = getContext();
-            mAlert = AlertController.create(mContext, this, getWindow());
+            //mAlert = AlertController.create(mContext, this, getWindow());
             mAdapter = (MyAdapter) params.mAdapter;
             mWindowTouchSlop = ViewConfiguration.get(context).getScaledWindowTouchSlop();
-            params.apply(mAlert);
+            //params.apply(mAlert);
+            //View contentView = View.inflate(mContext, R.layout.content_dialog, null);
+            getWindow().requestFeature(Window.FEATURE_NO_TITLE);
+            initView();
         }
 
+        private void initView() {
+            View contentView = View.inflate(mContext, R.layout.content_dialog, null);
+            mHorizontalListView = (HorizontalListView) contentView.findViewById(R.id.lv);
+            setContentView(contentView);
+            mHorizontalListView.setAdapter(mAdapter);
+
+            TextView view = (TextView)contentView.findViewById(R.id.power_dialog_info);
+            view.setText("\n" + mContext.getResources().getString(R.string.global_action_enforce_restart) + "\n");
+        }
+
         private static int getDialogTheme(Context context) {
             TypedValue outValue = new TypedValue();
             context.getTheme().resolveAttribute(com.android.internal.R.attr.alertDialogTheme,
@@ -1299,14 +1328,14 @@
             return super.dispatchTouchEvent(event);
         }
 
-        public ListView getListView() {
-            return mAlert.getListView();
+        public HorizontalListView getListView() {
+            return mHorizontalListView;
         }
 
         @Override
         protected void onCreate(Bundle savedInstanceState) {
             super.onCreate(savedInstanceState);
-            mAlert.installContent();
+            //mAlert.installContent();
         }
 
         @Override
@@ -1325,17 +1354,17 @@
 
         @Override
         public boolean onKeyDown(int keyCode, KeyEvent event) {
-            if (mAlert.onKeyDown(keyCode, event)) {
-                return true;
-            }
+//            if (mAlert.onKeyDown(keyCode, event)) {
+  //              return true;
+    //        }
             return super.onKeyDown(keyCode, event);
         }
 
         @Override
         public boolean onKeyUp(int keyCode, KeyEvent event) {
-            if (mAlert.onKeyUp(keyCode, event)) {
-                return true;
-            }
+           // if (mAlert.onKeyUp(keyCode, event)) {
+           //     return true;
+           // }
             return super.onKeyUp(keyCode, event);
         }
     }
