Index: frameworks/base/packages/Keyguard/src/com/face/scanner/FaceService.java
===================================================================
--- frameworks/base/packages/Keyguard/src/com/face/scanner/FaceService.java	(revision 6005)
+++ frameworks/base/packages/Keyguard/src/com/face/scanner/FaceService.java	(revision 6006)
@@ -96,6 +96,9 @@
 import com.android.keyguard.R;
 import com.android.internal.policy.IFaceOverTimeCallback;
 
+import com.android.keyguard.KeyguardUpdateMonitor;
+import android.content.SharedPreferences;
+
 public class FaceService extends Service {
     static final String TAG = "FaceService";
     private WindowManager mWindowManager;
@@ -167,6 +170,10 @@
     private boolean mBrightnessChanged = false;
     private static final float BRIGHT_MIN = 0.12f;
 
+    private static final String PREF_NAME = "user_pref";
+    private static final String KEY_AUTH_SUCCESS_BEFORE = "auth_success_before";
+    private KeyguardUpdateMonitor mKeyguardUpdateMonitor;
+    private SharedPreferences mPref;
 
     @Override
     public void onCreate() {
@@ -193,7 +200,9 @@
 
         createView();
         initUI();
-        handler.postDelayed(runnable, 2500); 
+        handler.postDelayed(runnable, 2500);
+        mKeyguardUpdateMonitor = KeyguardUpdateMonitor.getInstance(getApplicationContext());
+        mPref = getApplicationContext().getSharedPreferences(PREF_NAME, Context.MODE_PRIVATE);
     }
 
     @Override
@@ -434,8 +443,23 @@
     private void unlock() {
         try {
             if (mKeyguardService != null) {
-                mKeyguardService.keyguardDone(false,true);
-				Log.d(TAG, "---unlock sucess------");
+                boolean isAuthSuccessBefore = mPref.getBoolean(KEY_AUTH_SUCCESS_BEFORE, false);
+                boolean faceAuthLockscreenOngoing =
+                    mKeyguardUpdateMonitor.isFaceAuthLockscreenOngoing();
+
+                if (isAuthSuccessBefore && !faceAuthLockscreenOngoing) {
+                    mKeyguardService.keyguardDone(false,true);
+                    Log.d(TAG, "---unlock sucess------");
+                } else {
+                    mKeyguardService.dismiss(false);
+                    mKeyguardUpdateMonitor.setFaceAuthLockscreenOngoing(true);
+
+                    Editor editor = mPref.edit();
+                    editor.putBoolean(KEY_AUTH_SUCCESS_BEFORE, true);
+                    editor.commit();
+
+                    Log.d(TAG, "---unlock password is needed------");
+                }
             }
         } catch (Exception e) {
             Log.d(TAG, "---unlock failed---");
Index: frameworks/base/packages/Keyguard/src/com/android/keyguard/KeyguardUpdateMonitor.java
===================================================================
--- frameworks/base/packages/Keyguard/src/com/android/keyguard/KeyguardUpdateMonitor.java	(revision 6005)
+++ frameworks/base/packages/Keyguard/src/com/android/keyguard/KeyguardUpdateMonitor.java	(revision 6006)
@@ -371,6 +371,16 @@
         return sCurrentUser;
     }
 
+    private boolean mFaceAuthLockscreenOngoing;
+
+    public void setFaceAuthLockscreenOngoing(boolean ongoing) {
+        mFaceAuthLockscreenOngoing = ongoing;
+    }
+
+    public boolean isFaceAuthLockscreenOngoing() {
+        return mFaceAuthLockscreenOngoing;
+    }
+
     @Override
     public void onTrustChanged(boolean enabled, int userId, int flags) {
         mUserHasTrust.put(userId, enabled);
Index: frameworks/base/packages/SystemUI/src/com/android/systemui/keyguard/KeyguardViewMediator.java
===================================================================
--- frameworks/base/packages/SystemUI/src/com/android/systemui/keyguard/KeyguardViewMediator.java	(revision 6005)
+++ frameworks/base/packages/SystemUI/src/com/android/systemui/keyguard/KeyguardViewMediator.java	(revision 6006)
@@ -687,6 +687,7 @@
                 Log.d(TAG, "keyguard gone, mKeyguardDisplayManager is null");
             }
             mVoiceWakeupManager.notifyKeyguardIsGone();
+            mUpdateMonitor.setFaceAuthLockscreenOngoing(false);
             Trace.endSection();
         }
 
@@ -731,6 +732,7 @@
             int currentUser = ActivityManager.getCurrentUser();
             boolean trust = mTrustManager.isTrustUsuallyManaged(currentUser);
             boolean fingerprint = mUpdateMonitor.isUnlockWithFingerprintPossible(currentUser);
+            boolean faceAuthLockscreenOngoing = mUpdateMonitor.isFaceAuthLockscreenOngoing();
             boolean any = trust || fingerprint;
             KeyguardUpdateMonitor.StrongAuthTracker strongAuthTracker =
                     mUpdateMonitor.getStrongAuthTracker();
@@ -746,6 +748,8 @@
                 return KeyguardSecurityView.PROMPT_REASON_USER_REQUEST;
             } else if (any && (strongAuth & STRONG_AUTH_REQUIRED_AFTER_LOCKOUT) != 0) {
                 return KeyguardSecurityView.PROMPT_REASON_AFTER_LOCKOUT;
+            } else if (faceAuthLockscreenOngoing) {
+                return KeyguardSecurityView.PROMPT_REASON_TIMEOUT;
             }
             return KeyguardSecurityView.PROMPT_REASON_NONE;
         }
