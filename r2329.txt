Index: packages/apps/Settings/AndroidManifest.xml
===================================================================
--- packages/apps/Settings/AndroidManifest.xml	(revision 2328)
+++ packages/apps/Settings/AndroidManifest.xml	(revision 2329)
@@ -3488,6 +3488,25 @@
                <action android:name="com.android.settings.RESET_FACTORY"/>
            </intent-filter>
 		</receiver>
+        <activity
+            android:name=".faceunlock.FaceUnlockMainActivity"
+            android:screenOrientation="portrait" />
+        <activity 
+            android:name=".faceunlock.FaceUnlockScanActivity"
+            android:screenOrientation="portrait" />	
+
+		<activity
+            android:name=".faceunlock.FaceUnlockSecuritySystemActivity"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".faceunlock.FaceUnlockPerceptionContentActivity"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".faceunlock.FaceUnlockAppLockMainActivity"
+            android:screenOrientation="portrait" />
+		<activity
+            android:name=".faceunlock.FaceUnlockGuideActivity"
+            android:screenOrientation="portrait" />
         <receiver android:name="com.android.settings.PrefChangeBroadcast"
 			  android:enabled="true"
 			  exported = "true">

Property changes on: packages/apps/Settings/AndroidManifest.xml
___________________________________________________________________
Modified: svn:mergeinfo
   Merged /L05A/Trunk/ALPS-MP-N1.MP18-V1_AUS6739_66_N1_INHOUSE/packages/apps/Settings/AndroidManifest.xml:r2195-2198
Index: packages/apps/Settings/src/com/android/settings/faceunlock/FaceUnlockPerceptionContentActivity.java
===================================================================
--- packages/apps/Settings/src/com/android/settings/faceunlock/FaceUnlockPerceptionContentActivity.java	(revision 0)
+++ packages/apps/Settings/src/com/android/settings/faceunlock/FaceUnlockPerceptionContentActivity.java	(revision 2329)
@@ -0,0 +1,90 @@
+package com.android.settings.faceunlock;
+
+import android.app.ActionBar;
+import android.app.Activity;
+import android.os.Bundle;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.widget.ImageButton;
+import android.widget.TextView;
+import com.android.settings.R;
+import android.widget.ImageView;
+
+public class FaceUnlockPerceptionContentActivity extends Activity {
+
+	private static final int INIT_ACTIONBAR_NUM = -1;
+	private static final int ACTIONBAR_BACK_NUM = 1;
+	private ActionBar myactionbar;
+	private TextView myactionbar_title, perception_titles;
+	private ImageButton myactionbar_back, myactionbar_add;
+	private ImageView mFace_percetion_content_icon;
+
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+		setContentView(R.layout.face_public_action_line_top);
+		initViews();
+		initCustomActionBar();
+	}
+
+	private void initViews() {
+		// TODO Auto-generated method stub
+		mFace_percetion_content_icon = (ImageView) findViewById(R.id.public_icons_layout_icon);
+		perception_titles = (TextView) findViewById(R.id.public_title);
+		perception_titles.setTextColor(getResources().getColor(R.color.ic_default_title_text_color));
+		perception_titles.setTextSize(14);
+		initTextContent();
+	}
+
+	private void initTextContent() {
+		// TODO Auto-generated method stub
+		//mFace_percetion_content_icon.setBackgroundDrawable(getResources().getDrawable(R.drawable.face_percetion_content_icon));//zxp
+		perception_titles.setText(getResources().getString(R.string.perception_content_text_title));
+	}
+
+	private boolean initCustomActionBar() {
+		myactionbar = getActionBar();
+		if (myactionbar == null) {
+			return false;
+		} else {
+			myactionbar.setDisplayOptions(ActionBar.DISPLAY_SHOW_CUSTOM);
+			myactionbar.setDisplayShowCustomEnabled(true);
+			myactionbar.setCustomView(R.layout.my_actionbar_style);
+			myactionbar_title = (TextView) myactionbar.getCustomView().findViewById(R.id.my_actionbar_title);
+			myactionbar_back = (ImageButton) myactionbar.getCustomView().findViewById(R.id.ps_back_btn);
+			myactionbar_back.setVisibility(View.VISIBLE);
+			myactionbar_back.setOnClickListener(new MyPerceptionContentMainOnClick(ACTIONBAR_BACK_NUM));
+			myactionbar_add = (ImageButton) myactionbar.getCustomView().findViewById(R.id.ps_save_btn);
+			myactionbar_add.setVisibility(View.GONE);
+			myactionbar_title.setTextSize(14);
+			myactionbar_title.setText(getResources().getString(R.string.look_the_encrypted_content));
+			return true;
+		}
+	}
+
+	class MyPerceptionContentMainOnClick implements OnClickListener {
+
+		int temp_index = INIT_ACTIONBAR_NUM;
+
+		public MyPerceptionContentMainOnClick(int index) {
+			super();
+			// TODO Auto-generated constructor stub
+			temp_index = index;
+		}
+
+		@Override
+		public void onClick(View v) {
+			// TODO Auto-generated method stub
+			switch (temp_index) {
+			case ACTIONBAR_BACK_NUM:
+				finish();
+				break;
+			default:
+				break;
+			}
+		}
+
+	}
+
+}
Index: packages/apps/Settings/src/com/android/settings/faceunlock/FaceUnlockMainActivity.java
===================================================================
--- packages/apps/Settings/src/com/android/settings/faceunlock/FaceUnlockMainActivity.java	(revision 0)
+++ packages/apps/Settings/src/com/android/settings/faceunlock/FaceUnlockMainActivity.java	(revision 2329)
@@ -0,0 +1,799 @@
+package com.android.settings.faceunlock;
+
+import java.util.ArrayList;
+import android.annotation.TargetApi;
+import android.content.Intent;
+import android.graphics.Color;
+import android.os.Build.VERSION;
+import android.os.Build.VERSION_CODES;
+import android.os.Build;
+import android.os.Bundle;
+import android.os.UserHandle;
+import android.provider.Settings;
+import android.support.v4.app.Fragment;
+import android.support.v4.app.FragmentActivity;
+import android.support.v4.app.FragmentManager;
+import android.support.v4.app.FragmentPagerAdapter;
+import android.support.v4.view.ViewPager;
+import android.support.v4.view.ViewPager.OnPageChangeListener;
+import com.android.settings.ChooseLockSettingsHelper;
+import com.android.settings.ChooseLockGeneric;
+import android.app.admin.DevicePolicyManager;
+import android.content.DialogInterface;
+import android.view.LayoutInflater;
+import android.app.AlertDialog;
+import android.app.ActionBar;
+import android.app.Dialog;
+import android.app.Activity;
+import android.view.View;
+import android.util.Log;
+import android.content.Context;
+import android.view.View.OnClickListener;
+import android.view.Window;
+import com.android.settings.R;
+import android.view.WindowManager;
+import android.widget.TextView;
+import android.widget.Button;
+import android.widget.ImageButton;
+import android.widget.CompoundButton;
+import android.widget.CompoundButton.OnCheckedChangeListener;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.RelativeLayout;
+import android.widget.Switch;
+import android.os.Handler;
+import android.os.Message;
+import android.annotation.SuppressLint;
+import android.widget.Toast;
+import android.graphics.Color;
+import android.graphics.drawable.ColorDrawable;
+import android.content.ContentResolver;
+import android.net.Uri;
+import android.database.ContentObserver;
+import android.view.Gravity;
+import android.widget.Toolbar;
+
+
+@TargetApi(23)
+public class FaceUnlockMainActivity extends FragmentActivity implements OnClickListener, OnCheckedChangeListener {
+
+	private static final String TAG = "FaceUnlockMainActivity";
+	private static final int START_ENTRY_BTN_NUM = 1;
+	private static final int PRIVATE_MODEL_LAYOUT_NUM = 2;
+	private static final int PRIVATE_MODEL_SWITCH_NUM = 3;
+	private static final int DEMONSTRATION_MODEL_LAYOUT_NUM = 4;
+	private static final int DEMONSTRATION_MODEL_SWITCH_NUM = 5;
+	private static final int FACE_MANAGER_LAYOUT_NUM = 6;
+	private static final int ACTIONBAR_BACK_NUM = 7;
+
+	private static final int REMOVE_FACEUNLOCK_BTN_NUM = 10;
+	private static final int CHOOSE_LOCK_GENERIC_REQUEST = 227;
+    private static final int CONFIRM_REQUEST = 226;
+    private static final int FACE_NEW_REQUEST = 300;
+    private static final int FACE_REPLACE_REQUEST = 301;
+    private static final int FACE_REMOVE_REQUEST = 302;
+
+    private static final int REFLASUH_UI_ENTRY_FACEDATA_NUM = 11;
+	private int isPrivacyMode = 0;  //added by iuv luyang
+	private final PrivacyObserver mPrivacyObserver = new PrivacyObserver(); //added by iuv luyang
+	private Button start_btn;
+	private Context mcontext;
+	private ActionBar myactionbar;
+    private ImageButton myactionbar_back_btn;
+	public static Handler handler;
+	private TextView mDialogTitle,mDialogHint,myactionbar_title,face_unlock_demonstration_model_title,face_unlock_private_model_title;
+	private ImageView circle_01, circle_03;
+	private Switch private_model_switch, demonstration_model_switch;
+	private RelativeLayout private_model_layout, demonstration_model_layout, face_unlock_manager_layout,
+			face_unlock_main_layout,circle_layout;
+	private ViewPager mPager;
+	public AlertDialog mAlertDialog;
+	private MyFragmentPagerAdapter madapter;
+	private FragmentManager fm;
+	private LinearLayout face_unlock_manager_title, mLinearLayout;
+	
+	/**IUV:add-start for faceLock use by yunlong.shen on 2017/06/30 */
+	private RelativeLayout face_security_layout, face_excrypted_content_layout, face_app_lock_layout;
+	private static final int INIT_ACTIONBAR_NUM = -1;
+	private static final int LAYOUT_SECURITY_SYSTEM_NUM = 1;
+	private static final int LAYOUT_APP_UNLOCK_NUM = 2;
+	private static final int LAYOUT_EXCRPTED_CONTENT_NUM = 3;
+	/**IUV:add-end*/
+	
+	private Fragment fragment_one, fragment_two;
+	private boolean isExistSafetyPwd = false;
+	private boolean verificationPassed = false;
+	//IUV_ADD by weimingwei on 20170719
+	private boolean faceUnlockNew = false;
+    private boolean scannerStart = false;
+	//IUV_END
+
+	private ArrayList<Fragment> fragmentlists = new ArrayList<Fragment>();
+	//Add by junwei.shen, for bug-100515, at 2017.7.5
+	private boolean faceIsDelSuccess = false;
+	private Handler mhandler = new Handler() {
+
+		@Override
+		public void handleMessage(Message msg) {
+			// TODO Auto-generated method stub
+			super.handleMessage(msg);
+			switch (msg.what) {
+			case 0x01:
+				startFaceScannerSetting();
+				break;
+			case REFLASUH_UI_ENTRY_FACEDATA_NUM:
+				if(isExistFaceData()){
+					setBackgroundTheme();
+					//setTheme(R.style.Theme_ShenSettings);
+					face_unlock_manager_title.setVisibility(View.VISIBLE);
+					face_unlock_manager_layout.setVisibility(View.VISIBLE);
+					face_unlock_main_layout.setVisibility(View.GONE);
+					initCustomActionBar();
+				}else{
+					setBackgroundTheme();
+					//setTheme(R.style.Theme_FaceUnlockNoStyle);
+					face_unlock_manager_title.setVisibility(View.GONE);
+					face_unlock_manager_layout.setVisibility(View.GONE);
+					face_unlock_main_layout.setVisibility(View.VISIBLE);
+					//Begin: add by junwei.shen, for bug-100515, at 2017.7.5
+					if (faceIsDelSuccess == true) {
+						Toast.makeText(mcontext,R.string.delete_success,Toast.LENGTH_SHORT).show();
+						faceIsDelSuccess = false;
+					}
+					if (faceIsDelSuccess == false) {
+//                        Toast.makeText(mcontext,R.string.ic_is_privacy_mode_can_use,Toast.LENGTH_SHORT).show();
+					}
+					//End: add by junwei.shen, for bug-100515, at 2017.7.5
+				}
+				break;
+			default:
+				break;
+			}
+		}
+	};
+
+
+	@Override
+	protected void onResume() {
+		// TODO Auto-generated method stub
+		super.onResume();
+		//IUV_ADD by weimingwei on 20170719
+		if(isExistFaceData()){
+            if(!verificationPassed && !faceUnlockNew){
+			    verifypassword();			
+		    }
+		}
+
+		if(isExistFaceData()){
+			setBackgroundTheme();
+			//setTheme(R.style.Theme_ShenSettings);
+			face_unlock_manager_title.setVisibility(View.VISIBLE);
+			face_unlock_manager_layout.setVisibility(View.VISIBLE);
+			face_unlock_main_layout.setVisibility(View.GONE);
+			initCustomActionBar();
+		}else{
+			setBackgroundTheme();
+			//setTheme(R.style.Theme_FaceUnlockNoStyle);
+			face_unlock_manager_title.setVisibility(View.GONE);
+			face_unlock_manager_layout.setVisibility(View.GONE);
+			face_unlock_main_layout.setVisibility(View.VISIBLE);
+		}
+		if(mAlertDialog != null){
+			ChooseLockSettingsHelper helper = new ChooseLockSettingsHelper(this);
+			final double passwordQuality = helper.utils().getActivePasswordQuality(UserHandle.myUserId());
+			boolean hasPassword = passwordQuality != DevicePolicyManager.PASSWORD_QUALITY_UNSPECIFIED;
+			if(!hasPassword){
+				mAlertDialog.dismiss();
+			}
+		}
+	}
+
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		super.onCreate(savedInstanceState);
+		mcontext = FaceUnlockMainActivity.this;
+		mPrivacyObserver.register(true); //added by iuv luyang
+		if (!isExistFaceData()) {
+			setBackgroundTheme();
+		}
+		setContentView(R.layout.face_unlock_main);
+		
+		InitViewPager();
+
+		getViews();
+
+	}
+
+	private boolean isExistFaceData() {
+
+		String state = Settings.System.getStringForUser(getContentResolver(),Settings.System.FACE_STATE_ENABLED, 0);
+		state = (state == null) ? "0" :state;
+
+		return (state.equals("1") ? true : false);
+
+	}
+
+	private void updateStatus() {
+		
+		mhandler.sendEmptyMessageDelayed(REFLASUH_UI_ENTRY_FACEDATA_NUM, 100);
+
+    }
+	
+	private void InitViewPager() {
+		mPager = (ViewPager) this.findViewById(R.id.demonstration_model_bottom_view);
+		fm = getSupportFragmentManager();
+
+		fragment_one = new FaceUnlockDemonstrationModelViewOne();
+		fragment_two = new FaceUnlockDemonstrationModelViewTwo();
+
+		fragmentlists.add(fragment_one);
+		fragmentlists.add(fragment_two);
+
+		madapter = new MyFragmentPagerAdapter(fm, fragmentlists);
+
+		mPager.setAdapter(madapter);
+		mPager.setCurrentItem(0);
+		mPager.setOnPageChangeListener(new MyOnPageChangeListener());
+	}
+	
+	public class MyOnPageChangeListener implements OnPageChangeListener {
+
+		@Override
+		public void onPageScrollStateChanged(int arg0) {
+			// TODO Auto-generated method stub
+		}
+
+		@Override
+		public void onPageScrolled(int arg0, float arg1, int arg2) {
+			// TODO Auto-generated method stub
+
+		}
+
+		@Override
+		public void onPageSelected(int arg0) {
+			// TODO Auto-generated method stub
+
+			if (arg0 == 0) {
+				circle_01.setPressed(true);
+				circle_03.setPressed(false);
+			} else if (arg0 == 1) {
+				circle_01.setPressed(false);
+				circle_03.setPressed(true);
+			}
+		}
+	}
+	
+
+	private void getViews() {
+		// TODO Auto-generated method stub
+		start_btn = (Button) findViewById(R.id.face_unlock_main_start_btn);
+		start_btn.setTag(START_ENTRY_BTN_NUM);
+		start_btn.setOnClickListener(this);
+		
+		circle_01 = (ImageView)findViewById(R.id.circle_01);
+		circle_01.setPressed(true);
+		circle_03 = (ImageView)findViewById(R.id.circle_03);
+		circle_layout= (RelativeLayout) findViewById(R.id.circle_layout);
+
+		face_unlock_manager_title = (LinearLayout) findViewById(R.id.face_unlock_manager_title);
+		face_unlock_manager_layout = (RelativeLayout) findViewById(R.id.face_unlock_manager_layout);
+		face_unlock_manager_layout.setTag(FACE_MANAGER_LAYOUT_NUM);
+		face_unlock_manager_layout.setOnClickListener(this);
+		face_unlock_main_layout = (RelativeLayout) findViewById(R.id.face_unlock_main_layout);
+		/**IUV:add-end
+
+		face_security_layout = (RelativeLayout) findViewById(R.id.face_security_layout);
+		face_security_layout.setOnClickListener(new MyFaceMainOnClick(LAYOUT_SECURITY_SYSTEM_NUM));
+		face_excrypted_content_layout = (RelativeLayout) findViewById(R.id.face_excrypted_content_layout);
+		face_excrypted_content_layout.setOnClickListener(new MyFaceMainOnClick(LAYOUT_EXCRPTED_CONTENT_NUM));
+		face_app_lock_layout = (RelativeLayout) findViewById(R.id.face_app_lock_layout);
+		face_app_lock_layout.setOnClickListener(new MyFaceMainOnClick(LAYOUT_APP_UNLOCK_NUM));
+		
+		
+		face_unlock_private_model_title = (TextView)findViewById(R.id.face_unlock_private_model_title);zxp*/
+		face_unlock_demonstration_model_title = (TextView)findViewById(R.id.face_unlock_demonstration_model_title);
+		/*
+		private_model_layout = (RelativeLayout) findViewById(R.id.face_unlock_private_model_layout);
+		private_model_layout.setTag(PRIVATE_MODEL_LAYOUT_NUM);
+		private_model_layout.setOnClickListener(this);zxp*/
+
+		demonstration_model_layout = (RelativeLayout) findViewById(R.id.face_unlock_demonstration_model_layout);
+		demonstration_model_layout.setTag(DEMONSTRATION_MODEL_LAYOUT_NUM);
+		demonstration_model_layout.setOnClickListener(this);
+
+		/*private_model_switch = (Switch) findViewById(R.id.face_unlock_private_model_items_switch);
+		private_model_switch.setTag(PRIVATE_MODEL_SWITCH_NUM);
+		private_model_switch.setOnCheckedChangeListener(this);*/
+		/*added by iuv luyang*/
+		/*isPrivacyMode = Settings.System.getInt(getContentResolver(),Settings.System.PRIVACY_PROTECTION_ENABLED, 0);
+		if(isPrivacyMode == 1){
+			private_model_switch.setChecked(true);
+			face_unlock_private_model_title.setTextColor(getColor(R.color.ic_default_title_text_color));
+		}else{
+			private_model_switch.setChecked(false);
+			//face_unlock_private_model_title.setTextColor(getColor(R.color.items_summary_color));
+		}*/
+		/*end by iuv luyang*/
+
+		demonstration_model_switch = (Switch) findViewById(R.id.face_unlock_demonstration_model_switch);
+		demonstration_model_switch.setTag(DEMONSTRATION_MODEL_SWITCH_NUM);
+		demonstration_model_switch.setOnCheckedChangeListener(this);
+		
+		/**IUV:add-start for faceLock use by yunlong.shen on 2017/07/01 */
+		if(Settings.System.getInt(getContentResolver(),Settings.System.FACE_UNLOCK_STATE_ENABLED, 0) == 1){
+			demonstration_model_switch.setChecked(true);
+			face_unlock_demonstration_model_title.setTextColor(getColor(R.color.ic_default_title_text_color));
+		}else{
+			demonstration_model_switch.setChecked(false);
+			//face_unlock_demonstration_model_title.setTextColor(getColor(R.color.items_summary_color));
+		}
+		/**IUV:add-end*/
+		
+		/*if(private_model_switch.isChecked() && isExistFaceData()){
+			circle_layout.setVisibility(View.GONE);
+			mPager.setVisibility(View.GONE);
+		}else{
+			circle_layout.setVisibility(View.GONE);
+			mPager.setVisibility(View.GONE);
+		}ZXP*/
+
+		if (isExistFaceData()) {
+			face_unlock_manager_title.setVisibility(View.VISIBLE);
+			face_unlock_manager_layout.setVisibility(View.VISIBLE);
+			face_unlock_main_layout.setVisibility(View.GONE);
+			initCustomActionBar();
+		} else {
+			face_unlock_manager_title.setVisibility(View.GONE);
+			face_unlock_manager_layout.setVisibility(View.GONE);
+			face_unlock_main_layout.setVisibility(View.VISIBLE);
+		}
+	}
+	
+	class MyFragmentPagerAdapter extends FragmentPagerAdapter {
+
+		public ArrayList<Fragment> listss;
+
+		public MyFragmentPagerAdapter(FragmentManager fm) {
+			super(fm);
+			// TODO Auto-generated constructor stub
+		}
+
+		public MyFragmentPagerAdapter(FragmentManager fm, ArrayList<Fragment> listss) {
+			super(fm);
+			this.listss = listss;
+		}
+
+		@Override
+		public Fragment getItem(int arg0) {
+			// TODO Auto-generated method stub
+			return listss.get(arg0);
+		}
+
+		@Override
+		public int getCount() {
+			// TODO Auto-generated method stub
+			return listss.size();
+		}
+
+		@Override
+		public int getItemPosition(Object object) {
+			// TODO Auto-generated method stub
+			return super.getItemPosition(object);
+		}
+
+	}
+
+	// Hide method
+	private void setBackgroundTheme() {
+
+		if(isExistFaceData()){
+			//getWindow().setContentView(R.layout.face_unlock_main);
+			getActionBar().show();
+			getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_VISIBLE | View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR);
+			getWindow().addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);
+			getWindow().setStatusBarColor(0XFFEFEFF0);
+			getWindow().setContentView(R.layout.face_unlock_main);
+		}else{
+			getWindow().setContentView(R.layout.face_unlock_main);
+			if (VERSION.SDK_INT >= VERSION_CODES.LOLLIPOP) {
+				Window window = getWindow();
+				window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS
+					| WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION);
+				window.getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN); //| View.SYSTEM_UI_FLAG_LAYOUT_STABLE
+				window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);
+				window.setStatusBarColor(Color.TRANSPARENT);
+				window.setNavigationBarColor(Color.TRANSPARENT);
+			}
+			getActionBar().hide();
+		}
+
+		InitViewPager();
+		getViews();
+	}
+	
+
+	@Override
+	public void onClick(View v) {
+		// TODO Auto-generated method stub
+		switch ((int) v.getTag()) {
+		case ACTIONBAR_BACK_NUM:
+			finish();
+			break;
+		case START_ENTRY_BTN_NUM:
+		    if(verifypassword()){
+			    scannerStart = true;
+		    }
+			else{
+				createNewPwd();
+			}
+			break;
+		/*case PRIVATE_MODEL_LAYOUT_NUM:
+			if(private_model_switch.isChecked() && isExistFaceData()){
+				private_model_switch.setChecked(false);
+				//face_unlock_private_model_title.setTextColor(getColor(R.color.items_summary_color));
+				Settings.System
+						.putInt(getContentResolver(), Settings.System.PRIVACY_PROTECTION_ENABLED, 0);
+			}else{
+				if(isExistFaceData()){
+					private_model_switch.setChecked(true);
+					face_unlock_private_model_title.setTextColor(getColor(R.color.ic_default_title_text_color));
+					Settings.System
+							.putInt(getContentResolver(), Settings.System.PRIVACY_PROTECTION_ENABLED, 1);
+				}
+			}
+			break;zxp*/
+		case DEMONSTRATION_MODEL_LAYOUT_NUM:
+			if(demonstration_model_switch.isChecked() && isExistFaceData()){
+				demonstration_model_switch.setChecked(false);
+				//face_unlock_demonstration_model_title.setTextColor(getColor(R.color.items_summary_color));
+				Settings.System
+						.putInt(getContentResolver(), Settings.System.FACE_UNLOCK_STATE_ENABLED, 0);//IUV:add for faceLock use by yunlong.shen on 2017/07/01
+			}else{
+				if(isExistFaceData()){
+					demonstration_model_switch.setChecked(true);
+                    face_unlock_demonstration_model_title.setTextColor(getColor(R.color.ic_default_title_text_color));					
+					Settings.System
+						.putInt(getContentResolver(), Settings.System.FACE_UNLOCK_STATE_ENABLED, 1);//IUV:add for faceLock use by yunlong.shen on 2017/07/01
+				}
+			}
+			break;
+		case FACE_MANAGER_LAYOUT_NUM:
+			hintDialogShow(REMOVE_FACEUNLOCK_BTN_NUM);
+			break;
+		default:
+			break;
+		}
+	}
+
+	View inflate;
+    public void hintDialogShow(int index) {
+
+    	final int showText = index;
+
+        AlertDialog.Builder alertDialog = new AlertDialog.Builder(mcontext);
+        Dialog dialog = new Dialog(mcontext);
+
+        inflate=LayoutInflater.from(getApplicationContext())
+                .inflate(R.layout.re_enter_face_dialog,null);
+        mLinearLayout=(LinearLayout)inflate.findViewById(R.id.layout_dialog);
+		mDialogTitle=(TextView)inflate.findViewById(R.id.face_input_dialog_title);
+	    mDialogHint=(TextView)inflate.findViewById(R.id.face_input_dialog_hint);
+	    mDialogTitle.setText(R.string.reenter_face_dialog_title);
+
+        if(showText == FACE_MANAGER_LAYOUT_NUM){
+	        mDialogHint.setText(R.string.reenter_face_dialog_info);
+        }else{
+	        mDialogHint.setText(R.string.remove_face_dialog_info_remove);        	
+        }
+
+        mLinearLayout.setVisibility(View.GONE);
+        alertDialog.setView(inflate);
+        alertDialog.setNegativeButton(R.string.button_cancel, new DialogInterface.OnClickListener() {
+            @Override
+            public void onClick(DialogInterface dialog, int which) {
+            }
+        });
+        alertDialog.setPositiveButton(R.string.button_remove, new DialogInterface.OnClickListener() {
+            @Override
+            public void onClick(DialogInterface dialog, int which) {
+            	if(showText == FACE_MANAGER_LAYOUT_NUM){
+                	startFaceScanner(FACE_REPLACE_REQUEST);
+                }else{
+                	startFaceScanner(FACE_REMOVE_REQUEST);	
+                }
+            }
+        });
+
+        mAlertDialog = alertDialog.create();
+        mAlertDialog.show();
+    }
+
+	void startFaceScanner(int request){
+        Intent intent = new Intent();
+        intent.setClassName("com.android.systemui", "com.face.scanner.FaceActivity");//
+		intent.putExtra("requestType",request);
+        startActivityForResult(intent,request);
+    }
+
+	@Override
+	public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
+		// TODO Auto-generated method stub
+		if (isChecked && isExistFaceData()) {
+			if (((int) buttonView.getTag()) == PRIVATE_MODEL_SWITCH_NUM) {
+				circle_layout.setVisibility(View.GONE);
+				mPager.setVisibility(View.GONE);
+				/*Settings.System
+						.putInt(getContentResolver(), Settings.System.PRIVACY_PROTECTION_ENABLED, 1);zxp*/
+			} else {
+				Settings.System
+						.putInt(getContentResolver(), Settings.System.FACE_UNLOCK_STATE_ENABLED, 1);//IUV:add for faceLock use by yunlong.shen on 2017/07/01
+				face_unlock_demonstration_model_title.setTextColor(getColor(R.color.ic_default_title_text_color));
+			}
+		} else {
+			/*added by iuv luyang*/
+			if(!isExistFaceData()){
+				buttonView.setChecked(false);
+				//Begin: modify by junwei.shen, for bug-100515, at 2017.7.5
+//				Toast.makeText(mcontext,R.string.ic_is_privacy_mode_can_use,Toast.LENGTH_SHORT).show();
+				updateStatus();
+				//End: modify by junwei.shen, for bug-100515, at 2017.7.5
+			}
+			/*end by iuv luyang*/
+			if (((int) buttonView.getTag()) == PRIVATE_MODEL_SWITCH_NUM) {
+				/*added by iuv luyang*/
+				circle_layout.setVisibility(View.GONE);
+				mPager.setVisibility(View.GONE);
+				/*Settings.System
+						.putInt(getContentResolver(), Settings.System.PRIVACY_PROTECTION_ENABLED, 0);zxp*/
+			} else {;
+				Settings.System
+						.putInt(getContentResolver(), Settings.System.FACE_UNLOCK_STATE_ENABLED, 0);//IUV:add for faceLock use by yunlong.shen on 2017/07/01
+				//face_unlock_demonstration_model_title.setTextColor(getColor(R.color.items_summary_color));
+			}
+		}
+	}
+
+	public boolean  verifypassword(){
+		ChooseLockSettingsHelper helper = new ChooseLockSettingsHelper(this);
+        final double passwordQuality = helper.utils().getActivePasswordQuality(UserHandle.myUserId());
+        boolean hasPassword = passwordQuality != DevicePolicyManager.PASSWORD_QUALITY_UNSPECIFIED;
+
+        if(hasPassword) {
+        	Log.i(TAG,"exist pwd");
+        	isExistSafetyPwd = true;
+            helper.launchConfirmationActivity(CONFIRM_REQUEST, getResources().getString(R.string.security_settings_face_preference_title), null, null, 0);
+        } else {
+        	isExistSafetyPwd = false;
+        	Log.i(TAG,"no exist pwd");
+        }
+		
+		return isExistSafetyPwd;
+	}
+
+	void createNewPwd(){
+		AlertDialog createNewPwdDialog = new AlertDialog.Builder(mcontext)
+			.setTitle(R.string.add_fingerprint_message_secturity)
+			.setPositiveButton(R.string.ok, new DialogInterface.OnClickListener() {
+				@Override
+				public void onClick(DialogInterface dialog, int which) {
+					dialog.dismiss();
+					Intent intent = new Intent(mcontext, ChooseLockGeneric.class);
+					intent.putExtra(ChooseLockGeneric.ChooseLockGenericFragment.MINIMUM_QUALITY_KEY,
+						DevicePolicyManager.PASSWORD_QUALITY_SOMETHING);
+					intent.putExtra(ChooseLockGeneric.ChooseLockGenericFragment.HIDE_DISABLED_PREFS, true);
+					intent.putExtra(ChooseLockSettingsHelper.EXTRA_KEY_HAS_CHALLENGE, true);
+					intent.putExtra(ChooseLockSettingsHelper.EXTRA_KEY_CHALLENGE, 0);
+					intent.putExtra(ChooseLockSettingsHelper.EXTRA_KEY_FOR_FINGERPRINT, false);
+					startActivityForResult(intent, CHOOSE_LOCK_GENERIC_REQUEST);
+				}
+			})
+			.setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() {
+				@Override
+				public void onClick(DialogInterface dialog, int which) {
+					dialog.dismiss();
+					// updateStatus();
+				}
+			})
+			.setOnDismissListener(new DialogInterface.OnDismissListener() {
+				@Override
+				public void onDismiss(DialogInterface dialogInterface) {
+					// updateStatus();
+				}
+			}).create();
+		createNewPwdDialog.show();
+	}
+
+	void startFaceScannerSetting() {
+        ChooseLockSettingsHelper helper = new ChooseLockSettingsHelper(this);
+        final double passwordQuality = helper.utils().getActivePasswordQuality(UserHandle.myUserId());
+        boolean hasPassword = passwordQuality != DevicePolicyManager.PASSWORD_QUALITY_UNSPECIFIED;
+
+        if(hasPassword) {
+            helper.launchConfirmationActivity(CONFIRM_REQUEST, getResources().getString(R.string.security_settings_face_preference_title), null, null, 0);
+        } else {
+			AlertDialog createPwdDialog = new AlertDialog.Builder(mcontext)
+					.setTitle(R.string.add_fingerprint_message_secturity)
+					.setPositiveButton(R.string.ok, new DialogInterface.OnClickListener() {
+						@Override
+						public void onClick(DialogInterface dialog, int which) {
+							dialog.dismiss();
+							Intent intent = new Intent(mcontext, ChooseLockGeneric.class);
+							intent.putExtra(ChooseLockGeneric.ChooseLockGenericFragment.MINIMUM_QUALITY_KEY,
+									DevicePolicyManager.PASSWORD_QUALITY_SOMETHING);
+							intent.putExtra(ChooseLockGeneric.ChooseLockGenericFragment.HIDE_DISABLED_PREFS, true);
+							intent.putExtra(ChooseLockSettingsHelper.EXTRA_KEY_HAS_CHALLENGE, true);
+							intent.putExtra(ChooseLockSettingsHelper.EXTRA_KEY_CHALLENGE, 0);
+							intent.putExtra(ChooseLockSettingsHelper.EXTRA_KEY_FOR_FINGERPRINT, false);
+							startActivityForResult(intent, CHOOSE_LOCK_GENERIC_REQUEST);
+						}
+					})
+					.setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() {
+						@Override
+						public void onClick(DialogInterface dialog, int which) {
+							dialog.dismiss();
+							// updateStatus();
+						}
+					})
+					.setOnDismissListener(new DialogInterface.OnDismissListener() {
+						@Override
+						public void onDismiss(DialogInterface dialogInterface) {
+							// updateStatus();
+						}
+					}).create();
+			createPwdDialog.show();
+        }
+    }
+
+    @Override
+    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
+        super.onActivityResult(requestCode, resultCode, data);
+        Log.i(TAG,"requestCode = "+requestCode+"   resultCode = "+resultCode);
+        if (requestCode == CHOOSE_LOCK_GENERIC_REQUEST && resultCode != Activity.RESULT_CANCELED) {
+        	verificationPassed = true;
+        	isExistSafetyPwd = true;
+            startFaceScanner(FACE_NEW_REQUEST);
+        } else if (requestCode == CONFIRM_REQUEST && resultCode  != Activity.RESULT_CANCELED && resultCode != 10000) {
+            verificationPassed = true;
+            if(scannerStart){
+            	startFaceScanner(FACE_NEW_REQUEST);
+            }
+        } else if (requestCode == FACE_NEW_REQUEST && resultCode  == Activity.RESULT_OK) {
+        	faceUnlockNew = true;
+            updateStatus();
+        } else if (requestCode == CONFIRM_REQUEST && resultCode  == Activity.RESULT_CANCELED && isExistFaceData()) {
+        	verificationPassed = false;
+        	isExistSafetyPwd = false;
+        	scannerStart = false;
+            finish();
+        } else if (requestCode == FACE_REMOVE_REQUEST && resultCode  == Activity.RESULT_OK) {
+            updateStatus();
+			//Begin: modify by junwei.shen, for bug-100515, at 2017.7.5
+//			Toast.makeText(mcontext,R.string.delete_success,Toast.LENGTH_SHORT).show();
+			faceIsDelSuccess = true;
+			faceUnlockNew = false;
+			//End: modify by junwei.shen, for bug-100515, at 2017.7.5
+        }
+    }
+
+    private boolean initCustomActionBar() {
+        myactionbar = getActionBar();
+        if (myactionbar == null) {
+            return false;
+        } else {
+            myactionbar.setDisplayOptions(ActionBar.DISPLAY_SHOW_CUSTOM);
+			View actionBarButtons = LayoutInflater.from(this).inflate(R.layout.my_actionbar_style,
+                    new RelativeLayout(mcontext), false);
+
+			ActionBar.LayoutParams layoutParams =new ActionBar.LayoutParams(ActionBar.LayoutParams.MATCH_PARENT, ActionBar.LayoutParams.MATCH_PARENT); 
+			layoutParams.gravity =Gravity.CENTER_HORIZONTAL |Gravity.CENTER_HORIZONTAL; 
+			myactionbar.setDisplayShowHomeEnabled(false);
+			myactionbar.setDisplayShowCustomEnabled(true); 
+			myactionbar.setDisplayShowTitleEnabled(false); 
+		
+ 
+ 
+            //myactionbar.setCustomView(R.layout.my_actionbar_style);
+            myactionbar.setCustomView(actionBarButtons,layoutParams);
+
+			Toolbar parent =(Toolbar) actionBarButtons.getParent(); 
+					parent.setContentInsetsAbsolute(0,0);
+
+			
+            myactionbar_title = (TextView) myactionbar.getCustomView().findViewById(R.id.my_actionbar_title);
+            myactionbar_back_btn = (ImageButton) myactionbar.getCustomView().findViewById(R.id.ps_back_btn);
+            myactionbar_back_btn.setTag(ACTIONBAR_BACK_NUM);
+            myactionbar_back_btn.setOnClickListener(this);
+            myactionbar_title.setText(getResources().getString(R.string.ic_default_face_unlock_name));
+            return true;
+        }
+    }
+	
+	/*added by luyang*/	
+	private void mUpdateUi(){
+		/*if(Settings.System.getInt(getContentResolver(),Settings.System.PRIVACY_PROTECTION_ENABLED, 0) == 1){
+			private_model_switch.setChecked(true);
+			face_unlock_private_model_title.setTextColor(getColor(R.color.ic_default_title_text_color));
+		}else{
+			private_model_switch.setChecked(false);
+			//face_unlock_private_model_title.setTextColor(getColor(R.color.items_summary_color));
+		}zxp*/private_model_switch.setChecked(false);
+		/**IUV:add-start for faceLock use by yunlong.shen on 2017/07/01 */
+		if(Settings.System.getInt(getContentResolver(),Settings.System.FACE_UNLOCK_STATE_ENABLED, 0) == 1){
+			demonstration_model_switch.setChecked(true);
+			face_unlock_demonstration_model_title.setTextColor(getColor(R.color.ic_default_title_text_color));
+		}else{
+			demonstration_model_switch.setChecked(false);
+			//face_unlock_demonstration_model_title.setTextColor(getColor(R.color.items_summary_color));
+		}
+		/**IUV:add-end*/
+	}
+	
+	private final class PrivacyObserver extends ContentObserver {
+       /* private final Uri PRIVACY_PROTECTION_ENABLED_URI =
+                Settings.System.getUriFor(Settings.System.PRIVACY_PROTECTION_ENABLED);zxp*/
+		private final Uri FACE_STATE_ENABLED_URI =
+				Settings.System.getUriFor(Settings.System.FACE_STATE_ENABLED);
+
+        public PrivacyObserver() {
+            super(new Handler());
+        }
+
+        public void register(boolean register) {
+            final ContentResolver cr = mcontext.getContentResolver();
+            /*if (register) {
+                cr.registerContentObserver(PRIVACY_PROTECTION_ENABLED_URI, false, this);
+				cr.registerContentObserver(FACE_STATE_ENABLED_URI, false, this);
+            } else {
+                cr.unregisterContentObserver(this);
+            }zxp*/
+        }
+
+        @Override
+        public void onChange(boolean selfChange, Uri uri) {
+            super.onChange(selfChange, uri);
+            /*if (PRIVACY_PROTECTION_ENABLED_URI.equals(uri)) {
+                mUpdateUi();
+            }zxp*/
+			if (FACE_STATE_ENABLED_URI.equals(uri)) {
+				updateStatus();
+			}
+        }
+    }
+	/*end by iuv luyang*/
+	
+	/**IUV:add-start for faceLock use by yunlong.shen on 2017/06/30 */
+	class MyFaceMainOnClick implements OnClickListener {
+
+		int temp_index = INIT_ACTIONBAR_NUM;
+
+		public MyFaceMainOnClick(int index) {
+			super();
+			// TODO Auto-generated constructor stub
+			temp_index = index;
+		}
+
+		@Override
+		public void onClick(View v) {
+			// TODO Auto-generated method stub
+			Intent intent = new Intent();
+			switch (temp_index) {
+			case LAYOUT_SECURITY_SYSTEM_NUM:
+				intent.setClass(FaceUnlockMainActivity.this, FaceUnlockSecuritySystemActivity.class);
+				startActivity(intent);
+				break;
+			case LAYOUT_EXCRPTED_CONTENT_NUM:
+				intent.setClass(FaceUnlockMainActivity.this, FaceUnlockPerceptionContentActivity.class);
+				startActivity(intent);
+				break;
+			case LAYOUT_APP_UNLOCK_NUM:
+				intent.setClass(FaceUnlockMainActivity.this, FaceUnlockAppLockMainActivity.class);
+				startActivity(intent);
+				break;
+			default:
+				break;
+			}
+		}
+	}
+	/**IUV:add-end*/
+	
+}
Index: packages/apps/Settings/src/com/android/settings/faceunlock/FaceUnlockScanActivity.java
===================================================================
--- packages/apps/Settings/src/com/android/settings/faceunlock/FaceUnlockScanActivity.java	(revision 0)
+++ packages/apps/Settings/src/com/android/settings/faceunlock/FaceUnlockScanActivity.java	(revision 2329)
@@ -0,0 +1,211 @@
+package com.android.settings.faceunlock;
+
+import java.io.IOException;
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.content.DialogInterface;
+import android.graphics.Color;
+import android.graphics.PixelFormat;
+import android.hardware.Camera;
+import android.hardware.Camera.CameraInfo;
+import android.hardware.Camera.PictureCallback;
+import android.os.Build;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Message;
+import android.os.Build.VERSION;
+import android.os.Build.VERSION_CODES;
+import android.util.Log;
+import android.view.SurfaceHolder;
+import android.view.SurfaceHolder.Callback;
+import android.view.SurfaceView;
+import android.view.View;
+import com.android.settings.R;
+import android.view.Window;
+import android.view.WindowManager;
+import android.view.View.OnClickListener;
+import android.widget.TextView;
+
+@SuppressWarnings("deprecation")
+public class FaceUnlockScanActivity extends Activity implements OnClickListener {
+
+	private FaceUnlockCyleView CycleView;
+	private TextView description_info;
+	private SurfaceView surfaceView;
+	private Camera camera;
+	private AlertDialog mDialog = null;
+	private boolean preview = false;
+	private int progress = 0;
+	private Handler mhandler = new Handler(){
+
+		@Override
+		public void handleMessage(Message msg) {
+			// TODO Auto-generated method stub
+			super.handleMessage(msg);
+			switch (msg.what) {
+			case 100:
+				showEntryErrorDialog();
+				break;
+
+			default:
+				break;
+			}
+		}
+		
+	};
+	
+	// Hide method
+	private void setBackgroundTheme() {
+		getWindow().requestFeature(Window.FEATURE_NO_TITLE);
+		if (VERSION.SDK_INT >= VERSION_CODES.LOLLIPOP) {
+			Window window = getWindow();
+			window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS
+					| WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION);
+			getWindow().getDecorView().setSystemUiVisibility(
+					View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR);
+			window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);
+			window.setStatusBarColor(Color.TRANSPARENT);
+			window.setNavigationBarColor(Color.TRANSPARENT);
+		}
+	}
+
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+		setBackgroundTheme();
+		setContentView(R.layout.face_unlock_scan_main);
+
+		description_info = (TextView) findViewById(R.id.face_unlock_scan_bottom_info);
+
+		surfaceView = (SurfaceView) findViewById(R.id.face_unlock_cycle_surfaceView);
+		surfaceView.getHolder().setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);
+		surfaceView.getHolder().setFixedSize(200, 200);
+		surfaceView.getHolder().addCallback(new SurfaceViewCallback());
+
+		CycleView =  (FaceUnlockCyleView) findViewById(R.id.face_unlock_cycle_view);
+		description_info.setOnClickListener(this);
+	}
+
+	@Override
+	public void onClick(View v) {
+		// TODO Auto-generated method stub
+		new Thread(new Runnable() {
+
+			@Override
+			public void run() {
+				// TODO Auto-generated method stub
+				while (progress <= 100) {
+
+					CycleView.setProgress(progress);
+
+					progress += 20;
+
+					try {
+						Thread.sleep(200);
+						if(progress == 100){
+							mhandler.sendEmptyMessage(100);
+						}
+					} catch (InterruptedException e) {
+						e.printStackTrace();
+					}
+				}
+
+			}
+		}).start();
+	}
+
+	private final class SurfaceViewCallback implements Callback {
+
+		@Override
+		public void surfaceCreated(SurfaceHolder holder) {
+			Log.d("shen", "surfaceCreated");
+
+			if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD) {
+				for (int i = 0; i < Camera.getNumberOfCameras(); i++) {
+					CameraInfo info = new CameraInfo();
+					Camera.getCameraInfo(i, info);
+					if (info.facing == CameraInfo.CAMERA_FACING_FRONT) {
+						camera = Camera.open(i);
+					}
+				}
+			}
+			camera.setDisplayOrientation(90); 
+
+			try {
+				camera.setPreviewDisplay(holder);
+			} catch (IOException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			}
+
+			Camera.Parameters parameters = camera.getParameters();
+			parameters.setPreviewSize(200, 200);
+			parameters.setPreviewFrameRate(5);
+			parameters.setPictureFormat(PixelFormat.JPEG);
+			parameters.set("jpeg-quality", 85);
+			parameters.setPictureSize(200, 200);
+			camera.startPreview();
+
+			camera.setPreviewCallback(new Camera.PreviewCallback() {
+
+				@Override
+				public void onPreviewFrame(byte[] data, Camera camera) {
+					Log.d("shen", "camera:" + camera);
+					Log.d("shen", "byte:" + data);
+				}
+
+			});
+			preview = true;
+		}
+
+		@Override
+		public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {
+			Log.d("shen", "surfaceChanged");
+		}
+
+		@Override
+		public void surfaceDestroyed(SurfaceHolder holder) {
+			if (camera != null) {
+
+				if (preview) {
+					camera.stopPreview();
+					preview = false;
+				}
+				camera.setPreviewCallback(null);
+				camera.release();
+			}
+		}
+
+	}
+
+	private final class TakePictureCallback implements PictureCallback {
+		@Override
+		public void onPictureTaken(byte[] data, Camera camera) {
+		}
+	}
+	
+	private void showEntryErrorDialog() {
+
+		AlertDialog.Builder builder = new AlertDialog.Builder(this);
+		builder.setTitle(R.string.ic_default_face_unlock_entry_failed);
+		builder.setMessage(R.string.ic_default_face_scan_demonstration_summary);
+		builder.setNegativeButton(android.R.string.cancel, new DialogInterface.OnClickListener() {
+			@Override
+			public void onClick(final DialogInterface dialog, final int which) {
+				// The user canceled to enable a 3rd party IME.
+				mDialog.dismiss();
+			}
+		});
+		builder.setPositiveButton(android.R.string.yes, new DialogInterface.OnClickListener() {
+			
+			@Override
+			public void onClick(DialogInterface dialog, int which) {
+				// TODO Auto-generated method stub
+				
+			}
+		});
+		mDialog = builder.create();
+		mDialog.show();
+	}
+}
Index: packages/apps/Settings/src/com/android/settings/faceunlock/FaceUnlockDemonstrationModelViewOne.java
===================================================================
--- packages/apps/Settings/src/com/android/settings/faceunlock/FaceUnlockDemonstrationModelViewOne.java	(revision 0)
+++ packages/apps/Settings/src/com/android/settings/faceunlock/FaceUnlockDemonstrationModelViewOne.java	(revision 2329)
@@ -0,0 +1,20 @@
+package com.android.settings.faceunlock;
+
+import android.os.Bundle;
+import android.support.v4.app.Fragment;
+import android.view.LayoutInflater;
+import android.view.View;
+import com.android.settings.R;
+import android.view.ViewGroup;
+
+public class FaceUnlockDemonstrationModelViewOne extends Fragment {
+
+	@Override
+	public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreateView(inflater, container, savedInstanceState);
+		View v = inflater.inflate(R.layout.demonstration_one, container, false);
+		return v;
+	}
+
+}
Index: packages/apps/Settings/src/com/android/settings/faceunlock/FaceUnlockCyleView.java
===================================================================
--- packages/apps/Settings/src/com/android/settings/faceunlock/FaceUnlockCyleView.java	(revision 0)
+++ packages/apps/Settings/src/com/android/settings/faceunlock/FaceUnlockCyleView.java	(revision 2329)
@@ -0,0 +1,185 @@
+package com.android.settings.faceunlock;
+
+import android.content.Context;
+import android.content.res.TypedArray;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Paint;
+import android.graphics.RectF;
+import android.graphics.Typeface;
+import android.util.AttributeSet;
+import com.android.settings.R;
+import android.util.Log;
+import android.view.View;
+
+public class FaceUnlockCyleView extends View {
+
+	private Paint paint;
+
+	private int roundColor;
+
+	private int roundProgressColor;
+
+	private float roundProgressInerCycle;
+
+	private int textColor;
+
+	private float textSize;
+
+	private float roundWidth;
+
+	private int max;
+
+	private int progress;
+
+	private boolean textIsDisplayable;
+
+	private int style;
+
+	public static final int STROKE = 0;
+	public static final int FILL = 1;
+
+	public FaceUnlockCyleView(Context context) {
+		this(context, null);
+	}
+
+	public FaceUnlockCyleView(Context context, AttributeSet attrs) {
+		this(context, attrs, 0);
+	}
+
+	public FaceUnlockCyleView(Context context, AttributeSet attrs, int defStyle) {
+		super(context, attrs, defStyle);
+
+		paint = new Paint();
+		TypedArray mTypedArray = context.obtainStyledAttributes(attrs, R.styleable.RoundProgressBar);
+		roundColor = mTypedArray.getColor(R.styleable.RoundProgressBar_roundColor, Color.RED);
+		roundProgressColor = mTypedArray.getColor(R.styleable.RoundProgressBar_roundProgressColor, Color.GREEN);
+		roundProgressInerCycle = mTypedArray.getDimension(R.styleable.RoundProgressBar_roundProgressInterCycle, 20);
+		textColor = mTypedArray.getColor(R.styleable.RoundProgressBar_textColor, Color.GREEN);
+		textSize = mTypedArray.getDimension(R.styleable.RoundProgressBar_textSize, 15);
+		roundWidth = mTypedArray.getDimension(R.styleable.RoundProgressBar_roundWidth, 5);
+		max = mTypedArray.getInteger(R.styleable.RoundProgressBar_max, 100);
+		textIsDisplayable = mTypedArray.getBoolean(R.styleable.RoundProgressBar_textIsDisplayable, true);
+		style = mTypedArray.getInt(R.styleable.RoundProgressBar_style, 0);
+		mTypedArray.recycle();
+	}
+
+	@Override
+	protected void onDraw(Canvas canvas) {
+		super.onDraw(canvas);
+
+		Log.i("shen", "getWidth() = "+getWidth());
+		int centre = getWidth() / 2;
+		int radius = (int) (centre - roundWidth / 2);
+		Log.i("shen", "radius = "+radius);
+		paint.setColor(roundColor);
+		paint.setStyle(Paint.Style.STROKE);
+		paint.setStrokeWidth(roundWidth);
+		paint.setAntiAlias(true);
+		canvas.drawCircle(centre, centre, radius, paint);
+
+		paint.setStrokeWidth(0);
+		paint.setColor(textColor);
+		paint.setTextSize(textSize);
+		paint.setTypeface(Typeface.DEFAULT_BOLD);
+		int percent = (int) (((float) progress / (float) max) * 100);
+		float textWidth = paint.measureText(percent + "%");
+
+		if (textIsDisplayable && percent != 0 && style == STROKE) {
+			Log.i("shen", "centre - textWidth / 2 = "+(centre - textWidth / 2)+"   centre + textSize / 2 = "+(centre + textSize / 2));
+			canvas.drawText(percent + "%", centre - textWidth / 2, centre + textSize+760 / 2, paint);
+		}
+
+		paint.setStrokeWidth(roundWidth);
+		paint.setColor(roundProgressColor);
+		
+		RectF oval = new RectF(centre - radius, centre - radius, centre + radius, centre + radius);
+
+		switch (style) {
+		case STROKE: {
+			paint.setStyle(Paint.Style.STROKE);
+			Log.i("shen", "oval = "+oval+ "   progress = "+progress+"   max = "+max);
+			canvas.drawArc(oval, -90, 360 * progress / max, false, paint);
+			Log.i("shen", "360 * progress / max = "+(360 * progress / max));
+			break;
+		}
+		case FILL: {
+			paint.setStyle(Paint.Style.FILL_AND_STROKE);
+			if (progress != 0)
+//				canvas.drawArc(oval, 0, 360 * progress / max, true, paint);
+			break;
+		}
+		}
+
+	}
+
+	public synchronized int getMax() {
+		return max;
+	}
+
+	public synchronized void setMax(int max) {
+		if (max < 0) {
+			throw new IllegalArgumentException("max not less than 0");
+		}
+		this.max = max;
+	}
+
+	public synchronized int getProgress() {
+		return progress;
+	}
+
+	public synchronized void setProgress(int progress) {
+		if (progress < 0) {
+			throw new IllegalArgumentException("progress not less than 0");
+		}
+		if (progress > max) {
+			progress = max;
+		}
+		if (progress <= max) {
+			this.progress = progress;
+			postInvalidate();
+		}
+
+	}
+
+	public int getCricleColor() {
+		return roundColor;
+	}
+
+	public void setCricleColor(int cricleColor) {
+		this.roundColor = cricleColor;
+	}
+
+	public int getCricleProgressColor() {
+		return roundProgressColor;
+	}
+
+	public void setCricleProgressColor(int cricleProgressColor) {
+		this.roundProgressColor = cricleProgressColor;
+	}
+
+	public int getTextColor() {
+		return textColor;
+	}
+
+	public void setTextColor(int textColor) {
+		this.textColor = textColor;
+	}
+
+	public float getTextSize() {
+		return textSize;
+	}
+
+	public void setTextSize(float textSize) {
+		this.textSize = textSize;
+	}
+
+	public float getRoundWidth() {
+		return roundWidth;
+	}
+
+	public void setRoundWidth(float roundWidth) {
+		this.roundWidth = roundWidth;
+	}
+
+}
Index: packages/apps/Settings/src/com/android/settings/faceunlock/FaceUnlockSecuritySystemActivity.java
===================================================================
--- packages/apps/Settings/src/com/android/settings/faceunlock/FaceUnlockSecuritySystemActivity.java	(revision 0)
+++ packages/apps/Settings/src/com/android/settings/faceunlock/FaceUnlockSecuritySystemActivity.java	(revision 2329)
@@ -0,0 +1,113 @@
+package com.android.settings.faceunlock;
+
+import android.app.ActionBar;
+import android.app.Activity;
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.graphics.Color;
+import android.os.Bundle;
+import android.util.Log;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.ImageButton;
+import android.widget.TextView;
+import com.android.settings.R;
+import android.widget.ImageView;
+
+public class FaceUnlockSecuritySystemActivity extends Activity {
+
+	private static final int INIT_ACTIONBAR_NUM = -1;
+	private static final int ACTIONBAR_BACK_NUM = 1;
+	private ActionBar myactionbar;
+	private TextView myactionbar_title, security_system_titles, security_system_summary;
+	private ImageButton myactionbar_back, myactionbar_add;
+	private ImageView mFace_security_system_icon;
+	private SharedPreferences sp;
+	
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+		setContentView(R.layout.face_public_action_line_top);
+		sp = getSharedPreferences("com.android.settings_preferences", MODE_PRIVATE);
+		initViews();
+		initCustomActionBar();
+		/*boolean isFirstIn = sp.getBoolean("is_first_in", true);
+		if (isFirstIn) {
+			mFace_security_system_icon.postDelayed(new Runnable() {
+				
+				@Override
+				public void run() {
+					startActivity(new Intent(FaceUnlockSecuritySystemActivity.this, FaceUnlockGuideActivity.class));
+					sp.edit().putBoolean("is_first_in", false).commit();
+				}
+			}, 3000);
+		}*/  //changed by iuv luyang
+	}
+
+	private void initViews() {
+		// TODO Auto-generated method stub
+		mFace_security_system_icon = (ImageView) findViewById(R.id.public_icons_layout_icon);
+		security_system_titles = (TextView) findViewById(R.id.public_title);
+		security_system_summary = (TextView) findViewById(R.id.public_summary);
+		security_system_titles.setTextColor(getResources().getColor(R.color.ic_default_title_text_color));
+		security_system_summary.setTextColor(getResources().getColor(R.color.ic_default_title_text_color));
+		security_system_titles.setTextSize(14);
+		security_system_summary.setTextSize(14);
+		initTextContent();
+	}
+
+	private void initTextContent() {
+		// TODO Auto-generated method stub
+		mFace_security_system_icon.setBackgroundDrawable(getResources().getDrawable(R.drawable.face_security_system_icon));
+		security_system_titles.setText(getResources().getString(R.string.security_system_text_title));
+		// security_system_summary.setText(getResources().getString(R.string.security_system_text_summary));
+	}
+
+	private boolean initCustomActionBar() {
+		myactionbar = getActionBar();
+		if (myactionbar == null) {
+			return false;
+		} else {
+			myactionbar.setDisplayOptions(ActionBar.DISPLAY_SHOW_CUSTOM);
+			myactionbar.setDisplayShowCustomEnabled(true);
+			myactionbar.setCustomView(R.layout.my_actionbar_style);
+			myactionbar_title = (TextView) myactionbar.getCustomView().findViewById(R.id.my_actionbar_title);
+			myactionbar_back = (ImageButton) myactionbar.getCustomView().findViewById(R.id.ps_back_btn);
+			myactionbar_back.setVisibility(View.VISIBLE);
+			myactionbar_back.setOnClickListener(new MySecuritySystemMainOnClick(ACTIONBAR_BACK_NUM));
+			myactionbar_add = (ImageButton) myactionbar.getCustomView().findViewById(R.id.ps_save_btn);
+			myactionbar_add.setVisibility(View.GONE);
+			myactionbar_title.setTextSize(14);
+			myactionbar_title.setText(getResources().getString(R.string.into_the_security_system));
+			return true;
+		}
+	}
+
+	class MySecuritySystemMainOnClick implements OnClickListener {
+
+		int temp_index = INIT_ACTIONBAR_NUM;
+
+		public MySecuritySystemMainOnClick(int index) {
+			super();
+			// TODO Auto-generated constructor stub
+			temp_index = index;
+		}
+
+		@Override
+		public void onClick(View v) {
+			// TODO Auto-generated method stub
+			switch (temp_index) {
+			case ACTIONBAR_BACK_NUM:
+				finish();
+				break;
+			default:
+				break;
+			}
+		}
+
+	}
+
+}
Index: packages/apps/Settings/src/com/android/settings/faceunlock/FaceUnlockGuideActivity.java
===================================================================
--- packages/apps/Settings/src/com/android/settings/faceunlock/FaceUnlockGuideActivity.java	(revision 0)
+++ packages/apps/Settings/src/com/android/settings/faceunlock/FaceUnlockGuideActivity.java	(revision 2329)
@@ -0,0 +1,114 @@
+package com.android.settings.faceunlock;
+
+import android.animation.ValueAnimator;
+import android.animation.ValueAnimator.AnimatorUpdateListener;
+import android.app.Activity;
+import android.graphics.Color;
+import android.os.Build;
+import android.os.Bundle;
+import android.util.Log;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.Window;
+import android.view.WindowManager;
+import android.view.animation.Animation;
+import android.view.animation.LinearInterpolator;
+import android.widget.ImageView;
+
+import com.android.settings.R;
+
+/**
+ * @author zhouqinglong
+ *
+ */
+public class FaceUnlockGuideActivity extends Activity {
+	private ImageView icon1, icon2, icon3;
+	private ValueAnimator anim;
+
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+		initStatusBar();
+		setContentView(R.layout.face_security_guide_layout);
+		initView();
+		icon1.post(new Runnable() {
+
+			@Override
+			public void run() {
+				showDirectionAnim();
+			}
+		});
+	}
+
+	private void initView() {
+		icon1 = (ImageView) findViewById(R.id.icon1);
+		icon2 = (ImageView) findViewById(R.id.icon2);
+		icon3 = (ImageView) findViewById(R.id.icon3);
+	}
+
+	private void initStatusBar() {
+		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
+			Window window = getWindow();
+			window.setStatusBarColor(getResources().getColor(R.color.face_guide_color));
+			window.setNavigationBarColor(getResources().getColor(R.color.face_guide_color));
+		}
+	}
+
+	private void showDirectionAnim() {
+		icon1.setAlpha(0f);
+		icon2.setAlpha(0f);
+		icon3.setAlpha(0f);
+		anim = ValueAnimator.ofFloat(0, 1);
+		anim.addUpdateListener(new AnimatorUpdateListener() {
+
+			@Override
+			public void onAnimationUpdate(ValueAnimator animation) {
+				float val = (Float) animation.getAnimatedValue();
+				if (val <= 1f / 6f) {
+					icon1.setAlpha(val * 6f);
+					icon2.setAlpha(0f);
+					icon3.setAlpha(0f);
+				} else if (val >= 2f / 6f && val <= 3f / 6f) {
+					icon1.setAlpha(1f);
+					icon2.setAlpha((val - 2f / 6f) * 6f);
+					icon3.setAlpha(0f);
+				} else if (val >= 4f / 6f && val <= 5f / 6f) {
+					icon1.setAlpha(1f);
+					icon2.setAlpha(1f);
+					icon3.setAlpha((val - 4f / 6f) * 6f);
+				} else if (val >= 11f / 12f) {
+					icon1.setAlpha(0f);
+					icon2.setAlpha(0f);
+					icon3.setAlpha(0f);
+				}
+			}
+		});
+		anim.setDuration(2100);
+		anim.setInterpolator(new LinearInterpolator());
+		anim.setRepeatCount(Animation.INFINITE);
+		anim.start();
+	}
+
+	@Override
+	public boolean onTouchEvent(MotionEvent event) {
+		if (event.getAction() == MotionEvent.ACTION_DOWN) {
+			finish();
+		}
+		return super.onTouchEvent(event);
+	}
+	@Override
+	protected void onStart() {
+		super.onStart();
+		if (anim != null && !anim.isRunning()) {
+			anim.start();
+		}
+	}
+	@Override
+	protected void onStop() {
+		super.onStop();
+		if (anim != null && anim.isRunning()) {
+			anim.cancel();
+		}
+	}
+}
Index: packages/apps/Settings/src/com/android/settings/faceunlock/FaceUnlockAppLockMainActivity.java
===================================================================
--- packages/apps/Settings/src/com/android/settings/faceunlock/FaceUnlockAppLockMainActivity.java	(revision 0)
+++ packages/apps/Settings/src/com/android/settings/faceunlock/FaceUnlockAppLockMainActivity.java	(revision 2329)
@@ -0,0 +1,114 @@
+package com.android.settings.faceunlock;
+
+import android.app.ActionBar;
+import android.app.Activity;
+import android.content.ComponentName;
+import android.content.Intent;
+import android.os.Bundle;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.widget.Button;
+import android.widget.ImageButton;
+import android.widget.TextView;
+import com.android.settings.R;
+import android.widget.ImageView;
+
+public class FaceUnlockAppLockMainActivity extends Activity {
+
+	private static final int INIT_ACTIONBAR_NUM = -1;
+	private static final int ACTIONBAR_BACK_NUM = 1;
+	private static final int SETTING_APP_LOCK_NUM = 2;
+	private ActionBar myactionbar;
+	private Button app_lock_btn;
+	private TextView myactionbar_title, app_lock_titles;
+	private ImageButton myactionbar_back, myactionbar_add;
+	private ImageView mFace_applock_icon;
+
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+		setContentView(R.layout.face_public_action_line_top);
+		initViews();
+		initCustomActionBar();
+	}
+
+	private void initViews() {
+		// TODO Auto-generated method stub
+		mFace_applock_icon = (ImageView) findViewById(R.id.public_icons_layout_icon);
+		app_lock_titles = (TextView) findViewById(R.id.public_title);
+		app_lock_btn = (Button) findViewById(R.id.settings_app_lock_btn);
+		app_lock_titles.setTextColor(getResources().getColor(R.color.ic_default_title_text_color));
+		app_lock_titles.setTextSize(14);
+		initTextContent();
+	}
+
+	private void initTextContent() {
+		// TODO Auto-generated method stub
+		mFace_applock_icon.setBackgroundDrawable(getResources().getDrawable(R.drawable.face_applock_icon));
+		app_lock_titles.setText(getResources().getString(R.string.app_lock_text_title));
+		app_lock_btn.setVisibility(View.VISIBLE);
+		app_lock_btn.setOnClickListener(new OnClickListener() {
+			
+			@Override
+			public void onClick(View v) {
+				Intent intent = new Intent(Intent.ACTION_MAIN);
+				intent.addCategory(Intent.CATEGORY_LAUNCHER); 
+				ComponentName cn = new ComponentName("com.techainsh.applock", 
+						"com.techainsh.applock.activity.MainActivity");            
+				intent.setComponent(cn);
+				startActivity(intent);
+				
+			}
+		});
+	}
+
+	private boolean initCustomActionBar() {
+		myactionbar = getActionBar();
+		if (myactionbar == null) {
+			return false;
+		} else {
+			myactionbar.setDisplayOptions(ActionBar.DISPLAY_SHOW_CUSTOM);
+			myactionbar.setDisplayShowCustomEnabled(true);
+			myactionbar.setCustomView(R.layout.my_actionbar_style);
+			myactionbar_title = (TextView) myactionbar.getCustomView().findViewById(R.id.my_actionbar_title);
+			myactionbar_back = (ImageButton) myactionbar.getCustomView().findViewById(R.id.ps_back_btn);
+			myactionbar_back.setVisibility(View.VISIBLE);
+			myactionbar_back.setOnClickListener(new MyAppLockMainOnClick(ACTIONBAR_BACK_NUM));
+			myactionbar_add = (ImageButton) myactionbar.getCustomView().findViewById(R.id.ps_save_btn);
+			myactionbar_add.setVisibility(View.GONE);
+			myactionbar_title.setTextSize(14);
+			myactionbar_title.setText(getResources().getString(R.string.settings_app_lock_title));
+			return true;
+		}
+	}
+
+	class MyAppLockMainOnClick implements OnClickListener {
+
+		int temp_index = INIT_ACTIONBAR_NUM;
+
+		public MyAppLockMainOnClick(int index) {
+			super();
+			// TODO Auto-generated constructor stub
+			temp_index = index;
+		}
+
+		@Override
+		public void onClick(View v) {
+			// TODO Auto-generated method stub
+			switch (temp_index) {
+			case ACTIONBAR_BACK_NUM:
+				finish();
+				break;
+			case SETTING_APP_LOCK_NUM:
+				Intent intent = new Intent();
+//				intent.setClass(FaceAppLockMainActivity.this, FaceAppLockActivity.class);
+//				startActivity(intent);
+				break;
+			default:
+				break;
+			}
+		}
+
+	}
+}
Index: packages/apps/Settings/src/com/android/settings/faceunlock/FaceUnlockDemonstrationModelViewTwo.java
===================================================================
--- packages/apps/Settings/src/com/android/settings/faceunlock/FaceUnlockDemonstrationModelViewTwo.java	(revision 0)
+++ packages/apps/Settings/src/com/android/settings/faceunlock/FaceUnlockDemonstrationModelViewTwo.java	(revision 2329)
@@ -0,0 +1,20 @@
+package com.android.settings.faceunlock;
+
+import android.os.Bundle;
+import android.support.v4.app.Fragment;
+import android.view.LayoutInflater;
+import android.view.View;
+import com.android.settings.R;
+import android.view.ViewGroup;
+
+public class FaceUnlockDemonstrationModelViewTwo extends Fragment {
+
+	@Override
+	public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreateView(inflater, container, savedInstanceState);
+		View v = inflater.inflate(R.layout.demonstration_two, container, false);
+		return v;
+	}
+
+}
Index: packages/apps/Settings/res/layout/face_unlock_main.xml
===================================================================
--- packages/apps/Settings/res/layout/face_unlock_main.xml	(revision 0)
+++ packages/apps/Settings/res/layout/face_unlock_main.xml	(revision 2329)
@@ -0,0 +1,399 @@
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical" >
+
+    <LinearLayout
+        android:id="@+id/face_unlock_manager_title"
+        android:layout_width="match_parent"
+        android:layout_height="30dp"
+        android:background="@color/ic_default_main_layout_background_color"
+        android:gravity="center_vertical"
+        android:paddingLeft="16dp" >
+
+        <TextView
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:text="@string/ic_default_face_unlock_manager_title"
+            android:textColor="@color/category_title_background_text"
+            android:textSize="@dimen/context_size_title_categrop" />
+    </LinearLayout>
+
+    <RelativeLayout
+        android:id="@+id/face_unlock_manager_layout"
+        android:layout_width="match_parent"
+        android:layout_height="60dp"
+        android:background="@drawable/layout_background_selector"
+        android:gravity="center_vertical" >
+
+        <!--<ImageView
+            android:id="@+id/face_unlock_manager_icons"
+            android:layout_width="24dp"
+            android:layout_height="24dp"
+            android:layout_centerVertical="true"
+            android:layout_marginLeft="16dp"
+            android:background="@drawable/ic_launcher" /> android:layout_toRightOf="@id/face_unlock_manager_icons"s -->
+
+        <TextView
+            android:id="@+id/face_unlock_manager_name"
+            android:layout_width="wrap_content"
+            android:layout_height="match_parent"
+            android:layout_marginLeft="10dp"
+            android:gravity="center_vertical"
+			android:textColor="@color/ic_default_title_text_color"
+            android:text="@string/ic_default_remove_face_unlock" />
+
+        <ImageView
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_alignParentRight="true"
+            android:layout_centerVertical="true"
+            android:layout_marginRight="16dp"
+            android:background="@drawable/ic_next_pager_icon" />
+    </RelativeLayout>
+
+    <RelativeLayout
+        android:id="@+id/face_unlock_main_layout"
+        android:layout_width="match_parent"
+        android:layout_height="280dp" >
+
+        <ImageView
+            android:id="@+id/face_unlock_main_bg"
+	    android:fitsSystemWindows="true"
+	    android:clipToPadding="true"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:background="@drawable/face_unlock_background"
+            android:layout_alignParentBottom="true" />
+			
+	<ImageView
+            android:id="@+id/face_unlock_main_face"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+	    android:layout_centerInParent="true"
+	    android:layout_above="@+id/face_unlock_main_start_btn"
+            android:background="@drawable/face_unlock_facecode" />
+	 
+	 <Button
+            android:id="@+id/face_unlock_main_start_btn"
+            android:layout_width="150dp"
+            android:layout_height="40dp"
+            android:background="@drawable/face_unlock_btn_selector"
+	    android:layout_centerHorizontal="true"
+	    android:layout_alignBottom="@+id/face_unlock_main_bg"
+	    android:layout_marginBottom="10dp"
+            android:text="@string/ic_default_start_entry_face_btn"
+            android:textColor="@drawable/ic_settings_faceunlock_entry_text_color_selector"
+            android:textSize="15sp" />	
+			
+<!--
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_below="@id/face_unlock_main_view"
+            android:layout_height="wrap_content"
+            android:layout_alignParentBottom="true"
+            android:background="@color/ic_default_layout_background_color"
+            android:gravity="center"
+            android:orientation="horizontal" >
+
+            <Button
+                android:id="@+id/face_unlock_main_start_btn"
+                android:layout_width="160dp"
+                android:layout_height="40dp"
+                android:background="@drawable/add_wifi_btn_style"
+                android:gravity="center"
+                android:text="@string/ic_default_start_entry_face_btn"
+                android:textColor="@color/start_entry_face_btn_bg_color"
+                android:textSize="15sp" />
+        </LinearLayout>
+-->
+    </RelativeLayout>
+
+<!--
+	 <LinearLayout
+          android:layout_width="match_parent"
+          android:layout_height="30dp"
+          android:background="@color/ic_default_main_layout_background_color"
+          android:gravity="center_vertical"
+          android:paddingLeft="12dp" >
+
+             <TextView
+                 android:layout_width="match_parent"
+                 android:layout_height="30dp"
+                 android:layout_marginLeft="5dp"
+                 android:gravity="center_vertical"
+                 android:text="@string/face_use_to_title"
+                 android:textColor="@color/items_summary_color"
+                 android:textSize="@dimen/context_size_title_categrop" />
+     </LinearLayout>
+     -->
+
+            <View
+                android:layout_width="match_parent"
+                android:layout_height="1px"
+                android:background="@color/little_than_black1" />
+	
+<!--	
+	<LinearLayout
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:orientation="horizontal" >
+
+                <RelativeLayout
+                    android:id="@+id/face_security_layout"
+                    android:layout_width="0dp"
+                    android:layout_height="140dp"
+                    android:layout_weight="1" >
+
+                    <ImageView
+                        android:id="@+id/face_security_system_icons"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:layout_centerHorizontal="true"
+                        android:layout_marginTop="30dp"
+                        android:background="@drawable/face_security_system_icons" />
+                    <TextView
+                        android:id="@+id/face_security_system_text"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:layout_below="@id/face_security_system_icons"
+                        android:layout_centerHorizontal="true"
+                        android:layout_marginBottom="10dp"
+                        android:layout_marginTop="12dp"
+                        android:gravity="center"
+                        android:text="@string/into_the_security_system"
+                        android:textColor="@color/face_security_system_color"
+                        android:textSize="@dimen/ic_default_settings_title_size" />
+
+           
+                </RelativeLayout>
+
+                <RelativeLayout
+                    android:id="@+id/face_excrypted_content_layout"
+                    android:layout_width="0dp"
+                    android:layout_height="140dp"
+                    android:layout_weight="1" >
+
+                    <ImageView
+                        android:id="@+id/face_look_the_encrypted_content_icons"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:layout_centerHorizontal="true"
+                        android:layout_marginTop="30dp"
+                        android:background="@drawable/face_look_the_encrypted_content_icons" />
+                    <TextView
+                        android:id="@+id/face_look_the_encrypted_content_text"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:layout_below="@id/face_look_the_encrypted_content_icons"
+                        android:layout_centerHorizontal="true"
+                        android:layout_marginBottom="10dp"
+                        android:layout_marginTop="12dp"
+                        android:gravity="center"
+                        android:text="@string/look_the_encrypted_content"
+                        android:textColor="@color/face_security_system_color"
+                        android:textSize="@dimen/ic_default_settings_title_size" />
+
+                </RelativeLayout>
+
+                <RelativeLayout
+                    android:id="@+id/face_app_lock_layout"
+                    android:layout_width="0dp"
+                    android:layout_height="140dp"
+                    android:layout_weight="1" >
+
+                    <ImageView
+                        android:id="@+id/face_app_lock_icons"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:layout_centerHorizontal="true"
+                        android:layout_marginTop="30dp"
+                        android:background="@drawable/face_app_lock_icons" />
+
+                    <TextView
+                        android:id="@+id/face_app_lock_text"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:layout_below="@id/face_app_lock_icons"
+                        android:layout_centerHorizontal="true"
+                        android:layout_marginBottom="10dp"
+                        android:layout_marginTop="12dp"
+                        android:gravity="center"
+                        android:text="@string/settings_app_lock_title"
+                        android:textColor="@color/face_security_system_color"
+                        android:textSize="@dimen/ic_default_settings_title_size" />
+                </RelativeLayout>
+            </LinearLayout>
+	 -->
+	
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="30dp"
+        android:background="@color/ic_default_main_layout_background_color"
+        android:gravity="center_vertical"
+        android:paddingLeft="16dp" >
+
+        <TextView
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:text="@string/ic_default_face_scan_settings_title"
+            android:textColor="@color/category_title_background_text"
+            android:textSize="@dimen/context_size_title_categrop" />
+    </LinearLayout>
+
+    <RelativeLayout
+        android:id="@+id/face_unlock_demonstration_model_layout"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:background="@drawable/layout_background_selector"
+        android:minHeight="60dp" >
+
+        <LinearLayout
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_marginRight="10dp"
+            android:layout_weight="1"
+            android:orientation="vertical" >
+
+            <TextView
+                android:id="@+id/face_unlock_demonstration_model_title"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_marginLeft="16dp"
+                android:layout_marginTop="20dp"
+                android:gravity="center_vertical"
+                android:text="@string/ic_default_face_scan_demonstration_title"
+                android:textColor="@color/ic_default_title_text_color"
+                android:textSize="@dimen/fonts_dialog_default" />
+
+            <TextView
+                android:id="@+id/face_unlock_demonstration_model_summary"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_marginBottom="8dp"
+                android:layout_marginLeft="16dp"
+                android:layout_marginRight="50dp"
+                android:gravity="center_vertical"
+				android:visibility="gone"
+                android:text="@string/ic_default_face_scan_demonstration_summary"
+                android:textColor="@color/items_summary_color"
+                android:textSize="@dimen/ic_default_settings_summary_size" />
+        </LinearLayout>
+
+        <Switch
+            android:id="@+id/face_unlock_demonstration_model_switch"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_centerVertical="true"
+            android:layout_alignParentRight="true"
+            android:layout_marginRight="12dp" />
+    </RelativeLayout>
+    <!--  android:layout_alignParentRight="true"
+            android:layout_centerVertical="true"
+            android:layout_marginRight="16dp"-->
+
+    <View
+        android:layout_width="match_parent"
+        android:layout_height="1px"
+        android:layout_marginLeft="16dp"
+        android:layout_marginRight="16dp"
+        android:background="#DBDBDB"
+        android:minHeight="80dp" />
+<!-- 
+    <RelativeLayout
+        android:id="@+id/face_unlock_private_model_layout"
+        android:layout_width="match_parent"
+        android:layout_height="60dp"
+        android:background="@drawable/layout_background_selector" >
+
+        <LinearLayout
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_marginRight="10dp"
+            android:orientation="vertical" >
+
+            <TextView
+                android:id="@+id/face_unlock_private_model_title"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_marginLeft="16dp"
+                android:layout_marginTop="10dp"
+                android:gravity="center_vertical"
+                android:text="@string/ic_default_face_scan_private_title"
+                android:textColor="@color/ic_default_title_text_color"
+                android:textSize="@dimen/ic_default_settings_title_size" />
+
+            <TextView
+                android:id="@+id/face_unlock_private_model_summary"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_marginBottom="8dp"
+                android:layout_marginLeft="16dp"
+                android:layout_marginRight="50dp"
+                android:gravity="center_vertical"
+                android:text="@string/ic_default_face_scan_private_summary"
+                android:textColor="@color/items_summary_color"
+                android:textSize="@dimen/ic_default_settings_summary_size" />
+        </LinearLayout>
+
+        <Switch
+            android:id="@+id/face_unlock_private_model_items_switch"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_alignParentRight="true"
+            android:layout_centerVertical="true"
+            android:layout_marginRight="12dp" />
+    </RelativeLayout>
+
+    <View
+        android:layout_width="match_parent"
+        android:layout_height="1px"
+        android:background="#DBDBDB" />
+
+        -->
+
+    <android.support.v4.view.ViewPager
+        android:id="@+id/demonstration_model_bottom_view"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:layout_gravity="center"
+        android:layout_weight="1.0"
+        android:background="#fbfbfb"
+        android:flipInterval="30"
+        android:persistentDrawingCache="animation" />
+
+   <RelativeLayout
+       android:id="@+id/circle_layout"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentBottom="true"
+        android:layout_marginBottom="60dp" >
+
+        <ImageView
+            android:id="@+id/circle_02"
+            android:layout_width="8dp"
+            android:layout_height="8dp"
+            android:visibility="invisible"
+            android:layout_centerHorizontal="true"
+            android:background="@drawable/guide_bottom_circle_selector" />
+
+        <ImageView
+            android:id="@+id/circle_01"
+            android:layout_width="8dp"
+            android:layout_marginRight="1dp"
+            android:layout_height="8dp"
+            android:layout_toLeftOf="@id/circle_02"
+            android:background="@drawable/guide_bottom_circle_selector" />
+
+        <ImageView
+            android:id="@+id/circle_03"
+            android:layout_width="8dp"
+            android:layout_height="8dp"
+            android:layout_marginLeft="1dp"
+            android:layout_toRightOf="@id/circle_02"
+            android:background="@drawable/guide_bottom_circle_selector" />
+
+    </RelativeLayout>
+
+</LinearLayout>
Index: packages/apps/Settings/res/layout/face_security_system_main.xml
===================================================================
--- packages/apps/Settings/res/layout/face_security_system_main.xml	(revision 0)
+++ packages/apps/Settings/res/layout/face_security_system_main.xml	(revision 2329)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical" >
+
+    <TextView
+        android:layout_width="match_parent"
+        android:layout_height="1px"
+        android:background="#A9A9A9" />
+
+</LinearLayout>
\ No newline at end of file
Index: packages/apps/Settings/res/layout/face_perception_content_main.xml
===================================================================
--- packages/apps/Settings/res/layout/face_perception_content_main.xml	(revision 0)
+++ packages/apps/Settings/res/layout/face_perception_content_main.xml	(revision 2329)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical" >
+
+    <TextView
+        android:layout_width="match_parent"
+        android:layout_height="1px"
+        android:background="#A9A9A9" />
+
+</LinearLayout>
\ No newline at end of file
Index: packages/apps/Settings/res/layout/face_guide_public_fragment.xml
===================================================================
--- packages/apps/Settings/res/layout/face_guide_public_fragment.xml	(revision 0)
+++ packages/apps/Settings/res/layout/face_guide_public_fragment.xml	(revision 2329)
@@ -0,0 +1,38 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content" >
+    <!-- IUV_ADD kai.li 2017.2.10 -->
+    <RelativeLayout
+        android:id="@+id/public_icons_layout"
+        android:layout_width="match_parent"
+        android:layout_height="350dp"
+        android:background="@color/little_background_bg_color" >
+    <!-- IUV_END -->
+        <ImageView 
+            android:id="@+id/public_icons_layout_icon"
+            android:layout_height="match_parent"
+            android:layout_width="match_parent"/>
+    </RelativeLayout>
+    <!-- IUV_ADD yanhe.shen 2017.3.6 -->
+    <TextView
+        android:id="@+id/public_title"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_below="@id/public_icons_layout"
+        android:layout_marginTop="17dp"
+        android:layout_marginLeft="17dp"
+        android:layout_marginRight="17dp"
+        android:textSize="@dimen/ic_default_settings_title_size" />
+
+    <TextView
+        android:id="@+id/public_summary"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_below="@id/public_title"
+        android:layout_marginLeft="17dp"
+        android:layout_marginRight="17dp"
+        android:textSize="@dimen/ic_default_settings_summary_size" />
+    <!-- IUV_END -->
+
+</RelativeLayout>
\ No newline at end of file
Index: packages/apps/Settings/res/layout/my_actionbar_style.xml
===================================================================
--- packages/apps/Settings/res/layout/my_actionbar_style.xml	(revision 0)
+++ packages/apps/Settings/res/layout/my_actionbar_style.xml	(revision 2329)
@@ -0,0 +1,36 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:background="@color/ic_default_main_layout_background_color"
+    android:layout_height="match_parent"
+    android:id="@+id/action_bar_layout">
+
+    <ImageButton
+        android:id="@+id/ps_back_btn"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_alignParentLeft="true"
+        android:layout_centerVertical="true"
+        android:background="@drawable/ic_myactionbar_back_btn"
+        android:scaleType="centerInside"/>
+        
+    <TextView
+        android:id="@+id/my_actionbar_title"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:layout_centerInParent="true"
+        android:layout_toRightOf="@id/ps_back_btn"
+        android:gravity="center_vertical"
+        android:layout_marginLeft="10dp"
+        android:textColor="@color/ic_default_title_text_color"
+        android:textSize="@dimen/actionBar_text_size"/>
+
+    <ImageButton
+        android:id="@+id/ps_save_btn"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_alignParentRight="true"
+        android:layout_centerVertical="true"
+        android:visibility="gone" />
+
+</RelativeLayout>
\ No newline at end of file
Index: packages/apps/Settings/res/layout/demonstration_one.xml
===================================================================
--- packages/apps/Settings/res/layout/demonstration_one.xml	(revision 0)
+++ packages/apps/Settings/res/layout/demonstration_one.xml	(revision 2329)
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical" >
+
+    <ImageView
+        android:id="@+id/demonstration_icon"
+        android:layout_width="wrap_content"
+        android:background="@drawable/gome_pic_facecode_phone_call"
+        android:layout_height="wrap_content" />
+
+</LinearLayout>
\ No newline at end of file
Index: packages/apps/Settings/res/layout/face_use_guide_main.xml
===================================================================
--- packages/apps/Settings/res/layout/face_use_guide_main.xml	(revision 0)
+++ packages/apps/Settings/res/layout/face_use_guide_main.xml	(revision 2329)
@@ -0,0 +1,44 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent" >
+
+    <android.support.v4.view.ViewPager
+        android:id="@+id/my_face_viewpager_styles"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:layout_gravity="center"
+        android:background="@color/white"
+        android:persistentDrawingCache="animation" />
+
+    <RelativeLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentBottom="true"
+        android:layout_marginBottom="10dp">
+
+        <ImageView
+            android:id="@+id/circle_02"
+            android:layout_width="8dp"
+            android:layout_height="8dp"
+            android:layout_centerHorizontal="true"
+            android:background="@drawable/guide_bottom_circle_selector" />
+
+        <ImageView
+            android:id="@+id/circle_01"
+            android:layout_width="8dp"
+            android:layout_marginRight="10dp"
+            android:layout_height="8dp"
+            android:layout_toLeftOf="@id/circle_02"
+            android:background="@drawable/guide_bottom_circle_selector" />
+
+        <ImageView
+            android:id="@+id/circle_03"
+            android:layout_width="8dp"
+            android:layout_height="8dp"
+            android:layout_marginLeft="10dp"
+            android:layout_toRightOf="@id/circle_02"
+            android:background="@drawable/guide_bottom_circle_selector" />
+    </RelativeLayout>
+
+</RelativeLayout>
\ No newline at end of file
Index: packages/apps/Settings/res/layout/face_security_guide_layout.xml
===================================================================
--- packages/apps/Settings/res/layout/face_security_guide_layout.xml	(revision 0)
+++ packages/apps/Settings/res/layout/face_security_guide_layout.xml	(revision 2329)
@@ -0,0 +1,51 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:background="@color/face_guide_color" >
+    <RelativeLayout
+        android:id="@+id/icon"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content" 
+        android:layout_alignParentBottom="true"
+        android:layout_centerHorizontal="true"
+        android:layout_marginBottom="@dimen/dp16">
+
+        <ImageView
+            android:id="@+id/icon1"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:rotation="-90"
+            android:layout_centerHorizontal="true"
+            android:src="@drawable/icon_direction_01" />
+
+        <ImageView
+            android:id="@+id/icon2"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:rotation="-90"
+            android:layout_marginTop="@dimen/dp9"
+            android:layout_centerHorizontal="true"
+            android:src="@drawable/icon_direction_02" />
+
+        <ImageView
+            android:id="@+id/icon3"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:rotation="-90"
+            android:layout_centerHorizontal="true"
+            android:layout_marginTop="@dimen/dp18"
+            android:src="@drawable/icon_direction_03" />
+    </RelativeLayout>
+
+    <TextView
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_above="@+id/icon"
+        android:layout_centerHorizontal="true"
+        android:text="@string/face_guide"
+        android:textColor="@color/white"
+        android:layout_marginBottom="@dimen/dp20"
+        android:textSize="@dimen/ic_default_settings_title_size" />
+
+</RelativeLayout>
\ No newline at end of file
Index: packages/apps/Settings/res/layout/face_items_mains.xml
===================================================================
--- packages/apps/Settings/res/layout/face_items_mains.xml	(revision 0)
+++ packages/apps/Settings/res/layout/face_items_mains.xml	(revision 2329)
@@ -0,0 +1,29 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical" >
+
+    <ImageView
+        android:id="@+id/face_icons"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_centerVertical="true"
+        android:layout_marginLeft="16dp" />
+
+    <TextView
+        android:id="@+id/face_text"
+        android:layout_width="wrap_content"
+        android:layout_height="match_parent"
+        android:gravity="center_vertical" />
+
+    <ImageView
+        android:id="@+id/face_switch"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_alignParentRight="true"
+        android:layout_centerVertical="true"
+        android:layout_marginRight="16dp"
+        android:background="@drawable/app_lock_off_on_selector" />
+
+</RelativeLayout>
\ No newline at end of file
Index: packages/apps/Settings/res/layout/demonstration_two.xml
===================================================================
--- packages/apps/Settings/res/layout/demonstration_two.xml	(revision 0)
+++ packages/apps/Settings/res/layout/demonstration_two.xml	(revision 2329)
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical" >
+
+    <ImageView
+        android:id="@+id/demonstration_icon"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:background="@drawable/gome_pic_facecode_phone_notification" />
+
+</LinearLayout>
\ No newline at end of file
Index: packages/apps/Settings/res/layout/re_enter_face_dialog.xml
===================================================================
--- packages/apps/Settings/res/layout/re_enter_face_dialog.xml	(revision 0)
+++ packages/apps/Settings/res/layout/re_enter_face_dialog.xml	(revision 2329)
@@ -0,0 +1,80 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical"
+    android:paddingLeft="@dimen/activity_left_margin"
+    android:paddingRight="@dimen/activity_right_margin" >
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="50dp"
+        android:gravity="center"
+        android:orientation="vertical" >
+
+        <TextView
+            android:id="@+id/face_input_dialog_title"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center"
+            android:text="@string/reenter_face_dialog_title"
+            android:textColor="@color/dialog_text_color"
+            android:textSize="@dimen/dialog_text_title_size" />
+
+    <!--    <View
+            android:id="@+id/line"
+            android:layout_width="match_parent"
+            android:layout_height="1px"
+            android:layout_gravity="bottom"
+            android:layout_marginTop="6dp"
+            android:background="@color/gray_line" />  -->
+    </LinearLayout>
+
+    <LinearLayout
+        android:layout_marginTop="10dp"
+        android:layout_marginBottom="10dp"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:gravity="center_vertical" >
+
+        <TextView
+            android:id="@+id/face_input_dialog_hint"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_marginLeft="9dp"
+	        android:layout_marginBottom="4dp"
+            android:text="@string/reenter_face_dialog_info"
+            android:textColor="@color/dialog_text_color"
+            android:textSize="@dimen/dialog_text_size" />
+    </LinearLayout>
+
+    <LinearLayout
+        android:id="@+id/layout_dialog"
+        android:layout_width="match_parent"
+        android:layout_height="50dp"
+        android:layout_marginBottom="@dimen/activity_horizontal_margin"
+        android:gravity="center"
+        android:visibility="gone" >
+
+        <Button
+            android:id="@+id/dialog_cancel"
+	    style="@android:style/Widget.DeviceDefault.Button"
+            android:layout_width="0dp"
+            android:layout_height="40dp"
+            android:layout_marginRight="8dp"
+            android:layout_weight="1"
+            android:text="@string/button_cancel"
+            android:textColor="@color/button_text_color_normal" />
+
+        <Button
+            android:id="@+id/dialog_ok"
+	    style="@android:style/Widget.DeviceDefault.Button"
+            android:layout_width="0dp"
+            android:layout_height="40dp"
+            android:layout_marginLeft="8dp"
+            android:layout_weight="1"
+            android:text="@string/button_ok"
+            android:textColor="@color/button_text_color_normal" />
+    </LinearLayout>
+
+</LinearLayout>
Index: packages/apps/Settings/res/layout/face_input_layout.xml
===================================================================
--- packages/apps/Settings/res/layout/face_input_layout.xml	(revision 0)
+++ packages/apps/Settings/res/layout/face_input_layout.xml	(revision 2329)
@@ -0,0 +1,410 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:background="@color/input_layout_background_color"
+    android:orientation="vertical" >
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:gravity="center_horizontal"
+        android:orientation="vertical" >
+
+        <EditText
+            android:id="@+id/password_entry"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:visibility="gone" />
+        <!--IUV_ADD wushenfei 20170207-->
+        <TextView
+            android:id="@+id/text"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_centerInParent="true"
+            android:layout_marginTop="102dp"
+            android:gravity="center"
+            android:text="@string/please_input_password"
+            android:textColor="@color/input_text_color"
+            android:textSize="@dimen/ic_default_settings_title_size" />
+
+        <LinearLayout
+            android:layout_width="120dp"
+            android:layout_height="wrap_content"
+            android:layout_marginTop="16dp"
+            android:gravity="center_horizontal"
+            android:orientation="horizontal" >
+
+            <ImageView
+                android:id="@+id/input_image_1"
+                android:layout_width="10dp"
+                android:layout_height="10dp"
+                android:src="@drawable/circle_dark" />
+
+            <ImageView
+                android:id="@+id/input_image_2"
+                android:layout_width="10dp"
+                android:layout_height="10dp"
+                android:layout_marginStart="20dp"
+                android:src="@drawable/circle_dark" />
+
+            <ImageView
+                android:id="@+id/input_image_3"
+                android:layout_width="10dp"
+                android:layout_height="10dp"
+                android:layout_marginStart="20dp"
+                android:src="@drawable/circle_dark" />
+
+            <ImageView
+                android:id="@+id/input_image_4"
+                android:layout_width="10dp"
+                android:layout_height="10dp"
+                android:layout_marginStart="20dp"
+                android:src="@drawable/circle_dark" />
+        </LinearLayout>
+        <!--IUV_END-->
+    </LinearLayout>
+
+    <RelativeLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentBottom="true"
+        android:background="@color/white" >
+
+        <TextView
+            android:id="@+id/line_layout_1"
+            android:layout_width="match_parent"
+            android:layout_height="0.3dp"
+            android:layout_alignParentTop="true"
+            android:background="@color/line_color" />
+
+        <LinearLayout
+            android:id="@+id/layout_num_1"
+            android:layout_width="match_parent"
+            android:layout_height="80dp"
+            android:gravity="center"
+            android:orientation="horizontal" >
+
+            <RelativeLayout
+                android:id="@+id/input_num_1"
+                android:layout_width="0dp"
+                android:layout_height="match_parent"
+                android:layout_weight="1" >
+
+                <ImageButton
+                    android:id="@+id/input_num_btn_1"
+                    android:layout_width="match_parent"
+                    android:layout_height="match_parent"
+                    android:layout_centerInParent="true"
+                    android:background="@drawable/face_image_1_selector" />
+
+                <TextView
+                    android:layout_width="0.3dp"
+                    android:layout_height="match_parent"
+                    android:layout_alignParentRight="true"
+                    android:background="@color/line_color" />
+            </RelativeLayout>
+
+            <RelativeLayout
+                android:id="@+id/input_num_2"
+                android:layout_width="0dp"
+                android:layout_height="match_parent"
+                android:layout_weight="1" >
+
+                <ImageButton
+                    android:id="@+id/input_num_btn_2"
+                    android:layout_width="match_parent"
+                    android:layout_height="match_parent"
+                    android:layout_centerInParent="true"
+                    android:background="@drawable/face_image_2_selector" />
+
+                <TextView
+                    android:layout_width="0.3dp"
+                    android:layout_height="match_parent"
+                    android:layout_alignParentRight="true"
+                    android:background="@color/line_color" />
+            </RelativeLayout>
+
+            <RelativeLayout
+                android:id="@+id/input_num_3"
+                android:layout_width="0dp"
+                android:layout_height="match_parent"
+                android:layout_weight="1" >
+
+                <ImageButton
+                    android:id="@+id/input_num_btn_3"
+                    android:layout_width="match_parent"
+                    android:layout_height="match_parent"
+                    android:layout_centerInParent="true"
+                    android:background="@drawable/face_image_3_selector" />
+
+                <TextView
+                    android:layout_width="0.3dp"
+                    android:layout_height="match_parent"
+                    android:layout_alignParentRight="true"
+                    android:background="@color/line_color" />
+            </RelativeLayout>
+        </LinearLayout>
+
+        <TextView
+            android:id="@+id/line_layout_2"
+            android:layout_width="match_parent"
+            android:layout_height="0.3dp"
+            android:layout_below="@id/layout_num_1"
+            android:background="@color/line_color" />
+
+        <LinearLayout
+            android:id="@+id/layout_num_2"
+            android:layout_width="match_parent"
+            android:layout_height="80dp"
+            android:layout_below="@id/line_layout_2"
+            android:gravity="center"
+            android:orientation="horizontal" >
+
+            <RelativeLayout
+                android:id="@+id/input_num_4"
+                android:layout_width="0dp"
+                android:layout_height="match_parent"
+                android:layout_weight="1" >
+
+                <ImageButton
+                    android:id="@+id/input_num_btn_4"
+                    android:layout_width="match_parent"
+                    android:layout_height="match_parent"
+                    android:layout_centerInParent="true"
+                    android:background="@drawable/face_image_4_selector" />
+
+                <TextView
+                    android:layout_width="0.3dp"
+                    android:layout_height="match_parent"
+                    android:layout_alignParentRight="true"
+                    android:background="@color/line_color" />
+            </RelativeLayout>
+
+            <RelativeLayout
+                android:id="@+id/input_num_5"
+                android:layout_width="0dp"
+                android:layout_height="match_parent"
+                android:layout_weight="1" >
+
+                <ImageButton
+                    android:id="@+id/input_num_btn_5"
+                    android:layout_width="match_parent"
+                    android:layout_height="match_parent"
+                    android:layout_centerInParent="true"
+                    android:background="@drawable/face_image_5_selector" />
+
+                <TextView
+                    android:layout_width="0.3dp"
+                    android:layout_height="match_parent"
+                    android:layout_alignParentRight="true"
+                    android:background="@color/line_color" />
+            </RelativeLayout>
+
+            <RelativeLayout
+                android:id="@+id/input_num_6"
+                android:layout_width="0dp"
+                android:layout_height="match_parent"
+                android:layout_weight="1" >
+
+                <ImageButton
+                    android:id="@+id/input_num_btn_6"
+                    android:layout_width="match_parent"
+                    android:layout_height="match_parent"
+                    android:layout_centerInParent="true"
+                    android:background="@drawable/face_image_6_selector" />
+
+                <TextView
+                    android:layout_width="0.3dp"
+                    android:layout_height="match_parent"
+                    android:layout_alignParentRight="true"
+                    android:background="@color/line_color" />
+            </RelativeLayout>
+        </LinearLayout>
+
+        <TextView
+            android:id="@+id/line_layout_3"
+            android:layout_width="match_parent"
+            android:layout_height="0.3dp"
+            android:layout_below="@id/layout_num_2"
+            android:background="@color/line_color" />
+
+        <LinearLayout
+            android:id="@+id/layout_num_3"
+            android:layout_width="match_parent"
+            android:layout_height="80dp"
+            android:layout_below="@id/line_layout_3"
+            android:gravity="center"
+            android:orientation="horizontal" >
+
+            <RelativeLayout
+                android:id="@+id/input_num_7"
+                android:layout_width="0dp"
+                android:layout_height="match_parent"
+                android:layout_weight="1" >
+
+                <ImageButton
+                    android:id="@+id/input_num_btn_7"
+                    android:layout_width="match_parent"
+                    android:layout_height="match_parent"
+                    android:layout_centerInParent="true"
+                    android:background="@drawable/face_image_7_selector" />
+
+                <TextView
+                    android:layout_width="0.3dp"
+                    android:layout_height="match_parent"
+                    android:layout_alignParentRight="true"
+                    android:background="@color/line_color" />
+            </RelativeLayout>
+
+            <RelativeLayout
+                android:id="@+id/input_num_8"
+                android:layout_width="0dp"
+                android:layout_height="match_parent"
+                android:layout_weight="1" >
+
+                <ImageButton
+                    android:id="@+id/input_num_btn_8"
+                    android:layout_width="match_parent"
+                    android:layout_height="match_parent"
+                    android:layout_centerInParent="true"
+                    android:background="@drawable/face_image_8_selector" />
+
+                <TextView
+                    android:layout_width="0.3dp"
+                    android:layout_height="match_parent"
+                    android:layout_alignParentRight="true"
+                    android:background="@color/line_color" />
+            </RelativeLayout>
+
+            <RelativeLayout
+                android:id="@+id/input_num_9"
+                android:layout_width="0dp"
+                android:layout_height="match_parent"
+                android:layout_weight="1" >
+
+                <ImageButton
+                    android:id="@+id/input_num_btn_9"
+                    android:layout_width="match_parent"
+                    android:layout_height="match_parent"
+                    android:layout_centerInParent="true"
+                    android:background="@drawable/face_image_9_selector" />
+
+                <TextView
+                    android:layout_width="0.3dp"
+                    android:layout_height="match_parent"
+                    android:layout_alignParentRight="true"
+                    android:background="@color/line_color" />
+            </RelativeLayout>
+        </LinearLayout>
+
+        <TextView
+            android:id="@+id/line_layout_4"
+            android:layout_width="match_parent"
+            android:layout_height="0.3dp"
+            android:layout_below="@id/layout_num_3"
+            android:background="@color/line_color" />
+
+        <LinearLayout
+            android:id="@+id/layout_num_4"
+            android:layout_width="match_parent"
+            android:layout_height="80dp"
+            android:layout_below="@id/line_layout_4"
+            android:gravity="center"
+            android:orientation="horizontal" >
+
+            <RelativeLayout
+                android:id="@+id/input_num_null"
+                android:layout_width="0dp"
+                android:layout_height="match_parent"
+                android:layout_weight="1"
+                android:background="@drawable/face_image_selector" >
+
+                <ImageButton
+                    android:id="@+id/input_num_btn_null"
+                    android:layout_width="0dp"
+                    android:layout_height="0dp"
+                    android:layout_centerInParent="true"
+                    android:background="@null" />
+
+                <TextView
+                    android:layout_width="0.3dp"
+                    android:layout_height="match_parent"
+                    android:layout_alignParentRight="true"
+                    android:background="@color/line_color" />
+            </RelativeLayout>
+
+            <RelativeLayout
+                android:id="@+id/input_num_0"
+                android:layout_width="0dp"
+                android:layout_height="match_parent"
+                android:layout_weight="1" >
+
+                <ImageButton
+                    android:id="@+id/input_num_btn_0"
+                    android:layout_width="match_parent"
+                    android:layout_height="match_parent"
+                    android:layout_centerInParent="true"
+                    android:background="@drawable/face_image_0_selector" />
+
+                <TextView
+                    android:layout_width="0.3dp"
+                    android:layout_height="match_parent"
+                    android:layout_alignParentRight="true"
+                    android:background="@color/line_color" />
+            </RelativeLayout>
+
+            <RelativeLayout
+                android:id="@+id/input_num_backspace"
+                android:layout_width="0dp"
+                android:layout_height="match_parent"
+                android:layout_weight="1" >
+
+                <ImageButton
+                    android:id="@+id/input_num_btn_backspace"
+                    android:layout_width="match_parent"
+                    android:layout_height="match_parent"
+                    android:layout_centerInParent="true"
+                    android:background="@drawable/face_image_backspace_selector" />
+
+                <TextView
+                    android:layout_width="0.3dp"
+                    android:layout_height="match_parent"
+                    android:layout_alignParentRight="true"
+                    android:background="@color/line_color" />
+            </RelativeLayout>
+        </LinearLayout>
+    </RelativeLayout>
+
+    <com.android.internal.widget.PasswordEntryKeyboardView
+        android:id="@+id/keyboard"
+        android:layout_width="match_parent"
+        android:layout_height="312dp"
+        android:layout_alignParentBottom="true"
+        android:background="#00000000"
+        android:keyBackground="@*android:drawable/btn_keyboard_key_fulltrans"
+        android:visibility="gone" />
+
+    <Button
+        android:id="@+id/cancelButton"
+        style="@android:style/Widget.Material.Button.Borderless"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="start|bottom"
+        android:layout_marginBottom="14dp"
+        android:layout_marginEnd="8dp"
+        android:layout_marginStart="8dp"
+        android:text="@string/cancel"
+        android:visibility="gone" />
+
+    <ImageView
+        android:id="@+id/fingerprintIcon"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="end|bottom"
+        android:layout_marginBottom="28dp"
+        android:layout_marginEnd="20dp"
+        android:visibility="gone" />
+
+</RelativeLayout>
\ No newline at end of file
Index: packages/apps/Settings/res/layout/face_input_animation.xml
===================================================================
--- packages/apps/Settings/res/layout/face_input_animation.xml	(revision 0)
+++ packages/apps/Settings/res/layout/face_input_animation.xml	(revision 2329)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+              android:orientation="vertical"
+              android:layout_width="match_parent"
+              android:layout_height="match_parent">
+
+    <com.android.settings.face.DrawFaceEyesView
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"/>
+
+</LinearLayout>
\ No newline at end of file
Index: packages/apps/Settings/res/layout/face_unlock_scan_main.xml
===================================================================
--- packages/apps/Settings/res/layout/face_unlock_scan_main.xml	(revision 0)
+++ packages/apps/Settings/res/layout/face_unlock_scan_main.xml	(revision 2329)
@@ -0,0 +1,75 @@
+<?xml version="1.0" encoding="utf-8"?>
+<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:android_custom="http://schemas.android.com/apk/res/com.android.settings"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical" >
+
+    <RelativeLayout
+        android:layout_width="match_parent"
+        android:layout_height="400dp"
+        android:layout_centerHorizontal="true"
+        android:gravity="center"
+        android:orientation="vertical"
+        android:visibility="gone" >
+
+        <com.android.settings.faceunlock.FaceUnlockCyleView
+            android:layout_width="280dp"
+            android:layout_height="280dp"
+            android:layout_gravity="center"
+            android_custom:roundColor="#D1D1D1"
+            android_custom:roundProgressColor="#3C87FE"
+            android_custom:roundWidth="6dp"
+            android_custom:textColor="#9A32CD"
+            android_custom:textSize="18sp" />
+    </RelativeLayout>
+
+    <SurfaceView
+        android:id="@+id/face_unlock_cycle_surfaceView"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:visibility="visible" />
+
+    <RelativeLayout
+        android:id="@+id/face_unlock_scan_layout"
+        android:layout_width="match_parent"
+        android:layout_height="500dp"
+        android:layout_centerHorizontal="true"
+        android:gravity="center"
+        android:orientation="vertical" >
+
+        <com.android.settings.faceunlock.FaceUnlockCyleView
+            android:id="@+id/face_unlock_cycle_view"
+            android:layout_width="310dp"
+            android:layout_height="540dp"
+            android:layout_gravity="center"
+            android:layout_marginTop="120dp"
+            android_custom:roundColor="#D1D1D1"
+            android_custom:roundProgressColor="#3C87FE"
+            android_custom:roundWidth="6dp"
+            android_custom:textColor="#3C87FE"
+            android_custom:textSize="18sp" />
+    </RelativeLayout>
+
+    <RelativeLayout
+        android:id="@+id/face_unlock_scan_bottom"
+        android:layout_width="match_parent"
+        android:layout_height="120dp"
+        android:gravity="center_horizontal"
+        android:layout_gravity="center|bottom"
+        android:background="@android:color/white"
+        android:orientation="vertical" >
+
+        <TextView
+            android:id="@+id/face_unlock_scan_bottom_info"
+            android:layout_width="200dp"
+            android:layout_marginTop="20dp"
+            android:layout_height="wrap_content"
+            android:gravity="center_horizontal"
+            android:lineSpacingExtra="5dp"
+            android:text="@string/ic_default_sacn_face_description_info"
+            android:textSize="@dimen/ic_default_settings_summary_size" />
+    </RelativeLayout>
+
+</FrameLayout>
\ No newline at end of file
Index: packages/apps/Settings/res/layout/face_public_action_line_top.xml
===================================================================
--- packages/apps/Settings/res/layout/face_public_action_line_top.xml	(revision 0)
+++ packages/apps/Settings/res/layout/face_public_action_line_top.xml	(revision 2329)
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical" >
+
+    <include layout="@layout/face_guide_public_fragment" />
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:gravity="center"
+        android:layout_marginTop="10dp" >
+
+        <Button
+            android:id="@+id/settings_app_lock_btn"
+            android:layout_width="288dp"
+            android:layout_height="41dp"
+            android:text="@string/to_settings_app_lock_btn_text"
+            style="@android:style/Widget.DeviceDefault.Button"
+            android:visibility="gone" />
+    </LinearLayout>
+
+</LinearLayout>
\ No newline at end of file
Index: packages/apps/Settings/res/layout/face_view_close_dialog.xml
===================================================================
--- packages/apps/Settings/res/layout/face_view_close_dialog.xml	(revision 0)
+++ packages/apps/Settings/res/layout/face_view_close_dialog.xml	(revision 2329)
@@ -0,0 +1,80 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+              android:orientation="vertical"
+              android:layout_width="match_parent"
+              android:layout_height="match_parent"
+              android:paddingLeft="@dimen/activity_left_margin"
+              android:paddingRight="@dimen/activity_right_margin">
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="50dp"
+        android:gravity="center"
+        android:orientation="vertical">
+
+        <TextView
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@string/dialog_face_view_title"
+            android:layout_gravity="center"
+            android:padding="4dp"
+            android:id="@+id/dialog_face_view_title"
+            android:textColor="@color/dialog_text_color"
+            android:textSize="@dimen/dialog_text_title_size"/>
+
+        <View
+            android:layout_width="match_parent"
+            android:layout_height="1px"
+            android:layout_marginTop="6dp"
+            android:background="@color/gray_line"
+            android:layout_gravity="bottom"/>
+    </LinearLayout>
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="100dp"
+        android:gravity="center_vertical">
+
+        <TextView
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:text="@string/dialog_face_view_hint"
+            android:id="@+id/dialog_face_view_hint"
+            android:textColor="@color/dialog_text_color"
+            android:padding="4dp"
+            android:textSize="@dimen/dialog_text_size"/>
+    </LinearLayout>
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="50dp"
+        android:gravity="center"
+        android:visibility="gone"
+        android:id="@+id/layout_face_view_dialog"
+        android:layout_marginBottom="@dimen/activity_horizontal_margin"
+        >
+
+        <Button
+            android:layout_width="0dp"
+            android:layout_height="40dp"
+            android:layout_weight="1"
+            android:layout_marginRight="8dp"
+            android:text="@string/button_cancel"
+            android:id="@+id/dialog_face_view_cancel"
+            style="?android:attr/borderlessButtonStyle"
+            android:background="@drawable/button_bg"
+            android:textColor="@color/button_text_color_normal"/>
+
+        <Button
+            android:layout_width="0dp"
+            android:layout_height="40dp"
+            android:layout_weight="1"
+            android:layout_marginLeft="8dp"
+            android:text="@string/button_ok"
+            android:id="@+id/dialog_face_view_ok"
+            style="?android:attr/borderlessButtonStyle"
+            android:background="@drawable/button_bg"
+            android:textColor="@color/button_text_color_normal"/>
+
+    </LinearLayout>
+
+</LinearLayout>
\ No newline at end of file
Index: packages/apps/Settings/res/layout/face_main_activity.xml
===================================================================
--- packages/apps/Settings/res/layout/face_main_activity.xml	(revision 0)
+++ packages/apps/Settings/res/layout/face_main_activity.xml	(revision 2329)
@@ -0,0 +1,274 @@
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical" >
+
+    <ScrollView
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:descendantFocusability="afterDescendants" >
+
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:orientation="vertical" >
+
+            <RelativeLayout
+                android:id="@+id/hongMo_RelativeLayout"
+                android:layout_width="match_parent"
+                android:layout_height="220dp"
+                android:background="@color/little_background_color" >
+
+                <Button
+                    android:id="@+id/add_face_btn_top"
+                    android:layout_width="118dp"
+                    android:layout_height="33dp"
+                    android:layout_alignParentBottom="true"
+                    android:layout_alignParentRight="true"
+                    android:layout_marginBottom="5dp"
+                    android:layout_marginRight="5dp"
+                    android:background="@drawable/remove_face_btn_selector"
+                    android:text="@string/title_face_remove"
+                    android:textColor="#54ffff"
+                    android:textSize="@dimen/ic_default_settings_title_size"
+                    android:visibility="visible" />
+            </RelativeLayout>
+
+            <LinearLayout
+                android:layout_width="match_parent"
+                android:layout_height="30dp"
+                android:background="@color/ic_default_main_layout_background_color"
+                android:gravity="center_vertical"
+                android:paddingLeft="12dp" >
+                <!--IUV_ADD likai 20170213-->
+                <TextView
+                    android:layout_width="match_parent"
+                    android:layout_height="30dp"
+                    android:layout_marginLeft="5dp"
+                    android:gravity="center_vertical"
+                    android:text="@string/face_use_to_title"
+                    android:textColor="@color/items_summary_color"
+                    android:textSize="@dimen/context_size_title_categrop" />
+                <!--IUV_END-->
+            </LinearLayout>
+
+            <View
+                android:layout_width="match_parent"
+                android:layout_height="1px"
+                android:background="@color/little_than_black1" />
+
+            <LinearLayout
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:orientation="horizontal" >
+
+                <RelativeLayout
+                    android:id="@+id/face_security_layout"
+                    android:layout_width="0dp"
+                    android:layout_height="140dp"
+                    android:layout_weight="1" >
+
+                    <ImageView
+                        android:id="@+id/face_security_system_icons"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:layout_centerHorizontal="true"
+                        android:layout_marginTop="30dp"
+                        android:background="@drawable/face_security_system_icons" />
+                    <!--IUV_ADD likai 20170213-->
+                    <TextView
+                        android:id="@+id/face_security_system_text"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:layout_below="@id/face_security_system_icons"
+                        android:layout_centerHorizontal="true"
+                        android:layout_marginBottom="10dp"
+                        android:layout_marginTop="12dp"
+                        android:gravity="center"
+                        android:text="@string/into_the_security_system"
+                        android:textColor="@color/face_security_system_color"
+                        android:textSize="@dimen/ic_default_settings_title_size" />
+
+                    <!--
+                         <TextView
+                        android:layout_width="1dp"
+                        android:layout_height="match_parent"
+                        android:layout_alignParentRight="true"
+                        android:background="@color/ic_default_main_layout_background_color" />
+                    -->
+                    <!--IUV_END-->
+                </RelativeLayout>
+
+                <RelativeLayout
+                    android:id="@+id/face_excrypted_content_layout"
+                    android:layout_width="0dp"
+                    android:layout_height="140dp"
+                    android:layout_weight="1" >
+
+                    <ImageView
+                        android:id="@+id/face_look_the_encrypted_content_icons"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:layout_centerHorizontal="true"
+                        android:layout_marginTop="30dp"
+                        android:background="@drawable/face_look_the_encrypted_content_icons" />
+                    <!--IUV_ADD likai 20170213-->
+                    <TextView
+                        android:id="@+id/face_look_the_encrypted_content_text"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:layout_below="@id/face_look_the_encrypted_content_icons"
+                        android:layout_centerHorizontal="true"
+                        android:layout_marginBottom="10dp"
+                        android:layout_marginTop="12dp"
+                        android:gravity="center"
+                        android:text="@string/look_the_encrypted_content"
+                        android:textColor="@color/face_security_system_color"
+                        android:textSize="@dimen/ic_default_settings_title_size" />
+
+                    <!--
+                         <TextView
+                        android:layout_width="1dp"
+                        android:layout_height="match_parent"
+                        android:layout_alignParentRight="true"
+                        android:background="@color/ic_default_main_layout_background_color" />
+                    -->
+                    <!--IUV_END-->
+                </RelativeLayout>
+
+                <RelativeLayout
+                    android:id="@+id/face_app_lock_layout"
+                    android:layout_width="0dp"
+                    android:layout_height="140dp"
+                    android:layout_weight="1" >
+
+                    <ImageView
+                        android:id="@+id/face_app_lock_icons"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:layout_centerHorizontal="true"
+                        android:layout_marginTop="30dp"
+                        android:background="@drawable/face_app_lock_icons" />
+
+                    <TextView
+                        android:id="@+id/face_app_lock_text"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:layout_below="@id/face_app_lock_icons"
+                        android:layout_centerHorizontal="true"
+                        android:layout_marginBottom="10dp"
+                        android:layout_marginTop="12dp"
+                        android:gravity="center"
+                        android:text="@string/settings_app_lock_title"
+                        android:textColor="@color/face_security_system_color"
+                        android:textSize="@dimen/ic_default_settings_title_size" />
+                </RelativeLayout>
+            </LinearLayout>
+
+            <View
+                android:layout_width="match_parent"
+                android:layout_height="1px"
+                android:background="@color/little_than_black1" />
+
+            <LinearLayout
+                android:layout_width="match_parent"
+                android:layout_height="10dp"
+                android:background="@color/ic_default_main_layout_background_color"
+                android:gravity="center_vertical"
+                android:paddingLeft="12dp" >
+            </LinearLayout>
+
+            <View
+                android:layout_width="match_parent"
+                android:layout_height="1px"
+                android:background="@color/little_than_black1" />
+
+            <RelativeLayout
+                android:id="@+id/isir_scan_face_layout"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:background="@drawable/layout_background_selector" >
+
+                <LinearLayout
+                    android:layout_width="wrap_content"
+                    android:layout_height="match_parent"
+                    android:orientation="vertical" >
+
+                    <TextView
+                        android:id="@+id/face_items_title_scan_face"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:layout_marginLeft="16dp"
+                        android:layout_marginTop="10dp"
+                        android:gravity="center_vertical"
+                        android:text="@string/displays_face_scan_mask"
+                        android:textColor="@color/setup_divider_color_light"
+                        android:textSize="@dimen/ic_default_settings_title_size" />
+
+                    <TextView
+                        android:id="@+id/face_items_summary_scan_face"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:layout_marginBottom="8dp"
+                        android:layout_marginLeft="16dp"
+                        android:layout_marginRight="70dp"
+                        android:gravity="center_vertical"
+                        android:text="@string/when_this_option_is_turned_off_face_scanning_will_be_performed_in_the_background_and_the_interface_will_not_be_displayed"
+                        android:textColor="@color/setup_divider_color_light"
+                        android:textSize="@dimen/ic_default_settings_summary_size" />
+                </LinearLayout>
+
+                <Switch
+                    android:id="@+id/face_items_switch_answer_call"
+                    android:layout_width="32dp"
+                    android:layout_height="17dp"
+                    android:layout_alignParentRight="true"
+                    android:layout_centerVertical="true"
+                    android:layout_marginRight="16dp" />
+            </RelativeLayout>
+
+            <View
+                android:layout_width="match_parent"
+                android:layout_height="1px"
+                android:background="@color/little_than_black1" />
+
+            <RelativeLayout
+                android:id="@+id/face_use_guide_layout"
+                android:layout_width="match_parent"
+                android:layout_height="50dp"
+                android:background="@drawable/layout_background_selector" >
+
+                <LinearLayout
+                    android:layout_width="wrap_content"
+                    android:layout_height="match_parent"
+                    android:orientation="vertical" >
+
+                    <TextView
+                        android:id="@+id/face_items_title_use_guide"
+                        android:layout_width="wrap_content"
+                        android:layout_height="match_parent"
+                        android:layout_marginLeft="16dp"
+                        android:gravity="center_vertical"
+                        android:text="@string/face_use_guide"
+                        android:textColor="@color/text_title_color"
+                        android:textSize="@dimen/ic_default_settings_title_size" />
+                </LinearLayout>
+
+                <ImageView
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:layout_alignParentRight="true"
+                    android:layout_centerVertical="true"
+                    android:layout_marginRight="16dp"
+                    android:background="@drawable/ic_next_pager_icon" />
+            </RelativeLayout>
+
+            <View
+                android:layout_width="match_parent"
+                android:layout_height="1px"
+                android:background="@color/little_than_black1" />
+        </LinearLayout>
+    </ScrollView>
+
+</LinearLayout>
\ No newline at end of file
Index: packages/apps/Settings/res/xml/sound_settings.xml
===================================================================
--- packages/apps/Settings/res/xml/sound_settings.xml	(revision 2328)
+++ packages/apps/Settings/res/xml/sound_settings.xml	(revision 2329)
@@ -81,8 +81,7 @@
                 android:dialogTitle="@string/alarm_ringtone_title"
                 android:persistent="false"
                 android:ringtoneType="alarm" />
-
-         <SwitchPreference
+		<SwitchPreference
                 android:key="mute_power_mode"
                 android:title="@string/mute_power_mode_option" />
         <!-- Other sounds -->
Index: packages/apps/Settings/res/xml/security_settings_misc.xml
===================================================================
--- packages/apps/Settings/res/xml/security_settings_misc.xml	(revision 2328)
+++ packages/apps/Settings/res/xml/security_settings_misc.xml	(revision 2329)
@@ -48,6 +48,20 @@
         </Preference>
 	</PreferenceCategory>
 	-->
+	
+	<PreferenceCategory android:key="facelock"
+            android:title="@string/title_activity_face_entry_settings"
+            android:persistent="false">
+		<Preference android:key="facelock_setting"
+                android:title="@string/title_activity_face_entry_settings"
+                android:persistent="false">
+
+            <intent android:action="android.intent.action.MAIN"
+                    android:targetPackage="com.android.settings"
+                    android:targetClass="com.android.settings.faceunlock.FaceUnlockMainActivity"/>
+
+        </Preference>
+	</PreferenceCategory>
     <PreferenceCategory android:title="@string/security_passwords_title"
             android:persistent="false">
 
Index: packages/apps/Settings/res/drawable-xxhdpi/face_unlock_background.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/Settings/res/drawable-xxhdpi/face_unlock_background.png
===================================================================
--- packages/apps/Settings/res/drawable-xxhdpi/face_unlock_background.png	(revision 0)
+++ packages/apps/Settings/res/drawable-xxhdpi/face_unlock_background.png	(revision 2329)

Property changes on: packages/apps/Settings/res/drawable-xxhdpi/face_unlock_background.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/Settings/res/drawable-xxhdpi/circle_dark_block.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/Settings/res/drawable-xxhdpi/circle_dark_block.png
===================================================================
--- packages/apps/Settings/res/drawable-xxhdpi/circle_dark_block.png	(revision 0)
+++ packages/apps/Settings/res/drawable-xxhdpi/circle_dark_block.png	(revision 2329)

Property changes on: packages/apps/Settings/res/drawable-xxhdpi/circle_dark_block.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/Settings/res/drawable-xxhdpi/face_applock_icon.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/Settings/res/drawable-xxhdpi/face_applock_icon.png
===================================================================
--- packages/apps/Settings/res/drawable-xxhdpi/face_applock_icon.png	(revision 0)
+++ packages/apps/Settings/res/drawable-xxhdpi/face_applock_icon.png	(revision 2329)

Property changes on: packages/apps/Settings/res/drawable-xxhdpi/face_applock_icon.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/Settings/res/drawable-xxhdpi/ic_next_pager_icon.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/Settings/res/drawable-xxhdpi/ic_next_pager_icon.png
===================================================================
--- packages/apps/Settings/res/drawable-xxhdpi/ic_next_pager_icon.png	(revision 0)
+++ packages/apps/Settings/res/drawable-xxhdpi/ic_next_pager_icon.png	(revision 2329)

Property changes on: packages/apps/Settings/res/drawable-xxhdpi/ic_next_pager_icon.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/Settings/res/drawable-xxhdpi/demotration_icons.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/Settings/res/drawable-xxhdpi/demotration_icons.png
===================================================================
--- packages/apps/Settings/res/drawable-xxhdpi/demotration_icons.png	(revision 0)
+++ packages/apps/Settings/res/drawable-xxhdpi/demotration_icons.png	(revision 2329)

Property changes on: packages/apps/Settings/res/drawable-xxhdpi/demotration_icons.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/Settings/res/drawable-xxhdpi/dark_0_pressed.9.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/Settings/res/drawable-xxhdpi/dark_0_pressed.9.png
===================================================================
--- packages/apps/Settings/res/drawable-xxhdpi/dark_0_pressed.9.png	(revision 0)
+++ packages/apps/Settings/res/drawable-xxhdpi/dark_0_pressed.9.png	(revision 2329)

Property changes on: packages/apps/Settings/res/drawable-xxhdpi/dark_0_pressed.9.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/Settings/res/drawable-xxhdpi/dark_2_pressed.9.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/Settings/res/drawable-xxhdpi/dark_2_pressed.9.png
===================================================================
--- packages/apps/Settings/res/drawable-xxhdpi/dark_2_pressed.9.png	(revision 0)
+++ packages/apps/Settings/res/drawable-xxhdpi/dark_2_pressed.9.png	(revision 2329)

Property changes on: packages/apps/Settings/res/drawable-xxhdpi/dark_2_pressed.9.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/Settings/res/drawable-xxhdpi/dark_4_pressed.9.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/Settings/res/drawable-xxhdpi/dark_4_pressed.9.png
===================================================================
--- packages/apps/Settings/res/drawable-xxhdpi/dark_4_pressed.9.png	(revision 0)
+++ packages/apps/Settings/res/drawable-xxhdpi/dark_4_pressed.9.png	(revision 2329)

Property changes on: packages/apps/Settings/res/drawable-xxhdpi/dark_4_pressed.9.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/Settings/res/drawable-xxhdpi/face_security_system_icon.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/Settings/res/drawable-xxhdpi/face_security_system_icon.png
===================================================================
--- packages/apps/Settings/res/drawable-xxhdpi/face_security_system_icon.png	(revision 0)
+++ packages/apps/Settings/res/drawable-xxhdpi/face_security_system_icon.png	(revision 2329)

Property changes on: packages/apps/Settings/res/drawable-xxhdpi/face_security_system_icon.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/Settings/res/drawable-xxhdpi/dark_6_pressed.9.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/Settings/res/drawable-xxhdpi/dark_6_pressed.9.png
===================================================================
--- packages/apps/Settings/res/drawable-xxhdpi/dark_6_pressed.9.png	(revision 0)
+++ packages/apps/Settings/res/drawable-xxhdpi/dark_6_pressed.9.png	(revision 2329)

Property changes on: packages/apps/Settings/res/drawable-xxhdpi/dark_6_pressed.9.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/Settings/res/drawable-xxhdpi/circle_dark.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/Settings/res/drawable-xxhdpi/circle_dark.png
===================================================================
--- packages/apps/Settings/res/drawable-xxhdpi/circle_dark.png	(revision 0)
+++ packages/apps/Settings/res/drawable-xxhdpi/circle_dark.png	(revision 2329)

Property changes on: packages/apps/Settings/res/drawable-xxhdpi/circle_dark.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/Settings/res/drawable-xxhdpi/dark_8_pressed.9.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/Settings/res/drawable-xxhdpi/dark_8_pressed.9.png
===================================================================
--- packages/apps/Settings/res/drawable-xxhdpi/dark_8_pressed.9.png	(revision 0)
+++ packages/apps/Settings/res/drawable-xxhdpi/dark_8_pressed.9.png	(revision 2329)

Property changes on: packages/apps/Settings/res/drawable-xxhdpi/dark_8_pressed.9.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/Settings/res/drawable-xxhdpi/dark_0.9.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/Settings/res/drawable-xxhdpi/dark_0.9.png
===================================================================
--- packages/apps/Settings/res/drawable-xxhdpi/dark_0.9.png	(revision 0)
+++ packages/apps/Settings/res/drawable-xxhdpi/dark_0.9.png	(revision 2329)

Property changes on: packages/apps/Settings/res/drawable-xxhdpi/dark_0.9.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/Settings/res/drawable-xxhdpi/backspace_pressed.9.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/Settings/res/drawable-xxhdpi/backspace_pressed.9.png
===================================================================
--- packages/apps/Settings/res/drawable-xxhdpi/backspace_pressed.9.png	(revision 0)
+++ packages/apps/Settings/res/drawable-xxhdpi/backspace_pressed.9.png	(revision 2329)

Property changes on: packages/apps/Settings/res/drawable-xxhdpi/backspace_pressed.9.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/Settings/res/drawable-xxhdpi/dark_2.9.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/Settings/res/drawable-xxhdpi/dark_2.9.png
===================================================================
--- packages/apps/Settings/res/drawable-xxhdpi/dark_2.9.png	(revision 0)
+++ packages/apps/Settings/res/drawable-xxhdpi/dark_2.9.png	(revision 2329)

Property changes on: packages/apps/Settings/res/drawable-xxhdpi/dark_2.9.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/Settings/res/drawable-xxhdpi/dark_4.9.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/Settings/res/drawable-xxhdpi/dark_4.9.png
===================================================================
--- packages/apps/Settings/res/drawable-xxhdpi/dark_4.9.png	(revision 0)
+++ packages/apps/Settings/res/drawable-xxhdpi/dark_4.9.png	(revision 2329)

Property changes on: packages/apps/Settings/res/drawable-xxhdpi/dark_4.9.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/Settings/res/drawable-xxhdpi/dark_6.9.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/Settings/res/drawable-xxhdpi/dark_6.9.png
===================================================================
--- packages/apps/Settings/res/drawable-xxhdpi/dark_6.9.png	(revision 0)
+++ packages/apps/Settings/res/drawable-xxhdpi/dark_6.9.png	(revision 2329)

Property changes on: packages/apps/Settings/res/drawable-xxhdpi/dark_6.9.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/Settings/res/drawable-xxhdpi/gome_pic_facecode_phone_call.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/Settings/res/drawable-xxhdpi/gome_pic_facecode_phone_call.png
===================================================================
--- packages/apps/Settings/res/drawable-xxhdpi/gome_pic_facecode_phone_call.png	(revision 0)
+++ packages/apps/Settings/res/drawable-xxhdpi/gome_pic_facecode_phone_call.png	(revision 2329)

Property changes on: packages/apps/Settings/res/drawable-xxhdpi/gome_pic_facecode_phone_call.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/Settings/res/drawable-xxhdpi/dark_8.9.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/Settings/res/drawable-xxhdpi/dark_8.9.png
===================================================================
--- packages/apps/Settings/res/drawable-xxhdpi/dark_8.9.png	(revision 0)
+++ packages/apps/Settings/res/drawable-xxhdpi/dark_8.9.png	(revision 2329)

Property changes on: packages/apps/Settings/res/drawable-xxhdpi/dark_8.9.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/Settings/res/drawable-xxhdpi/face_unlock_facecode.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/Settings/res/drawable-xxhdpi/face_unlock_facecode.png
===================================================================
--- packages/apps/Settings/res/drawable-xxhdpi/face_unlock_facecode.png	(revision 0)
+++ packages/apps/Settings/res/drawable-xxhdpi/face_unlock_facecode.png	(revision 2329)

Property changes on: packages/apps/Settings/res/drawable-xxhdpi/face_unlock_facecode.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/Settings/res/drawable-xxhdpi/backspace.9.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/Settings/res/drawable-xxhdpi/backspace.9.png
===================================================================
--- packages/apps/Settings/res/drawable-xxhdpi/backspace.9.png	(revision 0)
+++ packages/apps/Settings/res/drawable-xxhdpi/backspace.9.png	(revision 2329)

Property changes on: packages/apps/Settings/res/drawable-xxhdpi/backspace.9.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/Settings/res/drawable-xxhdpi/icon_direction_01.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/Settings/res/drawable-xxhdpi/icon_direction_01.png
===================================================================
--- packages/apps/Settings/res/drawable-xxhdpi/icon_direction_01.png	(revision 0)
+++ packages/apps/Settings/res/drawable-xxhdpi/icon_direction_01.png	(revision 2329)

Property changes on: packages/apps/Settings/res/drawable-xxhdpi/icon_direction_01.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/Settings/res/drawable-xxhdpi/icon_direction_02.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/Settings/res/drawable-xxhdpi/icon_direction_02.png
===================================================================
--- packages/apps/Settings/res/drawable-xxhdpi/icon_direction_02.png	(revision 0)
+++ packages/apps/Settings/res/drawable-xxhdpi/icon_direction_02.png	(revision 2329)

Property changes on: packages/apps/Settings/res/drawable-xxhdpi/icon_direction_02.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/Settings/res/drawable-xxhdpi/gome_pic_facecode_phone_notification.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/Settings/res/drawable-xxhdpi/gome_pic_facecode_phone_notification.png
===================================================================
--- packages/apps/Settings/res/drawable-xxhdpi/gome_pic_facecode_phone_notification.png	(revision 0)
+++ packages/apps/Settings/res/drawable-xxhdpi/gome_pic_facecode_phone_notification.png	(revision 2329)

Property changes on: packages/apps/Settings/res/drawable-xxhdpi/gome_pic_facecode_phone_notification.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/Settings/res/drawable-xxhdpi/icon_direction_03.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/Settings/res/drawable-xxhdpi/icon_direction_03.png
===================================================================
--- packages/apps/Settings/res/drawable-xxhdpi/icon_direction_03.png	(revision 0)
+++ packages/apps/Settings/res/drawable-xxhdpi/icon_direction_03.png	(revision 2329)

Property changes on: packages/apps/Settings/res/drawable-xxhdpi/icon_direction_03.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/Settings/res/drawable-xxhdpi/face_app_lock_icons.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/Settings/res/drawable-xxhdpi/face_app_lock_icons.png
===================================================================
--- packages/apps/Settings/res/drawable-xxhdpi/face_app_lock_icons.png	(revision 0)
+++ packages/apps/Settings/res/drawable-xxhdpi/face_app_lock_icons.png	(revision 2329)

Property changes on: packages/apps/Settings/res/drawable-xxhdpi/face_app_lock_icons.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/Settings/res/drawable-xxhdpi/face_unlock_demo_animation.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/Settings/res/drawable-xxhdpi/face_unlock_demo_animation.png
===================================================================
--- packages/apps/Settings/res/drawable-xxhdpi/face_unlock_demo_animation.png	(revision 0)
+++ packages/apps/Settings/res/drawable-xxhdpi/face_unlock_demo_animation.png	(revision 2329)

Property changes on: packages/apps/Settings/res/drawable-xxhdpi/face_unlock_demo_animation.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/Settings/res/drawable-xxhdpi/remove_face_btn_line_down.9.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/Settings/res/drawable-xxhdpi/remove_face_btn_line_down.9.png
===================================================================
--- packages/apps/Settings/res/drawable-xxhdpi/remove_face_btn_line_down.9.png	(revision 0)
+++ packages/apps/Settings/res/drawable-xxhdpi/remove_face_btn_line_down.9.png	(revision 2329)

Property changes on: packages/apps/Settings/res/drawable-xxhdpi/remove_face_btn_line_down.9.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/Settings/res/drawable-xxhdpi/face_look_the_encrypted_content_icons.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/Settings/res/drawable-xxhdpi/face_look_the_encrypted_content_icons.png
===================================================================
--- packages/apps/Settings/res/drawable-xxhdpi/face_look_the_encrypted_content_icons.png	(revision 0)
+++ packages/apps/Settings/res/drawable-xxhdpi/face_look_the_encrypted_content_icons.png	(revision 2329)

Property changes on: packages/apps/Settings/res/drawable-xxhdpi/face_look_the_encrypted_content_icons.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/Settings/res/drawable-xxhdpi/switchpreference_on.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/Settings/res/drawable-xxhdpi/switchpreference_on.png
===================================================================
--- packages/apps/Settings/res/drawable-xxhdpi/switchpreference_on.png	(revision 0)
+++ packages/apps/Settings/res/drawable-xxhdpi/switchpreference_on.png	(revision 2329)

Property changes on: packages/apps/Settings/res/drawable-xxhdpi/switchpreference_on.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/Settings/res/drawable-xxhdpi/dark_1_pressed.9.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/Settings/res/drawable-xxhdpi/dark_1_pressed.9.png
===================================================================
--- packages/apps/Settings/res/drawable-xxhdpi/dark_1_pressed.9.png	(revision 0)
+++ packages/apps/Settings/res/drawable-xxhdpi/dark_1_pressed.9.png	(revision 2329)

Property changes on: packages/apps/Settings/res/drawable-xxhdpi/dark_1_pressed.9.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/Settings/res/drawable-xxhdpi/dark_3_pressed.9.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/Settings/res/drawable-xxhdpi/dark_3_pressed.9.png
===================================================================
--- packages/apps/Settings/res/drawable-xxhdpi/dark_3_pressed.9.png	(revision 0)
+++ packages/apps/Settings/res/drawable-xxhdpi/dark_3_pressed.9.png	(revision 2329)

Property changes on: packages/apps/Settings/res/drawable-xxhdpi/dark_3_pressed.9.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/Settings/res/drawable-xxhdpi/dark_5_pressed.9.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/Settings/res/drawable-xxhdpi/dark_5_pressed.9.png
===================================================================
--- packages/apps/Settings/res/drawable-xxhdpi/dark_5_pressed.9.png	(revision 0)
+++ packages/apps/Settings/res/drawable-xxhdpi/dark_5_pressed.9.png	(revision 2329)

Property changes on: packages/apps/Settings/res/drawable-xxhdpi/dark_5_pressed.9.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/Settings/res/drawable-xxhdpi/dark_7_pressed.9.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/Settings/res/drawable-xxhdpi/dark_7_pressed.9.png
===================================================================
--- packages/apps/Settings/res/drawable-xxhdpi/dark_7_pressed.9.png	(revision 0)
+++ packages/apps/Settings/res/drawable-xxhdpi/dark_7_pressed.9.png	(revision 2329)

Property changes on: packages/apps/Settings/res/drawable-xxhdpi/dark_7_pressed.9.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/Settings/res/drawable-xxhdpi/dark_9_pressed.9.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/Settings/res/drawable-xxhdpi/dark_9_pressed.9.png
===================================================================
--- packages/apps/Settings/res/drawable-xxhdpi/dark_9_pressed.9.png	(revision 0)
+++ packages/apps/Settings/res/drawable-xxhdpi/dark_9_pressed.9.png	(revision 2329)

Property changes on: packages/apps/Settings/res/drawable-xxhdpi/dark_9_pressed.9.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/Settings/res/drawable-xxhdpi/dark_1.9.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/Settings/res/drawable-xxhdpi/dark_1.9.png
===================================================================
--- packages/apps/Settings/res/drawable-xxhdpi/dark_1.9.png	(revision 0)
+++ packages/apps/Settings/res/drawable-xxhdpi/dark_1.9.png	(revision 2329)

Property changes on: packages/apps/Settings/res/drawable-xxhdpi/dark_1.9.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/Settings/res/drawable-xxhdpi/face_percetion_content_icon.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/Settings/res/drawable-xxhdpi/face_percetion_content_icon.png
===================================================================
--- packages/apps/Settings/res/drawable-xxhdpi/face_percetion_content_icon.png	(revision 0)
+++ packages/apps/Settings/res/drawable-xxhdpi/face_percetion_content_icon.png	(revision 2329)

Property changes on: packages/apps/Settings/res/drawable-xxhdpi/face_percetion_content_icon.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/Settings/res/drawable-xxhdpi/dark_3.9.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/Settings/res/drawable-xxhdpi/dark_3.9.png
===================================================================
--- packages/apps/Settings/res/drawable-xxhdpi/dark_3.9.png	(revision 0)
+++ packages/apps/Settings/res/drawable-xxhdpi/dark_3.9.png	(revision 2329)

Property changes on: packages/apps/Settings/res/drawable-xxhdpi/dark_3.9.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/Settings/res/drawable-xxhdpi/dark_5.9.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/Settings/res/drawable-xxhdpi/dark_5.9.png
===================================================================
--- packages/apps/Settings/res/drawable-xxhdpi/dark_5.9.png	(revision 0)
+++ packages/apps/Settings/res/drawable-xxhdpi/dark_5.9.png	(revision 2329)

Property changes on: packages/apps/Settings/res/drawable-xxhdpi/dark_5.9.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/Settings/res/drawable-xxhdpi/dark_7.9.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/Settings/res/drawable-xxhdpi/dark_7.9.png
===================================================================
--- packages/apps/Settings/res/drawable-xxhdpi/dark_7.9.png	(revision 0)
+++ packages/apps/Settings/res/drawable-xxhdpi/dark_7.9.png	(revision 2329)

Property changes on: packages/apps/Settings/res/drawable-xxhdpi/dark_7.9.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/Settings/res/drawable-xxhdpi/dark_9.9.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/Settings/res/drawable-xxhdpi/dark_9.9.png
===================================================================
--- packages/apps/Settings/res/drawable-xxhdpi/dark_9.9.png	(revision 0)
+++ packages/apps/Settings/res/drawable-xxhdpi/dark_9.9.png	(revision 2329)

Property changes on: packages/apps/Settings/res/drawable-xxhdpi/dark_9.9.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/Settings/res/drawable-xxhdpi/face_security_system_icons.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/Settings/res/drawable-xxhdpi/face_security_system_icons.png
===================================================================
--- packages/apps/Settings/res/drawable-xxhdpi/face_security_system_icons.png	(revision 0)
+++ packages/apps/Settings/res/drawable-xxhdpi/face_security_system_icons.png	(revision 2329)

Property changes on: packages/apps/Settings/res/drawable-xxhdpi/face_security_system_icons.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/Settings/res/drawable-xxhdpi/switchpreference_off.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/Settings/res/drawable-xxhdpi/switchpreference_off.png
===================================================================
--- packages/apps/Settings/res/drawable-xxhdpi/switchpreference_off.png	(revision 0)
+++ packages/apps/Settings/res/drawable-xxhdpi/switchpreference_off.png	(revision 2329)

Property changes on: packages/apps/Settings/res/drawable-xxhdpi/switchpreference_off.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/Settings/res/drawable-xxhdpi/remove_face_btn_line.9.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: packages/apps/Settings/res/drawable-xxhdpi/remove_face_btn_line.9.png
===================================================================
--- packages/apps/Settings/res/drawable-xxhdpi/remove_face_btn_line.9.png	(revision 0)
+++ packages/apps/Settings/res/drawable-xxhdpi/remove_face_btn_line.9.png	(revision 2329)

Property changes on: packages/apps/Settings/res/drawable-xxhdpi/remove_face_btn_line.9.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: packages/apps/Settings/res/values/attrs.xml
===================================================================
--- packages/apps/Settings/res/values/attrs.xml	(revision 2328)
+++ packages/apps/Settings/res/values/attrs.xml	(revision 2329)
@@ -146,5 +146,19 @@
     <declare-styleable name="AspectRatioFrameLayout">
         <attr name="aspectRatio" format="float" />
     </declare-styleable>
+    <declare-styleable name="RoundProgressBar">
+        <attr name="roundColor" format="color" />
+        <attr name="roundProgressColor" format="color" />
+        <attr name="roundWidth" format="dimension"></attr>
+        <attr name="textColor" format="color" />
+        <attr name="textSize" format="dimension" />
+        <attr name="max" format="integer"></attr>
+        <attr name="roundProgressInterCycle" format="integer"></attr>
+        <attr name="textIsDisplayable" format="boolean"></attr>
+        <attr name="style">
+            <enum name="STROKE" value="0"></enum>
+            <enum name="FILL" value="1"></enum>
+        </attr>
+    </declare-styleable>
 
 </resources>
Index: packages/apps/Settings/res/values/dimens.xml
===================================================================
--- packages/apps/Settings/res/values/dimens.xml	(revision 2328)
+++ packages/apps/Settings/res/values/dimens.xml	(revision 2329)
@@ -332,4 +332,19 @@
     <dimen name="navigationbar_circle_height">48dp</dimen>
     <dimen name="navigationbar_circle_margin_bottom">5dp</dimen>
     <!-- ADD-E By Justin.Shen for Hide/Show navigation-bar -->
+    <dimen name="context_size_title_categrop">12sp</dimen>
+    <dimen name="ic_default_settings_summary_size">12sp</dimen>
+    <dimen name="fonts_dialog_default">14sp</dimen>
+    <dimen name="ic_default_settings_title_size">14sp</dimen>
+    <dimen name="dp9">9dp</dimen>
+    <dimen name="dp16">16dp</dimen>
+    <dimen name="dp18">18dp</dimen>
+    <dimen name="dp20">20dp</dimen>
+    <dimen name="activity_left_margin">16dp</dimen>
+    <dimen name="activity_right_margin">16dp</dimen>
+    <dimen name="dialog_text_title_size">14sp</dimen>
+    <dimen name="dialog_text_size">13sp</dimen>
+    <dimen name="activity_horizontal_margin">16dp</dimen>
+    <dimen name="network_actionbar_text_size">15sp</dimen>
+    <dimen name="actionBar_text_size">14sp</dimen>
 </resources>
Index: packages/apps/Settings/res/values/colors.xml
===================================================================
--- packages/apps/Settings/res/values/colors.xml	(revision 2328)
+++ packages/apps/Settings/res/values/colors.xml	(revision 2329)
@@ -161,4 +161,32 @@
     <color name="grey300">#e0e0e0</color>
     <color name="grey400">#bdbdbd</color>
     <!-- add end } -->
+    <color name="start_entry_face_btn_bg_color">#3D87FE</color>
+    <color name="ic_default_main_layout_background_color">@color/ic_default_actionbar_background_color</color>
+    <color name="ic_default_actionbar_background_color">#EFEFF0</color>
+    <color name="category_title_background_text">#4D000000</color>
+    <color name="ic_default_title_text_color">#CC000000</color>
+    <color name="ic_default_layout_background_color">#F8F8F8</color>
+    <color name="onclick_layout_color">@color/search_layout_background_color</color>
+    <color name="little_background_bg_color">#F4F4F4</color>
+    <color name="items_summary_color">#4D000000</color>
+    <color name="face_security_system_color">#CC000000</color>
+    <color name="ic_settings_faceunlock_entry_text_press_color">#54FFFF</color>
+    <color name="ic_settings_faceunlock_entry_text_color">#FFFFFFFF</color>
+    <color name="little_than_black1">#ece8e8</color>
+    <color name="search_layout_background_color">#EBEBEB</color> 
+	  <color name="face_guide_color">#D9000000</color>
+    <color name="input_layout_background_color">#FAFAFA</color>
+    <color name="line_color">#E7E7E7</color>
+    <color name="input_text_color">#FF3A3A3A</color>
+    <color name="little_background_color">#D8D8D8</color>
+    <color name="text_title_color">#3A3A3A</color>
+    <color name="dialog_text_color">#CC000000</color>
+    <color name="gray_line">#979797</color>
+    <color name="button_text_color_normal">#3a3a3a</color>
+    <color name="green_light">#0dc16f</color>
+    <color name="buttons_background_stroke_color">#979797</color>
+    <color name="face_image_selector_pressed">#0D000000</color>
+    <color name="gray_light">#f1f1f1</color>
+    <color name="ic_default_actionbar_back_btn_background_color">#B3000000</color>
 </resources>
Index: packages/apps/Settings/res/drawable/face_image_9_selector.xml
===================================================================
--- packages/apps/Settings/res/drawable/face_image_9_selector.xml	(revision 0)
+++ packages/apps/Settings/res/drawable/face_image_9_selector.xml	(revision 2329)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <item android:drawable="@drawable/dark_9" android:state_pressed="false"/>
+    <item android:drawable="@drawable/dark_9_pressed" android:state_pressed="true"/>
+
+</selector>
\ No newline at end of file
Index: packages/apps/Settings/res/drawable/face_image_backspace_selector.xml
===================================================================
--- packages/apps/Settings/res/drawable/face_image_backspace_selector.xml	(revision 0)
+++ packages/apps/Settings/res/drawable/face_image_backspace_selector.xml	(revision 2329)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <item android:drawable="@drawable/backspace" android:state_pressed="false"/>
+    <item android:drawable="@drawable/backspace_pressed" android:state_pressed="true"/>
+
+</selector>
\ No newline at end of file
Index: packages/apps/Settings/res/drawable/face_image_selector.xml
===================================================================
--- packages/apps/Settings/res/drawable/face_image_selector.xml	(revision 0)
+++ packages/apps/Settings/res/drawable/face_image_selector.xml	(revision 2329)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <item android:drawable="@color/face_image_selector_pressed" android:state_pressed="true"/>
+
+</selector>
\ No newline at end of file
Index: packages/apps/Settings/res/drawable/face_image_6_selector.xml
===================================================================
--- packages/apps/Settings/res/drawable/face_image_6_selector.xml	(revision 0)
+++ packages/apps/Settings/res/drawable/face_image_6_selector.xml	(revision 2329)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <item android:drawable="@drawable/dark_6" android:state_pressed="false"/>
+    <item android:drawable="@drawable/dark_6_pressed" android:state_pressed="true"/>
+
+</selector>
\ No newline at end of file
Index: packages/apps/Settings/res/drawable/ic_settings_faceunlock_entry_btn_selector.xml
===================================================================
--- packages/apps/Settings/res/drawable/ic_settings_faceunlock_entry_btn_selector.xml	(revision 0)
+++ packages/apps/Settings/res/drawable/ic_settings_faceunlock_entry_btn_selector.xml	(revision 2329)
@@ -0,0 +1,36 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <item android:state_pressed="true" >
+
+        <shape>
+
+            <corners android:radius="25dp" />
+
+            <solid android:color="@color/ic_settings_faceunlock_entry_text_press_color" />
+            
+            <stroke
+                android:width="2px"
+                android:color="@color/ic_settings_faceunlock_entry_text_press_color" />
+
+        </shape>
+
+    </item>
+
+    <item android:state_pressed="false" >
+
+        <shape>
+
+            <corners android:radius="25dp" />
+
+            <solid android:color="@color/ic_settings_faceunlock_entry_text_color" />
+
+            <stroke
+                android:width="2px"
+                android:color="@color/ic_settings_faceunlock_entry_text_color" />
+
+        </shape>
+
+    </item>
+
+</selector>
\ No newline at end of file
Index: packages/apps/Settings/res/drawable/ic_settings_faceunlock.xml
===================================================================
--- packages/apps/Settings/res/drawable/ic_settings_faceunlock.xml	(revision 0)
+++ packages/apps/Settings/res/drawable/ic_settings_faceunlock.xml	(revision 2329)
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:height="24dp"
+    android:viewportHeight="24"
+    android:viewportWidth="24"
+    android:width="24dp" >
+
+    <path
+        android:fillColor="#000000"
+        android:pathData="M12,22A10,10,0,0,1,4,6,10,10,0,1,1,20,18a9.94,9.94,0,0,1-6.61,3.86A10.13,10.13,0,0,1,12,22ZM12,3.5a8.57,8.57,0,0,0-1.17
+.08 ,8.5,8.5,0,0,0-4,15.19A8.5,8.5,0,0,0,17.14,5.23,8.44,8.44,0,0,0,12,3.5Z" />
+    <path
+        android:fillColor="#000000"
+        android:pathData="M 7.87 7.92 C 8.75365559973 7.92 9.47 8.63634440027 9.47 9.52 C 9.47 10.4036555997 8.75365559973 11.12 7.87 11.12 C 6.98634440027 11.12 6.27 10.4036555997 6.27 9.52 C 6.27 8.63634440027 6.98634440027 7.92 7.87 7.92 Z" />
+    <path
+        android:fillColor="#000000"
+        android:pathData="M17.54,10.16H14.42a.75 .75 ,0,0,1,0-1.5h3.12a.75 .75 ,0,0,1,0,1.5Z" />
+    <path
+        android:fillColor="#000000"
+        android:pathData="M12,18.25a5.22,5.22,0,0,1-4.15-2A.75 .75
+,0,1,1,9,15.29,3.75,3.75,0,0,0,15.75,13a.75 .75
+,0,0,1,1.5,0A5.26,5.26,0,0,1,12,18.25Z" />
+
+</vector>
\ No newline at end of file
Index: packages/apps/Settings/res/drawable/face_image_3_selector.xml
===================================================================
--- packages/apps/Settings/res/drawable/face_image_3_selector.xml	(revision 0)
+++ packages/apps/Settings/res/drawable/face_image_3_selector.xml	(revision 2329)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <item android:drawable="@drawable/dark_3" android:state_pressed="false"/>
+    <item android:drawable="@drawable/dark_3_pressed" android:state_pressed="true"/>
+
+</selector>
\ No newline at end of file
Index: packages/apps/Settings/res/drawable/face_unlock_button.xml
===================================================================
--- packages/apps/Settings/res/drawable/face_unlock_button.xml	(revision 0)
+++ packages/apps/Settings/res/drawable/face_unlock_button.xml	(revision 2329)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<shape xmlns:android="http://schemas.android.com/apk/res/android">
+    <corners 
+		android:topLeftRadius="20dp"
+		android:bottomLeftRadius="20dp"
+		android:topRightRadius="20dp" 
+		android:bottomRightRadius="20dp"  />
+    <stroke
+        android:width="1px"
+        android:color="#54FFFF" />
+</shape>
\ No newline at end of file
Index: packages/apps/Settings/res/drawable/face_image_0_selector.xml
===================================================================
--- packages/apps/Settings/res/drawable/face_image_0_selector.xml	(revision 0)
+++ packages/apps/Settings/res/drawable/face_image_0_selector.xml	(revision 2329)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <item android:drawable="@drawable/dark_0" android:state_pressed="false"/>
+    <item android:drawable="@drawable/dark_0_pressed" android:state_pressed="true"/>
+
+</selector>
\ No newline at end of file
Index: packages/apps/Settings/res/drawable/face_image_8_selector.xml
===================================================================
--- packages/apps/Settings/res/drawable/face_image_8_selector.xml	(revision 0)
+++ packages/apps/Settings/res/drawable/face_image_8_selector.xml	(revision 2329)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <item android:drawable="@drawable/dark_8" android:state_pressed="false"/>
+    <item android:drawable="@drawable/dark_8_pressed" android:state_pressed="true"/>
+
+</selector>
\ No newline at end of file
Index: packages/apps/Settings/res/drawable/guide_bottom_circle_selector.xml
===================================================================
--- packages/apps/Settings/res/drawable/guide_bottom_circle_selector.xml	(revision 0)
+++ packages/apps/Settings/res/drawable/guide_bottom_circle_selector.xml	(revision 2329)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <item android:drawable="@drawable/circle_dark_block" android:state_pressed="true"/>
+    <item android:drawable="@drawable/circle_dark" android:state_pressed="false"/>
+
+</selector>
\ No newline at end of file
Index: packages/apps/Settings/res/drawable/face_unlock_button_foucs.xml
===================================================================
--- packages/apps/Settings/res/drawable/face_unlock_button_foucs.xml	(revision 0)
+++ packages/apps/Settings/res/drawable/face_unlock_button_foucs.xml	(revision 2329)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="utf-8"?>
+<shape xmlns:android="http://schemas.android.com/apk/res/android">
+    <corners 
+		android:topLeftRadius="20dp"
+		android:bottomLeftRadius="20dp"
+		android:topRightRadius="20dp" 
+		android:bottomRightRadius="20dp"  />
+	<solid android:color="#1754FFFF" />
+    <stroke
+        android:width="1px"
+        android:color="#54FFFF" />
+</shape>
\ No newline at end of file
Index: packages/apps/Settings/res/drawable/ic_myactionbar_back_btn.xml
===================================================================
--- packages/apps/Settings/res/drawable/ic_myactionbar_back_btn.xml	(revision 0)
+++ packages/apps/Settings/res/drawable/ic_myactionbar_back_btn.xml	(revision 2329)
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:height="24dp"
+    android:viewportHeight="24"
+    android:viewportWidth="24"
+    android:width="24dp" >
+
+    <path
+        android:fillColor="@color/ic_default_actionbar_back_btn_background_color"
+        android:pathData="M20,12c0,0.4-0.3,0.8-0.8,0.8H6.6l5.8,5.9c0.3,0.3,0.3,0.8,0,1.1c-0.1,0.1-0.2,0.1-0.3,0.2C12,20,11.9,20,11.8,20
+c-0.2,0-0.4-0.1-0.5-0.2l-7-7.2C4.1,12.4,4,12.2,4,12c0-0.2,0.1-0.4,0.2-0.6l7-7.2c0.2-0.2,0.6-0.3,0.8-0.2c0.1,0,0.2,0.1,0.3,0.2
+c0.3,0.3,0.3,0.8,0,1.1l-5.8,5.9h12.6C19.7,11.2,20,11.6,20,12z" />
+
+</vector>
\ No newline at end of file
Index: packages/apps/Settings/res/drawable/layout_background_selector.xml
===================================================================
--- packages/apps/Settings/res/drawable/layout_background_selector.xml	(revision 0)
+++ packages/apps/Settings/res/drawable/layout_background_selector.xml	(revision 2329)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <item android:drawable="@color/onclick_layout_color" android:state_pressed="true"/>
+    <item android:drawable="@color/ic_default_layout_background_color" android:state_pressed="false"/>
+
+</selector>
\ No newline at end of file
Index: packages/apps/Settings/res/drawable/remove_face_btn_selector.xml
===================================================================
--- packages/apps/Settings/res/drawable/remove_face_btn_selector.xml	(revision 0)
+++ packages/apps/Settings/res/drawable/remove_face_btn_selector.xml	(revision 2329)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <item android:drawable="@drawable/remove_face_btn_line" android:state_pressed="false"></item>
+    <item android:drawable="@drawable/remove_face_btn_line_down" android:state_pressed="true"></item>
+
+</selector>
\ No newline at end of file
Index: packages/apps/Settings/res/drawable/button_bg.xml
===================================================================
--- packages/apps/Settings/res/drawable/button_bg.xml	(revision 0)
+++ packages/apps/Settings/res/drawable/button_bg.xml	(revision 2329)
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <!--android:drawable="@drawable/button_bg_now"-->
+    <item android:state_pressed="true"
+
+       >
+        <shape android:shape="rectangle">
+            <corners android:radius="10px"/>
+            <solid android:color="@color/green_light"/>
+
+        </shape>
+    </item>
+
+    <item>
+        <shape android:shape="rectangle">
+            <corners android:radius="10px"/>
+            <solid android:color="@color/gray_light"/>
+            <stroke android:width="1px"
+                    android:color="@color/buttons_background_stroke_color"/>
+        </shape>
+    </item>
+
+</selector>
\ No newline at end of file
Index: packages/apps/Settings/res/drawable/face_image_5_selector.xml
===================================================================
--- packages/apps/Settings/res/drawable/face_image_5_selector.xml	(revision 0)
+++ packages/apps/Settings/res/drawable/face_image_5_selector.xml	(revision 2329)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <item android:drawable="@drawable/dark_5" android:state_pressed="false"/>
+    <item android:drawable="@drawable/dark_5_pressed" android:state_pressed="true"/>
+
+</selector>
\ No newline at end of file
Index: packages/apps/Settings/res/drawable/ic_settings_faceunlock_entry_text_color_selector.xml
===================================================================
--- packages/apps/Settings/res/drawable/ic_settings_faceunlock_entry_text_color_selector.xml	(revision 0)
+++ packages/apps/Settings/res/drawable/ic_settings_faceunlock_entry_text_color_selector.xml	(revision 2329)
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <item android:state_selected="true" android:color="@color/ic_settings_faceunlock_entry_text_color"/>
+    <item android:state_focused="true" android:color="@color/ic_settings_faceunlock_entry_text_color"/>
+    <item android:state_pressed="true" android:color="@color/ic_settings_faceunlock_entry_text_color"/>
+    <item android:color="@color/ic_settings_faceunlock_entry_text_press_color" />
+
+</selector>
\ No newline at end of file
Index: packages/apps/Settings/res/drawable/face_image_2_selector.xml
===================================================================
--- packages/apps/Settings/res/drawable/face_image_2_selector.xml	(revision 0)
+++ packages/apps/Settings/res/drawable/face_image_2_selector.xml	(revision 2329)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <item android:drawable="@drawable/dark_2" android:state_pressed="false"/>
+    <item android:drawable="@drawable/dark_2_pressed" android:state_pressed="true"/>
+
+</selector>
\ No newline at end of file
Index: packages/apps/Settings/res/drawable/face_image_7_selector.xml
===================================================================
--- packages/apps/Settings/res/drawable/face_image_7_selector.xml	(revision 0)
+++ packages/apps/Settings/res/drawable/face_image_7_selector.xml	(revision 2329)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <item android:drawable="@drawable/dark_7" android:state_pressed="false"/>
+    <item android:drawable="@drawable/dark_7_pressed" android:state_pressed="true"/>
+
+</selector>
\ No newline at end of file
Index: packages/apps/Settings/res/drawable/face_image_4_selector.xml
===================================================================
--- packages/apps/Settings/res/drawable/face_image_4_selector.xml	(revision 0)
+++ packages/apps/Settings/res/drawable/face_image_4_selector.xml	(revision 2329)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <item android:drawable="@drawable/dark_4" android:state_pressed="false"/>
+    <item android:drawable="@drawable/dark_4_pressed" android:state_pressed="true"/>
+
+</selector>
\ No newline at end of file
Index: packages/apps/Settings/res/drawable/face_unlock_btn_selector.xml
===================================================================
--- packages/apps/Settings/res/drawable/face_unlock_btn_selector.xml	(revision 0)
+++ packages/apps/Settings/res/drawable/face_unlock_btn_selector.xml	(revision 2329)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <item android:drawable="@drawable/face_unlock_button" android:state_pressed="false"></item>
+    <item android:drawable="@drawable/face_unlock_button_foucs" android:state_pressed="true"></item>
+
+</selector>
\ No newline at end of file
Index: packages/apps/Settings/res/drawable/app_lock_off_on_selector.xml
===================================================================
--- packages/apps/Settings/res/drawable/app_lock_off_on_selector.xml	(revision 0)
+++ packages/apps/Settings/res/drawable/app_lock_off_on_selector.xml	(revision 2329)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <item android:drawable="@drawable/switchpreference_on" android:state_pressed="true"/>
+    <item android:drawable="@drawable/switchpreference_off" android:state_pressed="false"/>
+
+</selector>
Index: packages/apps/Settings/res/drawable/face_image_1_selector.xml
===================================================================
--- packages/apps/Settings/res/drawable/face_image_1_selector.xml	(revision 0)
+++ packages/apps/Settings/res/drawable/face_image_1_selector.xml	(revision 2329)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <item android:drawable="@drawable/dark_1" android:state_pressed="false"/>
+    <item android:drawable="@drawable/dark_1_pressed" android:state_pressed="true"/>
+
+</selector>
\ No newline at end of file
Index: packages/apps/Settings
===================================================================
--- packages/apps/Settings	(revision 2328)
+++ packages/apps/Settings	(revision 2329)

Property changes on: packages/apps/Settings
___________________________________________________________________
Modified: svn:mergeinfo
   Merged /L05A/Trunk/ALPS-MP-N1.MP18-V1_AUS6739_66_N1_INHOUSE/packages/apps/Settings:r2195-2198
Index: packages/apps
===================================================================
--- packages/apps	(revision 2328)
+++ packages/apps	(revision 2329)

Property changes on: packages/apps
___________________________________________________________________
Modified: svn:mergeinfo
   Merged /L05A/Trunk/ALPS-MP-N1.MP18-V1_AUS6739_66_N1_INHOUSE/packages/apps:r2195-2198
Index: packages
===================================================================
--- packages	(revision 2328)
+++ packages	(revision 2329)

Property changes on: packages
___________________________________________________________________
Modified: svn:mergeinfo
   Merged /L05A/Trunk/ALPS-MP-N1.MP18-V1_AUS6739_66_N1_INHOUSE/packages:r2195-2198
Index: frameworks/base/packages/SystemUI/assets/verify.model
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: frameworks/base/packages/SystemUI/assets/verify.model
===================================================================
--- frameworks/base/packages/SystemUI/assets/verify.model	(revision 0)
+++ frameworks/base/packages/SystemUI/assets/verify.model	(revision 2329)

Property changes on: frameworks/base/packages/SystemUI/assets/verify.model
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: frameworks/base/packages/SystemUI/assets/license.lic
===================================================================
--- frameworks/base/packages/SystemUI/assets/license.lic	(revision 0)
+++ frameworks/base/packages/SystemUI/assets/license.lic	(revision 2329)
@@ -0,0 +1,41 @@
+############################################################
+# SenseTime License
+# License Product: SZMobileFaceSDK
+# Expiration: 19000101~22000101
+# License SN: 722efff8-fc59-4232-8b04-ece41061fcd5
+############################################################
+sGfdd7ODFa1Cpv1LRcQDsQlcTTp2gqyOO0VXrFSFAnsfSLtxDN907Fvg0Vwv
+PpXilbL3Xi3pu26PEVlXTIIdySsaVsBCaOSObZg2u70aFUfZyrrWC+zZtZ5B
+aC1ut34rlOOl1lD1j9nwlbWJ+1J0AuTt3GPiBZYdkGvqoLRMc5MVfJRaAQAA
+AAEAAAAOS/+kjsqd45tOl3ZGao8uC6fxuGop8kizOTqfA3lKYlMNZtzwlPQq
+VU8zf8iFeHyY/rI+/9nu+7oYrwjKiHTM2CkKqw1H+EKwGfOMGwLXqaQiLlYa
+oAUWrND8QJAvBftMV4r/QJqzyFvQ/LmjKfxIWgF7FLMc6Eg4EJMSfjtqmsXw
+0188kjjlUwLMIi8vO7SzMUa7WqfQ3htBuQBolv+8bc8nTj44gOn72eYnJcK8
+cti/Eb2Tegc+Fer7EJfaC/OFW1wmN1pMn+AQ78gtIfpMqBvkyQLVw+zBeEBe
+ex/QACs7d1UPO45Z1EYnABmh1VXqa6HERchsyYjubzvv6kBZAQABAAAAAAAD
+AAAAAAAAAAAAAACgGKz4c88IE3yGgXfG7d+etg8toSceU5mi1Wun/zGfa1ri
+r6tw9fR7hCUIyEfApRiezS3Nlwtce8RCeYFsJ88enuJbUKarK1HQ2oLewG9I
+cAyflxJVVUF4ZzDPs4FjTPEuZ0Ve1HL9NnEVMQAOiRv/4AqPmLiaTnZbfVn9
+XAL3gH2YgraocU+GTt5jL188/nfWurmGCd4eWIWZHpfRU+mD/b/Rl1KA9kXK
++AetWQEs4m74z9lEgik5mVE0lwDSigYeYboJ36pc
+------------------------------------------------------------
+sGfdd214+ZlNoDTpj4KWprDNzt6jjJkwNEy99LrHsNXepAmklSZMsMEIvcri
+MAOQAXAC5WSP+kuRgSZTOKxn3HLMplKcQs8vrM1IYGm7RCEoZL+emZIucgIW
+bxA4dFa2Z2RdcJpjZ1lWffCryZDDnAgDFVWv4rhvVL2ocOxv1TCgC/UhAQAA
+AAIAAACIQgnIBQn5XM7Q/TrXbexho45Z5thcW81uNv2D5T1PKtdRn3ELToxc
+6tDF3kJN9aR84NM+GMwUrZDjLpAGKOtg1GyMZ2xWWj90U38zDaxTvJHV8Nud
+7RSCM+W6lKTqb2d6YMLMrd97nOkfXLpe8gq/BEJlF4mzY18dvX4CDM/8Y7/x
+96x3ox8Yk0xsq8Z7S5pm9/A7cKgkWD2GifawUYhkNQ2Cwvk3iMjhaBAUtfid
+M9h0jrjhdwBIQNTEhPfOcpscpbXksv7UtVR1hzyQCffouGy6fBqwzDd2GSiW
+Jr+VjQKZYxGH5lAhJoeHh2S9ln/p5OiTgCjkUQIUVQHZKuaxAAAAAAAAAAAA
+AAAAAAAAAAAAAAD5+FuLZ1mtumR+sESoRbj0ZkqZ2NjrON6Rj84PjqNXf0/S
+/9J9tVxgf9d0r6Q6/Wu2p1XKe8ytZrrDMbxQjam1BEPx2V0mYRVGoRU+3u3x
+hLZVRlOWSvYUoNQr2Q4mMRvW/57blveyTowYPHgTHu6bJhgWtOWR5A1RW5ov
+qDTKWUDRS+t3yWkSrxwnNv0YsAL2Y11x/xXELEWJYDX594evwvNha0MaZnzY
+sxSdNSqyYcVUXZXCMyGQqRQjn8dk8CdyvI4T/T6ddNUL2g69b9ASln0sXGb+
+L7UpEozRz7DhgZiVSBRgEvhzA9qE5q3WMQRQAzY1wMUT7lReM8DHSIcF6m2f
+A3Jxm2WBFEG/fqMkCOsru123DUxLL+tDWGBVpyZTF13nFFjNFtasMzfGu0VU
+sL0eJTUJf9+RSB9/wgdbIgqbP2TihCWIptBy+zBUv9v+qAnVtXH7KKVdPzLb
+4AFpPnrOqKNmgbc4dy88mrb8TN2dOH8IAEeOQF1lQfYPdpeY2jlf+0AJim9X
+VGp09A8dbRjyHg==
+############################################################
\ No newline at end of file
Index: frameworks/base/packages/SystemUI/AndroidManifest.xml
===================================================================
--- frameworks/base/packages/SystemUI/AndroidManifest.xml	(revision 2328)
+++ frameworks/base/packages/SystemUI/AndroidManifest.xml	(revision 2329)
@@ -540,6 +540,8 @@
 		</activity>
 		<activity android:name=".funcsetting.AppListActivity" 
 			android:theme="@style/FuncTheme"/>
+			
+
 		<receiver android:name=".funcsetting.ContactsReceiver">
 			<intent-filter >
 				<action android:name="com.android.systemui.funcsettings.contact_uri"/>
@@ -551,6 +553,31 @@
 	   <!--add for incoming calls turn to mute -->
 	   <service android:name="com.android.systemui.statusbar.phone.SensorFunctionServiceIncall"
             android:exported="false"/>
+        <activity
+            android:name=".face.FaceCheckActivity"
+            android:theme="@style/android:Theme.Translucent.NoTitleBar"
+            android:screenOrientation="portrait"
+            android:excludeFromRecents="true" >
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+            </intent-filter>
+        </activity>
+        <activity
+            android:name="com.face.scanner.FaceActivity"
+            android:screenOrientation="portrait"
+            android:excludeFromRecents="true" >
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+            </intent-filter>
+        </activity>
+        <service
+            android:name="com.face.scanner.FaceService"
+            android:exported="true"
+            >
+            <intent-filter>
+                <action android:name="com.face.scanner.FaceService" />
+            </intent-filter>
+        </service>    
 
     </application>
 
Index: frameworks/base/packages/SystemUI/proguard.flags
===================================================================
--- frameworks/base/packages/SystemUI/proguard.flags	(revision 2328)
+++ frameworks/base/packages/SystemUI/proguard.flags	(revision 2329)
@@ -73,6 +73,7 @@
  -keep class com.hawk.android.adsdk.ads.**{*;}
  -keep class com.tcl.mediator.**{*;}
  #-kepp class com.google.android.gms.ads.**{*;}
+ -keep class com.sensetime.faceapi.model.* {*;}
  -keep class com.google.android.gms.ads.MobileAds{
      <fields>;
      <methods>;
Index: frameworks/base/packages/SystemUI/Android.mk
===================================================================
--- frameworks/base/packages/SystemUI/Android.mk	(revision 2328)
+++ frameworks/base/packages/SystemUI/Android.mk	(revision 2329)
@@ -47,6 +47,9 @@
 LOCAL_PRIVILEGED_MODULE := true
 
 LOCAL_PROGUARD_FLAG_FILES := proguard.flags
+LOCAL_PREBUILT_JNI_LIBS := libs/arm64-v8a/libIrisking.so \
+    libs/arm64-v8a/libjni_cvface_api.so \
+    libs/arm64-v8a/libcvface_api.so
 
 LOCAL_RESOURCE_DIR := \
     frameworks/base/packages/Keyguard/res \
Index: frameworks/base/packages/SystemUI/src/com/android/systemui/SystemUIApplication.java
===================================================================
--- frameworks/base/packages/SystemUI/src/com/android/systemui/SystemUIApplication.java	(revision 2328)
+++ frameworks/base/packages/SystemUI/src/com/android/systemui/SystemUIApplication.java	(revision 2329)
@@ -27,6 +27,8 @@
 import android.os.UserHandle;
 import android.util.Log;
 
+import com.sensetime.faceapi.LicenseHelper;
+import com.sensetime.faceunlock.util.FileUtil;
 import com.android.systemui.stackdivider.Divider;
 
 import java.util.HashMap;
@@ -105,6 +107,14 @@
                     }
                 }
             }, filter);
+            new Thread(new Runnable() {
+                @Override
+                public void run() {
+                   if (! checkLicense()) {
+                        System.exit(0);
+                    }
+                }
+             }).start();
         } else {
             // For a secondary user, boot-completed will never be called because it has already
             // been broadcasted on startup for the primary SystemUI process.  Instead, for
@@ -113,6 +123,21 @@
             startServicesIfNeeded(SERVICES_PER_USER);
         }
     }
+	
+    private boolean checkLicense() {
+        String license = FileUtil.getAssertData(getApplicationContext(), "license.lic");
+        if (license == null) {
+            Log.e(TAG, "no license file !");
+            return false;
+        }
+        int result = LicenseHelper.initLicense(license);
+        if (result == 0) {
+            return true;
+        } else {
+            Log.e(TAG, "initLicense failed, result code: " + result);
+            return false;
+        }
+    }
 
     /**
      * Makes sure that all the SystemUI services are running. If they are already running, this is a
Index: frameworks/base/packages/SystemUI/src/com/android/systemui/face/FaceCheckActivity.java
===================================================================
--- frameworks/base/packages/SystemUI/src/com/android/systemui/face/FaceCheckActivity.java	(revision 0)
+++ frameworks/base/packages/SystemUI/src/com/android/systemui/face/FaceCheckActivity.java	(revision 2329)
@@ -0,0 +1,291 @@
+/*
+ * File FaceCheckActivity.java
+ *
+ * Add for Facecheck for new sms nofitication of secret contacts
+ * 
+ * Day on 2016/12/25
+ *
+ */
+
+package com.android.systemui.face;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.content.BroadcastReceiver;
+import android.content.IntentFilter;
+import android.os.Bundle;
+import android.os.RemoteException;
+import android.os.ServiceManager;
+import android.util.Log;
+import android.view.Gravity;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.Toast;
+import com.android.internal.statusbar.IStatusBarService;
+/**IUV:add-start for ��������ʶ�� by yunlong.shen on 2017/07/21 */
+import android.os.IBinder;
+import android.os.Message;
+import com.android.internal.policy.IFaceService;
+import com.android.internal.policy.IFaceStateCallback;
+import android.content.ServiceConnection;
+import android.os.RemoteException;
+import android.os.ServiceManager;
+import android.content.ComponentName;
+import android.os.Handler;
+import com.android.internal.policy.IFaceOverTimeCallback;
+import com.android.systemui.R;
+/**IUV:add-end*/
+public class FaceCheckActivity extends Activity {
+
+    private static final String TAG = "FaceCheckActivity";
+
+    public static boolean sCheckOk = false;
+	public static int sCheckResult = -1;
+	public static final int Face_CHECK_REQUEST_CODE = 0x1982;
+	private IStatusBarService mStatusBarService;
+	final Object mServiceAquireLock = new Object();
+	private boolean mForMmsPrivacyMode = false;
+
+    @Override
+    public void onCreate(Bundle icicle) {
+        super.onCreate(icicle);
+
+		setWindowFlag(); 
+		Intent intent = getIntent();
+		mForMmsPrivacyMode = intent.getBooleanExtra("forMmsPrivacyMode", false);
+		/*
+        Intent intentCloseEncrypt = new Intent();
+		intentCloseEncrypt.setClassName("com.android.systemui", "com.Faceking.scanner.PrivacySpaceActivity");
+		intentCloseEncrypt.putExtra("privacyState", 6);
+		intentCloseEncrypt.putExtra("fromNotification", true);
+		*/
+		
+		/**IUV:add-start for ��������ʶ�� by yunlong.shen on 2017/07/21 */
+		switchToFace();	
+		/**IUV:add-end*/
+		
+		try {
+		    IStatusBarService statusbar = getStatusBarService();
+		    statusbar.collapsePanels();
+		} catch (RemoteException e) {
+		    Log.e(TAG, "RemoteException when toggling recent apps", e);
+		}
+	//	startActivityForResult(intentCloseEncrypt, Face_CHECK_REQUEST_CODE); 
+		mReceiver.init();
+    }
+
+	private final Receiver mReceiver = new Receiver();
+	private final class Receiver extends BroadcastReceiver {
+        public void init() {
+            // Register for Intent broadcasts for...
+            IntentFilter filter = new IntentFilter();
+			filter.addAction(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);
+            FaceCheckActivity.this.registerReceiver(this, filter);
+        }
+
+        @Override
+        public void onReceive(Context context, Intent intent) {
+            String action = intent.getAction();
+            if(action.equals(Intent.ACTION_CLOSE_SYSTEM_DIALOGS)) {
+				String reason = intent.getStringExtra("reason");
+				if ("homekey".equals(reason)) {
+					FaceCheckActivity.this.finish();
+				}
+            }
+        }
+
+		public void deInit() {
+			FaceCheckActivity.this.unregisterReceiver(this);
+		}
+	}
+
+    @Override
+    protected void onDestroy() {
+        super.onDestroy();
+		mReceiver.deInit();
+		exitFaceVerify();
+    }
+/*
+    @Override
+    public void onActivityResult(int requestCode, int resultCode, Intent data) {
+        super.onActivityResult(requestCode, resultCode, data);
+
+        if (requestCode != Face_CHECK_REQUEST_CODE) {
+			this.finish();
+            return;
+        }
+
+        // If the user entered a valid keyguard trace, present the final
+        // confirmation prompt; otherwise, go back to the initial state.
+        sCheckOk = true;
+        if (resultCode == Activity.RESULT_OK) {
+            sCheckResult = 1;
+			if(mForMmsPrivacyMode) {
+				android.provider.Settings.System.putInt(this.getContentResolver(),
+                        "com_android_mms_privacy_veiw_mode", -1);
+				this.finish();
+				return;
+			}
+			try {
+                IStatusBarService statusbar = getStatusBarService();
+                statusbar.doNotificationClickAfterFaceCheck();
+            } catch (RemoteException e) {
+                Log.e(TAG, "RemoteException when toggling recent apps", e);
+                this.finish();
+            }
+			this.finish();
+        } else {
+            //showError();
+            sCheckResult = -1;
+			this.finish();
+        }
+    }
+*/
+	private void setWindowFlag() {
+        // set this flag so this activity will stay in front of the keyguard
+        int flags = WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED
+                        | WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD
+                        | WindowManager.LayoutParams.FLAG_IGNORE_CHEEK_PRESSES
+                        | WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON;
+        final WindowManager.LayoutParams lp = getWindow().getAttributes();
+        lp.flags |= flags;
+        getWindow().setAttributes(lp);
+    }
+
+	IStatusBarService getStatusBarService() {
+        synchronized (mServiceAquireLock) {
+            if (mStatusBarService == null) {
+                mStatusBarService = IStatusBarService.Stub.asInterface(
+                        ServiceManager.getService("statusbar"));
+            }
+            return mStatusBarService;
+        }
+    }
+	
+	/**IUV:add-start for ��������ʶ�� by yunlong.shen on 2017/07/21 */
+	private IFaceService mFaceservice;
+	private static final int FACE_MODE_SUCESS = 0;
+    private static final int FACE_MODE_FAIL = 1;
+    private static final int FACE_MODE_OVERTIME = 2;
+    private boolean mFaceVerifyRun = false;
+    private void switchToFace() {
+    	Intent faceIntent = new Intent();
+    	faceIntent.setClassName("com.android.systemui", "com.Faceking.scanner.FaceService");
+		faceIntent.putExtra("call_package", "com.android.systemui:click sms notification");
+    	if (getApplicationContext().bindService(faceIntent, mFaceVerifyConn,
+             Context.BIND_AUTO_CREATE)) {
+         Log.d(TAG,"---bind FaceService sucess---");
+    	} else {
+         Log.d(TAG,"---bind FaceService fail---");
+		 this.finish();
+    	}
+    }
+    
+    private final ServiceConnection mFaceVerifyConn = new ServiceConnection() {
+        @Override
+        public void onServiceConnected(ComponentName name, IBinder service) {
+            mFaceservice = IFaceService.Stub.asInterface(service);
+            try {
+                mFaceservice.setStateCallback(mFaceVerifyStateCallback);
+				mFaceservice.faceOverTimeCallback(mFaceVerityTimeoutCallback);
+                mFaceservice.startFaceIdentify();
+                mFaceVerifyRun = true;
+			/*	mHandler.postDelayed(new Runnable() {
+                 @Override
+                 public void run() {
+					 //showTimeout();
+                     exitFaceVerify();
+                 }
+             }, 3000);
+			 */
+            } catch (RemoteException e) {
+               Log.d(TAG,"start verity face failed");
+            }
+        }
+
+        @Override
+        public void onServiceDisconnected(ComponentName name) {
+            mFaceservice = null;           
+            mFaceVerifyRun = false;
+        }
+    };
+
+    IFaceStateCallback.Stub mFaceVerifyStateCallback = new IFaceStateCallback.Stub() {
+
+        @Override
+        public void onIdentifyResult(boolean success) {
+     	   Log.i(TAG,"success="+success);
+            if (success) {
+				handler.sendEmptyMessage(FACE_MODE_SUCESS);	
+            } else {
+				handler.sendEmptyMessage(FACE_MODE_FAIL);   
+            }
+			exitFaceVerify();
+        }
+    };
+	
+	 IFaceOverTimeCallback.Stub mFaceVerityTimeoutCallback = new IFaceOverTimeCallback.Stub() {
+
+        @Override
+        public void faceOverTime(){
+		  handler.sendEmptyMessage(FACE_MODE_OVERTIME);  
+		  exitFaceVerify();
+        }
+    };
+	
+	private void exitFaceVerify(){
+        try {
+            getApplicationContext().unbindService(mFaceVerifyConn);
+            mFaceVerifyRun = false;
+            Log.i(TAG,"--exit face verify");
+        } catch (Exception ex) {
+            Log.i(TAG,"--exit face verify failed");
+        }
+    }
+	private void executeFaceVerifyMmsOverTime(){
+		Toast.makeText(this.getApplicationContext(), R.string.face_overtime, Toast.LENGTH_LONG).show();
+		 // exitFaceVerify();
+		  this.finish();
+	}
+	private void executeFaceVerifyMmsFail(){
+		 Toast.makeText(this.getApplicationContext(), R.string.face_discern_failure, Toast.LENGTH_LONG).show();
+		 this.finish();
+	}
+	private void executeFaceVerifyMmsSucess(){
+		Log.i(TAG,"------mForMmsPrivacyMode--->"+mForMmsPrivacyMode);
+		//Toast.makeText(this.getApplicationContext(), "Check success!", Toast.LENGTH_LONG).show();
+    	if(mForMmsPrivacyMode) {
+    		android.provider.Settings.System.putInt(getContentResolver(),
+                     "com_android_mms_privacy_veiw_mode", -1);	 
+			this.finish();
+			return;
+    	}
+		/*try {
+				IStatusBarService statusbar = getStatusBarService();
+				statusbar.doNotificationClickAfterFaceCheck();
+			} catch (RemoteException e) {
+				Log.e(TAG, "RemoteException when toggling recent apps", e);
+				this.finish();
+			}zxp*/
+		this.finish();//IUV:add for 105570 by yunlong.shen on 2017/07/31
+    }
+	
+	 private Handler handler = new Handler(){
+	    	public void handleMessage(Message msg) {
+	    		switch (msg.what) {
+					case FACE_MODE_SUCESS:
+						executeFaceVerifyMmsSucess();
+						break;
+					case FACE_MODE_FAIL:
+						executeFaceVerifyMmsFail();
+						break;
+					case FACE_MODE_OVERTIME:
+						executeFaceVerifyMmsOverTime();
+						break;
+				}
+	    	};
+	    };
+
+	/**IUV:add-end*/
+}
Index: frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/KeyguardBottomAreaView.java
===================================================================
--- frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/KeyguardBottomAreaView.java	(revision 2328)
+++ frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/KeyguardBottomAreaView.java	(revision 2329)
@@ -202,7 +202,7 @@
 	private static final String startCameraSelfie="Take a selfie";
 	private  String cameraIntroduction="";
 	// modify by dongdongli for 112586 20171114 start {
-	private static final String CAMERA="com.mediatek.hz.camera";
+	private static final String CAMERA="com.tct.hz.camera";
 	// modify by dongdongli for 112586 20171114 end }
 	private static final String GOOGLE_SEARCH="com.google.android.googlequicksearchbox";
 	private static final String RECORD_VIDEO="com.tct.screenrecorder";
Index: frameworks/base/packages/SystemUI
===================================================================
--- frameworks/base/packages/SystemUI	(revision 2328)
+++ frameworks/base/packages/SystemUI	(revision 2329)

Property changes on: frameworks/base/packages/SystemUI
___________________________________________________________________
Modified: svn:mergeinfo
   Merged /L05A/Trunk/ALPS-MP-N1.MP18-V1_AUS6739_66_N1_INHOUSE/frameworks/base/packages/SystemUI:r2195-2198
Index: frameworks/base/packages/Keyguard/proguard.flags
===================================================================
--- frameworks/base/packages/Keyguard/proguard.flags	(revision 2328)
+++ frameworks/base/packages/Keyguard/proguard.flags	(revision 2329)
@@ -27,4 +27,5 @@
 
 # Plugin
 -keep class com.mediatek.keyguard.ext.** { *; }
+-keep class com.sensetime.faceapi.model.* {*;}
 
Index: frameworks/base/packages/Keyguard/AndroidManifest.xml
===================================================================
--- frameworks/base/packages/Keyguard/AndroidManifest.xml	(revision 2328)
+++ frameworks/base/packages/Keyguard/AndroidManifest.xml	(revision 2329)
@@ -50,6 +50,13 @@
         android:supportsRtl="true"
         android:defaultToDeviceProtectedStorage="true"
         android:directBootAware="true">
+       <activity
+            android:name="com.face.scanner.FaceActivity"
+            android:screenOrientation="portrait" >
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+            </intent-filter>
+        </activity>
 
     </application>
 
Index: frameworks/base/packages/Keyguard/src/com/face/scanner/PrivacySpaceActivity.java
===================================================================
--- frameworks/base/packages/Keyguard/src/com/face/scanner/PrivacySpaceActivity.java	(revision 0)
+++ frameworks/base/packages/Keyguard/src/com/face/scanner/PrivacySpaceActivity.java	(revision 2329)
@@ -0,0 +1,503 @@
+package com.face.scanner;
+
+import android.R.integer;
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.hardware.Camera;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.HandlerThread;
+import android.os.Message;
+import android.os.Vibrator;
+import android.provider.Settings;
+import android.util.Log;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.Toast;
+
+import com.android.keyguard.R;
+import com.android.keyguard.KeyguardUtils;
+import com.sensetime.faceapi.model.FaceInfo;
+import com.sensetime.faceapi.utils.AccelerometerManager;
+import com.sensetime.faceunlock.bean.FaceFeature;
+import com.sensetime.faceunlock.bean.User;
+import com.sensetime.faceunlock.config.AppConfig;
+import com.sensetime.faceunlock.manager.DetectProxy;
+import com.sensetime.faceunlock.manager.HackerProxy;
+import com.sensetime.faceunlock.manager.TrackProxy;
+import com.sensetime.faceunlock.manager.UserManager;
+import com.sensetime.faceunlock.manager.VerifyProxy;
+import com.sensetime.faceunlock.util.LogUtil;
+import com.sensetime.faceunlock.widget.CameraView;
+
+import android.view.View;
+import android.provider.Settings;
+//Begin: Add by junwei.shen for bug-98638 at 2017.7.2
+import android.os.Looper;
+import android.widget.TextView;
+//End: Add by junwei.shen at 2017.7.2
+import java.util.Timer;
+import java.util.TimerTask;
+
+import com.sensetime.faceapi.FaceLibrary;
+import com.sensetime.faceapi.model.CvPixelFormat;
+import com.sensetime.faceunlock.util.BrightnessHelper;
+
+import android.graphics.Rect;
+
+public class PrivacySpaceActivity extends Activity {
+    private static final String TAG = "PrivacySpaceActivity";
+    private static final int FACE_NEW_REQUEST = 300;
+    private static final int FACE_REPLACE_REQUEST = 301;
+    private static final int FACE_REMOVE_REQUEST = 302;
+
+    public static final int MODE_INIT = 0;
+    public static final int MODE_UNLOCK_NORMAL = 1;
+    public static final int MODE_UNLOCK_PRIVACY = 2;
+    public static final int MODE_UNLOCK_CLONE = 3;
+    public static final int MODE_SWITCH_TO_PRIVACY = 4;
+    public static final int MODE_SWITCH_TO_CLONE = 5;
+    public static final int MODE_VERIFY = 6;
+    public static final int MODE_VERIFY_SHOW_UI = 7;
+    //Begin: Add by junwei.shen for bug-98638 at 2017.7.2
+    public static final int CANCEL_TOAST = 8;
+    public static final int MODE_VERITY_UNLOCK = 9;
+    public static final int MODE_PRIVACY_PROTECTION = 10;
+    public static final int START_FACE_VERIFY = 101;
+    public static final int STOP_FACE_VERIFY = 102;
+
+    public static final int PRIVACY_OK = 100;
+
+    private Toast toast = null;
+    //End: Add by junwei.shen for bug-98638 at 2017.7.2
+    private CameraView cameraView; // 相机控件
+    private AlertDialog dialog;
+
+    private Thread trackThread; // 进行Track的线程
+    private HandlerThread verifyThread; // 进行Verify的线程
+    private Handler verifyHandler; // 进行Verify的线程的Handler对象
+    private User user; // verify通过，即存储检测到的User
+
+    private volatile boolean isNv21DataReady; // 判断nv21的数据是否拷贝完成
+    private volatile boolean isTracking; // 是否正在进行track操作
+    private boolean isKilled; // 控制Track线程是否停止
+    private boolean isVerifying; // 是否正在进行verify操作
+    private byte[] nv21; // nv21的数据
+    private int attemptCount; // 重试次数
+    private boolean isNotHacker; // 是否为活体
+    private long totalTime; // 总耗时
+    private long verifyTime;
+    private long hackerTime;
+
+    boolean mUnlockFinished = false;
+    private int mPrivacyMode;
+    private boolean mFromNotification;
+    private boolean mFromKeyguard;
+
+    private int mLastScreenMode;
+    private int mLastScreenBrightness;
+    private boolean mBrightnessChanged = false;
+    private static final float BRIGHT_MIN = 0.12f;
+
+    //wym add for 99963. 2017/07/06
+
+    //Timer timer = new Timer();
+    boolean mIsNotGetFaceInfo = false;
+
+    /*TimerTask task = new TimerTask() {
+        @Override
+        public void run() {
+
+            runOnUiThread(new Runnable() {
+                @Override
+                public void run() {
+                    LogUtil.d(TAG, "...............timerTask mIsNotGetFaceInfo=" + mIsNotGetFaceInfo);
+                    if (mIsNotGetFaceInfo) {
+                        KeyguardUtils.showNormalDialog(PrivacySpaceActivity.this, "人脸认证");
+                    }
+                }
+            });
+        }
+    };*/
+
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        sendFaceBrodcast(START_FACE_VERIFY);
+        /*String state = Settings.System.getStringForUser(this.getApplicationContext().getContentResolver(), Settings.System.FACE_STATE_ENABLED, 0);zxp*/
+        String state = "0";
+		if (state == null) {
+            state = "0";
+        }
+        if (state.equals("0")) {
+            getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
+        }
+        requestWindowFeature(Window.FEATURE_NO_TITLE);
+        mPrivacyMode = getIntent().getIntExtra("privacyState", MODE_INIT);
+        mFromNotification = getIntent().getBooleanExtra("fromNotification", false);
+        mFromKeyguard = getIntent().getBooleanExtra("START_FROM_KEYGUARD", false);
+        if (mFromKeyguard || (mPrivacyMode == MODE_UNLOCK_PRIVACY)) {
+            getWindow().clearFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
+            WindowManager.LayoutParams lp = getWindow().getAttributes();
+            int keyguardFlag = WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED
+                    | WindowManager.LayoutParams.FLAG_IGNORE_CHEEK_PRESSES
+                    | WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON
+                    | WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD;
+            lp.flags |= keyguardFlag;
+            getWindow().setAttributes(lp);
+        }
+        resizeWindow();
+        Log.d("changjun", "mPrivacyMode:" + mPrivacyMode + ",mFromNotification:" + mFromNotification);
+        setContentView(R.layout.activity_verify);
+        initView();
+        mLastScreenMode = BrightnessHelper.getScreenMode(this);
+        mLastScreenBrightness = BrightnessHelper.getScreenBrightness(this);
+        DetectProxy.init();
+        VerifyProxy.init(this);
+        if (AppConfig.isOpenHacker) {
+            HackerProxy.init();
+        }
+        final IntentFilter filter = new IntentFilter();
+        filter.addAction(Intent.ACTION_SCREEN_OFF);
+        filter.addAction(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);
+        registerReceiver(mReceiver, filter);
+        LogUtil.d(TAG,"!!!!!!!!!timer.schedule!!!!!!");
+        //timer.schedule(task, 2000);
+    }
+
+    private void resizeWindow() {
+        WindowManager.LayoutParams lp = getWindow().getAttributes();
+        lp.width = 1;
+        lp.height = 1;
+        lp.alpha = 0.0f;
+        lp.dimAmount = 0.0f;
+        getWindow().setAttributes(lp);
+    }
+
+    private BroadcastReceiver mReceiver = new BroadcastReceiver() {
+        @Override
+        public void onReceive(final Context context, final Intent intent) {
+            Log.d(TAG, "onReceive");
+            String action = intent.getAction();
+
+            if (Intent.ACTION_SCREEN_OFF.equals(action)) {
+                Log.d(TAG, "screen off");
+                PrivacySpaceActivity.this.finish();
+            } else if (Intent.ACTION_CLOSE_SYSTEM_DIALOGS.equals(action)) {
+                String reason = intent.getStringExtra("reason");
+                if ("homekey".equals(reason)) {
+                    PrivacySpaceActivity.this.finish();
+                }
+            }
+        }
+    };
+
+    private void initView() {
+        cameraView = (CameraView) findViewById(R.id.camera_view);
+        cameraView.setVisibility(View.INVISIBLE);// added by iuv luyang
+        cameraView.setPreviewCallback(new Camera.PreviewCallback() {
+
+            @Override
+            public void onPreviewFrame(byte[] data, Camera camera) {
+                if (totalTime == 0) {
+                    totalTime = System.currentTimeMillis();
+                }
+                if (nv21 == null || data.length != nv21.length) {
+                    nv21 = new byte[data.length];
+                }
+                if (!isTracking && !isVerifying) {
+                    synchronized (nv21) {
+                        System.arraycopy(data, 0, nv21, 0, data.length);
+                        isNv21DataReady = true;
+                    }
+                }
+                cameraView.addCallbackBuffer();
+            }
+        });
+    }
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+        sendFaceBrodcast(START_FACE_VERIFY);
+        AccelerometerManager.start(this);
+        isKilled = false;
+        cameraView.restartCamera();
+        trackThread = new Thread() {
+            @Override
+            public void run() {
+                while (!isKilled && !Thread.interrupted()) {
+                    if (isNv21DataReady) {
+                        isTracking = true;
+                        synchronized (nv21) {
+                            FaceInfo[] faces = DetectProxy.detect(nv21, cameraView.mPreviewWidth,
+                                    cameraView.mPreviewHeight);
+                            FaceInfo faceInfo = filterFaces(faces);
+                            maxBrightnessIfNeed(nv21, faceInfo);
+                            if (faceInfo == null) {
+                                mIsNotGetFaceInfo = true;
+                            } else {
+                                mIsNotGetFaceInfo = false;
+                                //timer.cancel();
+                            }
+                            LogUtil.i(TAG, "...mIsNotGetFaceInfo=" + mIsNotGetFaceInfo);
+                            analysis(faceInfo);
+                        }
+                        isTracking = false;
+                        isNv21DataReady = false;
+                    }
+                }
+            }
+        };
+        trackThread.start();
+        initGetFeatureThread(); // 初始化GetFeature的线程
+    }
+
+    private void maxBrightnessIfNeed(byte[] nv21, FaceInfo faceInfo) {
+        if (nv21 == null || nv21.length == 0 || faceInfo == null) {
+            return;
+        }
+        Rect rect = faceInfo.faceRect;
+        float brightness = FaceLibrary.averageBrightness(nv21, CvPixelFormat.NV21, cameraView.mPreviewWidth, cameraView.mPreviewHeight, rect.left, rect.top, rect.width(), rect.height());
+        if (brightness < BRIGHT_MIN) {
+            mBrightnessChanged = true;
+            BrightnessHelper.setScreenMode(this, 0);
+            BrightnessHelper.setScreenBrightness(this, 255);
+        }
+    }
+
+
+    private FaceInfo filterFaces(FaceInfo[] faces) {
+        if (faces == null || faces.length <= 0) {
+            return null;
+        }
+        FaceInfo faceInfo = null;
+        for (int i = 0; i < faces.length; i++) {
+            if (faceInfo == null || faces[i].faceRect.width() > faceInfo.faceRect.width()) {
+                faceInfo = faces[i];
+            }
+        }
+        return faceInfo;
+    }
+
+    private void analysis(FaceInfo faceInfo) {
+        if (faceInfo == null || isVerifying) {
+            return;
+        }
+        isVerifying = true;
+        Message msg = Message.obtain(verifyHandler);
+        msg.obj = new FaceFeature(faceInfo, nv21, cameraView.mPreviewWidth, cameraView.mPreviewHeight);
+        verifyHandler.sendMessage(msg);
+    }
+
+    private void initGetFeatureThread() {
+        verifyThread = new HandlerThread("VerifyThread");
+        verifyThread.start();
+        verifyHandler = new Handler(verifyThread.getLooper()) {
+            @Override
+            public void handleMessage(Message msg) {
+                FaceFeature faceFeature = (FaceFeature) msg.obj;
+                handleFeature(faceFeature);
+            }
+        };
+    }
+
+    private void handleFeature(FaceFeature faceFeature) {
+        if (faceFeature == null) {
+            return;
+        }
+
+        // 做一次 verify 和 hacker，如果某次已经检测出来结果并且通过了，则不再重复检测
+        if (user == null) {
+            verifyTime = System.currentTimeMillis();
+            user = VerifyProxy.isPass(faceFeature, this);
+            verifyTime = System.currentTimeMillis() - verifyTime;
+        }
+        if (!isNotHacker) {
+            hackerTime = System.currentTimeMillis();
+            isNotHacker = HackerProxy.isPass(faceFeature, cameraView.isFrontCamera());
+            hackerTime = System.currentTimeMillis() - hackerTime;
+        }
+
+        attemptCount++;
+        LogUtil.d(TAG, "attemptCount: " + attemptCount);
+        // 达到重试次数上限时，发送结果，否则继续进行检测
+        if ((user != null && isNotHacker) || attemptCount >= AppConfig.attemptCount) {
+            cameraView.setPreviewCallback(null);
+            cameraView.stopPreview();
+            analyseResult(user, isNotHacker);
+        } else {
+            isVerifying = false;
+        }
+    }
+
+    //Begin:Add by junwei.shen for bug-98638 at 2017.7.2
+    Handler hd = new Handler(Looper.getMainLooper()) {
+
+        @Override
+        public void handleMessage(Message msg) {
+            super.handleMessage(msg);
+            if (msg.what == CANCEL_TOAST) {
+                toast.cancel();
+//                toast = null;
+                finish();
+            }
+        }
+
+    };
+    //End: Add by junwei.shen for bug-98638 at 2017.7.2
+
+    private void analyseResult(User user, boolean isNotHacker) {
+        Intent intent = new Intent();
+        intent.setAction("SAVE_RECORDER");
+        sendBroadcast(intent);
+        if (user != null && isNotHacker) {
+            String debugMsg = "total time: " + (System.currentTimeMillis() - totalTime) + "ms\nverify time: " +
+                    verifyTime + "ms\nhacker time: " + hackerTime + "ms\nattempts count: " + attemptCount;
+            Vibrator vib = (Vibrator) getSystemService(Context.VIBRATOR_SERVICE);
+            vib.vibrate(100);
+            beginUnlock();
+            finish();
+            return;
+        } else {
+            //Begin: Changed by junwei.shen for bug-98638 at 2017.7.2
+//          Toast.makeText(PrivacySpaceActivity.this, R.string.face_not_recognized, Toast.LENGTH_LONG).show();
+            toast = Toast.makeText(PrivacySpaceActivity.this, R.string.face_not_recognized, Toast.LENGTH_LONG);
+            toast.show();
+            hd.sendEmptyMessageDelayed(CANCEL_TOAST, 1000);
+            //End: Changed by junwei.shen for bug-98638 at 2017.7.2
+            setResult(RESULT_CANCELED);
+            //Changed by junwei.shen for bug-98638 at 2017.7.2
+//          finish();
+
+        }
+    }
+
+    public void saveFaceState(boolean enabled) {
+       /* Settings.System.putStringForUser(getContentResolver(), Settings.System.FACE_STATE_ENABLED, enabled ? "1" : "0", 0);zxp*/
+    }
+
+    private void switchToPrivacySpace() {
+        String userID = "0";
+        /*userID = Settings.System.getStringForUser(getContentResolver(), Settings.System.PRIVACY_USER_ID, 0);zxp*/
+        int id = Integer.parseInt(userID);
+        try {
+            if (mPrivacyMode == MODE_UNLOCK_PRIVACY) {
+                sendFaceBrodcast(RESULT_OK);
+            }
+            Intent i = new Intent("PRIVACY_SPACE_SWITCH");
+            i.putExtra("userid", id);
+            sendBroadcast(i);
+        } catch (Exception re) {
+            Log.e(TAG, "Couldn't switch user " + re);
+        }
+    }
+
+    private void beginUnlock() {
+        //unlock();
+        switch (mPrivacyMode) {
+            case MODE_INIT:
+                break;
+            case MODE_SWITCH_TO_CLONE:
+            case MODE_SWITCH_TO_PRIVACY:
+                switchToPrivacySpace();
+                break;
+            case MODE_UNLOCK_NORMAL:
+                break;
+            case MODE_UNLOCK_CLONE:
+            case MODE_UNLOCK_PRIVACY:
+                switchToPrivacySpace();
+                break;
+            case MODE_VERIFY:
+            case MODE_VERIFY_SHOW_UI:
+                setResult(RESULT_OK);
+                break;
+            case MODE_VERITY_UNLOCK:
+                sendFaceBrodcast(RESULT_OK);
+            case MODE_PRIVACY_PROTECTION:
+                sendFaceBrodcast(PRIVACY_OK);
+                break;
+            default:
+                break;
+        }
+
+    }
+
+    private void sendFaceBrodcast(int flag) {
+        Intent mIntent = new Intent();
+        if (flag == RESULT_OK) {
+            mIntent.setAction("action_face_OK");
+        } else if (flag == RESULT_CANCELED) {
+            mIntent.setAction("action_face_fail");
+        } else if (flag == PRIVACY_OK) {
+            mIntent.setAction("action_privacy_ok");
+        } else if (flag == START_FACE_VERIFY) {
+            mIntent.setAction("action_start_face_verity");
+        } else if (flag == STOP_FACE_VERIFY) {
+            mIntent.setAction("action_stop_face_verity");
+        }
+        this.getApplicationContext().sendBroadcast(mIntent);
+
+    }
+
+    private void dismissDialog() {
+        if (dialog != null && dialog.isShowing()) {
+            dialog.dismiss();
+            dialog = null;
+            isVerifying = false;
+        }
+    }
+
+    @Override
+    protected void onPause() {
+        sendFaceBrodcast(STOP_FACE_VERIFY);
+        dismissDialog();
+        AccelerometerManager.stop();
+        cameraView.releaseCamera();
+        stopThread();
+        super.onPause();
+    }
+
+    private void stopThread() {
+        isKilled = true;
+        if (trackThread != null) {
+            try {
+                trackThread.interrupt();
+                trackThread.join();
+            } catch (InterruptedException e) {
+                e.printStackTrace();
+            }
+        }
+        if (verifyThread != null) {
+            verifyThread.quitSafely();
+            verifyThread = null;
+        }
+    }
+
+    /*added by iuv luyang*/
+    @Override
+    public void onBackPressed() {
+        Toast.makeText(this.getApplicationContext(), R.string.face_cancel_identify, Toast.LENGTH_SHORT).show();
+        super.onBackPressed();
+    }
+    /*end by iuv luyang*/
+
+    @Override
+    protected void onDestroy() {
+        super.onDestroy();
+        sendFaceBrodcast(STOP_FACE_VERIFY);
+        unregisterReceiver(mReceiver);
+        if (mBrightnessChanged) {
+            BrightnessHelper.setScreenBrightness(this, mLastScreenBrightness);
+            BrightnessHelper.setScreenMode(this, mLastScreenMode);
+        }
+        if (AppConfig.isOpenHacker)
+            HackerProxy.release();
+    }
+}
Index: frameworks/base/packages/Keyguard/src/com/face/scanner/KeyguardStateCallback.java
===================================================================
--- frameworks/base/packages/Keyguard/src/com/face/scanner/KeyguardStateCallback.java	(revision 0)
+++ frameworks/base/packages/Keyguard/src/com/face/scanner/KeyguardStateCallback.java	(revision 2329)
@@ -0,0 +1,82 @@
+package com.face.scanner;
+
+
+import com.android.internal.policy.IKeyguardService;
+import com.android.internal.policy.IKeyguardStateCallback;
+import android.util.Log;
+import android.os.RemoteException;
+
+
+public class KeyguardStateCallback extends IKeyguardStateCallback.Stub {
+    private static final String TAG = "KeyguardStateCallback";
+    private static KeyguardStateCallback sCallback = null;
+	
+    PrivacySpaceActivity mActivity = null;
+    boolean mKeyguardShowing = false;
+    boolean mUnlockFinished = false;
+    boolean mSimSecure = false;
+    boolean mInputRestricted = false;
+    boolean mRegistered = false;
+    boolean mHasLockscreenWallpaper = false;
+	boolean mTrusted = false;
+	
+    KeyguardStateCallback() {
+        super();
+    }
+	
+    public static KeyguardStateCallback getInistance() {
+        if(sCallback == null) {
+            sCallback = new KeyguardStateCallback();
+        }
+        return sCallback;
+    }	
+	
+    public void onShowingStateChanged(boolean showing) {
+        boolean oldShow = mKeyguardShowing;
+        mKeyguardShowing = showing;
+        Log.d(TAG," onShowingStateChanged:oldShow="+oldShow+",mKeyguardShowing="+mKeyguardShowing);
+        if(oldShow && !mKeyguardShowing && mActivity != null && !mActivity.mUnlockFinished) {
+            Log.d(TAG," Unlocked, finish PrivacySpaceActivity");
+            mActivity.mUnlockFinished = true;
+            mActivity.finish();
+            mActivity = null;
+        }
+    }
+	
+    public void onSimSecureStateChanged(boolean simSecure) {
+        mSimSecure = simSecure;
+    }
+	
+    public void onInputRestrictedStateChanged(boolean inputRestricted) {
+        mInputRestricted = inputRestricted;
+    }
+	
+    public void onAntiTheftStateChanged(boolean antiTheftEnabled) {
+        ;
+    }
+	
+    public void registerToKeyguard(IKeyguardService Service) {
+        if(!mRegistered) {
+            try {
+                Service.addStateMonitorCallback(this);
+                mRegistered = true;
+            } catch (RemoteException e) {
+                Log.e(TAG, "Remote Exception when addStateMonitorCallback", e);
+            }
+        }
+    }
+	
+    public void setActivity(PrivacySpaceActivity a) {
+        mActivity = a;
+    }
+	   @Override // Binder interface
+    public void onHasLockscreenWallpaperChanged(boolean hasLockscreenWallpaper) {
+        mHasLockscreenWallpaper = hasLockscreenWallpaper;
+    }
+
+    @Override // Binder interface
+    public void onTrustedChanged(boolean trusted) {
+        mTrusted = trusted;
+    }
+
+}
Index: frameworks/base/packages/Keyguard/src/com/face/scanner/view/CameraSurfaceView.java
===================================================================
--- frameworks/base/packages/Keyguard/src/com/face/scanner/view/CameraSurfaceView.java	(revision 0)
+++ frameworks/base/packages/Keyguard/src/com/face/scanner/view/CameraSurfaceView.java	(revision 2329)
@@ -0,0 +1,261 @@
+
+package com.face.scanner.view;
+
+import java.io.IOException;
+import java.util.List;
+
+import android.app.Activity;
+import android.content.Context;
+import android.graphics.ImageFormat;
+import android.graphics.SurfaceTexture;
+import android.hardware.Camera;
+import android.hardware.Camera.CameraInfo;
+import android.hardware.Camera.Parameters;
+import android.hardware.Camera.Size;
+import android.util.Log;
+import android.view.Surface;
+import android.view.SurfaceHolder;
+import android.view.SurfaceView;
+import android.view.WindowManager; 
+
+import com.face.scanner.PrivacySpaceActivity;
+import com.face.scanner.FaceActivity;
+import com.face.scanner.FaceService;
+import com.android.keyguard.R;
+
+public class CameraSurfaceView extends SurfaceView implements
+        SurfaceHolder.Callback {
+    private SurfaceHolder mHolder; // SurfaceView的控制器
+    private Camera mCamera; // Camera对象
+    private int cameraID;
+    private Context context;
+    private int cameraRotateAngle = 0;
+
+    private int previewImH = 0;
+    private int previewImW = 0;
+    // 虹膜图像采集模式必须为预览模式
+    private Camera.PreviewCallback previewCallback = null;
+    private SurfaceTexture mst;
+
+    public boolean mSurfaceDestroyed = true;
+
+    public interface IEvent {
+        void onSurfaceViewReady(CameraSurfaceView surfaceView);
+    }
+
+    private IEvent event;
+
+    public CameraSurfaceView(Context context, int cameraID,
+            Camera.PreviewCallback previewCallback, IEvent event) {
+        super(context);
+
+        this.cameraID = cameraID;
+        this.context = context;
+        this.event = event;
+        this.previewCallback = previewCallback;
+
+        mHolder = getHolder();
+        mHolder.addCallback(this);
+        mst = new SurfaceTexture(0);
+    }
+
+ 	public void OpenFlashLED()
+ 	{
+ 		if(mCamera == null) openCamera(true);
+ 		if(mCamera == null) return;
+ 		Camera.Parameters params = mCamera.getParameters();
+		params.setFlashMode(Parameters.FLASH_MODE_ON);
+		params.setFlashMode(Parameters.FLASH_MODE_TORCH);
+		mCamera.setParameters(params);
+ 	}
+ 	public void setCameraBrightness(int value){
+ 		if(mCamera == null){
+ 			return;
+ 		}
+ 		Camera.Parameters params = mCamera.getParameters();
+ 		int maxExposureCompensation = params.getMaxExposureCompensation();
+ 		int minExposureCompensation = params.getMinExposureCompensation();
+ 		
+ 		if(value<minExposureCompensation){
+ 			value = minExposureCompensation;
+ 		}else if(value>maxExposureCompensation){
+ 			value = maxExposureCompensation;
+ 		}
+ 		
+ 		params.setExposureCompensation(value);
+ 		mCamera.setParameters(params);
+ 	}
+ 	public int getCameraBrightness(){
+ 		Camera.Parameters params = mCamera.getParameters();
+ 		int exposureCompensation = params.getExposureCompensation();
+ 		return exposureCompensation;
+ 	}
+
+ 	public void CloseFlashLED()
+ 	{
+ 		if(mCamera != null){
+ 			Parameters parameters = mCamera.getParameters();
+ 			parameters.setFlashMode(Parameters.FLASH_MODE_OFF);
+ 			mCamera.setParameters(parameters);
+ 		}
+ 	}
+    // openCamera and set camera parameters
+    public void openCamera(boolean forceReopen) {
+        if (forceReopen && mCamera != null) {
+            mCamera.stopPreview();
+            mCamera.setPreviewCallback(null);
+            mCamera.release();
+            mCamera = null;
+        }
+        try {
+            if (mCamera == null) {
+                mCamera = Camera.openLegacy(cameraID,Camera.CAMERA_HAL_API_VERSION_1_0);
+            }
+    
+            //updateCameraParameters();
+    
+            mCamera.setPreviewDisplay(mHolder);
+            // 绝对布局需要的=========================================
+            mCamera.setPreviewCallback(previewCallback);
+            // mCamera.autoFocus(cb);
+            mCamera.setPreviewTexture(mst);
+            // 绝对布局需要的=========================================
+    
+            if (forceReopen) {
+                mCamera.startPreview();
+            }
+
+        } catch (RuntimeException re) {
+            re.printStackTrace();
+            if(context instanceof PrivacySpaceActivity) {
+                //((PrivacySpaceActivity)context).showExitToast(R.string.close_camera);
+            } else if(context instanceof FaceActivity) {
+                //((FaceActivity)context).showExitToast(R.string.close_camera);
+            } else if(context instanceof FaceService) {
+                //((FaceService)context).showExitToast(R.string.close_camera);
+            }
+        } catch (IOException e) {
+            e.printStackTrace();
+        }			
+    }
+
+    public void surfaceCreated(SurfaceHolder holder) {
+        mSurfaceDestroyed = false;
+        mHolder = holder;
+        openCamera(true);
+    }
+
+    // 如果surface变化，则重新打开camera preview，相当于重新初始化
+    public void surfaceChanged(SurfaceHolder holder, int format, int w, int h) {
+        try {
+            if(mCamera == null) return;
+            mHolder = holder;
+            mCamera.startPreview();
+            if (event != null) {
+                event.onSurfaceViewReady(this);
+            }
+            event = null;
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+
+    // surface界面销毁后，自动退出preview，收回camra资源
+    public void surfaceDestroyed(SurfaceHolder holder) {
+        stopCamera();
+        mSurfaceDestroyed = true;
+    }
+
+    private void setCameraDisplayOrientation(Context context, int cameraId,
+            Camera camera) {
+        CameraInfo info = new CameraInfo();
+        Camera.getCameraInfo(cameraId, info);
+        int rotation = ((WindowManager) (context.getApplicationContext().getSystemService(Context.WINDOW_SERVICE)))
+                .getDefaultDisplay().getRotation();
+
+        int degrees = 0;
+        switch (rotation) {
+            case Surface.ROTATION_0:
+                degrees = 0;
+                break;
+            case Surface.ROTATION_90:
+                degrees = 90;
+                break;
+            case Surface.ROTATION_180:
+                degrees = 180;
+                break;
+            case Surface.ROTATION_270:
+                degrees = 270;
+                break;
+        }
+        degrees = 270;
+        int result;
+        if (info.facing == Camera.CameraInfo.CAMERA_FACING_FRONT) {
+            result = (info.orientation + degrees) % 360;
+            result = (360 - result) % 360;
+        } else {
+            result = (info.orientation - degrees + 360) % 360;
+        }
+        cameraRotateAngle = result;
+
+        // if(EnumDeviceType.isJiaWeiA780())
+        {
+            cameraRotateAngle = 0;
+        }
+
+        Log.d("CameraSurface", "preview angel:" + result);
+        camera.setDisplayOrientation(result);
+    }
+
+    public int getCameraRotateAngle() {
+        return cameraRotateAngle;
+    }
+
+    public int getPreviewImH() {
+        return previewImH;
+    }
+
+    public int getPreviewImW() {
+        return previewImW;
+    }
+
+    public int getDeviceType() {
+        return 1;
+    }
+
+    public void stopCamera() {
+        if (mCamera != null) {
+            mCamera.stopPreview();
+            mCamera.setPreviewCallback(null);
+            mCamera.release();
+            mCamera = null;
+            mHolder = null;
+        }
+    }
+    
+    private double mRequestedAspect = 1920 / (double)1080;
+    @Override
+	protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+
+		if (mRequestedAspect > 0) {
+			int initialWidth = MeasureSpec.getSize(widthMeasureSpec);
+			int initialHeight = MeasureSpec.getSize(heightMeasureSpec);
+
+			final double viewAspectRatio = (double)initialWidth / initialHeight;
+			final double aspectDiff = mRequestedAspect / viewAspectRatio - 1;
+
+			if (Math.abs(aspectDiff) > 0.01) {
+				if (aspectDiff > 0) {
+					initialHeight = (int) (initialWidth / mRequestedAspect);
+				} else {
+					initialWidth = (int) (initialHeight * mRequestedAspect);
+				}
+				widthMeasureSpec = MeasureSpec.makeMeasureSpec(initialWidth, MeasureSpec.EXACTLY);
+				heightMeasureSpec = MeasureSpec.makeMeasureSpec(initialHeight, MeasureSpec.EXACTLY);
+			}
+		}
+		super.onMeasure(widthMeasureSpec, heightMeasureSpec);
+	}
+    
+    
+}
Index: frameworks/base/packages/Keyguard/src/com/face/scanner/view/DrawFaceEyesView.java
===================================================================
--- frameworks/base/packages/Keyguard/src/com/face/scanner/view/DrawFaceEyesView.java	(revision 0)
+++ frameworks/base/packages/Keyguard/src/com/face/scanner/view/DrawFaceEyesView.java	(revision 2329)
@@ -0,0 +1,753 @@
+package com.face.scanner.view;
+
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
+import android.graphics.Camera;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Matrix;
+import android.graphics.Paint;
+import android.util.AttributeSet;
+import android.view.View;
+import com.android.keyguard.R;
+import android.graphics.Path;
+import android.graphics.PathMeasure;
+
+public class DrawFaceEyesView extends View{
+	private Paint mainPaint; 
+	private Paint alphPaint;
+	private Camera camera=new Camera();
+    
+    private Bitmap hongmoMaskImage=BitmapFactory.decodeResource(getResources(), R.drawable.hongmo_mask_two);
+	private Matrix hongmoMaskImageMatrix=new Matrix();
+    
+//    private Bitmap hongmoMeshImage=BitmapFactory.decodeResource(getResources(), R.drawable.hongmo_mesh_image);
+	private Matrix hongmoMeshImageMatrix=new Matrix();
+//
+//	private Bitmap hongmoMeshMaskImage=BitmapFactory.decodeResource(getResources(), R.drawable.hongmo_mesh_mask_image);
+//	private Matrix hongmoMeshMaskImageMatrix=new Matrix();
+//	private float upDownValue=0.0f;
+//	private boolean downJudge=false;
+	
+	private int borderLeftLine1StartY=60;
+	private int borderLeftLine1EndY=60;
+	private final int BORDERLEFTLINE1ENDY=85;
+	private int borderLeftLine1StartX=16;
+	
+	private int borderLeftLine2StartY=110;
+	private int borderLeftLine2EndY=110;
+	private final int BORDERLEFTLINE2ENDY=185;
+	private int borderLeftLine2StartX=9;
+	
+	private int borderLeftLine3StartY=220;
+	private int borderLeftLine3EndY=220;
+	private final int BORDERLEFTLINE3ENDY=340;
+	private int borderLeftLine3StartX=21;
+	
+	private int borderLeftLine4StartY=220;
+	private int borderLeftLine4EndY=220;
+	private final int BORDERLEFTLINE4ENDY=110;
+	private int borderLeftLine4StartX=3;
+	
+	private int borderLeftLine5StartY=109;
+	private int borderLeftLine5EndY=109;
+	private final int BORDERLEFTLINE5ENDY=99;
+	private int borderLeftLine5StartX=3;
+	private int borderLeftLine5EndX=3;
+	
+	private int borderLeftLine6StartY=98;
+	private int borderLeftLine6EndY=98;
+	private final int BORDERLEFTLINE6ENDY=0;
+	private int borderLeftLine6StartX=14;
+	
+	private int borderLeftLine7StartY=520;
+	private int borderLeftLine7EndY=520;
+	private final int BORDERLEFTLINE7ENDY=150;
+	private int borderLeftLine7StartX=16;
+	
+	private int borderLeftLine8StartY=149;
+	private int borderLeftLine8EndY=149;
+	private final int BORDERLEFTLINE8ENDY=140;
+	private int borderLeftLine8StartX=16;
+	private int borderLeftLine8EndX=16;
+	
+	private int borderLeftLine9StartY=320;
+	private int borderLeftLine9EndY=320;
+	private final int BORDERLEFTLINE9ENDY=355;
+	private int borderLeftLine9StartX=29;
+	
+	private int borderLeftLine10StartY=356;
+	private int borderLeftLine10EndY=356;
+	private final int BORDERLEFTLINE10ENDY=365;
+	private int borderLeftLine10StartX=29;
+	private int borderLeftLine10EndX=29;
+	
+	private int borderLeftLine11StartY=365;
+	private int borderLeftLine11EndY=365;
+	private final int BORDERLEFTLINE11ENDY=511;
+	private int borderLeftLine11StartX=20;
+	
+	private int borderLeftLine12StartY=230;
+	private int borderLeftLine12EndY=230;
+	private final int BORDERLEFTLINE12ENDY=410;
+	private int borderLeftLine12StartX=9;
+	
+	private int borderBottomLine1StartX=16;
+	private int borderBottomLine1EndX=16;
+	private final int BORDERBOTTOMLINE1ENDX=1080;
+	private int borderBottomLine1StartY=510;
+	
+	private int borderLeftLinePoint1StartY=192;
+	private int borderLeftLinePoint1EndY=192;
+	private final int BORDERLEFTLINEPOINT1ENDY=196;
+	private int borderLeftLinePoint1StartX=9;
+	
+	private int borderLeftLinePoint2StartY=202;
+	private int borderLeftLinePoint2EndY=202;
+	private final int BORDERLEFTLINEPOINT2ENDY=206;
+	private int borderLeftLinePoint2StartX=9;
+	
+	private int borderLeftLinePoint3StartY=212;
+	private int borderLeftLinePoint3EndY=212;
+	private final int BORDERLEFTLINEPOINT3ENDY=216;
+	private int borderLeftLinePoint3StartX=9;
+	
+	private int borderLeftLinePoint4StartY=397;
+	private int borderLeftLinePoint4EndY=397;
+	private final int BORDERLEFTLINEPOINT4ENDY=401;
+	private int borderLeftLinePoint4StartX=20;
+	
+	private int borderLeftLinePoint5StartY=407;
+	private int borderLeftLinePoint5EndY=407;
+	private final int BORDERLEFTLINEPOINT5ENDY=411;
+	private int borderLeftLinePoint5StartX=20;
+	
+	private int borderLeftLinePoint6StartY=417;
+	private int borderLeftLinePoint6EndY=417;
+	private final int BORDERLEFTLINEPOINT6ENDY=421;
+	private int borderLeftLinePoint6StartX=20;
+	
+	private int borderLeftLinePoint7StartY=489;
+	private int borderLeftLinePoint7EndY=489;
+	private final int BORDERLEFTLINEPOINT7ENDY=493;
+	private int borderLeftLinePoint7StartX=20;
+	
+	private int borderLeftLinePoint8StartY=499;
+	private int borderLeftLinePoint8EndY=499;
+	private final int BORDERLEFTLINEPOINT8ENDY=503;
+	private int borderLeftLinePoint8StartX=20;
+	
+	private int borderLeftLinePoint9StartY=509;
+	private int borderLeftLinePoint9EndY=509;
+	private final int BORDERLEFTLINEPOINT9ENDY=513;
+	private int borderLeftLinePoint9StartX=20;
+	
+	private Bitmap bitmapCircle1=BitmapFactory.decodeResource(getResources(), R.drawable.circle_one);
+	private Matrix circle1RotateMartrix1=new Matrix(); 
+	private int circle1DegreeValue1=0;
+	private Matrix circle1RotateMartrix2=new Matrix();
+	private int circle1DegreeValue2=0;
+	private Matrix circle1RotateMartrix3=new Matrix();
+	private int circle1DegreeValue3=0;
+	private Matrix circle1RotateMartrix4=new Matrix();
+	private int circle1DegreeValue4=0;
+	private Matrix circle1RotateMartrix5=new Matrix();
+	private int circle1DegreeValue5=0;
+	private Matrix circle1RotateMartrix6=new Matrix();
+	private int circle1DegreeValue6=0;
+	private Matrix circle1RotateMartrix7=new Matrix();
+	private int circle1DegreeValue7=0;
+	private Matrix circle1RotateMartrix8=new Matrix();
+	private int circle1DegreeValue8=0;
+	private Matrix circle1RotateMartrix9=new Matrix();
+	private int circle1DegreeValue9=0;
+	private Matrix circle1RotateMartrix10=new Matrix();
+	private int circle1DegreeValue10=0;
+	private Matrix circle1RotateMartrix11=new Matrix();
+	private int circle1DegreeValue11=0;
+	private Matrix circle1RotateMartrix12=new Matrix();
+	private int circle1DegreeValue12=0;
+	
+	private Bitmap bitmapCircle2=BitmapFactory.decodeResource(getResources(), R.drawable.circle_two);
+	private Matrix circle2ScaleMatrix1=new Matrix();
+	private float circle2ScaleValue1=0.0f;
+	
+	private Bitmap bitmapCircle3=BitmapFactory.decodeResource(getResources(), R.drawable.circle_three);
+	private Matrix circle3ScaleMatrix1=new Matrix();
+	private float circle3ScaleValue1=0.0f;
+	
+	private Bitmap bitmapCircle4=BitmapFactory.decodeResource(getResources(), R.drawable.circle_four);
+	private Matrix circle4ScaleMatrix1=new Matrix();
+	private float circle4ScaleValue1=0.0f;
+	
+	private Bitmap bitmapCircle5=BitmapFactory.decodeResource(getResources(), R.drawable.circle_five);
+	private Matrix circle5ScaleMatrix1=new Matrix();
+	private float circle5ScaleValue1=0.0f;
+	
+	private Bitmap bitmapCircle6=BitmapFactory.decodeResource(getResources(), R.drawable.circle_six);
+	private Matrix circle6ScaleMatrix1=new Matrix();
+	private float circle6ScaleValue1=0.0f;
+	
+	private Bitmap bitmapCircle7=BitmapFactory.decodeResource(getResources(), R.drawable.circle_seven);
+	private Matrix circle7ScaleMatrix1=new Matrix();
+	private float circle7ScaleValue1=0.0f;
+	
+	private Bitmap bitmapCircle8=BitmapFactory.decodeResource(getResources(), R.drawable.circle_eight);
+	private Matrix circle8ScaleMatrix1=new Matrix();
+	private float circle8ScaleValue1=0.0f;
+	
+	private Bitmap bitmapCircle9=BitmapFactory.decodeResource(getResources(), R.drawable.circle_nine);
+	private Matrix circle9ScaleMatrix1=new Matrix();
+	private int circle9DelayCount=0;
+	private float circle9ScaleValue1=1.1f;
+	private float circle9DegreeValue1=0.0f;
+	private int circle9AlphValue1=0;
+	private boolean scaleBigJudge=true;
+	
+	private float hongmo1Scale=0.0f;
+	private int hongmo1ZDegree=72;
+	private int hongmo2ZDegree=144;
+	private int hongmo3ZDegree=216;
+	private int hongmo4ZDegree=288;
+	private int hongmo5ZDegree=360;
+	private boolean hongmo1RightRotate=true;
+	
+	private Bitmap hongmoImage1=BitmapFactory.decodeResource(getResources(), R.drawable.circle_focus);
+	private Matrix hongmoImage1RotateMartrix1=new Matrix(); 
+	private int hongmoImage1DegreeValue1=0;
+	private Matrix hongmoImage1RotateMartrix2=new Matrix();
+	private int hongmoImage1DegreeValue2=0;
+	private Matrix hongmoImage1RotateMartrix3=new Matrix();
+	private int hongmoImage1DegreeValue3=0;
+	private Matrix hongmoImage1RotateMartrix4=new Matrix();
+	private int hongmoImage1DegreeValue4=0;
+	private Matrix hongmoImage1RotateMartrix5=new Matrix();
+	private int hongmoImage1DegreeValue5=0;
+	
+	public DrawFaceEyesView(Context context) {
+		this(context,null);
+	}	
+	
+	public DrawFaceEyesView(Context context, AttributeSet attrs) {
+		super(context, attrs);
+		// TODO Auto-generated constructor stub
+		mainPaint = new Paint();
+		alphPaint = new Paint();
+	}
+
+	@Override
+	protected void onDraw(Canvas canvas) {
+		// TODO Auto-generated method stub
+		super.onDraw(canvas);
+		//canvas.drawColor(Color.BLACK);
+    	
+    	
+    	/////////////////////////////////////////////////////////////
+//        if(downJudge&&upDownValue<0.0f){
+//			upDownValue+=30;
+//			hongmoMeshMaskImageMatrix.setTranslate(0f, upDownValue);
+//			if(upDownValue>-60.0f){
+//				downJudge=false;
+//			}
+//		}
+//
+//		if(!downJudge&&upDownValue>-960.0f){
+//			upDownValue-=30;
+//			hongmoMeshMaskImageMatrix.setTranslate(0f, upDownValue);
+//			if(upDownValue<-900.0f){
+//				downJudge=true;
+//			}
+//		}
+        
+        
+        
+    	if(borderLeftLine1EndY<BORDERLEFTLINE1ENDY){
+    		borderLeftLine1EndY++;
+    	}
+    	
+    	if(borderLeftLine2EndY<BORDERLEFTLINE2ENDY){
+    		borderLeftLine2EndY+=3;
+    	}else if(borderLeftLinePoint1EndY<BORDERLEFTLINEPOINT1ENDY){
+    		borderLeftLinePoint1EndY+=1;
+    	}else if(borderLeftLinePoint2EndY<BORDERLEFTLINEPOINT2ENDY){
+    		borderLeftLinePoint2EndY+=1;
+    	}else if(borderLeftLinePoint3EndY<BORDERLEFTLINEPOINT3ENDY){
+    		borderLeftLinePoint3EndY+=1;
+    	}
+    	
+    	if(borderLeftLine3EndY<BORDERLEFTLINE3ENDY){
+    		borderLeftLine3EndY+=5;
+    	}else if(borderLeftLinePoint4EndY<BORDERLEFTLINEPOINT4ENDY){
+    		borderLeftLinePoint4EndY+=1;
+    	}else if(borderLeftLinePoint5EndY<BORDERLEFTLINEPOINT5ENDY){
+    		borderLeftLinePoint5EndY+=1;
+    	}else if(borderLeftLinePoint6EndY<BORDERLEFTLINEPOINT6ENDY){
+    		borderLeftLinePoint6EndY+=1;
+    	}else if(borderLeftLinePoint7EndY<BORDERLEFTLINEPOINT7ENDY){
+    		borderLeftLinePoint7EndY+=1;
+    	}else if(borderLeftLinePoint8EndY<BORDERLEFTLINEPOINT8ENDY){
+    		borderLeftLinePoint8EndY+=1;
+    	}else if(borderLeftLinePoint9EndY<BORDERLEFTLINEPOINT9ENDY){
+    		borderLeftLinePoint9EndY+=1;
+    	}
+    	
+    	if(borderLeftLine4EndY>BORDERLEFTLINE4ENDY){
+    		borderLeftLine4EndY-=3;
+    	}else if(borderLeftLine5EndY>BORDERLEFTLINE5ENDY){
+    		borderLeftLine5EndY-=3;
+    		borderLeftLine5EndX+=3;
+    	}else if(borderLeftLine6EndY>BORDERLEFTLINE6ENDY){
+    		borderLeftLine6EndY-=3;
+    	}
+    	
+    	if(borderLeftLine7EndY>BORDERLEFTLINE7ENDY){
+    		borderLeftLine7EndY-=3;
+    	}else if(borderLeftLine8EndY>BORDERLEFTLINE8ENDY){
+    		borderLeftLine8EndY-=3;
+    		borderLeftLine8EndX+=3;
+    	}
+    	
+    	if(borderBottomLine1EndX<BORDERBOTTOMLINE1ENDX){
+    		borderBottomLine1EndX+=60;
+    	}
+    	
+    	if(borderLeftLine9EndY<BORDERLEFTLINE9ENDY){
+    		borderLeftLine9EndY+=3;
+    	}else if(borderLeftLine10EndY<BORDERLEFTLINE10ENDY){
+    		borderLeftLine10EndY+=3;
+    		borderLeftLine10EndX-=3;
+    	}else if(borderLeftLine11EndY<BORDERLEFTLINE11ENDY){
+    		borderLeftLine11EndY+=3;
+    	}
+    	
+    	if(borderLeftLine12EndY<BORDERLEFTLINE12ENDY){
+    		borderLeftLine12EndY+=3;
+    	}
+        
+    	if(circle1DegreeValue1<=18){
+    		circle1DegreeValue1+=3;
+    		circle1RotateMartrix1.setRotate(circle1DegreeValue1, 270, 270);
+    	}else{
+    		circle1DegreeValue1=-378;
+    	}
+    	
+    	if(circle1DegreeValue2<=48){
+    		circle1DegreeValue2+=3;
+    		circle1RotateMartrix2.setRotate(circle1DegreeValue2, 270, 270);
+    	}else{
+    		circle1DegreeValue2=-408;
+    	}
+    	
+    	if(circle1DegreeValue3<=72){
+    		circle1DegreeValue3+=3;
+    		circle1RotateMartrix3.setRotate(circle1DegreeValue3, 270, 270);
+    	}else{
+    		circle1DegreeValue3=-432;
+    	}
+    	
+    	if(circle1DegreeValue4<=96){
+    		circle1DegreeValue4+=3;
+    		circle1RotateMartrix4.setRotate(circle1DegreeValue4, 270, 270);
+    	}else{
+    		circle1DegreeValue4=-456;
+    	}
+    	
+    	if(circle1DegreeValue5<=135){
+    		circle1DegreeValue5+=3;
+    		circle1RotateMartrix5.setRotate(circle1DegreeValue5, 270, 270);
+    	}else{
+    		circle1DegreeValue5=-495;
+    	}
+    	
+    	if(circle1DegreeValue6<=156){
+    		circle1DegreeValue6+=3;
+    		circle1RotateMartrix6.setRotate(circle1DegreeValue6, 270, 270);
+    	}else{
+    		circle1DegreeValue6=-516;
+    	}
+    	
+    	if(circle1DegreeValue7>=-18){
+    		circle1DegreeValue7-=3;
+    		circle1RotateMartrix7.setRotate(circle1DegreeValue7, 270, 270);
+    	}else{
+    		circle1DegreeValue7=378;
+    	}
+    	
+    	if(circle1DegreeValue8>=-48){
+    		circle1DegreeValue8-=3;
+    		circle1RotateMartrix8.setRotate(circle1DegreeValue8, 270, 270);
+    	}else{
+    		circle1DegreeValue8=408;
+    	}
+    	
+    	if(circle1DegreeValue9>=-72){
+    		circle1DegreeValue9-=3;
+    		circle1RotateMartrix9.setRotate(circle1DegreeValue9, 270, 270);
+    	}else{
+    		circle1DegreeValue9=432;
+    	}
+    	
+    	if(circle1DegreeValue10>=-96){
+    		circle1DegreeValue10-=3;
+    		circle1RotateMartrix10.setRotate(circle1DegreeValue10, 270, 270);
+    	}else{
+    		circle1DegreeValue10=456;
+    	}
+    	
+    	if(circle1DegreeValue11>=-135){
+    		circle1DegreeValue11-=3;
+    		circle1RotateMartrix11.setRotate(circle1DegreeValue11, 270, 270);
+    	}else{
+    		circle1DegreeValue11=495;
+    	}
+    	
+    	if(circle1DegreeValue12>=-156){
+    		circle1DegreeValue12-=3;
+    		circle1RotateMartrix12.setRotate(circle1DegreeValue12, 270, 270);
+    	}else{
+    		circle1DegreeValue12=516;
+    	}
+    	
+    	if(circle2ScaleValue1<=1){
+    		circle2ScaleValue1+=0.05;
+    		circle2ScaleMatrix1.setScale(circle2ScaleValue1, circle2ScaleValue1, 270f, 270f);
+    	}
+    	
+    	if(circle3ScaleValue1<=1){
+    		circle3ScaleValue1+=0.02;
+    		circle3ScaleMatrix1.setScale(circle3ScaleValue1, circle3ScaleValue1, 270f, 270f);
+    	}
+    	
+    	if(circle4ScaleValue1<=1){
+    		circle4ScaleValue1+=0.03;
+    		circle4ScaleMatrix1.setScale(circle4ScaleValue1, circle4ScaleValue1, 270f, 270f);
+    	}
+    	
+    	if(circle5ScaleValue1<=1){
+    		circle5ScaleValue1+=0.04;
+    		circle5ScaleMatrix1.setScale(circle5ScaleValue1, circle5ScaleValue1, 270f, 270f);
+    	}
+    	
+    	if(circle6ScaleValue1<=1){
+    		circle6ScaleValue1+=0.05;
+    		circle6ScaleMatrix1.setScale(circle6ScaleValue1, circle6ScaleValue1, 270f, 270f);
+    	}
+    	
+    	if(circle7ScaleValue1<=1){
+    		circle7ScaleValue1+=0.06;
+    		circle7ScaleMatrix1.setScale(circle7ScaleValue1, circle7ScaleValue1, 270f, 270f);
+    	}
+    	
+    	if(circle8ScaleValue1<=1){
+    		circle8ScaleValue1+=0.07;
+    		circle8ScaleMatrix1.setScale(circle8ScaleValue1, circle8ScaleValue1, 270f, 270f);
+    	}
+    	
+    	if(circle9DelayCount<50){
+    		circle9DelayCount+=1;
+    	}else if(circle9ScaleValue1>=1&&circle9DelayCount<60){
+    		circle9ScaleValue1-=0.02;
+    		circle9AlphValue1=255;
+    		circle9ScaleMatrix1.setScale(circle9ScaleValue1, circle9ScaleValue1, 270f, 270f);
+    	}else if(circle9DegreeValue1<10&&circle9DelayCount<60){
+    		circle9DegreeValue1+=1;
+    		circle9AlphValue1-=25;
+    		circle9ScaleMatrix1.setScale(circle9ScaleValue1, circle9ScaleValue1, 270f, 270f);
+    		circle9ScaleMatrix1.setRotate(circle9DegreeValue1, 270f, 270f);
+    	}else if(circle9DelayCount<70){
+    		circle9DelayCount+=1;
+    	}else if(circle9DelayCount<80){
+    		circle9DelayCount+=1;
+    		circle9DegreeValue1-=1;
+    		circle9AlphValue1+=25;
+    		circle9ScaleMatrix1.setRotate(circle9DegreeValue1, 270f, 270f);
+    	}else if(circle9DelayCount<120){
+    		circle9DelayCount+=1;
+    		if(scaleBigJudge&&circle9ScaleValue1<1.2){
+    			circle9ScaleValue1+=0.005;
+    			if(circle9ScaleValue1>=1.1){
+    				scaleBigJudge=false;
+    			}
+    		}else{
+    			circle9ScaleValue1-=0.005;
+    		}
+    		circle9ScaleMatrix1.setScale(circle9ScaleValue1, circle9ScaleValue1, 270f, 270f);
+    	}
+    	
+    	if(hongmo1Scale<=1){
+    		hongmo1Scale+=0.05;
+    	}else if(hongmo1ZDegree<=45&&hongmo1RightRotate){
+    		hongmo1ZDegree+=2;
+    		hongmo2ZDegree+=2;
+    		hongmo3ZDegree+=2;
+    		hongmo4ZDegree+=2;
+    		hongmo5ZDegree+=2;
+    	}else{
+    		hongmo1RightRotate=false;
+    	}
+    	if(hongmo1ZDegree>=-45&&!hongmo1RightRotate){
+    		hongmo1ZDegree-=2;
+    		hongmo2ZDegree-=2;
+    		hongmo3ZDegree-=2;
+    		hongmo4ZDegree-=2;
+    		hongmo5ZDegree-=2;
+    	}else{
+    		hongmo1RightRotate=true;
+    	}
+    	
+    	if(hongmoImage1DegreeValue1<=72){
+    		hongmoImage1DegreeValue1+=9;
+    		hongmoImage1RotateMartrix1.setRotate(hongmoImage1DegreeValue1, 37.5f, 37.5f);
+    	}
+    	
+    	if(hongmoImage1DegreeValue2<=144){
+    		hongmoImage1DegreeValue2+=9;
+    		hongmoImage1RotateMartrix2.setRotate(hongmoImage1DegreeValue2, 37.5f, 37.5f);
+    	}
+    	
+    	if(hongmoImage1DegreeValue3<=216){
+    		hongmoImage1DegreeValue3+=9;
+    		hongmoImage1RotateMartrix3.setRotate(hongmoImage1DegreeValue3, 37.5f, 37.5f);
+    	}
+    	
+    	if(hongmoImage1DegreeValue4<=288){
+    		hongmoImage1DegreeValue4+=9;
+    		hongmoImage1RotateMartrix4.setRotate(hongmoImage1DegreeValue4, 37.5f, 37.5f);
+    	}
+    	
+    	if(hongmoImage1DegreeValue5<=360){
+    		hongmoImage1DegreeValue5+=9;
+    		hongmoImage1RotateMartrix5.setRotate(hongmoImage1DegreeValue5, 37.5f, 37.5f);
+    	}
+    	
+    	//A
+    	/////////////////////////////////////////////////////////////
+//        canvas.drawBitmap(hongmoMeshImage, hongmoMeshImageMatrix, null);
+//        canvas.drawBitmap(hongmoMeshMaskImage, hongmoMeshMaskImageMatrix, null);
+        canvas.drawBitmap(hongmoMaskImage, hongmoMeshImageMatrix, null);
+        
+        mainPaint.setColor(Color.RED);
+        mainPaint.setStrokeWidth(5);
+        /*canvas.drawLine(borderLeftLine1StartX, borderLeftLine1StartY, borderLeftLine1StartX, borderLeftLine1EndY, mainPaint);
+        
+        mainPaint.setStrokeWidth(3);
+        canvas.drawLine(borderLeftLine2StartX, borderLeftLine2StartY, borderLeftLine2StartX, borderLeftLine2EndY, mainPaint);
+        canvas.drawLine(borderLeftLinePoint1StartX, borderLeftLinePoint1StartY, borderLeftLinePoint1StartX, borderLeftLinePoint1EndY, mainPaint);
+        canvas.drawLine(borderLeftLinePoint2StartX, borderLeftLinePoint2StartY, borderLeftLinePoint2StartX, borderLeftLinePoint2EndY, mainPaint);
+        canvas.drawLine(borderLeftLinePoint3StartX, borderLeftLinePoint3StartY, borderLeftLinePoint3StartX, borderLeftLinePoint3EndY, mainPaint);
+
+        
+        mainPaint.setStrokeWidth(3);
+        canvas.drawLine(borderLeftLine3StartX, borderLeftLine3StartY, borderLeftLine3StartX, borderLeftLine3EndY, mainPaint);
+        canvas.drawLine(borderLeftLinePoint4StartX, borderLeftLinePoint4StartY, borderLeftLinePoint4StartX, borderLeftLinePoint4EndY, mainPaint);
+        canvas.drawLine(borderLeftLinePoint5StartX, borderLeftLinePoint5StartY, borderLeftLinePoint5StartX, borderLeftLinePoint5EndY, mainPaint);
+        canvas.drawLine(borderLeftLinePoint6StartX, borderLeftLinePoint6StartY, borderLeftLinePoint6StartX, borderLeftLinePoint6EndY, mainPaint);
+        canvas.drawLine(borderLeftLinePoint7StartX, borderLeftLinePoint7StartY, borderLeftLinePoint7StartX, borderLeftLinePoint7EndY, mainPaint);
+        canvas.drawLine(borderLeftLinePoint8StartX, borderLeftLinePoint8StartY, borderLeftLinePoint8StartX, borderLeftLinePoint8EndY, mainPaint);
+        canvas.drawLine(borderLeftLinePoint9StartX, borderLeftLinePoint9StartY, borderLeftLinePoint9StartX, borderLeftLinePoint9EndY, mainPaint);
+
+        
+        mainPaint.setStrokeWidth(1);
+        canvas.drawLine(borderLeftLine4StartX, borderLeftLine4StartY, borderLeftLine4StartX, borderLeftLine4EndY, mainPaint);
+        canvas.drawLine(borderLeftLine5StartX, borderLeftLine5StartY, borderLeftLine5EndX, borderLeftLine5EndY, mainPaint);
+        canvas.drawLine(borderLeftLine6StartX, borderLeftLine6StartY, borderLeftLine6StartX, borderLeftLine6EndY, mainPaint);
+        
+        mainPaint.setStrokeWidth(1);
+        canvas.drawLine(borderLeftLine7StartX, borderLeftLine7StartY, borderLeftLine7StartX, borderLeftLine7EndY, mainPaint);
+        canvas.drawLine(borderLeftLine8StartX, borderLeftLine8StartY, borderLeftLine8EndX, borderLeftLine8EndY, mainPaint);
+        canvas.drawLine(borderBottomLine1StartX, borderBottomLine1StartY, borderBottomLine1EndX, borderBottomLine1StartY, mainPaint);
+        
+        mainPaint.setStrokeWidth(1);
+        canvas.drawLine(borderLeftLine9StartX, borderLeftLine9StartY, borderLeftLine9StartX, borderLeftLine9EndY, mainPaint);
+        canvas.drawLine(borderLeftLine10StartX, borderLeftLine10StartY, borderLeftLine10EndX, borderLeftLine10EndY, mainPaint);
+        canvas.drawLine(borderLeftLine11StartX, borderLeftLine11StartY, borderLeftLine11StartX, borderLeftLine11EndY, mainPaint);
+        
+        mainPaint.setStrokeWidth(1);
+        canvas.drawLine(borderLeftLine12StartX, borderLeftLine12StartY, borderLeftLine12StartX, borderLeftLine12EndY, mainPaint);*/
+        
+        
+        //canvas.translate(140, 140);
+        canvas.drawBitmap(bitmapCircle1, circle1RotateMartrix1, null);
+        canvas.drawBitmap(bitmapCircle1, circle1RotateMartrix2, null);
+        canvas.drawBitmap(bitmapCircle1, circle1RotateMartrix3, null);
+        canvas.drawBitmap(bitmapCircle1, circle1RotateMartrix4, null);
+        canvas.drawBitmap(bitmapCircle1, circle1RotateMartrix5, null);
+        canvas.drawBitmap(bitmapCircle1, circle1RotateMartrix6, null);
+        canvas.drawBitmap(bitmapCircle1, circle1RotateMartrix7, null);
+        canvas.drawBitmap(bitmapCircle1, circle1RotateMartrix8, null);
+        canvas.drawBitmap(bitmapCircle1, circle1RotateMartrix9, null);
+        canvas.drawBitmap(bitmapCircle1, circle1RotateMartrix10, null);
+        canvas.drawBitmap(bitmapCircle1, circle1RotateMartrix11, null);
+        canvas.drawBitmap(bitmapCircle1, circle1RotateMartrix12, null);
+        
+        canvas.drawBitmap(bitmapCircle2, circle2ScaleMatrix1, null);
+        
+        canvas.drawBitmap(bitmapCircle3, circle3ScaleMatrix1, null);
+        
+        canvas.drawBitmap(bitmapCircle4, circle4ScaleMatrix1, null);
+        
+        canvas.drawBitmap(bitmapCircle5, circle5ScaleMatrix1, null);
+        
+        canvas.drawBitmap(bitmapCircle6, circle6ScaleMatrix1, null);
+        
+        canvas.drawBitmap(bitmapCircle7, circle7ScaleMatrix1, null);
+        
+        canvas.drawBitmap(bitmapCircle8, circle8ScaleMatrix1, null);
+        
+        alphPaint.setAlpha(circle9AlphValue1);
+        canvas.drawBitmap(bitmapCircle9, circle9ScaleMatrix1, alphPaint);
+        
+        
+        
+        //B
+    	/////////////////////////////////////////////////////////////
+        canvas.translate(540, 0);
+        canvas.drawBitmap(bitmapCircle1, circle1RotateMartrix1, null);
+        canvas.drawBitmap(bitmapCircle1, circle1RotateMartrix2, null);
+        canvas.drawBitmap(bitmapCircle1, circle1RotateMartrix3, null);
+        canvas.drawBitmap(bitmapCircle1, circle1RotateMartrix4, null);
+        canvas.drawBitmap(bitmapCircle1, circle1RotateMartrix5, null);
+        canvas.drawBitmap(bitmapCircle1, circle1RotateMartrix6, null);
+        canvas.drawBitmap(bitmapCircle1, circle1RotateMartrix7, null);
+        canvas.drawBitmap(bitmapCircle1, circle1RotateMartrix8, null);
+        canvas.drawBitmap(bitmapCircle1, circle1RotateMartrix9, null);
+        canvas.drawBitmap(bitmapCircle1, circle1RotateMartrix10, null);
+        canvas.drawBitmap(bitmapCircle1, circle1RotateMartrix11, null);
+        canvas.drawBitmap(bitmapCircle1, circle1RotateMartrix12, null);
+        
+        canvas.drawBitmap(bitmapCircle2, circle2ScaleMatrix1, null);
+        
+        canvas.drawBitmap(bitmapCircle3, circle3ScaleMatrix1, null);
+        
+        canvas.drawBitmap(bitmapCircle4, circle4ScaleMatrix1, null);
+        
+        canvas.drawBitmap(bitmapCircle5, circle5ScaleMatrix1, null);
+        
+        canvas.drawBitmap(bitmapCircle6, circle6ScaleMatrix1, null);
+        
+        canvas.drawBitmap(bitmapCircle7, circle7ScaleMatrix1, null);
+        
+        canvas.drawBitmap(bitmapCircle8, circle8ScaleMatrix1, null);
+        
+        alphPaint.setAlpha(circle9AlphValue1);
+        canvas.drawBitmap(bitmapCircle9, circle9ScaleMatrix1, alphPaint);
+        
+        
+        
+        //C
+    	/////////////////////////////////////////////////////////////
+        canvas.translate(510, 0);
+        
+        mainPaint.setColor(Color.RED);
+        mainPaint.setStrokeWidth(5);
+        /*canvas.drawLine(borderLeftLine1StartX, borderLeftLine1StartY, borderLeftLine1StartX, borderLeftLine1EndY, mainPaint);
+        
+        mainPaint.setStrokeWidth(3);
+        canvas.drawLine(borderLeftLine2StartX, borderLeftLine2StartY, borderLeftLine2StartX, borderLeftLine2EndY, mainPaint);
+        canvas.drawLine(borderLeftLinePoint1StartX, borderLeftLinePoint1StartY, borderLeftLinePoint1StartX, borderLeftLinePoint1EndY, mainPaint);
+        canvas.drawLine(borderLeftLinePoint2StartX, borderLeftLinePoint2StartY, borderLeftLinePoint2StartX, borderLeftLinePoint2EndY, mainPaint);
+        canvas.drawLine(borderLeftLinePoint3StartX, borderLeftLinePoint3StartY, borderLeftLinePoint3StartX, borderLeftLinePoint3EndY, mainPaint);
+
+        
+        mainPaint.setStrokeWidth(3);
+        canvas.drawLine(borderLeftLine3StartX, borderLeftLine3StartY, borderLeftLine3StartX, borderLeftLine3EndY, mainPaint);
+        canvas.drawLine(borderLeftLinePoint4StartX, borderLeftLinePoint4StartY, borderLeftLinePoint4StartX, borderLeftLinePoint4EndY, mainPaint);
+        canvas.drawLine(borderLeftLinePoint5StartX, borderLeftLinePoint5StartY, borderLeftLinePoint5StartX, borderLeftLinePoint5EndY, mainPaint);
+        canvas.drawLine(borderLeftLinePoint6StartX, borderLeftLinePoint6StartY, borderLeftLinePoint6StartX, borderLeftLinePoint6EndY, mainPaint);
+        canvas.drawLine(borderLeftLinePoint7StartX, borderLeftLinePoint7StartY, borderLeftLinePoint7StartX, borderLeftLinePoint7EndY, mainPaint);
+        canvas.drawLine(borderLeftLinePoint8StartX, borderLeftLinePoint8StartY, borderLeftLinePoint8StartX, borderLeftLinePoint8EndY, mainPaint);
+        canvas.drawLine(borderLeftLinePoint9StartX, borderLeftLinePoint9StartY, borderLeftLinePoint9StartX, borderLeftLinePoint9EndY, mainPaint);
+
+        
+        mainPaint.setStrokeWidth(1);
+        canvas.drawLine(borderLeftLine4StartX, borderLeftLine4StartY, borderLeftLine4StartX, borderLeftLine4EndY, mainPaint);
+        canvas.drawLine(borderLeftLine5StartX, borderLeftLine5StartY, borderLeftLine5EndX, borderLeftLine5EndY, mainPaint);
+        canvas.drawLine(borderLeftLine6StartX, borderLeftLine6StartY, borderLeftLine6StartX, borderLeftLine6EndY, mainPaint);
+        
+        mainPaint.setStrokeWidth(1);
+        canvas.drawLine(borderLeftLine7StartX, borderLeftLine7StartY, borderLeftLine7StartX, borderLeftLine7EndY, mainPaint);
+        canvas.drawLine(borderLeftLine8StartX, borderLeftLine8StartY, borderLeftLine8EndX, borderLeftLine8EndY, mainPaint);
+        //canvas.drawLine(borderBottomLine1StartX, borderBottomLine1StartY, borderBottomLine1EndX, borderBottomLine1StartY, mainPaint);
+        
+        mainPaint.setStrokeWidth(1);
+        canvas.drawLine(borderLeftLine9StartX, borderLeftLine9StartY, borderLeftLine9StartX, borderLeftLine9EndY, mainPaint);
+        canvas.drawLine(borderLeftLine10StartX, borderLeftLine10StartY, borderLeftLine10EndX, borderLeftLine10EndY, mainPaint);
+        canvas.drawLine(borderLeftLine11StartX, borderLeftLine11StartY, borderLeftLine11StartX, borderLeftLine11EndY, mainPaint);
+        
+        mainPaint.setStrokeWidth(1);
+        canvas.drawLine(borderLeftLine12StartX, borderLeftLine12StartY, borderLeftLine12StartX, borderLeftLine12EndY, mainPaint);*/
+        
+        canvas.translate(-814, 233);
+        if(hongmoImage1DegreeValue5>=369){
+        	camera.save();
+    		camera.rotateZ(hongmo1ZDegree);
+    		//camera.rotateX(hongmo1XDegree);
+    		camera.getMatrix(hongmoImage1RotateMartrix1);
+    		camera.restore();
+    		camera.save();
+    		camera.rotateZ(hongmo2ZDegree);
+    		camera.getMatrix(hongmoImage1RotateMartrix2);
+    		camera.restore();
+    		camera.save();
+    		camera.rotateZ(hongmo3ZDegree);
+    		camera.getMatrix(hongmoImage1RotateMartrix3);
+    		camera.restore();
+    		camera.save();
+    		camera.rotateZ(hongmo4ZDegree);
+    		camera.getMatrix(hongmoImage1RotateMartrix4);
+    		camera.restore();
+    		camera.save();
+    		camera.rotateZ(hongmo5ZDegree);
+    		camera.getMatrix(hongmoImage1RotateMartrix5);
+    		camera.restore();
+    		
+    		hongmoImage1RotateMartrix1.preTranslate(-37.5f, -37.5f); 
+    		hongmoImage1RotateMartrix1.postTranslate(37.5f, 37.5f);
+    		
+    		hongmoImage1RotateMartrix2.preTranslate(-37.5f, -37.5f); 
+    		hongmoImage1RotateMartrix2.postTranslate(37.5f, 37.5f);
+    		
+    		hongmoImage1RotateMartrix3.preTranslate(-37.5f, -37.5f); 
+    		hongmoImage1RotateMartrix3.postTranslate(37.5f, 37.5f);
+    		
+    		hongmoImage1RotateMartrix4.preTranslate(-37.5f, -37.5f); 
+    		hongmoImage1RotateMartrix4.postTranslate(37.5f, 37.5f);
+    		
+    		hongmoImage1RotateMartrix5.preTranslate(-37.5f, -37.5f); 
+    		hongmoImage1RotateMartrix5.postTranslate(37.5f, 37.5f);
+        }
+        
+        
+        canvas.drawBitmap(hongmoImage1, hongmoImage1RotateMartrix1, null);
+        canvas.drawBitmap(hongmoImage1, hongmoImage1RotateMartrix2, null);
+        canvas.drawBitmap(hongmoImage1, hongmoImage1RotateMartrix3, null);
+        canvas.drawBitmap(hongmoImage1, hongmoImage1RotateMartrix4, null);
+        canvas.drawBitmap(hongmoImage1, hongmoImage1RotateMartrix5, null);
+        
+        canvas.translate(540, 0);
+        canvas.drawBitmap(hongmoImage1, hongmoImage1RotateMartrix1, null);
+        canvas.drawBitmap(hongmoImage1, hongmoImage1RotateMartrix2, null);
+        canvas.drawBitmap(hongmoImage1, hongmoImage1RotateMartrix3, null);
+        canvas.drawBitmap(hongmoImage1, hongmoImage1RotateMartrix4, null);
+        canvas.drawBitmap(hongmoImage1, hongmoImage1RotateMartrix5, null);
+        
+        
+        invalidate();
+	}
+	
+    public void recycleBitmap() {
+        if(!hongmoMaskImage.isRecycled())hongmoMaskImage.recycle();
+        if(!bitmapCircle1.isRecycled())bitmapCircle1.recycle();
+        if(!bitmapCircle2.isRecycled())bitmapCircle2.recycle();
+        if(!bitmapCircle3.isRecycled())bitmapCircle3.recycle();
+        if(!bitmapCircle4.isRecycled())bitmapCircle4.recycle();
+        if(!bitmapCircle5.isRecycled())bitmapCircle5.recycle();
+        if(!bitmapCircle6.isRecycled())bitmapCircle6.recycle();
+        if(!bitmapCircle7.isRecycled())bitmapCircle7.recycle();
+        if(!bitmapCircle8.isRecycled())bitmapCircle8.recycle();
+        if(!bitmapCircle9.isRecycled())bitmapCircle9.recycle();
+        if(!hongmoImage1.isRecycled())hongmoImage1.recycle();
+   }
+
+}
Index: frameworks/base/packages/Keyguard/src/com/face/scanner/view/RoundProgressBar.java
===================================================================
--- frameworks/base/packages/Keyguard/src/com/face/scanner/view/RoundProgressBar.java	(revision 0)
+++ frameworks/base/packages/Keyguard/src/com/face/scanner/view/RoundProgressBar.java	(revision 2329)
@@ -0,0 +1,275 @@
+package com.face.scanner.view;
+
+import android.content.Context;
+import android.content.res.TypedArray;
+import android.graphics.Bitmap;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Paint;
+import android.graphics.RectF;
+import android.graphics.Typeface;
+import android.graphics.drawable.BitmapDrawable;
+import android.util.AttributeSet;
+import android.util.Log;
+import android.widget.ImageView;
+
+import com.android.keyguard.R;
+
+
+/**
+ * 线程安全的View，可直接在线程中更新进度
+ *
+ */
+public class RoundProgressBar extends ImageView {
+
+	/**
+	 * 画笔对象的引用
+	 */
+	private Paint paint;
+
+	/**
+	 * 圆环的颜色
+	 */
+	private int roundColor;
+
+	/**
+	 * 圆环进度的颜色
+	 */
+	private int roundProgressColor;
+
+	/**
+	 * 中间进度百分比的字符串的颜色
+	 */
+	private int textColor;
+
+	/**
+	 * 中间进度百分比的字符串的字体
+	 */
+	private float textSize;
+
+	/**
+	 * 圆环的宽度
+	 */
+	private float roundWidth;
+
+	/**
+	 * 最大进度
+	 */
+	private int max;
+
+	/**
+	 * 当前进度
+	 */
+	private int left_progress, right_progress;
+	
+	private Bitmap mBackgroundBitmap;
+	private int mBGWidth;
+	private int mBGHeight;
+	
+
+	private float x1,x2,y,radius;
+	
+	private boolean textIsDisplayable;
+
+	public RoundProgressBar(Context context) {
+		this(context, null);
+	}
+
+	public RoundProgressBar(Context context, AttributeSet attrs) {
+		this(context, attrs, 0);
+	}
+
+	public RoundProgressBar(Context context, AttributeSet attrs, int defStyle) {
+		super(context, attrs, defStyle);
+
+		paint = new Paint();
+
+
+		TypedArray mTypedArray = context.obtainStyledAttributes(attrs,
+				R.styleable.RoundProgressBar);
+
+		//获取自定义属性和默认
+
+		//roundProgressColor = mTypedArray.getColor(R.styleable.RoundProgressBar_roundProgressColor, Color.GREEN);
+		roundProgressColor = mTypedArray.getColor(R.styleable.RoundProgressBar_roundProgressColor, context.getResources().getColor(android.R.color.white));
+		//textColor = mTypedArray.getColor(R.styleable.RoundProgressBar_textColor, Color.GREEN);
+		textColor = mTypedArray.getColor(R.styleable.RoundProgressBar_textColor,  context.getResources().getColor(android.R.color.white));
+		textSize = mTypedArray.getDimension(R.styleable.RoundProgressBar_textSize, 15);
+		roundWidth = mTypedArray.getDimension(R.styleable.RoundProgressBar_roundWidth, 5);
+		max = mTypedArray.getInteger(R.styleable.RoundProgressBar_max, 100);
+		textIsDisplayable = mTypedArray.getBoolean(R.styleable.RoundProgressBar_textIsDisplayable, true);
+//		style = mTypedArray.getInt(R.styleable.RoundProgressBar_style, 0);
+		roundColor = mTypedArray.getColor(R.styleable.RoundProgressBar_roundColor, Color.RED);
+		mTypedArray.recycle();
+		
+//		mBackgroundBitmap = ((BitmapDrawable)getResources().getDrawable(R.drawable.b_3_2_ok_00)).getBitmap();
+		
+//		setDrawingCacheEnabled(false);
+		setImageResource(R.drawable.b_3_2_ok_00);
+	}
+
+
+	@Override
+	protected void onDraw(Canvas canvas) {
+		super.onDraw(canvas);
+		
+		if(mBGWidth == 0 || mBGHeight == 0){
+			mBGWidth = getMeasuredWidth();
+			mBGHeight = getMeasuredHeight();
+			x1 = (float) (mBGWidth * 90 / 360);
+			x2 = (float) (mBGWidth * 270 / 360);
+			y = (float) (mBGHeight * 91 / 203);
+			radius = (float) (mBGWidth * 52 / 360);
+			Log.i("hz", "mBGWidth:" + mBGWidth + ",mBGHeight:" + mBGHeight);
+		}
+		
+		Log.i("hz", "getWidth:" + getMeasuredWidth() + ",getHeight:" + getMeasuredHeight());
+		/**
+		 * 画最外层的大圆环
+		 */
+		paint.setColor(roundColor); //设置圆环的颜色
+		paint.setStyle(Paint.Style.STROKE); //设置空心
+		paint.setStrokeWidth(roundWidth); //设置圆环的宽度
+		paint.setAntiAlias(true);  //消除锯齿
+		canvas.drawCircle(x1, y, radius, paint); //画出圆环
+		
+		canvas.drawCircle(x2, y, radius, paint); //画出圆环
+		
+		/**
+		 * 画进度百分比
+		 */
+		paint.setStrokeWidth(0);
+		paint.setColor(textColor);
+		paint.setTextSize(textSize);
+		paint.setTypeface(Typeface.DEFAULT_BOLD); //设置字体
+
+
+		/**
+		 * 画圆弧 ，画圆环的进度
+		 */
+		paint.setStrokeWidth(roundWidth); //设置圆环的宽度
+		paint.setColor(Color.argb(255, 72, 236, 239));  //设置进度的颜色
+		RectF left_oval = new RectF(x1 - radius, y - radius, x1
+				+ radius, y + radius);  //用于定义的圆弧的形状和大小的界限
+		RectF right_oval = new RectF(x2 - radius, y - radius, x2
+				+ radius, y + radius);  //用于定义的圆弧的形状和大小的界限
+
+		paint.setStyle(Paint.Style.STROKE);
+		canvas.drawArc(left_oval, -90, 360 * left_progress / max, false, paint);  //根据进度画圆弧
+		canvas.drawArc(right_oval, -90, 360 * right_progress / max, false, paint);  //根据进度画圆弧
+		
+	}
+
+
+	public synchronized int getMax() {
+		return max;
+	}
+
+	/**
+	 * 设置进度的最大值
+	 * @param max
+	 */
+	public synchronized void setMax(int max) {
+		if(max < 0){
+			throw new IllegalArgumentException("max not less than 0");
+		}
+		this.max = max;
+	}
+
+	/**
+	 * 获取进度.需要同步
+	 * @return
+	 */
+	public synchronized int getLeftProgress() {
+		return left_progress;
+	}
+	public synchronized int getRightProgress() {
+		return right_progress;
+	}
+
+	/**
+	 * 设置进度，此为线程安全控件，由于考虑多线的问题，需要同步
+	 * 刷新界面调用postInvalidate()能在非UI线程刷新
+	 * @param progress
+	 */
+	public synchronized void setLeftProgress(int leftProgress) {
+		if(leftProgress < 0){
+			throw new IllegalArgumentException("progress not less than 0");
+		}
+		if(leftProgress > max){
+			leftProgress = max;
+		}
+		if(leftProgress <= max){
+			this.left_progress = leftProgress;
+			postInvalidate();
+		}
+	}
+	
+	public synchronized void setRightProgress(int rightProgress) {
+		if(rightProgress < 0){
+			throw new IllegalArgumentException("progress not less than 0");
+		}
+		if(rightProgress > max){
+			rightProgress = max;
+		}
+		if(rightProgress <= max){
+			this.right_progress = rightProgress;
+			postInvalidate();
+		}
+	}
+	
+	public synchronized void setLeftAndRightProgress(int leftProgress,int rightProgress) {
+		if(leftProgress <0 || rightProgress < 0){
+			throw new IllegalArgumentException("progress not less than 0");
+		}
+		if(leftProgress > max || rightProgress > max){
+			rightProgress = max;
+		}
+		this.left_progress = leftProgress;
+		this.right_progress = rightProgress;
+		postInvalidate();
+	}
+
+
+	public int getCricleColor() {
+		return roundColor;
+	}
+
+	public void setCricleColor(int cricleColor) {
+		this.roundColor = cricleColor;
+	}
+
+	public int getCricleProgressColor() {
+		return roundProgressColor;
+	}
+
+	public void setCricleProgressColor(int cricleProgressColor) {
+		this.roundProgressColor = cricleProgressColor;
+	}
+
+	public int getTextColor() {
+		return textColor;
+	}
+
+	public void setTextColor(int textColor) {
+		this.textColor = textColor;
+	}
+
+	public float getTextSize() {
+		return textSize;
+	}
+
+	public void setTextSize(float textSize) {
+		this.textSize = textSize;
+	}
+
+	public float getRoundWidth() {
+		return roundWidth;
+	}
+
+	public void setRoundWidth(float roundWidth) {
+		this.roundWidth = roundWidth;
+	}
+
+
+}
Index: frameworks/base/packages/Keyguard/src/com/face/scanner/view/InfraredLedManager.java
===================================================================
--- frameworks/base/packages/Keyguard/src/com/face/scanner/view/InfraredLedManager.java	(revision 0)
+++ frameworks/base/packages/Keyguard/src/com/face/scanner/view/InfraredLedManager.java	(revision 2329)
@@ -0,0 +1,192 @@
+/*
+ * Copyright (C) 2010 ZXing authors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+// TODO : change to your package name
+
+package com.face.scanner.view;
+
+import android.os.IBinder;
+import android.util.Log;
+
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+
+final class InfraredLedManager {
+
+    private static final String TAG = InfraredLedManager.class.getSimpleName();
+
+    private static final Object iInfraredLedService;
+    private static final Method setOn;
+    private static final Method setOff;
+    private static final Method setBrightness;
+
+    static {
+        iInfraredLedService = getHardwareService();
+        setOn = getSetOnMethod(iInfraredLedService);
+        setOff = getSetOffMethod(iInfraredLedService);
+        setBrightness = getSetBrightnessMethod(iInfraredLedService);
+        if (iInfraredLedService == null) {
+            Log.v(TAG,
+                    "This device does not supports control of a infrared_led");
+        } else {
+            Log.v(TAG,
+                    "This device support control of a infrared_led, Service is:"
+                            + iInfraredLedService.toString());
+        }
+    }
+
+    private InfraredLedManager() {
+    }
+
+    /** API setOn */
+    static public void setInfraredLedOn() {
+        insideSetOn();
+    }
+
+    /** API setOff */
+    static public void setInfraredLedOff() {
+        insideSetOff();
+    }
+
+    /** API setBrightness */
+    static public void setInfraredLedBrightness(int value) {
+        insideSetBrightness(value);
+    }
+
+    private static Object getHardwareService() {
+        Class<?> serviceManagerClass = maybeForName("android.os.ServiceManager");
+        if (serviceManagerClass == null) {
+            Log.d(TAG, "serviceManagerClass == null");
+            return null;
+        }
+
+        Method getServiceMethod = maybeGetMethod(serviceManagerClass,
+                "getService", String.class);
+        if (getServiceMethod == null) {
+            Log.d(TAG, "getServiceMethod == null");
+            return null;
+        }
+
+        Object hardwareService = invoke(getServiceMethod, null, "infrared_led");
+        if (hardwareService == null) {
+            Log.d(TAG, "infraredLedService == null");
+            return null;
+        }
+
+        Class<?> iHardwareServiceStubClass = maybeForName("android.app.IInfraredLedService$Stub");
+        if (iHardwareServiceStubClass == null) {
+            Log.d("TAG", "iInfraredLedServiceStubClass == null");
+            return null;
+        }
+
+        Method asInterfaceMethod = maybeGetMethod(iHardwareServiceStubClass,
+                "asInterface", IBinder.class);
+        if (asInterfaceMethod == null) {
+            Log.d(TAG, "asInterfaceMethod == null");
+            return null;
+        }
+        return invoke(asInterfaceMethod, null, hardwareService);
+    }
+
+    private static Method getSetOnMethod(Object iHardwareService) {
+        if (iHardwareService == null) {
+            return null;
+        }
+        Class<?> proxyClass = iHardwareService.getClass();
+        return maybeGetMethod(proxyClass, "setOn");
+    }
+
+    private static Method getSetOffMethod(Object iHardwareService) {
+        if (iHardwareService == null) {
+            return null;
+        }
+        Class<?> proxyClass = iHardwareService.getClass();
+        return maybeGetMethod(proxyClass, "setOff");
+    }
+
+    private static Method getSetBrightnessMethod(Object iHardwareService) {
+        if (iHardwareService == null) {
+            return null;
+        }
+        Class<?> proxyClass = iHardwareService.getClass();
+        return maybeGetMethod(proxyClass, "setBrightness", int.class);
+    }
+
+    private static Class<?> maybeForName(String name) {
+        try {
+            return Class.forName(name);
+        } catch (ClassNotFoundException cnfe) {
+            // OK
+            return null;
+        } catch (RuntimeException re) {
+            Log.w(TAG, "Unexpected error while finding class " + name, re);
+            return null;
+        }
+    }
+
+    private static Method maybeGetMethod(Class<?> clazz, String name,
+            Class<?>... argClasses) {
+        try {
+            return clazz.getMethod(name, argClasses);
+        } catch (NoSuchMethodException nsme) {
+            // OK
+            return null;
+        } catch (RuntimeException re) {
+            Log.w(TAG, "Unexpected error while finding method " + name, re);
+            return null;
+        }
+    }
+
+    private static Object invoke(Method method, Object instance, Object... args) {
+        try {
+            return method.invoke(instance, args);
+        } catch (IllegalAccessException e) {
+            Log.w(TAG, "Unexpected error while invoking " + method, e);
+            return null;
+        } catch (InvocationTargetException e) {
+            Log.w(TAG, "Unexpected error while invoking " + method,
+                    e.getCause());
+            return null;
+        } catch (RuntimeException re) {
+            Log.w(TAG, "Unexpected error while invoking " + method, re);
+            return null;
+        }
+    }
+
+    private static void insideSetOn() {
+        if (iInfraredLedService == null) {
+            Log.v(TAG, "set infrared_led On , but iInfraredLedService is null");
+        } else {
+            invoke(setOn, iInfraredLedService);
+        }
+    }
+
+    private static void insideSetOff() {
+        if (iInfraredLedService == null) {
+            Log.v(TAG, "set infrared_led Off , but iInfraredLedService is null");
+        } else {
+            invoke(setOff, iInfraredLedService);
+        }
+    }
+
+    private static void insideSetBrightness(int value) {
+        if (iInfraredLedService == null) {
+            Log.v(TAG, "set infrared_led Brightness , but iInfraredLedService is null");
+        } else {
+            invoke(setBrightness, iInfraredLedService, value);
+        }
+    }
+}
Index: frameworks/base/packages/Keyguard/src/com/face/scanner/FaceActivity.java
===================================================================
--- frameworks/base/packages/Keyguard/src/com/face/scanner/FaceActivity.java	(revision 0)
+++ frameworks/base/packages/Keyguard/src/com/face/scanner/FaceActivity.java	(revision 2329)
@@ -0,0 +1,630 @@
+package com.face.scanner;
+
+import java.util.ArrayList;
+
+import android.app.Activity;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.graphics.Bitmap;
+import android.graphics.Rect;
+import android.hardware.Camera;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.HandlerThread;
+import android.os.Message;
+import android.os.SystemClock;
+import android.provider.Settings;
+import android.util.Log;
+import android.view.View;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.CheckBox;
+import android.widget.LinearLayout;
+import android.widget.Toast;
+import com.sensetime.faceunlock.widget.FaceUnlockCyleView;
+import com.android.keyguard.R;
+import com.android.keyguard.KeyguardUtils;
+import android.widget.TextView;
+import com.sensetime.faceapi.model.FaceInfo;
+import com.sensetime.faceapi.utils.AccelerometerManager;
+import com.sensetime.faceunlock.bean.FaceFeature;
+import com.sensetime.faceunlock.bean.User;
+import com.sensetime.faceunlock.config.AppConfig;
+import com.sensetime.faceunlock.handler.WeakHandler;
+import com.sensetime.faceunlock.manager.HackerProxy;
+import com.sensetime.faceunlock.manager.UserManager;
+import com.sensetime.faceunlock.manager.VerifyProxy;
+import com.sensetime.faceunlock.util.BitmapUtil;
+import com.sensetime.faceunlock.util.DirectUtil;
+import com.sensetime.faceunlock.util.FileUtil;
+import com.sensetime.faceunlock.util.FaceUtil;
+import com.sensetime.faceunlock.util.LogUtil;
+import com.sensetime.faceunlock.widget.CameraView;
+import com.sensetime.faceunlock.widget.FaceRegisterView;
+import com.sensetime.faceunlock.widget.MaskView;
+import com.sensetime.faceunlock.manager.DetectProxy;
+import com.sensetime.faceapi.utils.FaceRotationUtil;
+//wym for bug 99963
+import java.util.Timer;
+import java.util.TimerTask;
+//Begin: add by junwei.shen, create password AlertDialog for Face, at 2017.7.12
+import android.app.AlertDialog;
+import android.app.admin.DevicePolicyManager;
+import android.content.DialogInterface;
+import android.content.ComponentName;
+import android.provider.Settings.SettingNotFoundException;
+//End: add by junwei.shen, create password AlertDialog for Face, at 2017.7.12
+import android.telephony.TelephonyManager;
+import android.app.Service;
+
+
+
+public class FaceActivity extends Activity {
+    private static final String TAG = "FaceActivity";
+    private CameraView mCameraView; // 
+    private CheckBox[] checkBoxes = new CheckBox[5];
+
+    private Thread mTrackThread; // 
+    private HandlerThread mGetFeatureThread; // 
+    private Handler mGetFeatureHandler; //
+    private ArrayList<User> users = new ArrayList<>(); // 
+    private String uuid = FileUtil.getUUIDName(); //
+
+    private volatile boolean mIsNv21DataReady; //
+    private volatile boolean mIsTracking; //
+    private boolean isVerifying; //
+    private boolean mIsKilled; // 
+    private byte[] mNv21; // 
+    private int mCount; // 
+    private int mLastFaceId = -1;
+    private WeakHandler<FaceActivity> uiHandler;
+
+    private static final int Face_NEW_REQUEST = 300;
+    private static final int Face_REPLACE_REQUEST = 301;
+    private static final int Face_REMOVE_REQUEST = 302;   
+    private static final int Face_DEMO_REMOVE_REQUEST = 303;
+    //Add by junwei.shen, for deal Face entry timeout, at 2017.7.4
+    private static final int Face_ENTRY_TIMEOUT = 304;
+    
+    public static final int MSG_SHOW_HINT1_TV = 0x001;
+    public static final int MSG_SHOW_HINT2_TV = 0x002;
+    public static final int MSG_HIDE_HINT_TV = 0x003;
+    public static final int MSG_UPDATE_PROGRESS = 0x004;
+    public static final int MSG_NOT_SAME_FACE = 0x005;
+    public static final int MSG_DARK_LIGHT = 0x006;
+    public static final int MSG_SHOW_HINT4_TV = 0x007;
+    public static final int MSG_LONGTIME_NO_FACE = 0x008;
+
+    public static final int MAX_NOT_SAME_COUNT = 10;
+    private int mNotSameFaceCount;
+
+    public String HINT_TEXT_1;
+    public String HINT_TEXT_2;
+    public String HINT_TEXT_3;
+    public String HINT_TEXT_4;
+    
+    private int mRequestType;
+    private boolean isFMode;
+    private User user; // 
+    private boolean isNotHacker; 
+    private int attemptCount; 
+    private boolean mIsBroadcastRegister = false;
+
+    private TextView description_info,info_text;
+    private int progress = 0;
+    private boolean isShowErrorInfo = false;
+    private FaceUnlockCyleView CycleView;
+    private MaskView mMaskView;
+    //Begin: add by junwei.shen, create password AlertDialog for Face, at 2017.7.12
+    private String KEY_HAS_PASSWORD = "has_password";
+    private int hasPassword = -1;
+    private Context mContext;
+    private ComponentName mComponentName;
+    private String sharedPackageName = "com.android.settings";
+    private String sharedClassName = "com.android.settings.ChooseLockGeneric";
+    public static final String MINIMUM_QUALITY_KEY = "minimum_quality";
+    public static final String HIDE_DISABLED_PREFS = "hide_disabled_prefs";
+    public static final String EXTRA_KEY_HAS_CHALLENGE = "has_challenge";
+    public static final String EXTRA_KEY_CHALLENGE = "challenge";
+    public static final String EXTRA_KEY_FOR_FINGERPRINT = "for_fingerprint";
+    private static final int CHOOSE_LOCK_GENERIC_REQUEST = 227;
+    //End: add by junwei.shen, create password AlertDialog for Face, at 2017.7.12
+
+    //wym add for 99963. 2017/07/06
+    Timer timer = new Timer();
+    boolean mIsNotGetFaceInfo = true;
+    
+    TimerTask task = new TimerTask() {    
+      @Override  
+         public void run() {    
+         
+            runOnUiThread(new Runnable() {
+                @Override  
+                public void run() { 
+                    LogUtil.d(TAG,"...............timerTask mIsNotGetFaceInfo="+mIsNotGetFaceInfo);
+                    if(mIsNotGetFaceInfo){    
+                        //KeyguardUtils.showNormalDialog(FaceActivity.this,"人脸录入");
+                        Toast.makeText(FaceActivity.this.getApplicationContext(), R.string.face_face_get, Toast.LENGTH_SHORT).show();
+                        FaceActivity.this.finish();
+                    }
+                }  
+            });  
+        }  
+    };
+    
+    BroadcastReceiver mBatInfoReceiver = new BroadcastReceiver() {
+        @Override
+        public void onReceive(final Context context, final Intent intent) {
+            Log.d(TAG, "onReceive");
+            String action = intent.getAction();
+			
+			TelephonyManager tManager = (TelephonyManager) context.getSystemService(Service.TELEPHONY_SERVICE);
+            if (Intent.ACTION_SCREEN_OFF.equals(action) || tManager.getCallState() == TelephonyManager.CALL_STATE_RINGING) {
+                Log.d(TAG, "screen off");
+                FaceActivity.this.finish();
+            }
+        }
+    };
+
+    private void initUiHandler() {
+        uiHandler = new WeakHandler<FaceActivity>(this) {
+            @Override
+            public void handleMsg(FaceActivity act, Message msg) {
+                switch (msg.what) {
+                    case MSG_SHOW_HINT1_TV:
+                        info_text.setVisibility(View.VISIBLE);
+                        info_text.setText(HINT_TEXT_1);
+                        break;
+                    case MSG_SHOW_HINT2_TV:
+                        info_text.setVisibility(View.VISIBLE);
+                        info_text.setText(HINT_TEXT_2);
+                        break;
+                    case MSG_SHOW_HINT4_TV:
+                        info_text.setVisibility(View.VISIBLE);
+                        info_text.setText(HINT_TEXT_4);
+                        break;
+					case MSG_LONGTIME_NO_FACE:
+					    
+					    task = new TimerTask() {    
+                             @Override  
+                            public void run() {    
+         
+                            runOnUiThread(new Runnable() {
+                            @Override  
+                            public void run() { 
+                            LogUtil.d(TAG,"...............timerTask mIsNotGetFaceInfo="+mIsNotGetFaceInfo);
+                            if(mIsNotGetFaceInfo){    
+                                Toast.makeText(FaceActivity.this.getApplicationContext(), R.string.face_face_get, Toast.LENGTH_SHORT).show();
+                                FaceActivity.this.finish();
+                                }
+                                }  
+                                });
+                            }  
+                        };
+						timer = new Timer();
+						timer.schedule(task, 20000);
+					    break;
+                    case MSG_DARK_LIGHT:
+                        info_text.setVisibility(View.VISIBLE);
+                        info_text.setText(HINT_TEXT_3);
+                        break;
+                    case MSG_HIDE_HINT_TV:
+                        info_text.setVisibility(View.GONE);
+                        break;
+                    case MSG_UPDATE_PROGRESS:
+                        int progress = users.size() * 20;
+                        mMaskView.setProgress(progress);
+                        if (users.size() >= 5) {
+                            mCameraView.setPreviewCallback(null);
+                            mCameraView.stopPreview();
+                            register("jun");
+                        }
+                        break;
+                    case MSG_NOT_SAME_FACE:
+                        if (mMaskView != null) {
+                            mMaskView.setProgress(0);
+                            users.clear();
+                            mNotSameFaceCount = 0;
+                            UserManager.deleteAllUser(FaceActivity.this);
+                        }
+                        break;
+                }
+            }
+        };
+    }
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
+        requestWindowFeature(Window.FEATURE_NO_TITLE);
+        HINT_TEXT_1 = getString(R.string.ic_default_move_face_center);
+        HINT_TEXT_2 = getString(R.string.ic_default_stay_font);
+        HINT_TEXT_3 = getString(R.string.ic_default_dark_light);
+        HINT_TEXT_4 = getString(R.string.ic_default_no_face_data_info);
+        //isFMode = getIntent().getBooleanExtra("isFMode", false);
+        mRequestType = getIntent().getIntExtra("requestType", 0);
+       // Log.d(TAG, "mRequestType:"+mRequestType+", isFMode:"+isFMode);
+        /*if(isFMode)
+        {
+            mRequestType = Face_NEW_REQUEST;
+            getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
+        }zxp*/
+        
+        if(mRequestType < Face_NEW_REQUEST || mRequestType > Face_DEMO_REMOVE_REQUEST)
+        {
+            Log.d(TAG, "onCreate:request error");
+            finish();
+        }
+        if (mRequestType == Face_REMOVE_REQUEST) {
+            UserManager.deleteAllUser(this);
+            saveFaceState(false);
+            setResult(RESULT_OK);
+            finish();
+            return;
+        }
+        setContentView(R.layout.activity_register);
+        initView();
+        DetectProxy.init();
+        VerifyProxy.init(this);
+        initUiHandler();
+        if (AppConfig.isOpenHacker) {
+            HackerProxy.init();
+        }
+        final IntentFilter filter = new IntentFilter();  
+        filter.addAction(Intent.ACTION_SCREEN_OFF);
+		filter.addAction(TelephonyManager.ACTION_PHONE_STATE_CHANGED);
+        registerReceiver(mBatInfoReceiver, filter);
+        mIsBroadcastRegister = true;
+        LogUtil.d(TAG,"!!!!!!!!!timer.schedule!!!!!!");
+        timer.schedule(task, 20000);
+        //Add by junwei.shen, create password AlertDialog for Face, at 2017.7.12
+        mContext = FaceActivity.this;
+
+    }
+
+    private void initView() {
+        mCameraView = (CameraView) findViewById(R.id.camera_view);
+        if (mRequestType == Face_REMOVE_REQUEST) {
+            LinearLayout linearLayout = (LinearLayout) findViewById(R.id.register);
+            linearLayout.setVisibility(View.GONE);
+        } else {
+            checkBoxes[0] = (CheckBox) findViewById(R.id.register_front);
+            checkBoxes[1] = (CheckBox) findViewById(R.id.register_up);
+            checkBoxes[2] = (CheckBox) findViewById(R.id.register_down);
+            checkBoxes[3] = (CheckBox) findViewById(R.id.register_left);
+            checkBoxes[4] = (CheckBox) findViewById(R.id.register_right);
+            description_info = (TextView) findViewById(R.id.face_unlock_scan_bottom_info);
+            info_text = (TextView) findViewById(R.id.face_unlock_info_text);
+            mMaskView = (MaskView) findViewById(R.id.mask_view);
+            description_info.setText(R.string.ic_default_sacn_face_description_info);
+            CycleView =  (FaceUnlockCyleView) findViewById(R.id.face_unlock_cycle_view);
+        }
+
+        mCameraView.setPreviewCallback(new Camera.PreviewCallback() {
+
+            @Override
+            public void onPreviewFrame(byte[] data, Camera camera) {
+                if (mNv21 == null || data.length != mNv21.length) {
+                    mNv21 = new byte[data.length];
+                }
+                if (!mIsTracking && !isVerifying) {
+                    synchronized (mNv21) {
+                        System.arraycopy(data, 0, mNv21, 0, data.length);
+                        mIsNv21DataReady = true;
+                    }
+                }
+                mCameraView.addCallbackBuffer();
+            }
+        });
+    }
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+
+        try {
+            hasPassword = Settings.System.getInt(getContentResolver(), KEY_HAS_PASSWORD);
+
+        } catch (SettingNotFoundException e) {
+            e.printStackTrace();
+        }
+        try {
+            mComponentName = new ComponentName(sharedPackageName, sharedClassName);
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        AlertDialog createNewPwdDialog = null;
+        if (hasPassword == 0) {
+            createNewPwdDialog = new AlertDialog.Builder(mContext)
+                    .setTitle(R.string.add_fingerprint_message_secturity)
+                    .setPositiveButton(R.string.ok, new DialogInterface.OnClickListener() {
+                        @Override
+                        public void onClick(DialogInterface dialog, int which) {
+                            dialog.dismiss();
+                            Intent intent = new Intent();
+                            intent.setComponent(mComponentName);
+                            intent.putExtra(MINIMUM_QUALITY_KEY,
+                                    DevicePolicyManager.PASSWORD_QUALITY_SOMETHING);
+                            intent.putExtra(HIDE_DISABLED_PREFS, true);
+                            intent.putExtra(EXTRA_KEY_HAS_CHALLENGE, true);
+                            intent.putExtra(EXTRA_KEY_CHALLENGE, 0);
+                            intent.putExtra(EXTRA_KEY_FOR_FINGERPRINT, false);
+                            startActivityForResult(intent, CHOOSE_LOCK_GENERIC_REQUEST);
+                        }
+                    })
+                    .setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() {
+                        @Override
+                        public void onClick(DialogInterface dialog, int which) {
+                            dialog.dismiss();
+                        }
+                    })
+                    .setCancelable(false)
+                    .create();
+            createNewPwdDialog.show();
+        } else if (createNewPwdDialog != null) {
+//            createNewPwdDialog.hide();
+//            createNewPwdDialog.dismiss();
+        }
+        //End: add by junwei.shen, create password AlertDialog for Face, at 2017.7.12
+        AccelerometerManager.start(this);
+        mIsKilled = false;
+        mCameraView.restartCamera();
+        mTrackThread = new Thread() {
+            @Override
+            public void run() {
+                //Add by junwei.shen, for deal Face entry timeout, at 2017.7.4
+                //time1 = System.currentTimeMillis();
+                SystemClock.sleep(200);
+                while (!mIsKilled && !Thread.interrupted()) {
+                    if (mIsNv21DataReady) {
+                        mIsTracking = true;
+                        synchronized (mNv21) {
+                            FaceInfo[] faces = DetectProxy.detect(mNv21, mCameraView.mPreviewWidth, mCameraView.mPreviewHeight);
+                            //FaceInfo face = filterFaces(faces);
+                            FaceInfo face = filterFaces(mNv21,faces, mCameraView.mPreviewWidth, mCameraView.mPreviewHeight);
+                            if(face == null){
+								if(!mIsNotGetFaceInfo){                                  
+									uiHandler.sendEmptyMessage(MSG_LONGTIME_NO_FACE);
+								}
+								mIsNotGetFaceInfo = true;
+                            }else{
+                                mIsNotGetFaceInfo = false;
+								if(timer != null)
+                                    timer.cancel();
+								if(task != null)
+									task.cancel();
+                            }
+                            LogUtil.i(TAG,"...mIsNotGetFaceInfo="+mIsNotGetFaceInfo);
+                            if (mRequestType != Face_REMOVE_REQUEST) {
+                                face = isSamePerson(face);
+                            }
+                            //analysis(face);
+                            analysis(mNv21, mCameraView.mPreviewWidth, mCameraView.mPreviewHeight,face);
+                        }
+                        mIsTracking = false;
+                        mIsNv21DataReady = false;
+                    }
+                }
+            }
+        };
+        mTrackThread.start();
+    }
+
+    private FaceInfo filterFaces(byte[] nv21, FaceInfo[] faces, int width, int height) {
+        if (faces == null || faces.length <= 0) {
+            LogUtil.v(TAG, "filter face is null");
+            // 更新提示文本的显示
+            if (info_text.getVisibility() != View.VISIBLE || !info_text.getText().toString().equals(HINT_TEXT_4)) {
+                uiHandler.sendEmptyMessage(MSG_SHOW_HINT4_TV);
+            }
+            return null;
+        }
+        // 筛选最大人脸
+        FaceInfo faceInfo = FaceUtil.getMaxFace(faces);
+        // 边界过滤
+        Rect maskRect = mMaskView.getMaskRect(mCameraView.getPreviewScaleX(), mCameraView.getPreviewScaleY());
+        FaceInfo clone = faceInfo.clone();
+        FaceRotationUtil.rotateFaceInfo(clone, mCameraView.mPreviewWidth, mCameraView.mPreviewHeight,
+                mCameraView.isFrontCamera(), mCameraView.mDegrees);
+        //该代码是判断人脸是否在圆框内
+        if (!maskRect.contains(clone.faceRect)) {
+            LogUtil.w(TAG, "filterFaces face out of frame !!!");
+            // 更新提示文本的显示
+            if (info_text.getVisibility() != View.VISIBLE || !info_text.getText().toString().equals(HINT_TEXT_1)) {
+                uiHandler.sendEmptyMessage(MSG_SHOW_HINT1_TV);
+            }
+            return null;
+        }
+        // 角度过滤
+        if (!FaceUtil.isFrontFace(faceInfo)) {
+            LogUtil.w(TAG, "is not front face !");
+            // 更新提示文本的显示
+            if (info_text.getVisibility() != View.VISIBLE || !info_text.getText().toString().equals(HINT_TEXT_2)) {
+                uiHandler.sendEmptyMessage(MSG_SHOW_HINT2_TV);
+            }
+            return null;
+        }
+        // 亮度过滤
+        faceInfo = FaceUtil.brightnessFilter(nv21, width, height, faceInfo);
+        if (faceInfo == null) {
+            if (info_text.getVisibility() != View.VISIBLE || !info_text.getText().toString().equals(HINT_TEXT_3)) {
+                uiHandler.sendEmptyMessage(MSG_DARK_LIGHT);
+            }
+            return null;
+        }
+        // 隐藏提示文本
+        if (faceInfo != null || info_text.getVisibility() != View.GONE) {
+            uiHandler.sendEmptyMessage(MSG_HIDE_HINT_TV);
+        }
+        return faceInfo;
+    }
+
+    private void analysis(byte[] nv21, int width, int height, FaceInfo faceInfo) {
+        if (faceInfo == null) {
+            LogUtil.w(TAG, "analysis face is null");
+            return;
+        }
+        // 特征提取
+        byte[] feature = VerifyProxy.getFeature(nv21, width, height, faceInfo);
+        // 检查特征值是否都相似
+        if (!checkFeature(feature)) {
+            LogUtil.w(TAG, "this face is not sample person !");
+            mNotSameFaceCount++;
+            if (mNotSameFaceCount == MAX_NOT_SAME_COUNT) {
+                LogUtil.w(TAG, "this face is not sample person ! = " + mNotSameFaceCount);
+                uiHandler.sendEmptyMessage(MSG_NOT_SAME_FACE);
+            }
+            return;
+        }
+        // 保存用户图片
+        String imagePath = saveUserImage(nv21, width, height, faceInfo, mCameraView.isFrontCamera());
+        User user = new User(uuid, null, new String(feature), imagePath, users.size());
+        users.add(user);
+        // 发送消息更新 UI
+        uiHandler.sendEmptyMessage(MSG_UPDATE_PROGRESS);
+    }
+
+    private String saveUserImage(byte[] nv21, int width, int height, FaceInfo faceInfo, boolean isFrontCamera) {
+        long time = System.currentTimeMillis();
+        Bitmap avatarBitmap = getAvatarBitmap(nv21, width, height, faceInfo.faceRect, isFrontCamera);
+        LogUtil.d(TAG, "getAvatarBitmap time : " + (System.currentTimeMillis() - time));
+        String imagePath = getFilesDir().getAbsolutePath() + "/" + users.size() + ".jpg";
+        time = System.currentTimeMillis();
+        FileUtil.saveBitmap(avatarBitmap, imagePath);
+        LogUtil.d(TAG, "saveBitmap time : " + (System.currentTimeMillis() - time));
+        return imagePath;
+    }
+
+    private Bitmap getAvatarBitmap(byte[] nv21, int width, int height, Rect rect, boolean isFrontCamera) {
+        Bitmap cropBitmap = BitmapUtil.cropBitmap(nv21, rect, width, height);
+        Bitmap rotateBitmap = BitmapUtil.rotateBitmap(cropBitmap, 270, isFrontCamera);
+        return rotateBitmap;
+    }
+
+    /**
+     * 判断是否为同一个人
+     */
+    private boolean checkFeature(byte[] feature) {
+        if (users == null || users.size() <= 0) {
+            return true;
+        }
+        for (int i = 0; i < users.size(); i++) {
+            float score = VerifyProxy.compare(feature, users.get(i).getFeature().getBytes());
+            if (score > 0.65f) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    private FaceInfo isSamePerson(FaceInfo face) {
+        if (face != null && mLastFaceId == face.id) {
+            return face;
+        } else {
+            runOnUiThread(new Runnable() {
+
+                @Override
+                public void run() {
+                    reset();
+                }
+            });
+            if (face != null) {
+                mLastFaceId = face.id;
+                return face;
+            }
+            return null;
+        }
+    }
+
+    private void reset() {
+        for (int i = 0; i < checkBoxes.length; i++) {
+            checkBoxes[i].setChecked(false);
+        }
+    }
+
+    private void register(String name) {
+        for (User user : users) {
+            user.setName(name);
+        }
+        long time = System.currentTimeMillis();
+        UserManager.addUsers(users, this);
+        LogUtil.d(TAG, "users size: " + users.size());
+        LogUtil.d(TAG, "db add users time : " + (System.currentTimeMillis() - time));
+        saveFaceState(true);
+        setResult(RESULT_OK);
+        finish();
+    }
+    
+    public void saveFaceState(boolean enabled){
+        Settings.System.putStringForUser(getContentResolver(),Settings.System.FACE_STATE_ENABLED,enabled?"1":"0", 0);  /* ZXP*/    
+    }
+
+    @Override
+    protected void onPause() {
+        AccelerometerManager.stop();
+        mCameraView.releaseCamera();
+        stopThread();
+        super.onPause();
+    }
+
+    private void stopThread() {
+        mIsKilled = true;
+        if (mTrackThread != null) {
+            try {
+                mTrackThread.interrupt();
+                mTrackThread.join();
+            } catch (InterruptedException e) {
+                e.printStackTrace();
+            }
+        }
+        if (mGetFeatureHandler != null) {
+            mGetFeatureThread.quitSafely();
+            mGetFeatureHandler = null;
+        }
+    }
+
+    /*added by iuv luyang*/
+    @Override
+    public void onBackPressed() {
+        //Begin: add by junwei.shen, create backPressed AlertDialog for Face, at 2017.7.12
+//        Toast.makeText(this.getApplicationContext(), R.string.Face_cancel_op, Toast.LENGTH_SHORT).show();
+//        super.onBackPressed();
+        new AlertDialog.Builder(mContext)
+                .setTitle(R.string.cancel_face_entering)
+                .setPositiveButton(R.string.ok, new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialogInterface, int i) {
+                        dialogInterface.dismiss();
+                        finish();
+                    }
+                })
+                .setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialogInterface, int i) {
+                        dialogInterface.dismiss();
+                    }
+                })
+                .create()
+                .show();
+        //End: add by junwei.shen, create backPressed AlertDialog for Face, at 2017.7.12
+    }
+    /*end by iuv luyang*/
+
+    @Override
+    protected void onDestroy() {
+        super.onDestroy();
+        if (AppConfig.isOpenHacker)
+            HackerProxy.release();
+        if (mIsBroadcastRegister) {
+            unregisterReceiver(mBatInfoReceiver);
+            mIsBroadcastRegister = false;
+        }
+		if(timer != null)
+			timer.cancel();
+		if(task != null)
+			task.cancel();
+    }
+}
Index: frameworks/base/packages/Keyguard/src/com/face/scanner/FaceService.java
===================================================================
--- frameworks/base/packages/Keyguard/src/com/face/scanner/FaceService.java	(revision 0)
+++ frameworks/base/packages/Keyguard/src/com/face/scanner/FaceService.java	(revision 2329)
@@ -0,0 +1,607 @@
+/*
+ * Copyright (C) 2014 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License
+ */
+
+package com.face.scanner;
+
+import android.R.integer;
+import android.app.AlertDialog;
+import android.app.Service;
+import android.content.Intent;
+import android.content.pm.ActivityInfo;
+import android.os.Binder;
+import android.os.Bundle;
+import android.os.Debug;
+import android.os.HandlerThread;
+import android.os.IBinder;
+import android.os.Message;
+import android.os.Looper;
+import android.os.Process;
+import android.os.Environment;
+import android.os.Handler;
+import android.os.RemoteException;
+import android.os.Vibrator;
+import android.view.Gravity;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.WindowManager;
+import android.view.SurfaceHolder;
+import android.view.Window;
+import android.view.WindowManagerGlobal;
+import android.view.IWindowManager;
+import android.view.IApplicationToken;
+import android.graphics.PixelFormat;
+import android.graphics.Color;
+import android.graphics.Bitmap;
+import android.graphics.Canvas;
+import android.graphics.Rect;
+
+import java.io.File;
+import android.content.res.Configuration;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.ComponentName;
+import android.content.SharedPreferences;
+import android.content.SharedPreferences.Editor;
+import android.content.ServiceConnection;
+import android.preference.PreferenceManager;
+import android.hardware.Camera;
+import android.media.MediaPlayer;
+import android.util.DisplayMetrics;
+import android.util.Log;
+import android.widget.FrameLayout;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+import android.widget.Toast;
+import android.provider.Settings;
+import java.util.List;
+import java.util.ArrayList;
+
+import com.face.scanner.view.CameraSurfaceView;
+
+
+import com.face.scanner.view.RoundProgressBar;
+
+import com.android.internal.policy.IFaceService;
+import com.android.internal.policy.IFaceStateCallback;
+import com.android.internal.policy.IKeyguardService;
+import com.sensetime.faceapi.FaceLibrary;
+import com.sensetime.faceapi.model.CvPixelFormat;
+import com.sensetime.faceapi.model.FaceInfo;
+import com.sensetime.faceapi.utils.AccelerometerManager;
+import com.sensetime.faceunlock.bean.FaceFeature;
+import com.sensetime.faceunlock.bean.User;
+import com.sensetime.faceunlock.config.AppConfig;
+import com.sensetime.faceunlock.manager.DetectProxy;
+import com.sensetime.faceunlock.manager.HackerProxy;
+import com.sensetime.faceunlock.manager.VerifyProxy;
+import com.sensetime.faceunlock.util.BrightnessHelper;
+import com.sensetime.faceunlock.util.LogUtil;
+import com.sensetime.faceunlock.widget.CameraView;
+
+import android.widget.RelativeLayout;
+
+import com.android.keyguard.R;
+import com.android.internal.policy.IFaceOverTimeCallback;
+
+public class FaceService extends Service {
+    static final String TAG = "FaceService";
+    private WindowManager mWindowManager;
+    private WindowManager.LayoutParams mLayoutParams;
+    private LayoutInflater mLayoutInflater;
+    private View mFaceView;
+    private boolean mViewAttatched = false;
+    private IFaceStateCallback mStateCallback;
+	private IFaceOverTimeCallback mOverTimeCallback;
+    private Handler mHandler;
+    // Its Add
+    private String mShowUI = null;
+    boolean mAsyncTaskRunning = false;
+    boolean mFaceState = true;
+    private CameraView cameraView;
+    private byte[] nv21; // nv21的数据
+    private volatile boolean isTracking; // 是否正在进行track操作
+    private boolean isVerifying; // 是否正在进行verify操作
+    private volatile boolean isNv21DataReady; // 判断nv21的数据是否拷贝完成
+    private Thread trackThread; // 进行Track的线程
+    private volatile boolean isKilled; // 控制Track线程是否停止
+    private HandlerThread verifyThread; // 进行Verify的线程
+    private Handler verifyHandler; // 进行Verify的线程的Handler对象
+    private User user; // verify通过，即存储检测到的User
+    private boolean isNotHacker; // 是否为活体
+    private int attemptCount; // 重试次数
+    public static final int START_FACE_VERIFY = 101;
+    public static final int STOP_FACE_VERIFY = 102;
+    private static final int MODE_INIT = 0;
+    private static final int MODE_SWITCH_TO_PRIVACY = 1;
+    private static final int MODE_UNLOCK_PRIVACY = 2;
+    private int mPrivacyMode = MODE_INIT;
+    public static final String KEYGUARD_PACKAGE = "com.android.systemui";
+    public static final String KEYGUARD_CLASS = "com.android.systemui.keyguard.KeyguardService";
+    private IKeyguardService mKeyguardService;
+    private ArrayList<IFaceStateCallback> mCallbacks;
+    private ArrayList<IFaceOverTimeCallback> mFaceOverTimeCallbacks;
+	
+    boolean mIsNotGetFaceInfo = false;
+    final Handler handler = new Handler();
+    Runnable runnable = new Runnable() {    
+        @Override    
+        public void run() {
+            LogUtil.d(TAG,"...............Runnable mIsNotGetFaceInfo="+mIsNotGetFaceInfo);
+            if(mIsNotGetFaceInfo){
+                if (mBrightnessChanged) {
+                    BrightnessHelper.setScreenBrightness(FaceService.this, mLastScreenBrightness);
+                    BrightnessHelper.setScreenMode(FaceService.this, mLastScreenMode);
+                    mBrightnessChanged = false;
+                }
+                //Toast.makeText(FaceService.this.getApplicationContext(), R.string.face_face_get, Toast.LENGTH_SHORT).show();
+				if(/*mOverTimeCallback != null*/mFaceOverTimeCallbacks != null && mFaceOverTimeCallbacks.size() > 0){
+					try{
+						//mOverTimeCallback.faceOverTime();
+                        for (IFaceOverTimeCallback iFaceOverTimeCallback : mFaceOverTimeCallbacks) {
+                            iFaceOverTimeCallback.faceOverTime();
+                        }
+					}catch (RemoteException e) {
+						e.printStackTrace();
+					}
+				}
+			}
+			stopSelf();
+        }    
+    };   
+
+    private int mLastScreenMode;
+    private int mLastScreenBrightness;
+    private boolean mBrightnessChanged = false;
+    private static final float BRIGHT_MIN = 0.12f;
+
+
+    @Override
+    public void onCreate() {
+        super.onCreate();
+        Log.d(TAG, "FaceService:onCreate()");
+        /*Settings.System.putInt(getContentResolver(),
+                Settings.System.FACE_VERIFY_SERVICE_RUN, 1);zxp*/
+        sendFaceBrodcast(START_FACE_VERIFY);
+        mWindowManager = (WindowManager) getApplicationContext()
+                .getSystemService(Context.WINDOW_SERVICE);
+        /*mShowUI = Settings.System.getStringForUser(getContentResolver(),
+                Settings.System.FACE_SCAN_SHOW_UI, 0);zxp*/
+        mShowUI = (mShowUI == null) ? "0":mShowUI;
+        mFaceState = true;
+
+        mLayoutInflater = LayoutInflater.from(this);
+        mHandler = new Handler();
+        mCallbacks = new ArrayList<IFaceStateCallback>();
+        mFaceOverTimeCallbacks = new ArrayList<IFaceOverTimeCallback>();
+        DetectProxy.init();
+        VerifyProxy.init(this);
+        if (AppConfig.isOpenHacker)
+            HackerProxy.init();
+
+        createView();
+        initUI();
+        handler.postDelayed(runnable, 2500); 
+    }
+
+    @Override
+    public void onStart(Intent intent, int startId) {
+        // TODO Auto-generated method stub
+        Log.d(TAG, "FaceService:onStart()");
+        super.onStart(intent, startId);
+    }
+
+    private void bindKeyguardService(){
+        Intent bindKeyguardIntent = new Intent();
+        bindKeyguardIntent.setClassName(KEYGUARD_PACKAGE, KEYGUARD_CLASS);
+        if (bindService(bindKeyguardIntent, mKeyguardConn,
+                Context.BIND_AUTO_CREATE)) {
+            Log.d(TAG, "---bindKeyguardService sucess---");
+        } else {
+            Log.d(TAG, "---bindKeyguardService failed---");
+        }
+    }
+
+    private ServiceConnection mKeyguardConn = new ServiceConnection() {
+        @Override
+        public void onServiceConnected(ComponentName name, IBinder service) {
+            Log.v(TAG, "*** Keyguard connected (yay!)");
+            mKeyguardService = IKeyguardService.Stub.asInterface(service);
+			//unlock();//ADD ZXP
+			
+        }
+
+        @Override
+        public void onServiceDisconnected(ComponentName name) {
+            Log.v(TAG, "*** Keyguard disconnected (boo!)");
+            mKeyguardService = null;
+        }
+    };
+
+    private void createView() {
+        mFaceView = mLayoutInflater.inflate(R.layout.face_service_view, null);
+        mLayoutParams = new WindowManager.LayoutParams();
+        mLayoutParams.width = WindowManager.LayoutParams.MATCH_PARENT;
+        mLayoutParams.height = WindowManager.LayoutParams.WRAP_CONTENT;
+        mLayoutParams.gravity = Gravity.TOP;
+        mLayoutParams.type = WindowManager.LayoutParams.TYPE_PHONE;
+        mLayoutParams.format = PixelFormat.RGBA_8888;
+        mLayoutParams.flags = WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE;
+    }
+
+    private void initUI() {
+        cameraView = (CameraView) mFaceView.findViewById(R.id.camera_view);
+        cameraView.setVisibility(View.INVISIBLE);// added by iuv luyang
+        cameraView.setPreviewCallback(new Camera.PreviewCallback() {
+
+            @Override
+            public void onPreviewFrame(byte[] data, Camera camera) {
+                Log.d(TAG, "onPreviewFrame");
+                // add by wuyongchao for bug 106825 begin
+                if(data == null){
+                    data = new byte[777600];
+                }
+               // add by wuyongchao for bug 106825 end
+                if (nv21 == null || data.length != nv21.length) {
+                    nv21 = new byte[data.length];
+                }
+                if (!isTracking && !isVerifying) {
+                    synchronized (nv21) {
+                        System.arraycopy(data, 0, nv21, 0, data.length);
+                        isNv21DataReady = true;
+                        data = null;
+                    }
+                }
+                cameraView.addCallbackBuffer();
+            }
+        });
+
+        if (mShowUI.equals("0")) {
+
+        }
+
+    }
+
+    private void startIdenTask() {
+        Log.d(TAG, "startIdenTask");
+        AccelerometerManager.start(this);
+        isKilled = false;
+        cameraView.restartCamera();
+        trackThread = new Thread() {
+            @Override
+            public void run() {
+                while (!isKilled && !Thread.interrupted()) {
+                    if (isNv21DataReady) {
+                        isTracking = true;
+                        synchronized (nv21) {
+                            FaceInfo[] faces = DetectProxy.detect(nv21,
+                                    cameraView.mPreviewWidth,
+                                    cameraView.mPreviewHeight);
+                            FaceInfo faceInfo = filterFaces(faces);
+                            if(faceInfo == null){
+                                mIsNotGetFaceInfo = true;
+                            }else{
+                                mIsNotGetFaceInfo = false;
+                            }
+                            LogUtil.i(TAG,"...mIsNotGetFaceInfo="+mIsNotGetFaceInfo);
+                            maxBrightnessIfNeed(nv21, faceInfo);
+                            if (!isKilled) {
+                                analysis(faceInfo);
+                            }
+                        }
+                        isTracking = false;
+                        isNv21DataReady = false;
+                        nv21 = null;
+                    }
+                }
+            }
+        };
+        trackThread.start();
+        initGetFeatureThread(); // 初始化GetFeature的线程
+    }
+
+    private void maxBrightnessIfNeed(byte[] nv21, FaceInfo faceInfo) {
+        if (nv21 == null || nv21.length == 0 || faceInfo == null) {
+            return;
+        }
+        //mLastScreenMode = BrightnessHelper.getScreenMode(this);
+        //mLastScreenBrightness = BrightnessHelper.getScreenBrightness(this);
+        Rect rect = faceInfo.faceRect;
+        float brightness = FaceLibrary.averageBrightness(nv21, CvPixelFormat.NV21, cameraView.mPreviewWidth, cameraView.mPreviewHeight, rect.left, rect.top, rect.width(), rect.height());
+        if (brightness < BRIGHT_MIN && !mBrightnessChanged) {
+            mLastScreenMode = BrightnessHelper.getScreenMode(this);
+            mLastScreenBrightness = BrightnessHelper.getScreenBrightness(this);
+            mBrightnessChanged = true;
+            BrightnessHelper.setScreenMode(this, 0);
+            BrightnessHelper.setScreenBrightness(this, 255);
+        }
+    }
+
+    private FaceInfo filterFaces(FaceInfo[] faces) {
+        if (faces == null || faces.length <= 0) {
+            return null;
+        }
+        FaceInfo faceInfo = null;
+        for (int i = 0; i < faces.length; i++) {
+            if (faceInfo == null
+                    || faces[i].faceRect.width() > faceInfo.faceRect.width()) {
+                faceInfo = faces[i];
+            }
+        }
+        return faceInfo;
+    }
+
+    private void analysis(FaceInfo faceInfo) {
+        if (faceInfo == null || isVerifying) {
+            return;
+        }
+        isVerifying = true;
+        Message msg = Message.obtain(verifyHandler);
+        msg.obj = new FaceFeature(faceInfo, nv21, cameraView.mPreviewWidth,
+                cameraView.mPreviewHeight);
+        verifyHandler.sendMessage(msg);
+    }
+
+    private void initGetFeatureThread() {
+        verifyThread = new HandlerThread("VerifyThread");
+        verifyThread.start();
+        verifyHandler = new Handler(verifyThread.getLooper()) {
+            @Override
+            public void handleMessage(Message msg) {
+                FaceFeature faceFeature = (FaceFeature) msg.obj;
+                handleFeature(faceFeature);
+            }
+        };
+    }
+
+    private void handleFeature(FaceFeature faceFeature) {
+		Log.d("zxp","faceFeature = "+faceFeature);
+        if (faceFeature == null) {
+            return;
+        }
+
+        // 做一次 verify 和 hacker，如果某次已经检测出来结果并且通过了，则不再重复检测
+        if (user == null) {
+            user = VerifyProxy.isPass(faceFeature, this);
+        }
+        if (!isNotHacker) {
+            isNotHacker = HackerProxy.isPass(faceFeature,
+                    cameraView.isFrontCamera());
+        }
+
+        attemptCount++;
+        LogUtil.d(TAG, "attemptCount: " + attemptCount);
+        // 达到重试次数上限时，发送结果，否则继续进行检测
+        if ((user != null && isNotHacker)
+                || attemptCount >= AppConfig.attemptCount) {
+            cameraView.setPreviewCallback(null);
+            if (!isKilled) {
+                cameraView.stopPreview();
+            }
+			Log.d("zxp","user = "+user+"isNotHacker = "+isNotHacker);
+            analyseResult(user, isNotHacker);
+        } else {
+            isVerifying = false;
+			Vibrator vib = (Vibrator) getSystemService(Context.VIBRATOR_SERVICE);
+            vib.vibrate(100);
+        }
+    }
+
+    private void analyseResult(User user, boolean isNotHacker) {
+        if (mBrightnessChanged) {
+            BrightnessHelper.setScreenBrightness(this, mLastScreenBrightness);
+            BrightnessHelper.setScreenMode(this, mLastScreenMode);
+            mBrightnessChanged = false;
+        }
+        if (user != null && isNotHacker) {
+            try {
+				unlock();
+                //mStateCallback.onIdentifyResult(true);
+                if (mCallbacks != null && mCallbacks.size() > 0) {
+                    for (IFaceStateCallback iFaceStateCallback : mCallbacks) {
+                        iFaceStateCallback.onIdentifyResult(true);
+                    }
+                }
+            } catch (RemoteException e) {
+                e.printStackTrace();
+            }
+        } else {
+            try {
+                //mStateCallback.onIdentifyResult(false);
+                if (mCallbacks != null && mCallbacks.size() > 0) {
+                    for (IFaceStateCallback iFaceStateCallback : mCallbacks) {
+                        iFaceStateCallback.onIdentifyResult(false);
+                    }
+                }
+            } catch (RemoteException e) {
+                e.printStackTrace();
+            }
+        }
+    }
+
+    private void unlock() {
+        try {
+            if (mKeyguardService != null) {
+                mKeyguardService.keyguardDone(false,true);
+				Log.d(TAG, "---unlock sucess------");
+            }
+        } catch (Exception e) {
+            Log.d(TAG, "---unlock failed---");
+        }
+    }
+
+    private void stopThread() {
+        isKilled = true;
+        if (trackThread != null) {
+            try {
+                trackThread.interrupt();
+                trackThread.join();
+            } catch (InterruptedException e) {
+                e.printStackTrace();
+            }
+        }
+        if (verifyThread != null) {
+            verifyThread.quitSafely();
+            verifyThread = null;
+        }
+    }
+
+    @Override
+    public IBinder onBind(Intent intent) {
+        sendFaceBrodcast(START_FACE_VERIFY);
+        mAsyncTaskRunning = false;
+        if (!mViewAttatched && mFaceView != null && mFaceState && mShowUI.equals("1")) {
+            Log.d(TAG, "$$$$ onBind:addView $$$$ ");
+            mWindowManager.addView(mFaceView, mLayoutParams);
+            mViewAttatched = true;
+        }
+        mPrivacyMode = intent.getIntExtra("privacyState", MODE_INIT);
+        /*if (mPrivacyMode == MODE_UNLOCK_PRIVACY) {
+            bindKeyguardService();
+        }zxp*/
+		bindKeyguardService();
+		Log.d(TAG, "zxp");
+        return mBinder;
+    }
+
+    @Override
+    public boolean onUnbind(Intent intent) {
+        if (mViewAttatched) {
+            Log.d(TAG, "$$$$ onUnbind:removeView $$$$ ");
+            mWindowManager.removeView(mFaceView);
+            mViewAttatched = false;
+            cameraView.setPreviewCallback(null);
+        }
+        if (mPrivacyMode == MODE_UNLOCK_PRIVACY) {
+            unbindService(mKeyguardConn);
+        }
+		if(handler != null){
+			handler.removeCallbacks(runnable);
+		}
+        stopIdentify();
+        sendFaceBrodcast(STOP_FACE_VERIFY);
+        return false;
+    }
+
+    @Override
+    public void onDestroy() {
+        Log.d(TAG, "$$$$ onDestroy $$$$ ");
+        stopIdentify();
+        cameraView.releaseCamera();
+        if (mViewAttatched) {
+            mWindowManager.removeView(mFaceView);
+            mViewAttatched = false;
+        }
+        if (mCallbacks != null) {
+            mCallbacks.clear();
+            mCallbacks = null;
+        }
+
+        if (mFaceOverTimeCallbacks != null) {
+            mFaceOverTimeCallbacks.clear();
+            mFaceOverTimeCallbacks = null;
+        }
+        mHandler.removeCallbacks(mKillSelfRunnable);
+        //DetectProxy.release();
+        //VerifyProxy.release();
+        /*Settings.System.putInt(getContentResolver(),
+                Settings.System.FACE_VERIFY_SERVICE_RUN, 0);zxp*/
+        if (AppConfig.isOpenHacker)
+            HackerProxy.release();
+    }
+
+    private void sendFaceBrodcast(int flag){
+        Intent mIntent = new Intent();
+        if (flag == START_FACE_VERIFY) {
+            mIntent.setAction("action_start_face_verity");
+        } else if (flag == STOP_FACE_VERIFY){
+            mIntent.setAction("action_stop_face_verity");
+        }
+        this.getApplicationContext().sendBroadcast(mIntent);
+
+    }
+
+    private Runnable mRetryIdentifyRunnable = new Runnable() {
+        @Override
+        public void run() {
+            Log.d(TAG, "try to start identify runnable");
+            startIdenTask();
+        }
+    };
+
+    private Runnable mKillSelfRunnable = new Runnable() {
+        @Override
+        public void run() {
+            stopSelf();
+        }
+    };
+
+    public void startIdentify() {
+        Log.d(TAG, "$$$$ startIdentify $$$$,mAsyncTaskRunning= "
+                + mAsyncTaskRunning);
+        if (!mAsyncTaskRunning) {
+            mAsyncTaskRunning = true;
+            mHandler.post(mRetryIdentifyRunnable);
+        }
+
+        mHandler.removeCallbacks(mKillSelfRunnable);
+        mHandler.postDelayed(mKillSelfRunnable, 1000*5);
+    }
+
+    public void stopIdentify() {
+        Log.d(TAG, "$$$$ stopIdentify $$$$ ");
+        stopThread();
+        if (mAsyncTaskRunning) {
+            mHandler.removeCallbacks(mRetryIdentifyRunnable);
+            mAsyncTaskRunning = false;
+        }
+        if (mBrightnessChanged) {
+            BrightnessHelper.setScreenBrightness(this, mLastScreenBrightness);
+            BrightnessHelper.setScreenMode(this, mLastScreenMode);
+            mBrightnessChanged = false;
+        }
+        AccelerometerManager.stop();
+    }
+
+    private final IFaceService.Stub mBinder = new IFaceService.Stub() {
+
+        @Override
+        // Binder interface
+        public void setStateCallback(IFaceStateCallback callback) {
+            //mStateCallback = callback;
+            mCallbacks.add(callback);
+        }
+		
+		@Override
+        // Binder interface
+        public void faceOverTimeCallback(IFaceOverTimeCallback callback) {
+            //mOverTimeCallback = callback;
+            mFaceOverTimeCallbacks.add(callback);
+        }
+
+        @Override
+        // Binder interface
+        public void startFaceIdentify() {
+            startIdentify();
+        }
+
+       @Override
+        // Binder interface
+        public void stopFaceIdentify() {
+            stopIdentify();
+        }
+
+    };
+}
Index: frameworks/base/packages/Keyguard/src/com/face/scanner/BootCompleteReceiver.java
===================================================================
--- frameworks/base/packages/Keyguard/src/com/face/scanner/BootCompleteReceiver.java	(revision 0)
+++ frameworks/base/packages/Keyguard/src/com/face/scanner/BootCompleteReceiver.java	(revision 2329)
@@ -0,0 +1,83 @@
+/*
+ * Copyright (C) 2014 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.face.scanner;
+
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.util.Log;
+import android.os.RemoteException;
+import android.app.ActivityManagerNative;
+import android.provider.Settings;
+import android.os.UserManager;
+import android.content.pm.UserInfo;
+import com.android.keyguard.R;
+import java.util.List;
+
+/**
+ * A proxy for Recents events which happens strictly for non-owner users.
+ */
+public class BootCompleteReceiver extends BroadcastReceiver {
+    private static final String TAG = "BootCompleteReceiver";
+
+	@Override  
+	public void onReceive(final Context context, final Intent intent) {  
+		Log.d(TAG, "onReceive");  
+		String action = intent.getAction();  
+	   
+		if (Intent.ACTION_BOOT_COMPLETED.equals(action)) {	
+			Log.d(TAG, "boot completed");
+			/*String state = Settings.System.getStringForUser(context.getContentResolver(),Settings.System.PRIVACY_SPACE_ENABLED, 0);zxp*/
+			String state ="0";
+            if (state == null) {
+                state = "0";
+            }
+			if(state.equals("1")) { 	
+				initPrivacySpace(context);
+			}
+		}
+	}  
+
+    private void initPrivacySpace(final Context context) {
+        /*String state = Settings.System.getStringForUser(context.getContentResolver(),Settings.System.PRIVACY_SPACE_STATE, 0);zxp*/
+		String state ="0";
+        try{
+            if(state.equals("0")) {		
+                UserManager um= (UserManager) context.getSystemService(Context.USER_SERVICE);		
+                UserInfo user = um.createUser(context.getString(R.string.privacy_data),UserInfo.FLAG_ADMIN);
+                /*Settings.System.putStringForUser(context.getContentResolver(),Settings.System.PRIVACY_USER_ID,""+user.id, 0);zxp*/
+                ActivityManagerNative.getDefault().startUserInBackground(user.id);
+                //user = um.createUser("clone",UserInfo.FLAG_ADMIN);
+                //Settings.System.putStringForUser(getContentResolver(),Settings.System.CLONE_USER_ID,""+user.id, 0);
+                //ActivityManagerNative.getDefault().startUserInBackground(user.id);
+                /*Settings.System.putStringForUser(context.getContentResolver(),Settings.System.PRIVACY_SPACE_STATE,"1", 0);zxp*/
+            } else {
+                String userID="0";
+    			/*userID = Settings.System.getStringForUser(context.getContentResolver(),Settings.System.PRIVACY_USER_ID, 0);zxp*/
+    			int id = Integer.parseInt(userID);
+    		    ActivityManagerNative.getDefault().startUserInBackground(id);
+    			//userID = Settings.System.getStringForUser(getContentResolver(),Settings.System.CLONE_USER_ID, 0);
+    			//int id = Integer.parseInt(userID);	
+    		    //ActivityManagerNative.getDefault().startUserInBackground(id);
+            } 
+        }catch(Exception re) {
+            Log.e(TAG, "Couldn't switch user " + re);
+        }
+
+    }
+
+}
Index: frameworks/base/packages/Keyguard/src/com/face/scanner/FaceViewCloseNotifiy.java
===================================================================
--- frameworks/base/packages/Keyguard/src/com/face/scanner/FaceViewCloseNotifiy.java	(revision 0)
+++ frameworks/base/packages/Keyguard/src/com/face/scanner/FaceViewCloseNotifiy.java	(revision 2329)
@@ -0,0 +1,51 @@
+package com.face.scanner;
+
+
+import android.app.Notification;
+import android.app.NotificationManager;
+import android.app.PendingIntent;
+import android.content.Context;
+import android.content.Intent;
+import android.net.Uri;
+import com.android.keyguard.R;
+import android.graphics.BitmapFactory;
+
+public class FaceViewCloseNotifiy {
+	private static final int NOTIFICATION_FLAG = 1;  
+	Context mContext = null;;
+	NotificationManager mNotificationManager = null;
+	PendingIntent pendingIntent  = null;
+	Intent mIntent = null;
+	long[] vibs={800,800,800,800};
+	Uri uri = null;
+	public FaceViewCloseNotifiy(Context context) {
+		super();
+		// TODO Auto-generated constructor stub
+		this.mContext=context;
+		mNotificationManager = (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);
+		mIntent = new Intent();
+		mIntent.setClassName("com.android.settings", "com.android.settings.face.FaceSettingMainActivity");
+		mIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK); 
+		pendingIntent = PendingIntent.getActivity(context, 0,  
+				mIntent, 0);
+		uri=Uri.parse("/system/media/audio/notifications/pixiedust.ogg");
+	}
+    public void showNotify() 
+    {
+    	Notification notify = new Notification.Builder(mContext)
+ //       .setTicker("Ticker")
+       // .setSmallIcon(R.drawable.face_notify)
+		/*  .setLargeIcon(BitmapFactory.decodeResource(
+                        mContext.getResources(), R.drawable.face_big_notify))*/
+ //       .setVibrate(vibs)
+          .setContentTitle(mContext.getString(R.string.face_notify_view_title))
+          .setContentText(mContext.getString(R.string.face_notify_view_text))
+          .setContentIntent(pendingIntent)
+          .setAutoCancel(true)
+//        .setDefaults(NotificationCompat.DEFAULT_LIGHTS)
+          .setNumber(1)
+          .setSound(uri)
+          .build();
+    	mNotificationManager.notify(NOTIFICATION_FLAG, notify); 
+    }
+}
Index: frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/LicenseHelper.java
===================================================================
--- frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/LicenseHelper.java	(revision 0)
+++ frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/LicenseHelper.java	(revision 2329)
@@ -0,0 +1,13 @@
+package com.sensetime.faceapi;
+
+public class LicenseHelper {
+
+	public static int initLicense(byte[] license){
+		return FaceLibrary.initLiscence(license);
+	}
+	
+	public static int initLicense(String license){
+		return FaceLibrary.initLiscenceStr(license);
+	}
+
+}
Index: frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/FaceLibrary.java
===================================================================
--- frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/FaceLibrary.java	(revision 0)
+++ frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/FaceLibrary.java	(revision 2329)
@@ -0,0 +1,90 @@
+package com.sensetime.faceapi;
+
+import android.graphics.Bitmap;
+
+import com.sensetime.faceapi.model.CvPixelFormat;
+import com.sensetime.faceapi.model.FaceInfo;
+
+public class FaceLibrary {
+
+    static {
+        System.loadLibrary("cvface_api");
+        System.loadLibrary("jni_cvface_api");
+    }
+
+    public static native void setDebug(boolean debug);
+
+    // license
+    public static native int initLiscence(byte[] license);
+
+    public static native int initLiscenceStr(String license);
+
+    // detector
+    public static native long cvFaceCreateDetector(String path, int config);
+
+    public static native void cvFaceDestroyDetector(long handle);
+
+    public static native float getDetectThreshold(long handle, int[] resultCode);
+
+    public static native void setDetectThreshold(long handle, float threshold, int[] resultCode);
+
+    public static native FaceInfo[] cvFaceDetectBytes(long handle, byte[] image, int pixelFormat, int width,
+                                                      int height, int stride, int orientation, int[] resultCode);
+
+    public static native FaceInfo[] cvFaceDetectInts(long handle, int[] image, int pixelFormat, int width, int height,
+                                                     int stride, int orientation, int[] resultCode);
+
+    // tracker
+    public static native void cvFaceShowInsideModel();
+
+    public static native long cvFaceCreateTracker(String detectModelPath, String alignModelPath, int config);
+
+    public static native void cvFaceDestroyTracker(long handle);
+
+    public static native FaceInfo[] cvFaceTrackBytes(long handle, byte[] image, int pixelFormat, int width, int height,
+                                                     int stride, int orientation, int[] resultCode);
+
+    public static native FaceInfo[] cvFaceTrackInts(long handle, int[] image, int pixelFormat, int width, int height,
+                                                    int stride, int orientation, int[] resultCode);
+
+    public static native void cvFaceResetTracker(long handle);
+
+    public static native int cvFaceTrackSetDetectFaceCntLimit(long handle, int count);
+
+    public static native int cvFaceTrackSetDetectInterval(long handle, int count);
+
+    // Verify
+    public static native long cvFaceCreateVerify(final String modelPath);
+
+    public static native int cvFaceGetVerifyVersion(long handle);
+
+    public static native int cvFaceGetVerifyLength(long handle);
+
+    public static native long cvFaceDeserialize(byte[] feature);
+
+    public static native float cvFaceCompareFeature(long handle, byte[] feature1, byte[] feature2, int[] resultCode);
+
+    public static native byte[] cvFaceGetFeatureInts(long handle, int[] image, int format, int width, int height,
+                                                     int stride, FaceInfo cvFace, int[] resultCode);
+
+    public static native byte[] cvFaceGetFeatureBytes(long handle, byte[] image, int format, int width, int height,
+                                                      int stride, FaceInfo cvFace, int[] resultCode);
+
+    public static native void cvFaceDestroyVerify(long handle);
+
+    // hackness
+    public static native long cvFaceCreateHackness(final String modelPath);
+
+    public static native float cvFaceHackness(long handle, byte[] image, int format, int width, int height, int stride,
+                                              int orientation, FaceInfo cvFace, int[] resultCode);
+
+    public static native void cvFaceDestroyHackness(long handle);
+
+    // other
+	public static native void getBGRFromBitmap(Bitmap bitmap, byte[] bgr);
+
+    public static native void cropNv21Data(byte[] in, int width, int height, int x, int y, int w, int h, byte[] out);
+
+    public static native float averageBrightness(byte[] imageData,CvPixelFormat format,int width,int height,int x,int y,int areaW,int areaH);
+
+}
Index: frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/FaceTrack.java
===================================================================
--- frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/FaceTrack.java	(revision 0)
+++ frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/FaceTrack.java	(revision 2329)
@@ -0,0 +1,205 @@
+package com.sensetime.faceapi;
+
+import com.sensetime.faceapi.model.FaceConfig;
+import com.sensetime.faceapi.model.FaceInfo;
+import com.sensetime.faceapi.model.FaceOrientation;
+import com.sensetime.faceapi.model.CvPixelFormat;
+import com.sensetime.faceapi.utils.ColorConvertUtil;
+
+import android.graphics.Bitmap;
+import android.graphics.Bitmap.Config;
+import android.util.Log;
+
+public class FaceTrack extends FaceHandleBase {
+
+    private static final boolean DEBUG = true;
+    private static final String TAG = "FaceTrack";
+
+    public FaceTrack() {
+        this(null, null, null, null, null);
+    }
+
+    public FaceTrack(FaceConfig.FaceImageResize resize, FaceConfig.FaceKeyPointCount pointCount,
+                     FaceConfig.TrackThreadCount threadCount) {
+        this(null, null, resize, pointCount, threadCount);
+    }
+
+    /**
+     * @param detectModelPath track模型文件的路径
+     * @param alignModelPath  关键点模型文件的路径
+     * @param resize          resize图片的大小 {@link FaceConfig.FaceImageResize}
+     * @param pointCount      关键点的数量 {@link FaceConfig.FaceKeyPointCount}
+     * @param threadCount     track开启的线程数 {@link FaceConfig.TrackThreadCount}
+     */
+    public FaceTrack(String detectModelPath, String alignModelPath, FaceConfig.FaceImageResize resize,
+                     FaceConfig.FaceKeyPointCount pointCount, FaceConfig.TrackThreadCount threadCount) {
+        if (resize == null) {
+            resize = FaceConfig.FaceImageResize.RESIZE_320W; // 默认使用了压缩为320
+        }
+        if (pointCount == null) {
+            pointCount = FaceConfig.FaceKeyPointCount.POINT_COUNT_21;
+        }
+        if (threadCount == null) {
+            threadCount = FaceConfig.TrackThreadCount.DEFAULT_CONFIG;
+        }
+        int config = resize.getValue() | pointCount.getValue() | threadCount.getValue();
+        init(detectModelPath, alignModelPath, config);
+    }
+
+    /**
+     * Initialize the Native Handler
+     */
+    private void init(String detectModelPath, String alignModelPath, int config) {
+        mCvFaceHandle = FaceLibrary.cvFaceCreateTracker(detectModelPath, alignModelPath, config);
+    }
+
+    /**
+     * Given the Image by Int Array to track face
+     *
+     * @param colorImage    Input image color int[] 输入的图片
+     * @param cvPixelFormat Input image cvImageFormat which you can select the value from CvImageFormat Class 图片格式
+     * @param imageWidth    Input image Width 图片宽度
+     * @param imageHeight   Input image Height 图片高度
+     * @param imageStride   Input bytes of rows 图片跨度，即每行有多少个字节数
+     * @param orientation   Input image orientation 图片方向
+     * @return FaceInfo array, each one in array is tracked by SDK native API
+     */
+    public FaceInfo[] track(int[] colorImage, CvPixelFormat cvPixelFormat, int imageWidth, int imageHeight,
+                            int imageStride, FaceOrientation orientation) {
+        FaceInfo[] faces = FaceLibrary.cvFaceTrackInts(mCvFaceHandle, colorImage, cvPixelFormat.getValue(), imageWidth,
+                imageHeight, imageStride, orientation.getValue(), mResultCode);
+        checkResultCode();
+        return faces;
+    }
+
+    /**
+     * Given the Image by Byte Array to track face
+     *
+     * @param colorImage    Input image color byte[] 输入的图片
+     * @param cvPixelFormat Input image cvImageFormat which you can select the value from CvImageFormat Class 图片格式
+     * @param imageWidth    Input image Width 图片宽度
+     * @param imageHeight   Input image Height 图片高度
+     * @param imageStride   Input bytes of rows 图片跨度，即每行有多少个字节数
+     * @param orientation   Input image orientation 图片方向
+     * @return FaceInfo array, each one in array is tracked by SDK native API
+     */
+    public FaceInfo[] track(byte[] colorImage, CvPixelFormat cvPixelFormat, int imageWidth, int imageHeight,
+                            int imageStride, FaceOrientation orientation) {
+        FaceInfo[] faces = FaceLibrary.cvFaceTrackBytes(mCvFaceHandle, colorImage, cvPixelFormat.getValue(), imageWidth,
+                imageHeight, imageStride, orientation.getValue(), mResultCode);
+        checkResultCode();
+        return faces;
+    }
+
+    /**
+     * @see #track(Bitmap, FaceOrientation)
+     */
+    public FaceInfo[] track(Bitmap bitmap) {
+        return track(bitmap, FaceOrientation.UP);
+    }
+
+    /**
+     * @see #track(Bitmap, FaceOrientation, byte[])
+     */
+    public FaceInfo[] track(Bitmap bitmap, FaceOrientation orientation) {
+        return track(bitmap, orientation, null);
+    }
+
+    /**
+     * @see #track(byte[], CvPixelFormat, int, int, int, FaceOrientation)
+     */
+    public FaceInfo[] track(Bitmap bitmap, FaceOrientation orientation, byte[] buffer) {
+        if (bitmap == null || bitmap.isRecycled()) {
+            if (DEBUG) {
+                Log.w(TAG, "track image is null or Recycled");
+            }
+            return null;
+        }
+        if (bitmap.getConfig() != Config.ARGB_8888) {
+        	bitmap = bitmap.copy(Config.ARGB_8888, false);
+        }
+        if (buffer == null) {
+            buffer = createBufferIfNeed(bitmap.getWidth(), bitmap.getHeight());
+        } else if (buffer.length != bitmap.getWidth() * bitmap.getHeight() * 3) {
+            throw new RuntimeException("detect buffer is illegal !");
+        }
+        ColorConvertUtil.getBGRFromBitmap(bitmap, buffer);
+        return track(buffer, CvPixelFormat.BGR888, bitmap.getWidth(), bitmap.getHeight(), bitmap.getWidth() * 3,
+                orientation);
+    }
+
+    /**
+     * @see #track(byte[], CvPixelFormat, int, int, FaceOrientation)
+     */
+    public FaceInfo[] track(byte[] colorImage, CvPixelFormat cvPixelFormat, int imageWidth, int imageHeight) {
+        return track(colorImage, cvPixelFormat, imageWidth, imageHeight, FaceOrientation.UP);
+    }
+
+    /**
+     * @see #track(byte[], CvPixelFormat, int, int, int, FaceOrientation)
+     */
+    public FaceInfo[] track(byte[] colorImage, CvPixelFormat cvPixelFormat, int imageWidth, int imageHeight,
+                            FaceOrientation orientation) {
+        return track(colorImage, cvPixelFormat, imageWidth, imageHeight, imageWidth, orientation);
+    }
+
+    /**
+     * @see #track(int[], CvPixelFormat, int, int, FaceOrientation)
+     */
+    public FaceInfo[] track(int[] colorImage, int imageWidth, int imageHeight, FaceOrientation orientation) {
+        return track(colorImage, CvPixelFormat.BGR888, imageWidth, imageHeight, orientation);
+    }
+
+    /**
+     * @see #track(int[], CvPixelFormat, int, int, int, FaceOrientation)
+     */
+    public FaceInfo[] track(int[] colorImage, CvPixelFormat cvPixelFormat, int imageWidth, int imageHeight,
+                            FaceOrientation orientation) {
+        return track(colorImage, cvPixelFormat, imageWidth, imageHeight, imageWidth * 4, orientation);
+    }
+
+    /**
+     * Reset track ,Sometimes,video frame is not discontinuous,when frame
+     * restart you can reset track to avoid tracking face discontinuity
+     */
+    public void reset() {
+        if (!isHandleInitialized()) {
+            if (DEBUG) {
+                Log.e(TAG, "reset Handle not Initialized");
+            }
+            return;
+        }
+        FaceLibrary.cvFaceResetTracker(mCvFaceHandle);
+    }
+
+    public void showInsideModelVersion() {
+        FaceLibrary.cvFaceShowInsideModel();
+    }
+
+    /**
+     * 设置全检测帧数，默认20帧，如果对人脸出框速度有特殊需求，建议：前置无人脸：3  有人脸8  后置无人脸：5 有人脸10
+     */
+    public void setFaceTrackInterval(int count){
+    	FaceLibrary.cvFaceTrackSetDetectInterval(mCvFaceHandle, count);
+    }
+    /**
+     * Set the current face count of track
+     *
+     * @param count of face limit,no limit if count = -1
+     */
+    public void setFaceLimit(int count) {
+        if (!isHandleInitialized()) {
+            if (DEBUG) {
+                Log.e(TAG, "setFaceLimit Handle not Initialized");
+            }
+            return;
+        }
+        int rst = FaceLibrary.cvFaceTrackSetDetectFaceCntLimit(mCvFaceHandle, count <= 0 ? -1 : count);
+        checkResultCode(rst);
+    }
+
+    @Override
+    protected void releaseHandle() {
+        FaceLibrary.cvFaceDestroyTracker(mCvFaceHandle);
+    }
+}
Index: frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/FaceVerify.java
===================================================================
--- frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/FaceVerify.java	(revision 0)
+++ frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/FaceVerify.java	(revision 2329)
@@ -0,0 +1,116 @@
+package com.sensetime.faceapi;
+
+import android.graphics.Bitmap;
+import android.graphics.Bitmap.Config;
+import android.text.TextUtils;
+import android.util.Log;
+
+import com.sensetime.faceapi.model.CvPixelFormat;
+import com.sensetime.faceapi.model.FaceInfo;
+import com.sensetime.faceapi.utils.ColorConvertUtil;
+
+/**
+ * 人脸认证
+ */
+public class FaceVerify extends FaceHandleBase {
+
+    private static final boolean DEBUG = true;
+    private static final String TAG = "FaceVerify";
+
+    /**
+     * @param modelPath The verify model file path 比对模型文件路径
+     */
+    public FaceVerify(String modelPath) {
+        init(modelPath);
+    }
+
+    private void init(String modelPath) {
+        if (TextUtils.isEmpty(modelPath)) {
+            throw new RuntimeException("verify model path is null!");
+        }
+        mCvFaceHandle = FaceLibrary.cvFaceCreateVerify(modelPath);
+    }
+
+    /**
+     * @see #getFeature(Bitmap, FaceInfo, byte[])
+     */
+    public byte[] getFeature(Bitmap image, FaceInfo faceInfo) {
+        return getFeature(image, faceInfo, null);
+    }
+
+    /**
+     * @see #getFeature(byte[], CvPixelFormat, int, int, int, FaceInfo)
+     */
+    public byte[] getFeature(Bitmap image, FaceInfo faceInfo, byte[] buffer) {
+        if (image == null || image.isRecycled()) {
+            if (DEBUG) {
+                Log.w(TAG, "image is null or Recycled");
+            }
+            return null;
+        }
+        if (image.getConfig() != Config.ARGB_8888) {
+            image = image.copy(Config.ARGB_8888, false);
+        }
+        if (buffer == null) {
+            buffer = createBufferIfNeed(image.getWidth(), image.getHeight());
+        } else if (buffer.length != image.getWidth() * image.getHeight() * 3) {
+            throw new RuntimeException("detect buffer is illegal !");
+        }
+        ColorConvertUtil.getBGRFromBitmap(image, buffer);
+        return getFeature(buffer, CvPixelFormat.BGR888, image.getWidth(), image.getHeight(), image.getWidth() * 3,
+                faceInfo);
+    }
+
+    /**
+     * @param colorImage    Input image color int[] 输入的图片
+     * @param cvPixelFormat Input image cvImageFormat which you can select the value from CvImageFormat Class 图片格式
+     * @param imageWidth    Input image Width 图片宽度
+     * @param imageHeight   Input image Height 图片高度
+     * @param imageStride   Input bytes of rows 图片跨度，即每行有多少个字节数
+     * @param faceInfo      人脸检测后得到的人脸信息 {@link FaceInfo}
+     * @return 人脸特征数组
+     */
+    public byte[] getFeature(int[] colorImage, CvPixelFormat cvPixelFormat, int imageWidth, int imageHeight, int
+            imageStride, FaceInfo faceInfo) {
+        byte[] feature = FaceLibrary.cvFaceGetFeatureInts(mCvFaceHandle, colorImage, cvPixelFormat.getValue(),
+                imageWidth, imageHeight, imageStride, faceInfo, mResultCode);
+        checkResultCode(mResultCode[0]);
+        return feature;
+    }
+
+    /**
+     * @param colorImage    Input image color byte[] 输入的图片
+     * @param cvPixelFormat Input image cvImageFormat which you can select the value from CvImageFormat Class 图片格式
+     * @param imageWidth    Input image Width 图片宽度
+     * @param imageHeight   Input image Height 图片高度
+     * @param imageStride   Input bytes of rows 图片跨度，即每行有多少个字节数
+     * @param faceInfo      人脸检测后得到的人脸信息 {@link FaceInfo}
+     * @return 人脸特征数组
+     */
+    public byte[] getFeature(byte[] colorImage, CvPixelFormat cvPixelFormat, int imageWidth, int imageHeight, int
+            imageStride, FaceInfo faceInfo) {
+        byte[] feature = FaceLibrary.cvFaceGetFeatureBytes(mCvFaceHandle, colorImage, cvPixelFormat.getValue(),
+                imageWidth, imageHeight, imageStride, faceInfo, mResultCode);
+        checkResultCode(mResultCode[0]);
+        return feature;
+    }
+
+    /**
+     * Given the two byte[] feature to get similar of two face,
+     *
+     * @param feature1 of first face
+     * @param feature2 of other face
+     * @return similar of two face (float[0-1])
+     */
+    public float compareFeature(byte[] feature1, byte[] feature2) {
+        float similar = FaceLibrary.cvFaceCompareFeature(mCvFaceHandle, feature1, feature2, mResultCode);
+        checkResultCode(mResultCode[0]);
+        return similar;
+    }
+
+    @Override
+    protected void releaseHandle() {
+        FaceLibrary.cvFaceDestroyVerify(mCvFaceHandle);
+    }
+
+}
Index: frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/FaceHandleBase.java
===================================================================
--- frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/FaceHandleBase.java	(revision 0)
+++ frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/FaceHandleBase.java	(revision 2329)
@@ -0,0 +1,52 @@
+package com.sensetime.faceapi;
+
+import com.sensetime.faceapi.model.ResultCode;
+
+public abstract class FaceHandleBase {
+
+	protected long mCvFaceHandle;
+	protected byte[] mBuffer;
+	protected int[] mResultCode = new int[1];
+	
+	protected boolean isHandleInitialized(){
+		return mCvFaceHandle != 0;
+	}
+
+	protected abstract void releaseHandle();
+	
+	protected void checkResultCode(int resultCode){
+		if (resultCode != ResultCode.OK.getValue()) {
+	        throw new RuntimeException("Calling native method failed! ResultCode : " + resultCode + " Reason : " + ResultCode.getDescription(resultCode));
+	    }
+	}
+	
+	protected void checkResultCode() {
+		checkResultCode(mResultCode[0]);
+	}
+	
+	protected byte[] createBufferIfNeed(int width, int height) {
+		int size = width * height*4;
+		if(mBuffer != null && mBuffer.length == size){
+			return mBuffer;
+		}
+		mBuffer = new byte[size];
+		return mBuffer;
+	}
+	
+	@Override
+	protected void finalize() throws Throwable {
+		release();
+	}
+	
+    /**
+     * release handle in native
+     */
+	public void release(){
+		if(mCvFaceHandle == 0){
+			return;
+		}
+		mBuffer = null;
+		releaseHandle();
+		mCvFaceHandle = 0;
+	}
+}
Index: frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/filter/IFaceFilter.java
===================================================================
--- frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/filter/IFaceFilter.java	(revision 0)
+++ frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/filter/IFaceFilter.java	(revision 2329)
@@ -0,0 +1,9 @@
+package com.sensetime.faceapi.filter;
+
+import com.sensetime.faceapi.model.FaceInfo;
+
+public interface IFaceFilter {
+
+	boolean onFilter(FaceInfo faceInfo , int width, int height);
+
+}
Index: frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/filter/FaceFilterGroup.java
===================================================================
--- frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/filter/FaceFilterGroup.java	(revision 0)
+++ frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/filter/FaceFilterGroup.java	(revision 2329)
@@ -0,0 +1,47 @@
+package com.sensetime.faceapi.filter;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import com.sensetime.faceapi.model.FaceInfo;
+
+import android.util.Log;
+
+public class FaceFilterGroup implements IFaceFilter{
+	private static final boolean DEBUG = true;
+	private static final String TAG = "FaceFilterGroup";
+	private List<IFaceFilter> mFaceFilters = new ArrayList<IFaceFilter>();
+	
+	public void addFilter(IFaceFilter filter){
+		if(filter == null){
+			Log.w(TAG, "addFilter filter is null !");
+			return;
+		}
+		mFaceFilters.add(filter);
+	}
+	
+	public void removeFilter(IFaceFilter filter){
+		if(filter == null){
+			Log.w(TAG, "removeFilter filter is null !");
+			return;
+		}
+		mFaceFilters.add(filter);
+	}
+
+	@Override
+	public boolean onFilter(FaceInfo faceInfo, int width, int height) {
+		if(mFaceFilters == null || mFaceFilters.size() == 0){
+			Log.w(TAG, "onFilter mFaceFilters is empty !");
+			return true;
+		}
+		for(IFaceFilter filter: mFaceFilters){
+			if(!filter.onFilter(faceInfo, width, height)){
+				return false;
+			}
+		}
+		return true;
+	}
+	
+	
+	
+}
Index: frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/FaceDetect.java
===================================================================
--- frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/FaceDetect.java	(revision 0)
+++ frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/FaceDetect.java	(revision 2329)
@@ -0,0 +1,144 @@
+package com.sensetime.faceapi;
+
+import android.graphics.Bitmap;
+import android.graphics.Bitmap.Config;
+import android.util.Log;
+
+import com.sensetime.faceapi.model.FaceConfig;
+import com.sensetime.faceapi.model.FaceInfo;
+import com.sensetime.faceapi.model.FaceOrientation;
+import com.sensetime.faceapi.model.CvPixelFormat;
+import com.sensetime.faceapi.utils.ColorConvertUtil;
+
+/**
+ * 人脸检测
+ */
+public class FaceDetect extends FaceHandleBase {
+
+    private static final boolean DEBUG = true;
+    private static final String TAG = "FaceDetect";
+
+    public FaceDetect() {
+        this(null, null, null);
+    }
+
+    public FaceDetect(FaceConfig.FaceImageResize resize, FaceConfig.FaceKeyPointCount pointCount) {
+        this(null, resize, pointCount);
+    }
+
+    /**
+     * @param modelPath  detect模型文件的路径
+     * @param resize     resize图片的大小 {@link FaceConfig.FaceImageResize}
+     * @param pointCount 关键点的数量 {@link FaceConfig.FaceKeyPointCount}
+     */
+    public FaceDetect(String modelPath, FaceConfig.FaceImageResize resize, FaceConfig.FaceKeyPointCount
+            pointCount) {
+        if (resize == null) {
+            resize = FaceConfig.FaceImageResize.DEFAULT_CONFIG;
+        }
+        if (pointCount == null) {
+            pointCount = FaceConfig.FaceKeyPointCount.POINT_COUNT_21;
+        }
+        int config = resize.getValue() | pointCount.getValue();
+        init(modelPath, config);
+    }
+
+    /**
+     * Initialize the Native Handler
+     */
+    private void init(String modelPath, int config) {
+        mCvFaceHandle = FaceLibrary.cvFaceCreateDetector(modelPath, config);
+    }
+
+    public float getFaceThreshold() {
+        return FaceLibrary.getDetectThreshold(mCvFaceHandle, mResultCode);
+    }
+
+    public void setFaceThreshold(float threshold) {
+        FaceLibrary.setDetectThreshold(mCvFaceHandle, threshold, mResultCode);
+        checkResultCode(mResultCode[0]);
+    }
+
+    /**
+     * @see #detect(Bitmap, FaceOrientation)
+     */
+    public FaceInfo[] detect(Bitmap image) {
+        return detect(image, FaceOrientation.UP);
+    }
+
+    /**
+     * @see #detect(Bitmap, FaceOrientation, byte[])
+     */
+    public FaceInfo[] detect(Bitmap image, FaceOrientation orientation) {
+        return detect(image, orientation, null);
+    }
+
+    /**
+     * @see #detect(byte[], CvPixelFormat, int, int, int, FaceOrientation)
+     */
+    public FaceInfo[] detect(Bitmap image, FaceOrientation orientation, byte[] buffer) {
+        if (image == null || image.isRecycled()) {
+            if (DEBUG) {
+                Log.w(TAG, "detect image is null or recycled");
+            }
+            return null;
+        }
+        if (image.getConfig() != Config.ARGB_8888) {
+            image = image.copy(Config.ARGB_8888, false);
+        }
+        if (buffer == null) {
+            buffer = createBufferIfNeed(image.getWidth(), image.getHeight());
+        }
+        ColorConvertUtil.getBGRFromBitmap(image, buffer);
+        return detect(buffer, CvPixelFormat.BGR888, image.getWidth(), image.getHeight(), image.getWidth() * 3,
+                orientation);
+    }
+
+    /**
+     * Given the Image by Int Array to detect face
+     *
+     * @param colorImage    Input image color int[] 输入的图片
+     * @param cvPixelFormat Input image cvImageFormat which you can select the value from CvImageFormat Class 图片格式
+     * @param imageWidth    Input image Width 图片宽度
+     * @param imageHeight   Input image Height 图片高度
+     * @param imageStride   Input bytes of rows 图片跨度，即每行有多少个字节数
+     * @param orientation   Input image orientation 图片方向
+     * @return FaceInfo array, each one in array is detected by SDK native API
+     */
+    public FaceInfo[] detect(int[] colorImage, CvPixelFormat cvPixelFormat, int imageWidth, int imageHeight,
+                             int imageStride, FaceOrientation orientation) {
+        FaceInfo[] faces = FaceLibrary.cvFaceDetectInts(mCvFaceHandle, colorImage, cvPixelFormat.getValue(),
+                imageWidth, imageHeight, imageStride, orientation.getValue(), mResultCode);
+        checkResultCode();
+        return faces;
+    }
+
+    /**
+     * Given the Image by Byte Array to detect face
+     *
+     * @param colorImage    Input image color byte[] 输入的图片
+     * @param cvPixelFormat Input image cvImageFormat which you can select the value from CvImageFormat Class 图片格式
+     * @param imageWidth    Input image Width 图片宽度
+     * @param imageHeight   Input image Height 图片高度
+     * @param imageStride   Input bytes of rows 图片跨度，即每行有多少个字节数
+     * @param orientation   Input image orientation 图片方向
+     * @return FaceInfo array, each one in array is detected by SDK native API
+     */
+    public FaceInfo[] detect(byte[] colorImage, CvPixelFormat cvPixelFormat, int imageWidth, int imageHeight,
+                             int imageStride, FaceOrientation orientation) {
+        FaceInfo[] faces = FaceLibrary.cvFaceDetectBytes(mCvFaceHandle, colorImage, cvPixelFormat.getValue(),
+                imageWidth, imageHeight, imageStride, orientation.getValue(), mResultCode);
+        checkResultCode();
+        return faces;
+    }
+
+    public static void showInsideModel() {
+        FaceLibrary.cvFaceShowInsideModel();
+    }
+
+    @Override
+    protected void releaseHandle() {
+        FaceLibrary.cvFaceDestroyDetector(mCvFaceHandle);
+    }
+
+}
Index: frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/FaceHacker.java
===================================================================
--- frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/FaceHacker.java	(revision 0)
+++ frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/FaceHacker.java	(revision 2329)
@@ -0,0 +1,42 @@
+package com.sensetime.faceapi;
+
+import com.sensetime.faceapi.model.CvPixelFormat;
+import com.sensetime.faceapi.model.FaceInfo;
+import com.sensetime.faceapi.model.FaceOrientation;
+
+/**
+ * 活体检测
+ */
+public class FaceHacker extends FaceHandleBase {
+
+    /**
+     * @param modelPath The FaceHackness model file path 活体检测模型文件路径
+     */
+    public FaceHacker(final String modelPath) {
+        mCvFaceHandle = FaceLibrary.cvFaceCreateHackness(modelPath);
+    }
+
+    /**
+     * 活体检测的方法
+     *
+     * @param image       输入的图片
+     * @param format      图片格式 {@link CvPixelFormat}
+     * @param width       图片宽度
+     * @param height      图片高度
+     * @param stride      图片跨度，即每行有多少个字节数
+     * @param orientation 人脸方向 {@link FaceOrientation}
+     * @param info        人脸信息 {@link FaceInfo}
+     * @return
+     */
+    public float faceHackness(byte[] image, CvPixelFormat format, int width, int height, int stride, FaceOrientation
+            orientation, FaceInfo info) {
+        return FaceLibrary.cvFaceHackness(mCvFaceHandle, image, format.getValue(), width, height, stride, orientation
+                .getValue(), info, mResultCode);
+    }
+
+    @Override
+    protected void releaseHandle() {
+        FaceLibrary.cvFaceDestroyHackness(mCvFaceHandle);
+    }
+
+}
Index: frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/model/FaceInfo.java
===================================================================
--- frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/model/FaceInfo.java	(revision 0)
+++ frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/model/FaceInfo.java	(revision 2329)
@@ -0,0 +1,43 @@
+package com.sensetime.faceapi.model;
+
+import android.graphics.PointF;
+import android.graphics.Rect;
+
+/**
+ * 人脸检测返回的结果体
+ */
+public class FaceInfo {
+	
+	public Rect faceRect;
+	public PointF[] facePoints;
+	public int id;
+	public float score;
+	public float yaw;
+	public float pitch;
+	public float roll;
+	public float eyeDist;
+
+	public FaceInfo clone() {
+		FaceInfo faceInfo = new FaceInfo();
+		faceInfo.faceRect = new Rect();
+		faceInfo.facePoints = new PointF[facePoints.length];
+		faceInfo.faceRect.set(faceRect);
+		for (int i = 0; i < faceInfo.facePoints.length; i++) {
+			faceInfo.facePoints[i] = new PointF();
+			faceInfo.facePoints[i].set(facePoints[i]);
+		}
+		faceInfo.id = id;
+		faceInfo.score = score;
+		faceInfo.yaw = yaw;
+		faceInfo.pitch = pitch;
+		faceInfo.roll = roll;
+		faceInfo.eyeDist = eyeDist;
+		return faceInfo;
+	}
+	
+	@Override
+	public String toString() {
+		return "FaceInfo(" + faceRect + ", " + score + ")";
+	}
+
+}
Index: frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/model/FaceOrientation.java
===================================================================
--- frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/model/FaceOrientation.java	(revision 0)
+++ frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/model/FaceOrientation.java	(revision 2329)
@@ -0,0 +1,30 @@
+package com.sensetime.faceapi.model;
+
+public enum FaceOrientation {
+
+    UP(1), // 人脸方向朝上，箭头表示人头位置，直线表示身体，即  ↑
+    LEFT(2), // 人脸方向朝左，箭头表示人头位置，直线表示身体，即  ←
+    DOWN(4), // 人脸方向朝下，箭头表示人头位置，直线表示身体，即  ↓
+    RIGHT(8), // 人脸方向朝右，箭头表示人头位置，直线表示身体，即  →
+    UNKNOWN(15); // 未知
+
+    final int nativeInt;
+
+    FaceOrientation(int ni) {
+        this.nativeInt = ni;
+    }
+
+    private static FaceOrientation sFaceOrientations[] = {
+            null, UP, LEFT, null, DOWN, null, null, null, RIGHT,
+            null, null, null, null, null, null, UNKNOWN
+    };
+
+    public int getValue() {
+        return nativeInt;
+    }
+
+    public static FaceOrientation nativeToOrientation(int ni) {
+        return sFaceOrientations[ni];
+    }
+
+}
Index: frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/model/IFaceFeatureInfo.java
===================================================================
--- frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/model/IFaceFeatureInfo.java	(revision 0)
+++ frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/model/IFaceFeatureInfo.java	(revision 2329)
@@ -0,0 +1,9 @@
+package com.sensetime.faceapi.model;
+
+public interface IFaceFeatureInfo{
+
+	byte[] getFeature();
+	void setGroupId(int groupId);
+	int getGroupId();
+
+}
Index: frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/model/ColorConvertType.java
===================================================================
--- frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/model/ColorConvertType.java	(revision 0)
+++ frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/model/ColorConvertType.java	(revision 2329)
@@ -0,0 +1,25 @@
+package com.sensetime.faceapi.model;
+
+public enum ColorConvertType {
+
+    NV212BGRA(1),
+    NV212RGBA(2),
+    RGBA2NV21(3),
+    NV122BGRA(5),
+    BGRA2RGBA(14),
+    RGBA2NV12(20),
+    NV122RGBA(21),
+    RGBA2BGRA(101),
+    NV212BGR(1001);
+
+    final int nativeInt;
+
+    ColorConvertType(int i) {
+        this.nativeInt = i;
+    }
+
+    public int getValue() {
+        return nativeInt;
+    }
+
+}
Index: frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/model/CvPixelFormat.java
===================================================================
--- frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/model/CvPixelFormat.java	(revision 0)
+++ frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/model/CvPixelFormat.java	(revision 2329)
@@ -0,0 +1,31 @@
+package com.sensetime.faceapi.model;
+
+public enum CvPixelFormat {
+
+    GRAY8(0),
+    YUV420P(1),
+    NV12(2),
+    NV21(3),
+    BGRA8888(4),
+    BGR888(5),
+    RGBA8888(6);
+
+    final int nativeInt;
+
+    private static CvPixelFormat sImageFormats[] = {
+            GRAY8, YUV420P, NV12, NV21, BGRA8888, BGR888, RGBA8888
+    };
+
+    CvPixelFormat(int ni) {
+        this.nativeInt = ni;
+    }
+
+    public int getValue() {
+        return nativeInt;
+    }
+
+    public static CvPixelFormat nativeToConfig(int ni) {
+        return sImageFormats[ni];
+    }
+
+}
Index: frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/model/FaceConfig.java
===================================================================
--- frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/model/FaceConfig.java	(revision 0)
+++ frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/model/FaceConfig.java	(revision 2329)
@@ -0,0 +1,71 @@
+package com.sensetime.faceapi.model;
+
+/**
+ * 创建 FaceTrack 和 FaceDetect 必要的一些配置
+ */
+public class FaceConfig {
+
+    /**
+     * 将输入图片 resize 到某个大小
+     */
+    public enum FaceImageResize {
+
+        DEFAULT_CONFIG(0x00000000),
+        RESIZE_320W(0x00000002),
+        RESIZE_640W(0x00000004),
+        RESIZE_1280W(0x00000008);
+
+        final int value;
+
+        FaceImageResize(int value) {
+            this.value = value;
+        }
+
+        public int getValue() {
+            return value;
+        }
+
+    }
+
+    /**
+     * 返回的人脸关键点数量
+     */
+    public enum FaceKeyPointCount {
+
+        POINT_COUNT_21(0x00000100),
+        POINT_COUNT_106(0x00000200);
+
+        final int value;
+
+        FaceKeyPointCount(int value) {
+            this.value = value;
+        }
+
+        public int getValue() {
+            return value;
+        }
+
+    }
+
+    /**
+     * Track 操作开启的线程数
+     */
+    public enum TrackThreadCount {
+
+        DEFAULT_CONFIG(0x00000000),
+        TWO_THREAD(0x00110000); // 开启双线程人脸跟踪，建议低配置环境开启此选项
+
+        final int value;
+
+        TrackThreadCount(int value) {
+            this.value = value;
+        }
+
+        public int getValue() {
+            return value;
+        }
+
+    }
+
+
+}
Index: frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/model/FaceAttrInfo.java
===================================================================
--- frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/model/FaceAttrInfo.java	(revision 0)
+++ frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/model/FaceAttrInfo.java	(revision 2329)
@@ -0,0 +1,30 @@
+package com.sensetime.faceapi.model;
+
+/**
+ * 属性检测返回的结果体
+ */
+public class FaceAttrInfo {
+
+	public int age;
+	public int sex; // 性别 Male 0, Female 1
+	public float sexScore;
+	public int attractive;
+	public boolean hasEyeGlass;
+	public float eyeGlassScore;
+	public boolean hasSunGlass;
+	public float sunGlassScore;
+	public boolean isSmile;
+	public float smileScore;
+	public boolean hasMask;
+	public float maskScore;
+	public int race;// 种族 Yellow 0, Black 1,White 2
+	public boolean isEyeOpen;
+	public float eyeOpenScore;
+	public boolean isMouthOpen;
+	public float mouthOpenScore;
+	public boolean hasBeard;
+	public float beardScore;
+	public int emotion;
+	public float emotionScore;
+
+}
Index: frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/model/ResultCode.java
===================================================================
--- frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/model/ResultCode.java	(revision 0)
+++ frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/model/ResultCode.java	(revision 2329)
@@ -0,0 +1,198 @@
+package com.sensetime.faceapi.model;
+
+public enum ResultCode {
+	
+	/**
+     * ok
+     */
+    OK(0),
+    
+    /**
+     * cause by invalid argument
+     */
+    E_INVALIDARG(-1),
+    
+    /**
+     * handle Error,may be cause by sdk out of date or model file incorrect
+     */
+    E_HANDLE(-2),
+    
+    /**
+     * cause by out of memory
+     */
+    E_OUTOFMEMORY(-3),
+    
+    /**
+     * cause by run in fail inside
+     */
+    E_FAIL(-4),
+    
+    /**
+     * cause define not found
+     */
+    E_DELNOTFOUND(-5),
+    
+    /**
+     * cause by invalid pixel format
+     */
+    
+    E_INVALID_PIXEL_FORMAT(-6),
+    
+    /**
+     * cause by file no found
+     */
+    E_FILE_NOT_FOUND(-7),
+    
+    /**
+     * cause by model format error
+     */
+    E_INVALID_FILE_FORMAT(-8),
+    
+    /**
+     * cause by model out of date
+     */
+    E_FILE_EXPIRE (-9),
+    
+    /**
+     * cause by invalid license
+     */
+    E_INVALID_AUTH (-13),
+    
+    /**
+     * cause by invalid appID or package name
+     */
+    E_INVALID_APPID(-14),
+    
+    /**
+     * cause by SDK out of data
+     */
+    E_AUTH_EXPIRE(-15),
+    
+    /**
+     * cause by UUID mismatch
+     */
+    E_UUID_MISMATCH(-16),
+    
+    /**
+     * cause by online auth connect fail
+     */
+    E_ONLINE_AUTH_CONNECT_FAIL (-17),
+    
+    /**
+     * cause by check online timeout
+     */
+    E_ONLINE_AUTH_TIMEOUT (-18),
+    
+    /**
+     * cause by check online fail
+     */
+    E_ONLINE_AUTH_INVALID (-19),
+    
+    /**
+     * cause by license not activiable
+     */
+    E_LICENSE_IS_NOT_ACTIVABLE (-20),
+    
+    /**
+     * cause by license active failed
+     */
+    E_ACTIVE_FAIL (-21),
+    
+    /**
+     * cause by invalid active code
+     */
+    E_ACTIVE_CODE_INVALID (-22),
+    
+    /**
+     * cause by unsupport function called
+     */
+    E_UNSUPPORTED (-1000);
+    
+    
+    private final int resultCode;
+
+    ResultCode(int resultCode) {
+        this.resultCode = resultCode;
+    }
+
+	public int getValue() {
+        return resultCode;
+    }
+    
+    public static String getDescription(int code){
+    	switch (code) {
+		case 0:
+			return DESCRIPTION_OK;
+		case -1:
+			return DESCRIPTION_E_INVALIDARG;
+		case -2:
+			return DESCRIPTION_E_HANDLE;
+		case -3:
+			return DESCRIPTION_E_OUTOFMEMORY;
+		case -4:
+			return DESCRIPTION_E_FAIL;
+		case -5:
+			return DESCRIPTION_E_DELNOTFOUND;
+		case -6:
+			return DESCRIPTION_E_INVALID_PIXEL_FORMAT;
+		case -7:
+			return DESCRIPTION_E_FILE_NOT_FOUND;
+		case -8:
+			return DESCRIPTION_E_INVALID_FILE_FORMAT;
+		case -9:
+			return DESCRIPTION_E_FILE_EXPIRE;
+		case -13:
+			return DESCRIPTION_E_INVALID_AUTH;
+		case -14:
+			return DESCRIPTION_E_INVALID_APPID;
+		case -15:
+			return DESCRIPTION_E_AUTH_EXPIRE;
+		case -16:
+			return DESCRIPTION_E_UUID_MISMATCH;
+		case -17:
+			return DESCRIPTION_E_ONLINE_AUTH_CONNECT_FAIL;
+		case -18:
+			return DESCRIPTION_E_ONLINE_AUTH_TIMEOUT;
+		case -19:
+			return DESCRIPTION_E_ONLINE_AUTH_INVALID;
+		case -20:
+			return DESCRIPTION_E_LICENSE_IS_NOT_ACTIVABLE;
+		case -21:
+			return DESCRIPTION_E_ACTIVE_FAIL;
+		case -22:
+			return DESCRIPTION_E_ACTIVE_CODE_INVALID;
+		case -1000:
+			return DESCRIPTION_E_UNSUPPORTED;
+		default:
+			break;
+		}
+    	return null;
+    }
+    
+    private static final String DESCRIPTION_OK = "OK"; 
+    private static final String DESCRIPTION_E_INVALIDARG = "invalid argument"; 
+    private static final String DESCRIPTION_E_HANDLE = "handle Error,may be cause by sdk out of date or model file incorrect"; 
+    private static final String DESCRIPTION_E_OUTOFMEMORY = "out of memory"; 
+    private static final String DESCRIPTION_E_FAIL = "run in fail inside"; 
+    
+    private static final String DESCRIPTION_E_DELNOTFOUND = "define not found"; 
+    private static final String DESCRIPTION_E_INVALID_PIXEL_FORMAT = "invalid pixel format"; 
+    private static final String DESCRIPTION_E_FILE_NOT_FOUND = "file no found"; 
+    private static final String DESCRIPTION_E_INVALID_FILE_FORMAT = "model format error"; 
+    private static final String DESCRIPTION_E_FILE_EXPIRE = "model out of date"; 
+    
+    private static final String DESCRIPTION_E_INVALID_AUTH = "invalid license"; 
+    private static final String DESCRIPTION_E_INVALID_APPID = "E_INVALID_APPID"; 
+    private static final String DESCRIPTION_E_AUTH_EXPIRE = "E_AUTH_EXPIRE"; 
+    private static final String DESCRIPTION_E_UUID_MISMATCH = "E_UUID_MISMATCH"; 
+    private static final String DESCRIPTION_E_ONLINE_AUTH_CONNECT_FAIL = "online auth connect fail"; 
+    
+    private static final String DESCRIPTION_E_ONLINE_AUTH_TIMEOUT = "check online timeout";
+    private static final String DESCRIPTION_E_ONLINE_AUTH_INVALID = "check online fail"; 
+    
+    private static final String DESCRIPTION_E_LICENSE_IS_NOT_ACTIVABLE = "invalid active code"; 
+    private static final String DESCRIPTION_E_ACTIVE_FAIL = "license active failed"; 
+    private static final String DESCRIPTION_E_ACTIVE_CODE_INVALID = "invalid active code"; 
+    private static final String DESCRIPTION_E_UNSUPPORTED = "unsupport function called"; 
+    
+}
\ No newline at end of file
Index: frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/utils/AccelerometerManager.java
===================================================================
--- frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/utils/AccelerometerManager.java	(revision 0)
+++ frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/utils/AccelerometerManager.java	(revision 2329)
@@ -0,0 +1,200 @@
+package com.sensetime.faceapi.utils;
+
+import android.content.Context;
+import android.hardware.Sensor;
+import android.hardware.SensorEvent;
+import android.hardware.SensorEventListener;
+import android.hardware.SensorManager;
+import android.util.Log;
+
+import com.sensetime.faceapi.model.FaceOrientation;
+
+public class AccelerometerManager {
+
+	public static final String TAG = "AccelerometerManager";
+	private static AccelerometerManager instance;
+	private SensorManager mSensorManager;
+	private AccelerometerSensorListener mAccListener;
+	private boolean mHasStarted = false;
+
+	private AccelerometerManager() {
+	}
+
+	public static AccelerometerManager getInstance() {
+		if (instance == null) {
+			instance = new AccelerometerManager();
+		}
+		return instance;
+	}
+
+	/**
+	 * 启动加速度传感器
+	 */
+	public static void start(Context context) {
+		AccelerometerManager.getInstance().registerListener(context);
+	}
+
+	/**
+	 * 停止加速度传感器
+	 */
+	public static void stop() {
+		AccelerometerManager.getInstance().unregisterListener();
+	}
+
+	/**
+	 * 根据前后摄像头，依靠重力感应器获取方向后得到 FaceOrientation {@link FaceOrientation}
+     */
+	public static FaceOrientation getFaceOrientation(boolean isFrontCamera) {
+		int dir = getDir(isFrontCamera);
+		return getFaceOrientation(dir);
+	}
+
+	/**
+	 * 根据重力感应器得到的方向映射得到相应的 FaceOrientation {@link FaceOrientation}
+     */
+	public static FaceOrientation getFaceOrientation(int dir) {
+		switch (dir) {
+			case 0:
+				return FaceOrientation.UP;
+			case 1:
+				return FaceOrientation.LEFT;
+			case 2:
+				return FaceOrientation.DOWN;
+			case 3:
+				return FaceOrientation.RIGHT;
+			default:
+				return FaceOrientation.UNKNOWN;
+		}
+	}
+
+	/**
+	 * 根据重力感应器方向获取到对应的角度(0,90,180,270)
+	 */
+	public static int getDegree(boolean isFrontCamera){
+		return getDir(isFrontCamera) * 90;
+	}
+
+	/**
+	 * 根据重力感应器方向获取到对应的角度(0,90,180,270)
+	 */
+	public static int getDegree() {
+		return getDir() * 90;
+	}
+
+	/**
+	 * 根据重力感应器方向获取到对应的方向(0,1,2,3)
+	 * @param isFrontCamera 是否为前置摄像头，由于前置摄像头画面是镜像的，所以得到的方向也要做相应的翻转
+	 */
+	public static int getDir(boolean isFrontCamera) {
+		int dir = AccelerometerManager.getInstance().getDirection(isFrontCamera);
+		return dir;
+	}
+
+	/**
+	 * 根据重力感应器方向获取到对应的方向(0,1,2,3)
+	 */
+	public static int getDir() {
+		return getDir(false);
+	}
+
+	// ------------------------------------------------------------------------------
+
+	/**
+	 * Use this method to get the direction of mobile phone
+	 * @param isFrontCamera : Input the current camera which is using is front or not
+	 * @return the mobile phone direction value
+	 */
+	private int getDirection(boolean isFrontCamera) {
+		if (mAccListener != null) {
+			int dir = mAccListener.dir;
+			// 当且仅当为前置摄像头且画面是上下方向(portrait、portrait-inverse)的颠倒
+			if (isFrontCamera && ((dir & 1) == 1)) {
+				dir = (dir ^ 2);
+			}
+			return dir;
+		}
+		return -1; // default value is -1
+	}
+	
+	/**
+	 * Use this method to start listening of the sensor
+	 */
+	private void registerListener(Context context) {
+		if (mHasStarted) {
+			return;
+		}
+		mHasStarted = true;
+		mSensorManager = (SensorManager) context.getApplicationContext().getSystemService(Context.SENSOR_SERVICE);
+		Sensor accelerometerSensor = mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER); // 获取加速度传感器
+		if (accelerometerSensor != null) { // 加速度传感器存在时才执行
+			mAccListener = new AccelerometerSensorListener();
+			mSensorManager.registerListener(mAccListener, accelerometerSensor, SensorManager.SENSOR_DELAY_NORMAL); // 注册事件监听
+		}
+	}
+
+	/**
+	 * Use this method to stop listening of the sensor
+	 */
+	private void unregisterListener() {
+		if (!mHasStarted || mSensorManager == null) {
+			return;
+		}
+		mHasStarted = false;
+		mSensorManager.unregisterListener(mAccListener);
+	}
+
+	private class AccelerometerSensorListener implements SensorEventListener {
+		
+		/**
+		 * landscape：
+		 *  ___________________
+		 * | +--------------+  |
+		 * | |              |  |
+		 * | |              |  |
+		 * | |              | O|
+		 * | |              |  |
+		 * | |______________|  |
+		 * ---------------------
+		 * portrait：
+		 *  ___________
+		 * |           |
+		 * |+---------+|
+		 * ||         ||
+		 * ||         ||
+		 * ||         ||
+		 * ||         ||
+		 * ||         ||
+		 * |+---------+|
+		 * |_____O_____|
+		 */
+		private int dir = -1;
+
+		public void onAccuracyChanged(Sensor sensor, int accuracy) {
+		}
+
+		public void onSensorChanged(SensorEvent event) {
+			if (event.sensor.getType() == Sensor.TYPE_ACCELEROMETER) {
+				// All values are in SI units (m/s^2)
+				float x = event.values[0]; // Acceleration minus Gx on the x-axis
+				float y = event.values[1]; // Acceleration minus Gy on the y-axis
+				Log.d(TAG, "x: " + x + ", y: " + y);
+				if (Math.abs(x) > 0.5f || Math.abs(y) > 0.5f) {
+					if (Math.abs(x) > Math.abs(y)) {
+						if (x > 0) {
+							dir = 0; // landscape
+						} else {
+							dir = 2; // landscape-inverse
+						}
+					} else {
+						if (y > 0) {
+							dir = 1; // portrait
+						} else {
+							dir = 3; // portrait-inverse
+						}
+					}
+				}
+			}
+		}
+	}
+	
+}
Index: frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/utils/BrightnessUtil.java
===================================================================
--- frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/utils/BrightnessUtil.java	(revision 0)
+++ frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/utils/BrightnessUtil.java	(revision 2329)
@@ -0,0 +1,36 @@
+package com.sensetime.faceapi.utils;
+
+import android.graphics.Rect;
+import android.util.Log;
+
+import com.sensetime.faceapi.FaceLibrary;
+import com.sensetime.faceapi.model.CvPixelFormat;
+import com.sensetime.faceapi.model.FaceInfo;
+
+public class BrightnessUtil {
+	private static final String TAG = "AverageBrightnessUtil";
+	public static float averageBrightness(byte[] imageData,CvPixelFormat format,int width,int height,FaceInfo faceInfo){
+		if(faceInfo == null){
+			Log.w(TAG, "averageBrightness faceInfo is NULL !!!");
+			return 0;
+		}
+		return averageBrightness(imageData,format,width, height, faceInfo.faceRect);
+	}
+
+	public static float averageBrightness(byte[] imageData,CvPixelFormat format,int width,int height,Rect rect){
+		if(rect == null){
+			Log.w(TAG, "averageBrightness rect is NULL !!!");
+			return 0;
+		}
+		return averageBrightness(imageData,format, width, height,rect.left,rect.top,rect.width(),rect.height());
+	}
+
+	public static float averageBrightness(byte[] imageData,CvPixelFormat format,int width,int height,int x,int y,int areaW,int areaH){
+		if(x > width  || y > height || areaW <= 0 || areaH <= 0){
+			Log.w(TAG, "averageBrightness area is not in image frame imageFrame : " + width + "x" + height + " area[x,y,w,h] : "+ x + ","+ y+","+areaW+","+areaH );
+			return 0;
+		}
+		return FaceLibrary.averageBrightness(imageData, format, width, height, x, y, areaW, areaH);
+	}
+	
+}
Index: frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/utils/FaceDrawUtil.java
===================================================================
--- frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/utils/FaceDrawUtil.java	(revision 0)
+++ frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/utils/FaceDrawUtil.java	(revision 2329)
@@ -0,0 +1,79 @@
+package com.sensetime.faceapi.utils;
+
+import com.sensetime.faceapi.model.FaceInfo;
+
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.graphics.PointF;
+import android.graphics.Rect;
+import android.util.Log;
+
+/**
+ * 绘制人脸时常用的一些方法
+ */
+public class FaceDrawUtil {
+
+    public static final boolean DEBUG = true;
+    public static final String TAG = "FaceDrawUtil";
+
+    /**
+     * Use this method to draw faces rect and points
+     *
+     * @param canvas    The canvas where draw
+     * @param faceInfos The face info array contain rect and points
+     * @param paint     The paint used to draw
+     */
+    public static void drawFaces(Canvas canvas, FaceInfo[] faceInfos, Paint paint) {
+        if (canvas == null || faceInfos == null) {
+            Log.w(TAG, "drawFaces canvas or faces is null !");
+            return;
+        }
+        for (FaceInfo faceInfo : faceInfos) {
+            drawFace(canvas, faceInfo, paint);
+        }
+    }
+
+    /**
+     * Use this method to draw one face rect and points
+     *
+     * @param canvas   The canvas where draw
+     * @param faceInfo The one face info contain rect and points
+     * @param paint    The paint used to draw
+     */
+    public static void drawFace(Canvas canvas, FaceInfo faceInfo, Paint paint) {
+        if (canvas == null || faceInfo == null) {
+            Log.w(TAG, "drawFace canvas or faces is null !");
+            return;
+        }
+        drawFaceRect(canvas, faceInfo.faceRect, paint);
+        drawPoints(canvas, faceInfo.facePoints, paint);
+    }
+
+    /**
+     * Use this method to draw face rect
+     *
+     * @param canvas The canvas where draw
+     * @param rect   The face rect
+     * @param paint  The paint used to draw
+     */
+    public static void drawFaceRect(Canvas canvas, Rect rect, Paint paint) {
+        if (canvas == null) return;
+        canvas.drawRect(rect, paint);
+    }
+
+    /**
+     * Use this method to draw face key points
+     *
+     * @param canvas The canvas where draw
+     * @param points The face points
+     * @param paint  The paint used to draw
+     */
+    public static void drawPoints(Canvas canvas, PointF[] points, Paint paint) {
+        if (canvas == null) return;
+        for (PointF point : points) {
+            PointF p = point;
+            canvas.drawPoint(p.x, p.y, paint);
+        }
+    }
+
+}
Index: frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/utils/FaceRotationUtil.java
===================================================================
--- frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/utils/FaceRotationUtil.java	(revision 0)
+++ frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/utils/FaceRotationUtil.java	(revision 2329)
@@ -0,0 +1,165 @@
+package com.sensetime.faceapi.utils;
+
+import com.sensetime.faceapi.model.FaceInfo;
+
+import android.graphics.PointF;
+import android.graphics.Rect;
+
+/**
+ * 旋转FaceInfo的工具类, 包括旋转Face本身以及Face矩形框等
+ **/
+public class FaceRotationUtil {
+
+    /**
+     * rotate faces
+     *
+     * @param faceInfos     used to rotate
+     * @param width         The width of image
+     * @param height        The height of image
+     * @param isFrontCamera The isFrontCamera whether the image come from front camera
+     * @param degrees       The degrees of camera display
+     * @see #rotateFaceInfo(FaceInfo, int, int, boolean, int)
+     */
+    public static void rotateFaceInfos(FaceInfo[] faceInfos, int width, int height, boolean isFrontCamera, int
+            degrees) {
+        if (faceInfos == null || faceInfos.length == 0) {
+            return;
+        }
+        for (FaceInfo face : faceInfos) {
+            rotateFaceInfo(face, width, height, isFrontCamera, degrees);
+        }
+    }
+
+    /**
+     * rotate one face
+     *
+     * @param faceInfo      used to rotate
+     * @param width         The width of image
+     * @param height        The height of image
+     * @param isFrontCamera The isFrontCamera whether the image come from front camera
+     * @param degrees       The degrees of camera display
+     */
+    public static void rotateFaceInfo(FaceInfo faceInfo, int width, int height, boolean isFrontCamera, int degrees) {
+        if (faceInfo == null) {
+            return;
+        }
+        rotateFaceRect(faceInfo.faceRect, width, height, isFrontCamera, degrees);
+        PointF[] points = faceInfo.facePoints;
+        for (int i = 0; i < points.length; i++) {
+            rotatePoints(points[i], width, height, isFrontCamera, degrees);
+        }
+    }
+
+    /**
+     * rotate face rect
+     *
+     * @param rect          used to rotate
+     * @param width         The width of image
+     * @param height        The height of image
+     * @param isFrontCamera The isFrontCamera whether the image come from front camera
+     * @param degrees       The degrees of camera display
+     */
+    public static Rect rotateFaceRect(Rect rect, int width, int height, boolean isFrontCamera, int degrees) {
+        int tmp;
+        switch (degrees) {
+            case 0: // landscape
+                // 前置摄像头时左右翻转
+                if (isFrontCamera) {
+                    rect.left = width - rect.left;
+                    rect.right = width - rect.right;
+                }
+                break;
+            case 90: // portrait
+                // 顺时针旋转90°
+                tmp = rect.left;
+                rect.left = height - rect.bottom;
+                rect.bottom = rect.right;
+                rect.right = height - rect.top;
+                rect.top = tmp;
+                // 前置摄像头时上下翻转
+                if (isFrontCamera) {
+                    tmp = rect.top;
+                    rect.top = width - rect.bottom;
+                    rect.bottom = width - tmp;
+                }
+                break;
+            case 180:
+                // 上下翻转
+                rect.top = height - rect.top;
+                rect.bottom = height - rect.bottom;
+                // 后置摄像头时再左右翻转
+                if (!isFrontCamera) {
+                    rect.left = width - rect.left;
+                    rect.right = width - rect.right;
+                }
+                break;
+            case 270:
+                // 顺时针旋转90°
+                tmp = rect.left;
+                rect.left = height - rect.bottom;
+                rect.bottom = rect.right;
+                rect.right = height - rect.top;
+                rect.top = tmp;
+                // 左右翻转
+                tmp = rect.left;
+                rect.left = height - rect.right;
+                rect.right = height - tmp;
+                // 后置摄像头时再上下翻转
+                if (!isFrontCamera) {
+                    tmp = rect.top;
+                    rect.top = width - rect.bottom;
+                    rect.bottom = width - tmp;
+                }
+                break;
+            default:
+                break;
+        }
+        return rect;
+    }
+
+    /**
+     * rotate face key points
+     *
+     * @param point         used to rotate
+     * @param width         The width of image
+     * @param height        The height of image
+     * @param isFrontCamera The isFrontCamera whether the image come from front camera
+     * @param degrees       The degrees of camera display
+     */
+    public static PointF rotatePoints(PointF point, int width, int height, boolean isFrontCamera, int degrees) {
+        float tmp;
+        switch (degrees) {
+            case 0: // landscape
+                if (isFrontCamera) {
+                    point.x = width - point.x;
+                }
+                break;
+            case 90: // portrait
+                tmp = point.x;
+                point.x = height - point.y;
+                point.y = tmp;
+                if (isFrontCamera) {
+                    point.y = width - point.y;
+                }
+                break;
+            case 180:
+                point.y = height - point.y;
+                if (!isFrontCamera) {
+                    point.x = width - point.x;
+                }
+                break;
+            case 270:
+                tmp = point.y;
+                point.y = point.x;
+                point.x = tmp;
+                if (!isFrontCamera) {
+                    point.y = width - point.y;
+                }
+                break;
+            default:
+                break;
+        }
+        return point;
+    }
+
+}
Index: frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/utils/ColorConvertUtil.java
===================================================================
--- frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/utils/ColorConvertUtil.java	(revision 0)
+++ frameworks/base/packages/Keyguard/src/com/sensetime/faceapi/utils/ColorConvertUtil.java	(revision 2329)
@@ -0,0 +1,90 @@
+package com.sensetime.faceapi.utils;
+
+import java.nio.ByteBuffer;
+
+import android.graphics.Bitmap;
+import android.graphics.Bitmap.Config;
+import android.util.Log;
+
+import com.sensetime.faceapi.FaceLibrary;
+
+public class ColorConvertUtil {
+
+    public static final String TAG = "ColorConvertUtil";
+
+    /**
+     * 根据 bitmap 获取 bgr 格式的数据
+     */
+    public static void getBGRFromBitmap(Bitmap bitmap, byte[] bgr) {
+        if (bitmap == null || bitmap.isRecycled() || bgr == null) {
+            Log.e(TAG, "bitmap or bgr is null !!!");
+            return;
+        }
+        if (bitmap.getConfig() != Config.ARGB_8888) {
+            bitmap = bitmap.copy(Config.ARGB_8888, false);
+        }
+        FaceLibrary.getBGRFromBitmap(bitmap, bgr);
+    }
+
+    /**
+     * 从nv21的数据中裁剪出一块指定区域大小的Bitmap图片出来
+     *
+     * @param nv21        数据源
+     * @param imageWidth  原始图片宽度
+     * @param imageHeight 原始图片高度
+     * @param startX      裁剪区域 x 轴的起始位置
+     * @param startY      裁剪区域 y 轴的起始位置
+     * @param cropWidth   裁剪宽度
+     * @param cropHeight  裁剪高度
+     * @return 裁剪后的 bitmap 图片
+     */
+    public static Bitmap cropNv21ToBitmap(byte[] nv21, int imageWidth, int imageHeight, int startX, int startY, int
+            cropWidth, int cropHeight) {
+        if (nv21 == null || startX < 0 || startY < 0 || cropWidth < 0 || cropHeight < 0 || imageWidth < (startX +
+                cropWidth) || imageHeight < (startY + cropHeight)) {
+            Log.e(TAG, "cropNv21ToBitmap failed: illegal para !");
+            return null;
+        }
+        byte[] argb = new byte[cropWidth * cropHeight * 4];
+        ColorConvertUtil.cropNv21DataToARGB(nv21, imageWidth, imageHeight, startX, startY, cropWidth,
+                cropHeight, argb);
+        Bitmap bitmap = byteArrayToBitmap(argb, cropWidth, cropHeight);
+        return bitmap;
+    }
+
+    /**
+     * 从nv21的数据中裁剪出一块指定区域大小的 argb 数据
+     *
+     * @param nv21   数据源
+     * @param width  原始图片宽度
+     * @param height 原始图片高度
+     * @param x      裁剪区域 x 轴的起始位置
+     * @param y      裁剪区域 y 轴的起始位置
+     * @param w      裁剪宽度
+     * @param h      裁剪高度
+     * @param argb   输出的 argb 数据
+     */
+    public static void cropNv21DataToARGB(byte[] nv21, int width, int height, int x, int y, int w, int h, byte[] argb) {
+        if (nv21 == null || argb == null) {
+            Log.e(TAG, "cropNv21DataToARGB failed: nv21 or argb is null ");
+            return;
+        }
+        FaceLibrary.cropNv21Data(nv21, width, height, x, y, w, h, argb);
+    }
+
+    /**
+     * 将 argb 的 byte[] 数据转换成 bitmap
+     *
+     * @param argb   输入的 argb 数据
+     * @param width  图片宽度
+     * @param height 图片高度
+     * @return 得到的 bitmap
+     */
+    public static Bitmap byteArrayToBitmap(byte[] argb, int width, int height) {
+        ByteBuffer buffer = ByteBuffer.wrap(argb);
+        Bitmap bitmap = Bitmap.createBitmap(width, height, Config.ARGB_8888);
+        bitmap.copyPixelsFromBuffer(buffer);
+        return bitmap;
+    }
+
+}
Index: frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/widget/CameraView.java
===================================================================
--- frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/widget/CameraView.java	(revision 0)
+++ frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/widget/CameraView.java	(revision 2329)
@@ -0,0 +1,578 @@
+package com.sensetime.faceunlock.widget;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.res.TypedArray;
+import android.graphics.ImageFormat;
+import android.graphics.Matrix;
+import android.graphics.Rect;
+import android.hardware.Camera;
+import android.hardware.Camera.Parameters;
+import android.hardware.Camera.PreviewCallback;
+import android.hardware.Camera.Size;
+import android.util.AttributeSet;
+import android.util.DisplayMetrics;
+import android.util.Log;
+import android.view.MotionEvent;
+import android.view.Surface;
+import android.view.SurfaceHolder;
+import android.view.SurfaceView;
+import android.view.View;
+import android.view.WindowManager;
+import android.widget.Toast;
+
+import com.android.keyguard.R;
+
+import java.util.ArrayList;
+import java.util.List;
+import android.content.Intent;
+
+/**
+ * 相机View
+ */
+public class CameraView extends SurfaceView implements Camera.AutoFocusCallback {
+
+    private final static String TAG = "CameraView";
+    private final static boolean DEBUG = true;
+    private final static int SCALE_TYPE_4_3 = 1; // 自定义属性中4:3比例的枚举对应的值为1
+    private final static int SCALE_TYPE_16_9 = 2; // 自定义属性中16:9比例的枚举对应的值为2
+    private final static String CAMERA_STOP_FACE_SERVICE = "camera_stop_face_service"; //add by yukai,2017/7/29 
+
+    private Camera mCamera; // 相机对象
+    private Matrix matrix = new Matrix(); // 记录屏幕拉伸的矩阵，用于绘制人脸框使用
+    private PreviewCallback mPreviewCallback; // 相机预览的数据回调
+    private Size mPreviewSize; // 当前预览分辨率大小
+
+    private float mPreviewScale; // 预览显示的比例(4:3/16:9)
+    private float previewScaleX;
+    private float previewScaleY;
+    private int mResolution; // 分辨率大小，以预览高度为标准(320, 480, 720, 1080...)
+    private int mCameraFacing; // 摄像头方向
+    private boolean mIsOpened;
+
+    public int mPreviewWidth; // 预览宽度
+    public int mPreviewHeight; // 预览高度
+    public int mDegrees; // 预览显示的角度
+    public byte[] mBuffer; // 预览缓冲数据，使用可以让底层减少重复创建byte[]，起到重用的作用
+
+    public CameraView(Context context) {
+        super(context);
+        init(context, null);
+    }
+
+    public CameraView(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        init(context, attrs);
+    }
+
+    private void init(Context context, AttributeSet attrs) {
+        // 设置透明状态栏和透明导航栏，需要 API >= 19
+//        ((Activity) context).getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);
+//        ((Activity) context).getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION);
+        // 设置屏幕常亮
+        setKeepScreenOn(true);
+        // 自定义属性
+        TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.CameraView);
+        mCameraFacing = a.getInt(R.styleable.CameraView_cameraFacing, Camera.CameraInfo.CAMERA_FACING_FRONT);
+        mResolution = a.getInt(R.styleable.CameraView_resolution, 480);
+        int scaleType = a.getInt(R.styleable.CameraView_scale, 0);
+        mPreviewScale = getPreviewScale(scaleType);
+        a.recycle();
+        // 设置SurfaceHolder的回调
+        getHolder().addCallback(callback);
+    }
+
+    private SurfaceHolder.Callback callback = new SurfaceHolder.Callback() {
+        @Override
+        public void surfaceCreated(SurfaceHolder holder) {
+            if (DEBUG) {
+                Log.v(TAG, "SurfaceHolder Created");
+            }
+            try {
+                openCamera(mCameraFacing); // 1.打开相机
+                initParameters(); // 2.设置相机参数
+                mCamera.setPreviewDisplay(getHolder()); // 3.设置预览显示的SurFace
+            } catch (Exception e) {
+                e.printStackTrace();
+		Toast.makeText(getContext(), "打开人脸识别失败, 请检查相机或者权限是否被占用", Toast.LENGTH_SHORT).show();
+		Intent intent = new Intent();
+		intent.setAction(CAMERA_STOP_FACE_SERVICE);
+		getContext().sendBroadcast(intent);
+            }
+        }
+        @Override
+        public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {
+            if (DEBUG) {
+                Log.v(TAG, "SurfaceHolder Changed. width : " + width + ", height : " + height);
+            }
+            updateCamera(); // 4.更新相机属性，每次更换分辨率需要更新的操作，包括设置预览大小和方向，开始预览
+            if (width > height) {
+                previewScaleX = width / (float) mPreviewWidth;
+                previewScaleY = height / (float) mPreviewHeight;
+            } else {
+                previewScaleX = width / (float) mPreviewHeight;
+                previewScaleY = height / (float) mPreviewWidth;
+            }
+            matrix.setScale(previewScaleX, previewScaleY);
+        }
+
+        @Override
+        public void surfaceDestroyed(SurfaceHolder holder) {
+            if (DEBUG) {
+                Log.v(TAG, "SurfaceHolder Destroyed");
+            }
+			holder.removeCallback(this);
+            releaseCamera(); // 5.释放相机资源
+        }
+    };
+
+    private void openCamera(int mCameraFacing) throws RuntimeException {
+        releaseCamera();
+        Camera.CameraInfo info = new Camera.CameraInfo();
+        for (int i = 0; i < Camera.getNumberOfCameras(); i++) {
+            Camera.getCameraInfo(i, info);
+            if (info.facing == mCameraFacing) {
+                mCamera = Camera.open(i); // 打开对应的摄像头，获取到camera实例
+                mIsOpened = true;
+                return;
+            }
+        }
+    }
+
+    private void initParameters() {
+        if (mCamera == null) {
+            return;
+        }
+        try {
+            Parameters parameters = mCamera.getParameters();
+            // 如果摄像头不支持这些参数都会出错的，所以设置的时候一定要判断是否支持
+            List<String> supportedFlashModes = parameters.getSupportedFlashModes();
+            if (supportedFlashModes != null && supportedFlashModes.contains(Parameters.FLASH_MODE_OFF)) {
+                parameters.setFlashMode(Parameters.FLASH_MODE_OFF); // 设置闪光模式
+            }
+            List<String> supportedFocusModes = parameters.getSupportedFocusModes();
+            if (supportedFocusModes != null && supportedFocusModes.contains(Parameters.FOCUS_MODE_AUTO)) {
+                parameters.setFocusMode(Parameters.FOCUS_MODE_AUTO); // 设置聚焦模式
+            }
+            parameters.setPreviewFormat(ImageFormat.NV21); // 设置预览图片格式
+            parameters.setPictureFormat(ImageFormat.JPEG); // 设置拍照图片格式
+            parameters.setExposureCompensation(0);
+            mCamera.setParameters(parameters); // 将设置好的parameters添加到相机里
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+
+    /**
+     * 每次启动摄像头、切换分辨率都需要进行的操作，所以抽离出来作为一个单独的方法
+     */
+    private void updateCamera() {
+        if (mCamera == null) {
+            return;
+        }
+        mCamera.stopPreview(); // 1.先停止预览
+        setCameraDisplayOrientation(getContext(), mCamera); // 2.设置相机的显示方向
+        initPreviewSize(); // 3.初始化相机预览尺寸
+        initPreviewBuffer(); // 4.初始化相机预览的缓存
+        mCamera.startPreview(); // 5.开始预览
+    }
+
+    /**
+     * 初始化预览尺寸大小并设置，根据拉伸比例、分辨率来计算
+     */
+    private void initPreviewSize() {
+        if (mCamera == null) {
+            return;
+        }
+        Parameters parameters = mCamera.getParameters();
+        mPreviewSize = getFitPreviewSize(parameters); // 获取适合的预览大小
+        mPreviewWidth = mPreviewSize.width;
+        mPreviewHeight = mPreviewSize.height;
+        parameters.setPreviewSize(mPreviewWidth, mPreviewHeight); // 设置预览图片大小
+        if (DEBUG) {
+            Log.d(TAG, "initPreviewSize() mPreviewWidth: " + mPreviewWidth + ", mPreviewHeight: " + mPreviewHeight);
+        }
+        mCamera.setParameters(parameters);
+    }
+
+    /**
+     * 具体计算最佳分辨率大小的方法
+     */
+    private Size getFitPreviewSize(Parameters parameters) {
+        List<Size> previewSizes = parameters.getSupportedPreviewSizes(); // 获取支持的预览尺寸大小
+        int minDelta = Integer.MAX_VALUE; // 最小的差值，初始值应该设置大点保证之后的计算中会被重置
+        int index = 0; // 最小的差值对应的索引坐标
+        for (int i = 0; i < previewSizes.size(); i++) {
+            Size previewSize = previewSizes.get(i);
+            if (DEBUG) {
+                Log.d(TAG, "SupportedPreviewSize, width: " + previewSize.width + ", height: " + previewSize.height);
+            }
+            // 找到一个与设置的分辨率差值最小的相机支持的分辨率大小
+            if (previewSize.width * mPreviewScale == previewSize.height) {
+                int delta = Math.abs(mResolution - previewSize.height);
+                if (delta == 0) {
+                    return previewSize;
+                }
+                if (minDelta > delta) {
+                    minDelta = delta;
+                    index = i;
+                }
+            }
+        }
+        return previewSizes.get(index); // 默认返回与设置的分辨率最接近的预览尺寸
+    }
+
+    private void initPreviewBuffer() {
+        if (mCamera == null) {
+            return;
+        }
+        mBuffer = new byte[mPreviewWidth * mPreviewHeight * 3 / 2]; // 初始化预览缓冲数据的大小
+        if (DEBUG) {
+            Log.d(TAG, "initPreviewBuffer() mBuffer.length: " + mBuffer.length);
+        }
+        mCamera.addCallbackBuffer(mBuffer); // 将此预览缓冲数据添加到相机预览缓冲数据队列里
+        mCamera.setPreviewCallbackWithBuffer(mPreviewCallback); // 设置预览的回调
+		
+    }
+
+    /**
+     * 设置相机显示的方向，必须设置，否则显示的图像方向会错误
+     */
+    private void setCameraDisplayOrientation(Context context, Camera camera) {
+        int rotation = ((WindowManager) (context.getApplicationContext().getSystemService(Context.WINDOW_SERVICE)))
+                .getDefaultDisplay().getRotation();
+        switch (rotation) {
+            case Surface.ROTATION_0: // portrait
+                mDegrees = 90;
+                break;
+            case Surface.ROTATION_90: // landscape
+                mDegrees = 0;
+                break;
+            case Surface.ROTATION_180: // portrait-reverse
+                mDegrees = 270;
+                break;
+            case Surface.ROTATION_270: // landscape-reverse
+                mDegrees = 180;
+                break;
+            default:
+                mDegrees = 90; // 大部分使用场景都是portrait，默认使用portrait的显示方向
+                break;
+        }
+        camera.setDisplayOrientation(mDegrees);
+    }
+
+    protected void setExposure(int value) {
+        Parameters parameters = mCamera.getParameters();
+        if (value == parameters.getExposureCompensation()) {
+            return;
+        }
+        Log.d(TAG, "exposure value : " + value);
+        parameters.setExposureCompensation(value);
+        mCamera.setParameters(parameters);
+    }
+
+    /**
+     * 释放相机资源
+     */
+    public void releaseCamera() {
+        if (null != mCamera) {
+            if (DEBUG) {
+                Log.v(TAG, "releaseCamera()");
+            }
+            mCamera.setPreviewCallbackWithBuffer(null);
+            mCamera.stopPreview();
+            mCamera.release();
+            mCamera = null;
+            mIsOpened = false;
+			if(mBuffer != null){
+				mBuffer = null;
+			}
+        }
+    }
+
+    /**
+     * 根据自定义属性的模式（4:3模式,16:9模式,auto模式）来获取相机的显示比例
+     */
+    private float getPreviewScale(int type) {
+        if (type == SCALE_TYPE_4_3) { // 4:3模式
+            return 0.75f;
+        }
+        if (type == SCALE_TYPE_16_9) { // 16:9模式
+            return 0.5625f;
+        }
+        return getScreenScale(); // auto模式
+    }
+
+    /**
+     * 获取设备屏幕的拉伸比例，目前安卓的设备屏幕比例只有4：3和16：9两种
+     */
+    private float getScreenScale() {
+        WindowManager wm = (WindowManager) getContext().getSystemService(Context.WINDOW_SERVICE);
+        DisplayMetrics displayMetrics = new DisplayMetrics();
+        wm.getDefaultDisplay().getMetrics(displayMetrics);
+        float width = displayMetrics.widthPixels;
+        float height = displayMetrics.heightPixels;
+        float scale;
+        if (width > height) {
+            scale = height / width;
+        } else {
+            scale = width / height;
+        }
+        if (DEBUG) {
+            Log.d(TAG, "displayMetrics.widthPixels : " + width);
+            Log.d(TAG, "displayMetrics.heightPixels : " + height);
+            Log.d(TAG, "scale : " + scale);
+        }
+        return Math.abs(scale - 0.75f) > Math.abs(scale - 0.5625f) ? 0.5625f : 0.75f; // 0.75(4:3) 或者 0.5625(16:9)
+    }
+
+    /**
+     * 以点击的坐标点（基于CameraView控件大小的坐标系）为中心进行聚焦
+     */
+    private void focusOnPoint(int x, int y) {
+        if (DEBUG) {
+            Log.d(TAG, "touch point (" + x + ", " + y + ")");
+        }
+        if (mCamera == null) {
+            return;
+        }
+        Parameters parameters = mCamera.getParameters();
+        // 1.先要判断是否支持设置聚焦区域
+        if (parameters.getMaxNumFocusAreas() > 0) {
+            int width = getWidth();
+            int height = getHeight();
+            // 2.以触摸点为中心点，view窄边的1/4为聚焦区域的默认边长
+            int length = Math.min(width, height) >> 3; // 1/8的长度
+            int left = x - length;
+            int top = y - length;
+            int right = x + length;
+            int bottom = y + length;
+            // 3.映射，因为相机聚焦的区域是一个(-1000,-1000)到(1000,1000)的坐标区域
+            left = left * 2000 / width - 1000;
+            top = top * 2000 / height - 1000;
+            right = right * 2000 / width - 1000;
+            bottom = bottom * 2000 / height - 1000;
+            // 4.判断上述矩形区域是否超过边界，若超过则设置为临界值
+            left = left < -1000 ? -1000 : left;
+            top = top < -1000 ? -1000 : top;
+            right = right > 1000 ? 1000 : right;
+            bottom = bottom > 1000 ? 1000 : bottom;
+            if (DEBUG) {
+                Log.d(TAG, "focus area (" + left + ", " + top + ", " + right + ", " + bottom + ")");
+            }
+            ArrayList<Camera.Area> areas = new ArrayList<Camera.Area>();
+            areas.add(new Camera.Area(new Rect(left, top, right, bottom), 600));
+            parameters.setFocusAreas(areas);
+        }
+        try {
+            mCamera.cancelAutoFocus(); // 先要取消掉进程中所有的聚焦功能
+            mCamera.setParameters(parameters);
+            mCamera.autoFocus(this); // 调用聚焦
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+
+    public void setPreviewCallback(PreviewCallback previewCallback) {
+        mPreviewCallback = previewCallback;
+    }
+
+    /**
+     * 每次预览的回调中，需要调用这个方法才可以起到重用mBuffer
+     */
+    public void addCallbackBuffer() {
+        if (mCamera != null) {
+            mCamera.addCallbackBuffer(mBuffer);
+        }
+    }
+
+    /**
+     * 切换前后摄像头
+     */
+    public void switchCamera() {
+        mCameraFacing ^= 1; // 先改变摄像头朝向
+        mIsOpened = false;
+        restartCamera();
+    }
+
+    public void restartCamera() {
+        if (mIsOpened) {
+            return;
+        }
+        Log.w(TAG, "restartCamera");
+        try {
+            openCamera(mCameraFacing); // 重新打开对应的摄像头
+            initParameters(); // 重新初始化参数
+            mCamera.setPreviewDisplay(getHolder());
+            updateCamera();
+        } catch (Exception e) {
+            e.printStackTrace();
+	    Toast.makeText(getContext(), "打开人脸识别失败, 请检查相机或者权限是否被占用", Toast.LENGTH_SHORT).show();
+	    Intent intent = new Intent();
+	    intent.setAction(CAMERA_STOP_FACE_SERVICE);
+	    getContext().sendBroadcast(intent);
+        }
+    }
+    /**
+     * 切换分辨率
+     */
+    public void resetResolution(Size size) {
+        float scale = size.height * 1.0f / size.width;
+        if (mPreviewScale == scale && mResolution == size.height) {
+            return; // 比例分辨率均为改变，直接返回
+        }
+        mResolution = size.height; // 重置分辨率大小
+        if (mPreviewScale == scale) {
+            // 比例未改变，只需要重新更新预览分辨率即可
+            updateCamera();
+            resetMatrix();
+        } else {
+            // 比例改变，因为View的大小将要变化了，需要重新布局
+            mPreviewScale = scale;
+            requestLayout();
+        }
+    }
+    /**
+     * 比例未改变时，surfaceView的大小并没有改变，只是相机的预览分辨率改变了，不会调用到surfaceChanged()方法，所以就需要手动重置matrix
+     */
+    private void resetMatrix() {
+        int width = getWidth();
+        int height = getHeight();
+        if (DEBUG) {
+            Log.d(TAG, "resetMatrix() width: " + width + ", height: " + height);
+        }
+        if (width > height) {
+            previewScaleX = width / (float) mPreviewWidth;
+            previewScaleY = height / (float) mPreviewHeight;
+        } else {
+            previewScaleX = width / (float) mPreviewHeight;
+            previewScaleY = height / (float) mPreviewWidth;
+        }
+        matrix.setScale(previewScaleX, previewScaleY);
+    }
+
+    public Camera getCamera() {
+        return mCamera;
+    }
+
+    public List<Size> getSupportPreviewSize() {
+        if (mCamera == null) {
+            return null;
+        }
+        return mCamera.getParameters().getSupportedPreviewSizes();
+    }
+
+    public Matrix getMatrix() {
+        return matrix;
+    }
+
+    public Size getPreviewSize() {
+        return mPreviewSize;
+    }
+
+    public boolean isFrontCamera() {
+        return mCameraFacing == Camera.CameraInfo.CAMERA_FACING_FRONT;
+    }
+
+    public void startPreview() {
+        if (mCamera != null) {
+            if (DEBUG) {
+                Log.d(TAG, "startPreview()");
+            }
+            mCamera.setPreviewCallbackWithBuffer(mPreviewCallback);
+            mCamera.startPreview();
+        }
+    }
+
+    public void stopPreview() {
+        if (mCamera != null) {
+            if (DEBUG) {
+                Log.d(TAG, "stopPreview()");
+            }
+            mCamera.stopPreview();
+        }
+    }
+
+    public float getPreviewScaleX() {
+        return previewScaleX;
+    }
+
+    public float getPreviewScaleY() {
+        return previewScaleY;
+    }
+
+    /**
+     * 设置长按可切换前后摄像头
+     */
+    public void setLongClickSwitchCamera() {
+        setOnLongClickListener(new OnLongClickListener() {
+            @Override
+            public boolean onLongClick(View v) {
+                switchCamera();
+                return true;
+            }
+        });
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+		//super.onMeasure(widthMeasureSpec, heightMeasureSpec);
+        int originalWidth = MeasureSpec.getSize(widthMeasureSpec);
+        int originalHeight = MeasureSpec.getSize(heightMeasureSpec);
+        float scale; // 宽高比，用 较小数/较大数
+        int finalWidth, finalHeight; // 根据预览的比例去重新计算和设置View的宽高
+        if (originalWidth < originalHeight) {
+            scale = originalWidth * 1.0f / originalHeight;
+            if (scale == mPreviewScale) { // 比例一样则不改变
+                finalWidth = originalWidth;
+                finalHeight = originalHeight;
+            } else {
+                if (mPreviewScale == 0.75f) { // 预览比例4:3,压缩高度
+                    finalWidth = originalWidth;
+                    finalHeight = finalWidth * 4 / 3;
+                } else { // 预览比例16:9,压缩宽度
+                    finalWidth = originalWidth;
+                    finalHeight = finalWidth * 16 / 9;
+                }
+            }
+        } else {
+            scale = originalHeight * 1.0f / originalWidth;
+            if (scale == mPreviewScale) { // 比例一样则不改变
+                finalWidth = originalWidth;
+                finalHeight = originalHeight;
+            } else {
+                if (mPreviewScale == 0.75f) { // 预览比例4:3,压缩宽度
+                    finalHeight = originalHeight;
+                    finalWidth = finalHeight * 4 / 3;
+                } else { // 预览比例16:9,压缩高度
+                    finalWidth = originalWidth;
+                    finalHeight = finalWidth * 9 / 16;
+                }
+            }
+        }
+        if (DEBUG) {
+            Log.d(TAG, "originalWidth :" + originalWidth + ", originalHeight :" + originalHeight);
+            Log.d(TAG, "finalWidth: " + finalWidth + ", finalHeight: " + finalHeight);
+        }
+        setMeasuredDimension(finalWidth, finalHeight);
+    }
+
+    @Override
+    public boolean onTouchEvent(MotionEvent event) {
+        switch (event.getAction()) {
+            case MotionEvent.ACTION_DOWN:
+                focusOnPoint((int) event.getX(), (int) event.getY()); // 点击聚焦
+                break;
+            default:
+                break;
+        }
+        return super.onTouchEvent(event);
+    }
+
+    @Override
+    public void onAutoFocus(boolean success, Camera camera) {
+        if (DEBUG) {
+            Log.d(TAG, "onAutoFocus : " + success);
+        }
+    }
+}
Index: frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/widget/MaskView.java
===================================================================
--- frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/widget/MaskView.java	(revision 0)
+++ frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/widget/MaskView.java	(revision 2329)
@@ -0,0 +1,115 @@
+package com.sensetime.faceunlock.widget;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.graphics.PorterDuff;
+import android.graphics.PorterDuffXfermode;
+import android.graphics.Rect;
+import android.os.Build;
+import android.util.AttributeSet;
+import android.view.View;
+import android.util.Log;
+
+/**
+ * 相机页面的蒙板View
+ */
+public class MaskView extends View {
+
+    private static final String TAG = "MaskView";
+
+    private int left;
+    private int top;
+    private int right;
+    private int bottom;
+    private int progress; // 进度
+
+    private Paint mClearPaint;
+    private Paint mCirclePaint;
+    private Rect mMaskRect;
+    private boolean isFirstScale = true;
+
+    public MaskView(Context context) {
+        super(context);
+        init();
+    }
+
+    public MaskView(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        init();
+    }
+
+    private void init() {
+        mClearPaint = new Paint();
+        mClearPaint.setAntiAlias(true);
+        mClearPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));
+        mCirclePaint = new Paint();
+		mCirclePaint.setAntiAlias(true);
+        mClearPaint.setAntiAlias(true);
+        mCirclePaint.setStyle(Paint.Style.STROKE);
+        mCirclePaint.setStrokeWidth(10);
+        mMaskRect = new Rect();
+    }
+
+    public void setProgress(int progress) {
+        this.progress = progress;
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
+            invalidate();
+        }
+    }
+
+    public Rect getMaskRect(float scaleX, float scaleY) {
+        if (isFirstScale) {
+            int left = (int) ((this.left - 40) / scaleX);
+            int top = (int) ((this.top + 60) / scaleY);
+            int right = (int) ((this.right + 40) / scaleX);
+            int bottom = (int) ((this.bottom + 140) / scaleY);
+            int length = left / 2;
+            mMaskRect.set(left - length, top - length, right + length, bottom + length);
+            isFirstScale = false;
+            com.sensetime.faceunlock.util.LogUtil.d(TAG, "scaleX : " + scaleX);
+            com.sensetime.faceunlock.util.LogUtil.d(TAG, "scaleY : " + scaleY);
+            com.sensetime.faceunlock.util.LogUtil.d(TAG, "left : " + left);
+            com.sensetime.faceunlock.util.LogUtil.d(TAG, "top : " + top);
+            com.sensetime.faceunlock.util.LogUtil.d(TAG, "right : " + right);
+            com.sensetime.faceunlock.util.LogUtil.d(TAG, "bottom : " + bottom);
+        }
+        return mMaskRect;
+    }
+
+    @Override
+    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
+        super.onLayout(changed, left, top, right, bottom);
+        if (changed)
+            initMaskArea();
+    }
+
+    private void initMaskArea() {
+        int width = getWidth();
+        int length = width / 6;
+        left = length;
+        top = length; // 上下蒙板区域固定
+        right = length * 5;
+        bottom = length * 5;
+    }
+
+    @Override
+    protected void onDraw(Canvas canvas) {
+        super.onDraw(canvas);
+            float cx = (left + right) >> 1;
+            float cy = (top + bottom + 200) >> 1;
+            float radius = (right - left) >> 1;
+            float radius1 = 280;
+			float temp = radius1 - radius;
+            canvas.drawCircle(cx, cy, radius1, mClearPaint);
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
+            mCirclePaint.setColor(0xffaaaaaa);
+            canvas.drawCircle(cx, cy, radius1, mCirclePaint);
+            mCirclePaint.setColor(0xff2EA8FC);
+            float sweepAngle = progress * 360 / 100.0f;
+            com.sensetime.faceunlock.util.LogUtil.d(TAG, "sweepAngle: " + sweepAngle);
+            canvas.drawArc(left - temp , top - temp +100 , right + temp , bottom + temp +100, -90, sweepAngle, false, mCirclePaint);
+        }
+    }
+
+}
Index: frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/widget/FaceRegisterView.java
===================================================================
--- frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/widget/FaceRegisterView.java	(revision 0)
+++ frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/widget/FaceRegisterView.java	(revision 2329)
@@ -0,0 +1,82 @@
+package com.sensetime.faceunlock.widget;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Paint;
+import android.graphics.RectF;
+import android.util.AttributeSet;
+import android.view.View;
+
+public class FaceRegisterView extends View {
+	
+	public static final int FACE_DIR_COUNT = 5; // 5方向人脸
+
+	private Paint mPaint = new Paint(); // 绘制用的画笔
+	private RectF mRect = new RectF(); // 控件在屏幕中的位置，用来确定和绘制扇形
+	private boolean[] direct = new boolean[FACE_DIR_COUNT]; // 存储某个方向是否已经检测
+	private int mSmallCircleRadius; // 中间圆的半径
+	private int mStrokeWidth = 4; // 画笔的宽度
+
+	public FaceRegisterView(Context context) {
+		super(context);
+		init();
+	}
+
+	public FaceRegisterView(Context context, AttributeSet attrs) {
+		super(context, attrs);
+		init();
+	}
+
+	private void init() {
+		mPaint.setAntiAlias(true);
+		mPaint.setStyle(Paint.Style.STROKE);
+		mPaint.setStrokeWidth(mStrokeWidth);
+	}
+
+	@Override
+	protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
+		super.onLayout(changed, left, top, right, bottom);
+		mRect.set(mStrokeWidth, mStrokeWidth, getWidth() - mStrokeWidth, getHeight() - mStrokeWidth);
+		mSmallCircleRadius = getWidth() >> 4;
+	}
+
+	public void reset() {
+		for (int i = 0; i < direct.length; i++) {
+			direct[i] = false;
+		}
+		postInvalidate(); // 更新UI
+	}
+	
+	/**
+	 * 设置某个方向去做特征分析，返回成功状态
+	 */
+	public boolean setDirectTrue(int index) {
+		if (index < 0 || index >= direct.length || direct[index]) {
+			return false; // 如果index越界或者direct[index]已经做过了特征分析，则返回false
+		}
+		direct[index] = true; // 设置direct[index]的状态为已经做过特征分析
+		postInvalidate(); // 更新UI
+		return true;
+	}
+	
+	@Override
+	protected void onDraw(Canvas canvas) {
+		super.onDraw(canvas);
+		mPaint.setColor(Color.RED);
+		canvas.drawCircle(mRect.centerX(), mRect.centerY(), mRect.width() / 2, mPaint);
+		canvas.drawCircle(mRect.centerX(), mRect.centerY(), mSmallCircleRadius, mPaint);
+		for (int i = 0; i < direct.length; i++) {
+			if (direct[i]) {
+				mPaint.setColor(Color.CYAN);
+				if (i == 0) {
+					canvas.drawCircle(mRect.centerX(), mRect.centerY(), mSmallCircleRadius, mPaint);
+				} else {
+					canvas.drawArc(mRect, 90 * i - 45, 90, false, mPaint);
+					// canvas.drawArc(mRect, 45 * i - 22.5f, 45, false, mPaint); // 9方向
+				}
+			}
+		}
+	}
+
+}
Index: frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/widget/FaceUnlockCyleView.java
===================================================================
--- frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/widget/FaceUnlockCyleView.java	(revision 0)
+++ frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/widget/FaceUnlockCyleView.java	(revision 2329)
@@ -0,0 +1,180 @@
+package com.sensetime.faceunlock.widget;
+
+import android.content.Context;
+import android.content.res.TypedArray;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Paint;
+import android.graphics.RectF;
+import android.graphics.Typeface;
+import android.util.AttributeSet;
+import com.android.keyguard.R;
+import android.util.Log;
+import android.view.View;
+
+public class FaceUnlockCyleView extends View {
+
+	private Paint paint;
+
+	private int roundColor;
+
+	private int roundProgressColor;
+
+	private float roundProgressInerCycle;
+
+	private int textColor;
+
+	private float textSize;
+
+	private float roundWidth;
+
+	private int max;
+
+	private int progress;
+
+	private boolean textIsDisplayable;
+
+	private int style;
+
+	public static final int STROKE = 0;
+	public static final int FILL = 1;
+
+	public FaceUnlockCyleView(Context context) {
+		this(context, null);
+	}
+
+	public FaceUnlockCyleView(Context context, AttributeSet attrs) {
+		this(context, attrs, 0);
+	}
+
+	public FaceUnlockCyleView(Context context, AttributeSet attrs, int defStyle) {
+		super(context, attrs, defStyle);
+
+		paint = new Paint();
+		TypedArray mTypedArray = context.obtainStyledAttributes(attrs, R.styleable.RoundProgressBar);
+		roundColor = mTypedArray.getColor(R.styleable.RoundProgressBar_roundColor, Color.RED);
+		roundProgressColor = mTypedArray.getColor(R.styleable.RoundProgressBar_roundProgressColor, Color.GREEN);
+		roundProgressInerCycle = mTypedArray.getDimension(R.styleable.RoundProgressBar_roundProgressInterCycle, 20);
+		textColor = mTypedArray.getColor(R.styleable.RoundProgressBar_textColor, Color.GREEN);
+		textSize = mTypedArray.getDimension(R.styleable.RoundProgressBar_textSize, 15);
+		roundWidth = mTypedArray.getDimension(R.styleable.RoundProgressBar_roundWidth, 5);
+		max = mTypedArray.getInteger(R.styleable.RoundProgressBar_max, 100);
+		textIsDisplayable = mTypedArray.getBoolean(R.styleable.RoundProgressBar_textIsDisplayable, true);
+		style = mTypedArray.getInt(R.styleable.RoundProgressBar_style, 0);
+		mTypedArray.recycle();
+	}
+
+	@Override
+	protected void onDraw(Canvas canvas) {
+		super.onDraw(canvas);
+
+		int centre = getWidth() / 2;
+		int radius = (int) (centre - roundWidth / 2);
+		paint.setColor(roundColor);
+		paint.setStyle(Paint.Style.STROKE);
+		paint.setStrokeWidth(roundWidth);
+		paint.setAntiAlias(true);
+		canvas.drawCircle(centre, centre, radius, paint);
+
+		paint.setStrokeWidth(0);
+		paint.setColor(textColor);
+		paint.setTextSize(textSize);
+		paint.setTypeface(Typeface.DEFAULT_BOLD);
+		int percent = (int) (((float) progress / (float) max) * 100);
+		float textWidth = paint.measureText(percent + "%");
+
+		if (textIsDisplayable && percent != 0 && style == STROKE) {
+			canvas.drawText(percent + "%", centre - textWidth / 2, centre + textSize+760 / 2, paint);
+		}
+
+		paint.setStrokeWidth(roundWidth);
+		paint.setColor(roundProgressColor);
+		
+		RectF oval = new RectF(centre - radius, centre - radius, centre + radius, centre + radius);
+
+		switch (style) {
+		case STROKE: {
+			paint.setStyle(Paint.Style.STROKE);
+			canvas.drawArc(oval, -90, 360 * progress / max, false, paint);
+			break;
+		}
+		case FILL: {
+			paint.setStyle(Paint.Style.FILL_AND_STROKE);
+			if (progress != 0)
+//				canvas.drawArc(oval, 0, 360 * progress / max, true, paint);
+			break;
+		}
+		}
+
+	}
+
+	public synchronized int getMax() {
+		return max;
+	}
+
+	public synchronized void setMax(int max) {
+		if (max < 0) {
+			throw new IllegalArgumentException("max not less than 0");
+		}
+		this.max = max;
+	}
+
+	public synchronized int getProgress() {
+		return progress;
+	}
+
+	public synchronized void setProgress(int progress) {
+		if (progress < 0) {
+			throw new IllegalArgumentException("progress not less than 0");
+		}
+		if (progress > max) {
+			progress = max;
+		}
+		if (progress <= max) {
+			this.progress = progress;
+			postInvalidate();
+		}
+
+	}
+
+	public int getCricleColor() {
+		return roundColor;
+	}
+
+	public void setCricleColor(int cricleColor) {
+		this.roundColor = cricleColor;
+	}
+
+	public int getCricleProgressColor() {
+		return roundProgressColor;
+	}
+
+	public void setCricleProgressColor(int cricleProgressColor) {
+		this.roundProgressColor = cricleProgressColor;
+	}
+
+	public int getTextColor() {
+		return textColor;
+	}
+
+	public void setTextColor(int textColor) {
+		this.textColor = textColor;
+	}
+
+	public float getTextSize() {
+		return textSize;
+	}
+
+	public void setTextSize(float textSize) {
+		this.textSize = textSize;
+	}
+
+	public float getRoundWidth() {
+		return roundWidth;
+	}
+
+	public void setRoundWidth(float roundWidth) {
+		this.roundWidth = roundWidth;
+	}
+
+}
Index: frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/bean/User.java
===================================================================
--- frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/bean/User.java	(revision 0)
+++ frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/bean/User.java	(revision 2329)
@@ -0,0 +1,70 @@
+package com.sensetime.faceunlock.bean;
+
+public class User {
+
+	private String userId; // 不同人的 userId 不同，同一人的 userId 相同
+	private String name;
+	private String feature; // 特征值
+	private String imagePath;
+	private int isDisplay; // 是否显示（用户管理时只显示正方向的人脸）
+
+	public User() {
+	}
+
+	public User(String userId, String name, String feature, String imagePath, int isDisplay) {
+		this.userId = userId;
+		this.name = name;
+		this.feature = feature;
+		this.imagePath = imagePath;
+		this.isDisplay = isDisplay;
+	}
+
+	public String getUserId() {
+		return userId;
+	}
+
+	public void setUserId(String userId) {
+		this.userId = userId;
+	}
+
+	public String getName() {
+		return name;
+	}
+
+	public void setName(String name) {
+		this.name = name;
+	}
+
+	public String getFeature() {
+		return feature;
+	}
+
+	public void setFeature(String feature) {
+		this.feature = feature;
+	}
+
+	public String getImagePath() {
+		return imagePath;
+	}
+
+	public void setImagePath(String imagePath) {
+		this.imagePath = imagePath;
+	}
+
+	public int getIsDisplay() {
+		return isDisplay;
+	}
+
+	public void setIsDisplay(int isDisplay) {
+		this.isDisplay = isDisplay;
+	}
+
+	@Override
+	public String toString() {
+		return "User{" +
+				"name='" + name + '\'' +
+				", imagePath='" + imagePath + '\'' +
+				'}';
+	}
+
+}
Index: frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/bean/FaceFeature.java
===================================================================
--- frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/bean/FaceFeature.java	(revision 0)
+++ frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/bean/FaceFeature.java	(revision 2329)
@@ -0,0 +1,19 @@
+package com.sensetime.faceunlock.bean;
+
+import com.sensetime.faceapi.model.FaceInfo;
+
+public class FaceFeature {
+
+    public FaceInfo faceInfo; // 人脸
+    public byte[] nv21; // 当前帧的 nv21 数据
+    public int width; // 图片宽度
+    public int height; // 图片高度
+
+    public FaceFeature(FaceInfo faceInfo, byte[] nv21, int width, int height) {
+        this.faceInfo = faceInfo;
+        this.nv21 = nv21;
+        this.width = width;
+        this.height = height;
+    }
+
+}
Index: frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/config/AppConfig.java
===================================================================
--- frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/config/AppConfig.java	(revision 0)
+++ frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/config/AppConfig.java	(revision 2329)
@@ -0,0 +1,24 @@
+package com.sensetime.faceunlock.config;
+
+import android.content.Context;
+import com.sensetime.faceunlock.util.LogUtil;
+import com.sensetime.faceunlock.util.SPUtil;
+
+public class AppConfig {
+
+    private static final String TAG = "AppConfig";
+    public static float threshold = 0.65f; // 人脸比对阈值
+    public static int attemptCount = 2; // 重试次数
+    public static boolean isOpenHacker = false; // 活体检测开关
+
+    /*static {
+        Context context = SystemUIApplication.getInstance();
+        threshold = (Float) SPUtil.get(context, SPUtil.THRESHOLD_KEY, 0.65f);
+        attemptCount = (Integer) SPUtil.get(context, SPUtil.TRY_COUNT_KEY, 2);
+        isOpenHacker = (Boolean) SPUtil.get(context, SPUtil.IS_OPEN_LIVENESS, false);
+        LogUtil.d(TAG, "threshold: " + threshold);
+        LogUtil.d(TAG, "attemptCount: " + attemptCount);
+        LogUtil.d(TAG, "isOpenHacker: " + isOpenHacker);
+    }*/
+
+}
Index: frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/db/SQLHelper.java
===================================================================
--- frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/db/SQLHelper.java	(revision 0)
+++ frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/db/SQLHelper.java	(revision 2329)
@@ -0,0 +1,146 @@
+package com.sensetime.faceunlock.db;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import android.content.ContentValues;
+import android.content.Context;
+import android.database.Cursor;
+import android.database.sqlite.SQLiteDatabase;
+import android.database.sqlite.SQLiteDatabase.CursorFactory;
+import android.database.sqlite.SQLiteOpenHelper;
+import com.sensetime.faceunlock.bean.User;
+import com.sensetime.faceunlock.util.LogUtil;
+
+public class SQLHelper extends SQLiteOpenHelper {
+
+    public static final String TAG = "SQLHelper";
+
+    private static final String DATABASE_NAME = "user.db";
+    private static final String TABLE_NAME = "user";
+    private static final int VERSION = 1;
+
+    private static final String ID = "id";
+    private static final String USER_ID = "user_id"; // 一个人的唯一识别号
+    private static final String NAME = "name"; // 姓名
+    private static final String FEATURE = "feature"; // 特征值
+    private static final String IMAGE_PATH = "image_path"; // 图片路径
+    private static final String IS_DISPLAY = "is_display"; // 显示时一个人只会显示一张图片即可，用0表示不显示，1表示显示
+
+    private static SQLHelper instance;
+
+    public static SQLHelper getInstance(Context context) {
+        if (instance == null) {
+            instance = new SQLHelper(context.getApplicationContext(), DATABASE_NAME, null, VERSION);
+        }
+        return instance;
+    }
+
+    public SQLHelper(Context context, String name, CursorFactory factory, int version) {
+        super(context, name, factory, version);
+    }
+
+    @Override
+    public void onCreate(SQLiteDatabase db) {
+        String sql = "CREATE TABLE " + TABLE_NAME + "(" + ID + " INTEGER PRIMARY KEY AUTOINCREMENT, " + USER_ID +
+                " TEXT," + NAME + " TEXT," + IMAGE_PATH + " TEXT," + FEATURE + " TEXT," + IS_DISPLAY + " INTEGER)";
+        db.execSQL(sql);
+    }
+
+    @Override
+    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
+    }
+
+    // 增
+    public void add(User user) {
+        SQLiteDatabase db = instance.getWritableDatabase();
+        ContentValues values = new ContentValues();
+        values.put(USER_ID, user.getUserId());
+        values.put(NAME, user.getName());
+        values.put(IMAGE_PATH, user.getImagePath());
+        values.put(FEATURE, user.getFeature());
+        values.put(IS_DISPLAY, user.getIsDisplay());
+        db.insert(TABLE_NAME, null, values);
+        db.close();
+        LogUtil.v(TAG, "db add " + user.toString());
+    }
+
+    // 增
+    public void add(List<User> users) {
+        SQLiteDatabase db = instance.getWritableDatabase();
+        ContentValues values = new ContentValues();
+        for (User user : users) {
+            values.clear();
+            values.put(USER_ID, user.getUserId());
+            values.put(NAME, user.getName());
+            values.put(IMAGE_PATH, user.getImagePath());
+            values.put(FEATURE, user.getFeature());
+            values.put(IS_DISPLAY, user.getIsDisplay());
+            db.insert(TABLE_NAME, null, values);
+            LogUtil.v(TAG, "db add " + user.toString());
+        }
+        db.close();
+    }
+
+    // 查所有
+    public List<User> queryAll() {
+        ArrayList<User> list = new ArrayList<User>();
+        SQLiteDatabase db = instance.getWritableDatabase();
+        Cursor cursor = db.query(TABLE_NAME, null, null, null, null, null, null);
+        while (cursor.moveToNext()) {
+            User user = new User();
+            user.setUserId(cursor.getString(cursor.getColumnIndex(USER_ID)));
+            user.setName(cursor.getString(cursor.getColumnIndex(NAME)));
+            user.setImagePath(cursor.getString(cursor.getColumnIndex(IMAGE_PATH)));
+            user.setFeature(cursor.getString(cursor.getColumnIndex(FEATURE)));
+            user.setIsDisplay(cursor.getInt(cursor.getColumnIndex(IS_DISPLAY)));
+            list.add(user);
+            LogUtil.v(TAG, "list add " + user.toString());
+        }
+        db.close();
+        LogUtil.v(TAG, "list size: " + list.size());
+        return list;
+    }
+    
+    // 查所有
+    public List<User> queryDisplay() {
+    	ArrayList<User> list = new ArrayList<User>();
+    	SQLiteDatabase db = instance.getWritableDatabase();
+        String sql = "select * from " + TABLE_NAME + " where " + IS_DISPLAY + "=" + 1;
+        Cursor cursor = db.rawQuery(sql, null);
+    	while (cursor.moveToNext()) {
+    		User user = new User();
+    		user.setUserId(cursor.getString(cursor.getColumnIndex(USER_ID)));
+    		user.setName(cursor.getString(cursor.getColumnIndex(NAME)));
+    		user.setImagePath(cursor.getString(cursor.getColumnIndex(IMAGE_PATH)));
+    		user.setFeature(cursor.getString(cursor.getColumnIndex(FEATURE)));
+    		user.setIsDisplay(cursor.getInt(cursor.getColumnIndex(IS_DISPLAY)));
+    		list.add(user);
+            LogUtil.v(TAG, "list add " + user.toString());
+    	}
+    	db.close();
+        LogUtil.v(TAG, "list size: " + list.size());
+    	return list;
+    }
+
+    // 删
+    public void delete(String userId) {
+        SQLiteDatabase db = instance.getWritableDatabase();
+        int deleteCount = db.delete(TABLE_NAME, USER_ID + "='" + userId + "'", null);
+        if (deleteCount == 1) {
+            LogUtil.v(TAG, "db delete: " + userId);
+        }
+        db.close();
+    }
+
+    /**
+     * 删除所有
+     */
+    public void deleteAllData() {
+        SQLiteDatabase db = instance.getWritableDatabase();
+        int deleteCount = db.delete(TABLE_NAME, null, null);
+        LogUtil.v(TAG, "db delete count: " + deleteCount);
+        db.close();
+    }
+
+}
Index: frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/manager/TrackProxy.java
===================================================================
--- frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/manager/TrackProxy.java	(revision 0)
+++ frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/manager/TrackProxy.java	(revision 2329)
@@ -0,0 +1,37 @@
+package com.sensetime.faceunlock.manager;
+
+import com.sensetime.faceapi.FaceTrack;
+import com.sensetime.faceapi.model.CvPixelFormat;
+import com.sensetime.faceapi.model.FaceInfo;
+import com.sensetime.faceapi.model.FaceOrientation;
+import com.sensetime.faceapi.utils.AccelerometerManager;
+import com.sensetime.faceunlock.util.LogUtil;
+
+public class TrackProxy {
+
+    private static final String TAG = "TrackProxy";
+
+    public static void init() {
+        FaceSDKManager.getInstance().initTrack();
+    }
+
+    public static FaceInfo[] track(byte[] nv21, int width, int height, boolean isFrontCamera) {
+        FaceOrientation faceOrientation = AccelerometerManager.getFaceOrientation(isFrontCamera);
+        LogUtil.v(TAG, "track dir: " + faceOrientation.getValue());
+        FaceTrack tracker = FaceSDKManager.getInstance().getTrack();
+        if (tracker == null) {
+            LogUtil.w(TAG, "FaceTrack is null !");
+            return null;
+        }
+        long time = System.currentTimeMillis();
+        FaceInfo[] faces = tracker.track(nv21, CvPixelFormat.NV21, width, height, faceOrientation);
+        LogUtil.v(TAG, "track time: " + (System.currentTimeMillis() - time) + ", face count: " + ((faces == null) ? 0
+                : faces.length));
+        return faces;
+    }
+
+    public static void release() {
+        FaceSDKManager.getInstance().releaseTrack();
+    }
+
+}
Index: frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/manager/VerifyProxy.java
===================================================================
--- frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/manager/VerifyProxy.java	(revision 0)
+++ frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/manager/VerifyProxy.java	(revision 2329)
@@ -0,0 +1,81 @@
+package com.sensetime.faceunlock.manager;
+
+import android.content.Context;
+
+import com.sensetime.faceapi.FaceVerify;
+import com.sensetime.faceapi.model.CvPixelFormat;
+import com.sensetime.faceapi.model.FaceInfo;
+import com.sensetime.faceunlock.bean.FaceFeature;
+import com.sensetime.faceunlock.bean.User;
+import com.sensetime.faceunlock.config.AppConfig;
+import com.sensetime.faceunlock.util.LogUtil;
+
+import java.util.List;
+
+public class VerifyProxy {
+
+    private static final String TAG = "VerifyProxy";
+
+    public static void init(Context context) {
+        FaceSDKManager.getInstance().initVerify(context);
+    }
+
+    public static User isPass(FaceFeature faceFeature, Context context) {
+        if (faceFeature == null) {
+            return null;
+        }
+        List<User> users = UserManager.getAllUser(context);
+        if (users == null || users.size() <= 0) {
+            return null;
+        }
+        byte[] feature = VerifyProxy.getFeature(faceFeature.nv21, faceFeature.width, faceFeature.height, faceFeature
+                .faceInfo);
+        float maxSimilarValue = 0.0f;
+        int maxSimilarIndex = 0;
+        for (int i = 0; i < users.size(); i++) {
+            float similar = VerifyProxy.compare(feature, users.get(i).getFeature().getBytes());
+            if (similar > maxSimilarValue) {
+                maxSimilarValue = similar;
+                maxSimilarIndex = i;
+            }
+        }
+        LogUtil.d(TAG, "maxSimilarValue : " + maxSimilarValue);
+        boolean isPass = maxSimilarValue > AppConfig.threshold;
+        if (isPass) {
+            return users.get(maxSimilarIndex);
+        }
+        return null;
+    }
+
+    public static byte[] getFeature(byte[] nv21, int width, int height, FaceInfo faceInfo) {
+        FaceVerify verifier = FaceSDKManager.getInstance().getVerify();
+        if (verifier == null) {
+            LogUtil.w(TAG, "FaceVerify is null !");
+            return null;
+        }
+        long time = System.currentTimeMillis();
+        byte[] feature = verifier.getFeature(nv21, CvPixelFormat.NV21, width, height, width, faceInfo); // 获取特征值
+        LogUtil.d(TAG, "getFeature time : " + (System.currentTimeMillis() - time));
+        return feature;
+    }
+
+    public static float compare(byte[] feature1, byte[] feature2) {
+        FaceVerify verifier = FaceSDKManager.getInstance().getVerify();
+        if (verifier == null) {
+            LogUtil.w(TAG, "FaceVerify is null !");
+            return 0f;
+        }
+        if (feature1 == null || feature2 == null) {
+            LogUtil.w(TAG, "feature1 or feature2 is null !");
+            return 0f;
+        }
+        float score = verifier.compareFeature(feature1, feature2);
+        return score;
+    }
+
+    public static void release() {
+        FaceSDKManager.getInstance().releaseVerify();
+    }
+
+
+}
Index: frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/manager/UserManager.java
===================================================================
--- frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/manager/UserManager.java	(revision 0)
+++ frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/manager/UserManager.java	(revision 2329)
@@ -0,0 +1,54 @@
+package com.sensetime.faceunlock.manager;
+
+import android.content.Context;
+
+import com.sensetime.faceunlock.bean.User;
+import com.sensetime.faceunlock.db.SQLHelper;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class UserManager {
+
+    private static final List<User> users = new ArrayList<>(); // 数据库中所有的人员信息
+    private static final List<User> displayUsers = new ArrayList<>(); // 人员管理时仅需要显示的人员信息
+
+    public static List<User> getAllUser(Context context) {
+        if (users.size() <= 0) {
+            users.addAll(SQLHelper.getInstance(context).queryAll());
+        }
+        return users;
+    }
+
+    public static List<User> getDisplayUsers(Context context) {
+        if (displayUsers.size() <= 0) {
+            displayUsers.addAll(SQLHelper.getInstance(context).queryDisplay());
+        }
+        return displayUsers;
+    }
+
+    public static void refresh(Context context) {
+        users.clear();
+        displayUsers.clear();
+        users.addAll(SQLHelper.getInstance(context).queryAll());
+        displayUsers.addAll(SQLHelper.getInstance(context).queryDisplay());
+    }
+
+    public static void addUsers(List<User> users, Context context) {
+        deleteAllUser(context);
+        SQLHelper.getInstance(context).add(users);
+        refresh(context);
+    }
+
+    public static void deleteUser(User user, Context context) {
+        SQLHelper.getInstance(context).delete(user.getUserId());
+        refresh(context);
+    }
+
+    public static void deleteAllUser(Context context) {
+        SQLHelper.getInstance(context).deleteAllData();
+        users.clear();
+        displayUsers.clear();
+    }
+
+}
Index: frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/manager/DetectProxy.java
===================================================================
--- frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/manager/DetectProxy.java	(revision 0)
+++ frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/manager/DetectProxy.java	(revision 2329)
@@ -0,0 +1,34 @@
+package com.sensetime.faceunlock.manager;
+
+import com.sensetime.faceapi.FaceDetect;
+import com.sensetime.faceapi.model.CvPixelFormat;
+import com.sensetime.faceapi.model.FaceInfo;
+import com.sensetime.faceapi.model.FaceOrientation;
+import com.sensetime.faceunlock.util.LogUtil;
+
+public class DetectProxy {
+
+    private static final String TAG = "DetectProxy";
+
+    public static void init() {
+        FaceSDKManager.getInstance().initDetect();
+    }
+
+    public static FaceInfo[] detect(byte[] nv21, int width, int height) {
+        FaceDetect detector = FaceSDKManager.getInstance().getDetect();
+        if (detector == null) {
+            LogUtil.w(TAG, "FaceDetect is null !");
+            return null;
+        }
+        long time = System.currentTimeMillis();
+        FaceInfo[] faces = detector.detect(nv21, CvPixelFormat.NV21, width, height, width, FaceOrientation.RIGHT);
+        LogUtil.d(TAG, "detect time: " + (System.currentTimeMillis() - time) + ", face count: " + ((faces == null) ? 0
+                : faces.length));
+        return faces;
+    }
+
+    public static void release() {
+        FaceSDKManager.getInstance().releaseDetect();
+    }
+
+}
Index: frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/manager/FaceSDKManager.java
===================================================================
--- frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/manager/FaceSDKManager.java	(revision 0)
+++ frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/manager/FaceSDKManager.java	(revision 2329)
@@ -0,0 +1,118 @@
+package com.sensetime.faceunlock.manager;
+
+import android.content.Context;
+import com.sensetime.faceapi.FaceDetect;
+import com.sensetime.faceapi.FaceHacker;
+import com.sensetime.faceapi.FaceTrack;
+import com.sensetime.faceapi.FaceVerify;
+import com.sensetime.faceapi.model.FaceConfig;
+import com.sensetime.faceunlock.util.FileUtil;
+import com.sensetime.faceunlock.util.LogUtil;
+
+import java.io.File;
+
+public class FaceSDKManager {
+
+	private static final String TAG = "FaceSDKManager";
+	private static final FaceSDKManager INSTANCE = new FaceSDKManager();
+	private FaceSDKManager() {
+	}
+
+	private FaceTrack faceTrack;
+	private FaceDetect faceDetect;
+	private FaceHacker faceHacker;
+	private FaceVerify faceVerify;
+
+	public static FaceSDKManager getInstance() {
+		return INSTANCE;
+	}
+
+	public FaceTrack getTrack() {
+		return faceTrack;
+	}
+
+	public FaceDetect getDetect() {
+		return faceDetect;
+	}
+
+	public FaceHacker getFaceHacker() {
+		return faceHacker;
+	}
+
+	public FaceVerify getVerify() {
+		return faceVerify;
+	}
+
+	public void initTrack() {
+		if (faceTrack != null) {
+			return;
+		}
+		long time = System.currentTimeMillis();
+		faceTrack = new FaceTrack();
+		LogUtil.d(TAG, "initTrack time: " + (System.currentTimeMillis() - time));
+	}
+
+	public void initDetect() {
+		if (faceDetect != null) {
+			return;
+		}
+		long time = System.currentTimeMillis();
+		faceDetect = new FaceDetect(FaceConfig.FaceImageResize.RESIZE_320W, FaceConfig.FaceKeyPointCount.POINT_COUNT_21);
+		LogUtil.d(TAG, "initDetect time: " + (System.currentTimeMillis() - time));
+	}
+
+	public void initHacker() {
+		if (faceHacker != null) {
+			return;
+		}
+		long time = System.currentTimeMillis();
+//		String path = context.getFilesDir().getAbsolutePath().toString() + "/" + FileUtil.HACKER_MODEL;
+//		LogUtil.d(TAG, "hacker model path: " + path);
+		faceHacker = new FaceHacker(null);
+		LogUtil.d(TAG, "initHacker time: " + (System.currentTimeMillis() - time));
+	}
+
+	public void initVerify(Context context) {
+		if (faceVerify != null) {
+			return;
+		}
+		FileUtil.copyModelFile(context);
+		String modelPath = context.getFilesDir().getAbsolutePath() + File.separator + FileUtil.VERIFY_MODEL;
+		long time = System.currentTimeMillis();
+		faceVerify = new FaceVerify(modelPath);
+		LogUtil.d(TAG, "initVerify time: " + (System.currentTimeMillis() - time) + "ms");
+	}
+
+	public void releaseTrack() {
+		if (faceTrack != null) {
+			faceTrack.release();
+			faceTrack = null;
+			LogUtil.v(TAG, "releaseTrack");
+		}
+	}
+
+	public void releaseDetect() {
+		if (faceDetect != null) {
+			faceDetect.release();
+			faceDetect = null;
+			LogUtil.v(TAG, "releaseDetect");
+		}
+	}
+
+	public void releaseHacker() {
+		if (faceHacker != null) {
+			faceHacker.release();
+			faceHacker = null;
+			LogUtil.v(TAG, "releaseHacker");
+		}
+	}
+
+	public void releaseVerify() {
+		if (faceVerify != null) {
+			faceVerify.release();
+			faceVerify = null;
+			LogUtil.v(TAG, "releaseVerify");
+		}
+	}
+
+}
Index: frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/manager/HackerProxy.java
===================================================================
--- frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/manager/HackerProxy.java	(revision 0)
+++ frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/manager/HackerProxy.java	(revision 2329)
@@ -0,0 +1,54 @@
+package com.sensetime.faceunlock.manager;
+
+import com.sensetime.faceapi.FaceHacker;
+import com.sensetime.faceapi.model.CvPixelFormat;
+import com.sensetime.faceapi.model.FaceInfo;
+import com.sensetime.faceapi.model.FaceOrientation;
+import com.sensetime.faceapi.utils.AccelerometerManager;
+import com.sensetime.faceunlock.bean.FaceFeature;
+import com.sensetime.faceunlock.config.AppConfig;
+import com.sensetime.faceunlock.util.FileUtil;
+import com.sensetime.faceunlock.util.LogUtil;
+
+public class HackerProxy {
+
+    private static final String TAG = "HackerProxy";
+
+    public static void init() {
+        FaceSDKManager.getInstance().initHacker();
+    }
+
+    public static boolean isPass(FaceFeature faceFeature, boolean isFrontCamera) {
+        if (!AppConfig.isOpenHacker) {
+            return true; // 如果没有打开活体开关，默认都是活体
+        }
+        float score = HackerProxy.hacker(faceFeature.nv21, faceFeature.width, faceFeature.height, faceFeature
+                .faceInfo, isFrontCamera);
+        boolean isPass = score < 0.98f;
+        LogUtil.d(TAG, "isPass: " + isPass);
+        long time = System.currentTimeMillis();
+        FileUtil.saveHackerData(faceFeature.nv21, faceFeature.width, faceFeature.height, score);
+        LogUtil.d(TAG, "saveHackerData time: " + (System.currentTimeMillis() - time) + "ms");
+        return isPass;
+    }
+
+    public static float hacker(byte[] nv21, int width, int height, FaceInfo faceInfo, boolean isFrontCamera) {
+        FaceHacker faceHacker = FaceSDKManager.getInstance().getFaceHacker();
+        if (faceHacker == null) {
+            LogUtil.w(TAG, "FaceHacker is null !");
+            return 0f;
+        }
+        FaceOrientation faceOrientation = AccelerometerManager.getFaceOrientation(isFrontCamera);
+        long time = System.currentTimeMillis();
+        float score = faceHacker.faceHackness(nv21, CvPixelFormat.NV21, width, height, width,
+                faceOrientation, faceInfo);
+        LogUtil.d(TAG, "hacker time: " + (System.currentTimeMillis() - time));
+        LogUtil.d(TAG, "score: " + score);
+        return score;
+    }
+
+    public static void release() {
+        FaceSDKManager.getInstance().releaseHacker();
+    }
+
+}
Index: frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/handler/WeakHandler.java
===================================================================
--- frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/handler/WeakHandler.java	(revision 0)
+++ frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/handler/WeakHandler.java	(revision 2329)
@@ -0,0 +1,30 @@
+package com.sensetime.faceunlock.handler;
+
+import android.app.Activity;
+import android.os.Handler;
+import android.os.Message;
+
+import java.lang.ref.WeakReference;
+
+/**
+ * 弱引用封装的Handler，避免内存泄漏的发生
+ */
+public abstract class WeakHandler<T extends Activity> extends Handler {
+
+    protected final WeakReference<T> weakReference;
+
+    public WeakHandler(T act) {
+        weakReference = new WeakReference<>(act);
+    }
+
+    public abstract void handleMsg(T act, Message msg);
+
+    @Override
+    public void handleMessage(Message msg) {
+        T act = weakReference.get();
+        if (act != null) {
+            handleMsg(act, msg);
+        }
+    }
+
+}
Index: frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/util/BrightnessHelper.java
===================================================================
--- frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/util/BrightnessHelper.java	(revision 0)
+++ frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/util/BrightnessHelper.java	(revision 2329)
@@ -0,0 +1,48 @@
+package com.sensetime.faceunlock.util;
+
+import android.provider.Settings;
+import android.util.Log;
+import android.content.Context;
+
+/**
+ * Created by Administrator on 2017/7/11 14:31.
+ * email: huan.fu@gometech.com.cn
+ */
+
+public class BrightnessHelper {
+    //得到屏幕亮度调节模式
+    public static int getScreenMode(Context context) {
+        int screenMode = 0;
+        try {
+            screenMode = Settings.System.getInt(context.getContentResolver(),
+                    Settings.System.SCREEN_BRIGHTNESS_MODE);
+        } catch (Settings.SettingNotFoundException e) {
+            e.printStackTrace();
+        }
+        return screenMode;
+    }
+
+    //设置屏幕亮度调节模式
+    public static void setScreenMode(Context context,int mode) {
+        Settings.System.putInt(context.getContentResolver(),
+                Settings.System.SCREEN_BRIGHTNESS_MODE, mode);
+    }
+
+    //获取屏幕亮度
+    public static int getScreenBrightness(Context context) {
+        int screenBrightness = 0;
+        try {
+            screenBrightness = Settings.System.getInt(context.getContentResolver(),
+                    Settings.System.SCREEN_BRIGHTNESS);
+        } catch (Settings.SettingNotFoundException e) {
+            e.printStackTrace();
+        }
+        return screenBrightness;
+    }
+
+    //设置屏幕亮度
+    public static void setScreenBrightness(Context context,int value) {
+        Settings.System.putInt(context.getContentResolver(),
+                Settings.System.SCREEN_BRIGHTNESS, value);
+    }
+}
Index: frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/util/DirectUtil.java
===================================================================
--- frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/util/DirectUtil.java	(revision 0)
+++ frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/util/DirectUtil.java	(revision 2329)
@@ -0,0 +1,46 @@
+package com.sensetime.faceunlock.util;
+
+import com.sensetime.faceapi.model.FaceInfo;
+
+public class DirectUtil {
+
+    /**
+     * 5方向的人脸
+     */
+    public static int getFiveDirect(FaceInfo face) {
+        if (isCenter(face)) {
+            return 0;
+        } else if (isTop(face)) {
+            return 1;
+        } else if (isRight(face)) {
+            return 4;
+        } else if (isBottom(face)) {
+            return 2;
+        } else if (isLeft(face)) {
+            return 3;
+        } else {
+            return -1;
+        }
+    }
+
+    private static boolean isTop(FaceInfo face) {
+        return face.pitch < -10 && Math.abs(face.yaw) < 10;
+    }
+
+    private static boolean isCenter(FaceInfo face) {
+        return Math.abs(face.pitch) < 5 && Math.abs(face.yaw) < 10;
+    }
+
+    private static boolean isBottom(FaceInfo face) {
+        return face.pitch > 10 && Math.abs(face.yaw) < 10;
+    }
+
+    private static boolean isLeft(FaceInfo face) {
+        return face.yaw < -15 && Math.abs(face.pitch) < 10;
+    }
+
+    private static boolean isRight(FaceInfo face) {
+        return face.yaw > 15 && Math.abs(face.pitch) < 10;
+    }
+
+}
Index: frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/util/BitmapUtil.java
===================================================================
--- frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/util/BitmapUtil.java	(revision 0)
+++ frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/util/BitmapUtil.java	(revision 2329)
@@ -0,0 +1,55 @@
+package com.sensetime.faceunlock.util;
+
+import android.graphics.Bitmap;
+import android.graphics.Matrix;
+import android.graphics.Rect;
+
+import com.sensetime.faceapi.utils.ColorConvertUtil;
+
+public class BitmapUtil {
+
+    public static Bitmap cropBitmap(byte[] nv21, Rect rect, int previewWidth, int previewHeight) {
+        Rect scaleRect = BitmapUtil.getScaleRect(rect, 2, 2, previewWidth, previewHeight);
+        int cropWidth = scaleRect.width();
+        int cropHeight = scaleRect.height();
+        int startX = scaleRect.left % 2 == 0 ? scaleRect.left : scaleRect.left + 1;
+        int startY = scaleRect.top % 2 == 0 ? scaleRect.top : scaleRect.top + 1;
+        if (cropWidth % 2 != 0) {
+            cropWidth -= 1;
+        }
+        if (cropHeight % 2 != 0) {
+            cropHeight -= 1;
+        }
+        Bitmap cropBitmap = ColorConvertUtil.cropNv21ToBitmap(nv21, previewWidth, previewHeight, startX, startY,
+                cropWidth, cropHeight);
+        return cropBitmap;
+    }
+
+    public static Rect getScaleRect(Rect rect, float scaleX, float scaleY, int maxW, int maxH) {
+        Rect resultRect = new Rect();
+        int left = (int) (rect.left - rect.width() * (scaleX - 1) / 2);
+        int right = (int) (rect.right + rect.width() * (scaleX - 1) / 2);
+        int bottom = (int) (rect.bottom + rect.height() * (scaleY - 1) / 2);
+        int top = (int) (rect.top - rect.height() * (scaleY - 1) / 2);
+        resultRect.left = left > 0 ? left : 0;
+        resultRect.right = right > maxW ? maxW : right;
+        resultRect.bottom = bottom > maxH ? maxH : bottom;
+        resultRect.top = top > 0 ? top : 0;
+        return resultRect;
+    }
+
+    public static Bitmap rotateBitmap(Bitmap sourceBitmap, int degree, boolean frontCamera) {
+        if (degree == 0 && frontCamera == false) {
+            return sourceBitmap;
+        }
+        Matrix matrix = new Matrix();
+        matrix.postRotate(degree);
+        if (frontCamera) {
+            matrix.postScale(-1, 1);
+        }
+        Bitmap rotaBitmap = Bitmap.createBitmap(sourceBitmap, 0, 0, sourceBitmap.getWidth(), sourceBitmap.getHeight()
+                , matrix, false);
+        return rotaBitmap;
+    }
+
+}
Index: frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/util/FaceUtil.java
===================================================================
--- frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/util/FaceUtil.java	(revision 0)
+++ frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/util/FaceUtil.java	(revision 2329)
@@ -0,0 +1,63 @@
+package com.sensetime.faceunlock.util;
+
+import android.graphics.Rect;
+import android.util.Log;
+
+import com.sensetime.faceapi.model.CvPixelFormat;
+import com.sensetime.faceapi.model.FaceInfo;
+import com.sensetime.faceapi.utils.BrightnessUtil;
+
+public class FaceUtil {
+
+    private static final String TAG = "FaceUtil";
+    private static final float MIN_BRIGHT = 0.14f;
+
+    /**
+     * 得到最大人脸
+     */
+    public static FaceInfo getMaxFace(FaceInfo[] faces) {
+        if (faces == null || faces.length <= 0) {
+            return null;
+        }
+        FaceInfo faceInfo = null;
+        for (int i = 0; i < faces.length; i++) {
+            if (faceInfo == null || faces[i].faceRect.width() > faceInfo.faceRect.width()) {
+                faceInfo = faces[i];
+            }
+        }
+        return faceInfo;
+    }
+
+    /**
+     * 亮度过滤
+     */
+    public static FaceInfo brightnessFilter(byte[] nv21, int width, int height, FaceInfo faceInfo) {
+        float bright = BrightnessUtil.averageBrightness(nv21, CvPixelFormat.NV21, width, height, faceInfo);
+        LogUtil.d(TAG, "filterFaces bright : " + bright);
+        if (bright < MIN_BRIGHT) {
+            LogUtil.w(TAG, "this face brightness is illegal !");
+            return null;
+        }
+        return faceInfo;
+    }
+
+    public static boolean isFrontFace(FaceInfo faceInfo) {
+        return Math.abs(faceInfo.pitch) < 15 && Math.abs(faceInfo.yaw) < 25;
+    }
+
+    /**
+     * 判断人脸是否在预览框内
+     *
+     * @param faceInfo 人脸信息
+     * @param width    预览宽度
+     * @param height   预览高度
+     * @return
+     */
+    public static boolean containFace(FaceInfo faceInfo, int width, int height) {
+        FaceInfo clone = faceInfo.clone();
+        int tolerantWidth = clone.faceRect.width() / 8;
+        Rect containerRect = new Rect(-tolerantWidth, -tolerantWidth, width + tolerantWidth, height + tolerantWidth);
+        return containerRect.contains(clone.faceRect);
+    }
+
+}
\ No newline at end of file
Index: frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/util/FileUtil.java
===================================================================
--- frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/util/FileUtil.java	(revision 0)
+++ frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/util/FileUtil.java	(revision 2329)
@@ -0,0 +1,131 @@
+package com.sensetime.faceunlock.util;
+
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+import java.util.UUID;
+
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.os.Environment;
+
+import com.sensetime.faceapi.utils.ColorConvertUtil;
+
+public class FileUtil {
+
+	public static final String TAG = "FileUtil";
+	public static final String VERIFY_MODEL = "verify.model";
+//	public static final String HACKER_MODEL = "M_Liveness_Antispoofing_General_6.0.2.model";
+
+	public static void copyModelFile(Context context) {
+		copyFileIfNeed(context, VERIFY_MODEL);
+//		copyFileIfNeed(context, HACKER_MODEL);
+	}
+
+	private static void copyFileIfNeed(Context context, String modelName) {
+		try {
+			File modelFile = new File(context.getFilesDir(), modelName);
+			InputStream is = context.getAssets().open(modelName);
+			if (modelFile.length() == is.available()) {
+				return;
+			}
+			OutputStream os = new FileOutputStream(modelFile);
+			byte[] buffer = new byte[1024 << 9]; // 512KB
+			int length = is.read(buffer);
+			while (length > 0) {
+				os.write(buffer, 0, length);
+				length = is.read(buffer);
+			}
+			os.flush();
+			os.close();
+			is.close();
+		} catch (IOException e) {
+			e.printStackTrace();
+		}finally{
+		}
+	}
+
+	public static String getAssertData(Context context, String path) {
+		try {
+			InputStream stream = context.getAssets().open(path);
+			int length = stream.available();
+			byte[] data = new byte[length];
+			stream.read(data);
+			stream.close();
+			return new String(data);
+		} catch (IOException e) {
+			e.printStackTrace();
+		}
+		return null;
+	}
+
+	public static String getUUIDName() {
+		String s = UUID.randomUUID().toString();
+		return s.substring(0, 8) + s.substring(9, 13) + s.substring(14, 18) + s.substring(19, 23) + s.substring(24);
+	}
+
+	public static boolean saveBitmap(Bitmap bitmap, String imagePath) {
+		File file = new File(imagePath);
+		File parentFile = file.getParentFile();
+		if (!parentFile.exists()) {
+			parentFile.mkdirs();
+		}
+		try {
+			FileOutputStream fos = new FileOutputStream(file);
+			bitmap.compress(Bitmap.CompressFormat.JPEG, 100, fos);
+			fos.flush();
+			fos.close();
+			return true;
+		} catch (FileNotFoundException e) {
+			e.printStackTrace();
+		} catch (IOException e) {
+			e.printStackTrace();
+		}
+		return false;
+	}
+
+	public static boolean saveBytes(byte[] bytes, String filePath) {
+		File file = new File(filePath);
+		File parentFile = file.getParentFile();
+		if (!parentFile.exists()) {
+			parentFile.mkdirs();
+		}
+		try {
+			FileOutputStream fos = new FileOutputStream(file);
+			fos.write(bytes);
+			fos.flush();
+			fos.close();
+			return true;
+		} catch (FileNotFoundException e) {
+			e.printStackTrace();
+		} catch (IOException e) {
+			e.printStackTrace();
+		}
+		return false;
+	}
+
+	public static final String DIR = Environment.getExternalStorageDirectory().getAbsolutePath() + "/sensetime/faceunlock/hacker/";
+	public static void saveHackerData(byte[] nv21, int width, int height, float score) {
+		String timestamp = getFormatTime(System.currentTimeMillis());
+		String nv21Name = DIR + timestamp + "/" + score + ".yuv";
+		saveBytes(nv21, nv21Name);
+		Bitmap bitmap = ColorConvertUtil.cropNv21ToBitmap(nv21, width, height, 0, 0, width, height);
+		String bitmapPath = DIR + timestamp + "/" + score + ".jpg";
+		saveBitmap(bitmap, bitmapPath);
+	}
+
+	/**
+	 * 将毫秒数转换成yyyy-MM-dd-HH-mm-ss的格式
+	 */
+	public static String getFormatTime(long milliseconds) {
+		SimpleDateFormat format = new SimpleDateFormat("yyyy.MM.dd-HH.mm.ss");
+		String times = format.format(new Date(milliseconds));
+		return times;
+	}
+
+}
Index: frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/util/LogUtil.java
===================================================================
--- frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/util/LogUtil.java	(revision 0)
+++ frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/util/LogUtil.java	(revision 2329)
@@ -0,0 +1,128 @@
+package com.sensetime.faceunlock.util;
+
+/*import android.util.Log;
+
+public class LogUtil {
+
+    private static final boolean DEBUG = true;
+
+    public static void v(String tag, String msg) {
+        if (DEBUG) Log.v(tag, msg);
+    }
+
+    public static void d(String tag, String msg) {
+        if (DEBUG) Log.d(tag, msg);
+    }
+
+    public static void i(String tag, String msg) {
+        if (DEBUG) Log.i(tag, msg);
+    }
+
+    public static void w(String tag, String msg) {
+        if (DEBUG) Log.w(tag, msg);
+    }
+
+    public static void e(String tag, String msg) {
+        if (DEBUG) Log.e(tag, msg);
+    }
+
+}*/
+
+
+import android.content.Context;
+import android.util.Log;
+import android.os.Environment;
+
+import java.io.BufferedWriter;
+import java.io.File;
+import java.io.FileWriter;
+import java.io.IOException;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+
+public class LogUtil {
+
+    private static final boolean DEBUG = true;
+    private static BufferedWriter bw;
+
+    public static void v(String tag, String msg) {
+        if (DEBUG) Log.v(tag, msg);
+    }
+
+    public static void d(String tag, String msg) {
+        if (DEBUG) Log.d(tag, msg);
+        if (bw != null) {
+            try {
+                bw.write(tag + "___" + msg);
+                bw.newLine();
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+        }
+    }
+
+    public static void i(String tag, String msg) {
+        if (DEBUG) Log.i(tag, msg);
+        if (bw != null) {
+            try {
+                bw.write(tag + "___" + msg);
+                bw.newLine();
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+        }
+    }
+
+    public static void w(String tag, String msg) {
+        if (DEBUG) Log.w(tag, msg);
+        if (bw != null) {
+            try {
+                bw.write(tag + "___" + msg);
+                bw.newLine();
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+        }
+    }
+
+    public static void e(String tag, String msg) {
+        if (DEBUG) Log.e(tag, msg);
+        if (bw != null) {
+            try {
+                bw.write(tag + "___" + msg);
+                bw.newLine();
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+        }
+    }
+
+    public static void init() {
+        String path = Environment.getExternalStorageDirectory().getPath();
+        String time = getTime();
+        try {
+            File file = new File(path, time);
+            bw = new BufferedWriter(new FileWriter(file));
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+
+    }
+
+    public static String getTime() {
+        long time = System.currentTimeMillis();//long now = android.os.SystemClock.uptimeMillis();
+        SimpleDateFormat format = new SimpleDateFormat("yyyy_MM_dd_HH_mm_ss");
+        Date d = new Date(time);
+        return format.format(d);
+    }
+
+    public static void destroy() {
+        if (bw != null) {
+            try {
+                bw.close();
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+        }
+    }
+}
Index: frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/util/SPUtil.java
===================================================================
--- frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/util/SPUtil.java	(revision 0)
+++ frameworks/base/packages/Keyguard/src/com/sensetime/faceunlock/util/SPUtil.java	(revision 2329)
@@ -0,0 +1,54 @@
+package com.sensetime.faceunlock.util;
+
+import android.content.Context;
+import android.content.SharedPreferences;
+
+public class SPUtil {
+
+	private static final String FILE_NAME = "config_data";
+	public static final String THRESHOLD_KEY = "threshold";
+	public static final String TRY_COUNT_KEY = "try_count";
+	public static final String IS_OPEN_LIVENESS = "is_open_liveness";
+
+	/**
+	 * 保存数据的方法，我们需要拿到保存数据的具体类型，然后根据类型调用不同的保存方法
+	 */
+	public static void put(Context context, String key, Object object) {
+		SharedPreferences sp = context.getSharedPreferences(FILE_NAME, Context.MODE_PRIVATE);
+		SharedPreferences.Editor editor = sp.edit();
+		if (object instanceof String) {
+			editor.putString(key, (String) object);
+		} else if (object instanceof Integer) {
+			editor.putInt(key, (Integer) object);
+		} else if (object instanceof Boolean) {
+			editor.putBoolean(key, (Boolean) object);
+		} else if (object instanceof Float) {
+			editor.putFloat(key, (Float) object);
+		} else if (object instanceof Long) {
+			editor.putLong(key, (Long) object);
+		} else {
+			editor.putString(key, object.toString());
+		}
+		editor.commit();
+	}
+
+	/**
+	 * 得到保存数据的方法，我们根据默认值得到保存的数据的具体类型，然后调用相对于的方法获取值
+	 */
+	public static Object get(Context context, String key, Object defaultObject) {
+		SharedPreferences sp = context.getSharedPreferences(FILE_NAME, Context.MODE_PRIVATE);
+		if (defaultObject instanceof String) {
+			return sp.getString(key, (String) defaultObject);
+		} else if (defaultObject instanceof Integer) {
+			return sp.getInt(key, (Integer) defaultObject);
+		} else if (defaultObject instanceof Boolean) {
+			return sp.getBoolean(key, (Boolean) defaultObject);
+		} else if (defaultObject instanceof Float) {
+			return sp.getFloat(key, (Float) defaultObject);
+		} else if (defaultObject instanceof Long) {
+			return sp.getLong(key, (Long) defaultObject);
+		}
+		return null;
+	}
+
+}
\ No newline at end of file
Index: frameworks/base/packages/Keyguard/res/drawable-xxhdpi/hongmo_mesh_mask_image.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: frameworks/base/packages/Keyguard/res/drawable-xxhdpi/hongmo_mesh_mask_image.png
===================================================================
--- frameworks/base/packages/Keyguard/res/drawable-xxhdpi/hongmo_mesh_mask_image.png	(revision 0)
+++ frameworks/base/packages/Keyguard/res/drawable-xxhdpi/hongmo_mesh_mask_image.png	(revision 2329)

Property changes on: frameworks/base/packages/Keyguard/res/drawable-xxhdpi/hongmo_mesh_mask_image.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: frameworks/base/packages/Keyguard/res/drawable-xxhdpi/hongmo_mask.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: frameworks/base/packages/Keyguard/res/drawable-xxhdpi/hongmo_mask.png
===================================================================
--- frameworks/base/packages/Keyguard/res/drawable-xxhdpi/hongmo_mask.png	(revision 0)
+++ frameworks/base/packages/Keyguard/res/drawable-xxhdpi/hongmo_mask.png	(revision 2329)

Property changes on: frameworks/base/packages/Keyguard/res/drawable-xxhdpi/hongmo_mask.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: frameworks/base/packages/Keyguard/res/drawable-xxhdpi/ic_face_scan_steps_num_normal.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: frameworks/base/packages/Keyguard/res/drawable-xxhdpi/ic_face_scan_steps_num_normal.png
===================================================================
--- frameworks/base/packages/Keyguard/res/drawable-xxhdpi/ic_face_scan_steps_num_normal.png	(revision 0)
+++ frameworks/base/packages/Keyguard/res/drawable-xxhdpi/ic_face_scan_steps_num_normal.png	(revision 2329)

Property changes on: frameworks/base/packages/Keyguard/res/drawable-xxhdpi/ic_face_scan_steps_num_normal.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: frameworks/base/packages/Keyguard/res/drawable-xxhdpi/ic_face_scan_steps_bg.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: frameworks/base/packages/Keyguard/res/drawable-xxhdpi/ic_face_scan_steps_bg.png
===================================================================
--- frameworks/base/packages/Keyguard/res/drawable-xxhdpi/ic_face_scan_steps_bg.png	(revision 0)
+++ frameworks/base/packages/Keyguard/res/drawable-xxhdpi/ic_face_scan_steps_bg.png	(revision 2329)

Property changes on: frameworks/base/packages/Keyguard/res/drawable-xxhdpi/ic_face_scan_steps_bg.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: frameworks/base/packages/Keyguard/res/drawable-xxhdpi/ic_face_scan_steps_normal.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: frameworks/base/packages/Keyguard/res/drawable-xxhdpi/ic_face_scan_steps_normal.png
===================================================================
--- frameworks/base/packages/Keyguard/res/drawable-xxhdpi/ic_face_scan_steps_normal.png	(revision 0)
+++ frameworks/base/packages/Keyguard/res/drawable-xxhdpi/ic_face_scan_steps_normal.png	(revision 2329)

Property changes on: frameworks/base/packages/Keyguard/res/drawable-xxhdpi/ic_face_scan_steps_normal.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: frameworks/base/packages/Keyguard/res/drawable-xxhdpi/hongmo_mesh_image.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: frameworks/base/packages/Keyguard/res/drawable-xxhdpi/hongmo_mesh_image.png
===================================================================
--- frameworks/base/packages/Keyguard/res/drawable-xxhdpi/hongmo_mesh_image.png	(revision 0)
+++ frameworks/base/packages/Keyguard/res/drawable-xxhdpi/hongmo_mesh_image.png	(revision 2329)

Property changes on: frameworks/base/packages/Keyguard/res/drawable-xxhdpi/hongmo_mesh_image.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: frameworks/base/packages/Keyguard/res/drawable-xxhdpi/face_notify.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: frameworks/base/packages/Keyguard/res/drawable-xxhdpi/face_notify.png
===================================================================
--- frameworks/base/packages/Keyguard/res/drawable-xxhdpi/face_notify.png	(revision 0)
+++ frameworks/base/packages/Keyguard/res/drawable-xxhdpi/face_notify.png	(revision 2329)

Property changes on: frameworks/base/packages/Keyguard/res/drawable-xxhdpi/face_notify.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: frameworks/base/packages/Keyguard/res/drawable-xxhdpi/ic_face_scan_steps_num_select.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: frameworks/base/packages/Keyguard/res/drawable-xxhdpi/ic_face_scan_steps_num_select.png
===================================================================
--- frameworks/base/packages/Keyguard/res/drawable-xxhdpi/ic_face_scan_steps_num_select.png	(revision 0)
+++ frameworks/base/packages/Keyguard/res/drawable-xxhdpi/ic_face_scan_steps_num_select.png	(revision 2329)

Property changes on: frameworks/base/packages/Keyguard/res/drawable-xxhdpi/ic_face_scan_steps_num_select.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: frameworks/base/packages/Keyguard/res/drawable-xxhdpi/ic_face_scan_steps_num_finish.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: frameworks/base/packages/Keyguard/res/drawable-xxhdpi/ic_face_scan_steps_num_finish.png
===================================================================
--- frameworks/base/packages/Keyguard/res/drawable-xxhdpi/ic_face_scan_steps_num_finish.png	(revision 0)
+++ frameworks/base/packages/Keyguard/res/drawable-xxhdpi/ic_face_scan_steps_num_finish.png	(revision 2329)

Property changes on: frameworks/base/packages/Keyguard/res/drawable-xxhdpi/ic_face_scan_steps_num_finish.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: frameworks/base/packages/Keyguard/res/drawable-xxhdpi/hongmo_mask_two.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: frameworks/base/packages/Keyguard/res/drawable-xxhdpi/hongmo_mask_two.png
===================================================================
--- frameworks/base/packages/Keyguard/res/drawable-xxhdpi/hongmo_mask_two.png	(revision 0)
+++ frameworks/base/packages/Keyguard/res/drawable-xxhdpi/hongmo_mask_two.png	(revision 2329)

Property changes on: frameworks/base/packages/Keyguard/res/drawable-xxhdpi/hongmo_mask_two.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: frameworks/base/packages/Keyguard/res/drawable-xxhdpi/ic_face_scan_steps_finish.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: frameworks/base/packages/Keyguard/res/drawable-xxhdpi/ic_face_scan_steps_finish.png
===================================================================
--- frameworks/base/packages/Keyguard/res/drawable-xxhdpi/ic_face_scan_steps_finish.png	(revision 0)
+++ frameworks/base/packages/Keyguard/res/drawable-xxhdpi/ic_face_scan_steps_finish.png	(revision 2329)

Property changes on: frameworks/base/packages/Keyguard/res/drawable-xxhdpi/ic_face_scan_steps_finish.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: frameworks/base/packages/Keyguard/res/mipmap-xhdpi/ic_checkbox_unchecked.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: frameworks/base/packages/Keyguard/res/mipmap-xhdpi/ic_checkbox_unchecked.png
===================================================================
--- frameworks/base/packages/Keyguard/res/mipmap-xhdpi/ic_checkbox_unchecked.png	(revision 0)
+++ frameworks/base/packages/Keyguard/res/mipmap-xhdpi/ic_checkbox_unchecked.png	(revision 2329)

Property changes on: frameworks/base/packages/Keyguard/res/mipmap-xhdpi/ic_checkbox_unchecked.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: frameworks/base/packages/Keyguard/res/mipmap-xhdpi/ic_checkbox_checked.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: frameworks/base/packages/Keyguard/res/mipmap-xhdpi/ic_checkbox_checked.png
===================================================================
--- frameworks/base/packages/Keyguard/res/mipmap-xhdpi/ic_checkbox_checked.png	(revision 0)
+++ frameworks/base/packages/Keyguard/res/mipmap-xhdpi/ic_checkbox_checked.png	(revision 2329)

Property changes on: frameworks/base/packages/Keyguard/res/mipmap-xhdpi/ic_checkbox_checked.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: frameworks/base/packages/Keyguard/res/values/attr_camera.xml
===================================================================
--- frameworks/base/packages/Keyguard/res/values/attr_camera.xml	(revision 0)
+++ frameworks/base/packages/Keyguard/res/values/attr_camera.xml	(revision 2329)
@@ -0,0 +1,15 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <declare-styleable name="CameraView">
+        <attr name="scale">
+            <enum name="auto" value="0"/>
+            <enum name="scale_4_3" value="1"/>
+            <enum name="scale_16_9" value="2"/>
+        </attr>
+        <attr name="resolution" format="integer"/>
+        <attr name="cameraFacing">
+            <enum name="back" value="0"/>
+            <enum name="front" value="1"/>
+        </attr>
+    </declare-styleable>
+</resources>
Index: frameworks/base/packages/Keyguard/res/values/strings.xml
===================================================================
--- frameworks/base/packages/Keyguard/res/values/strings.xml	(revision 2328)
+++ frameworks/base/packages/Keyguard/res/values/strings.xml	(revision 2329)
@@ -356,5 +356,84 @@
 
     <!-- Fingerprint hint message when finger was not recognized.-->
     <string name="fingerprint_not_recognized">Not recognized</string>
+    <string name="register_front">&#160;&#160;Frontal</string>
+    <string name="register_up">&#160;&#160;Look up</string>
+    <string name="register_down">&#160;&#160;Look down</string>
+    <string name="register_left">&#160;&#160;Look left</string>
+    <string name="register_right">&#160;&#160;Look right</string>
+    <string name="text_face_scan_1">Verify the original face</string>
+    <string name="text_face_scan_2">Enter the new face</string>
+    <string name="text_face_scan_3">Finish</string>
+    <string name="button_text_face_scan_1">1</string>
+    <string name="button_text_face_scan_2">2</string>
+    <string name="button_text_face_scan_3">3</string>
+	<string name="ic_default_start_entry_face_btn">Start Typing</string>
+    <string name="ic_default_sacn_face_description_info">Please keep the phone at 20-50 cm away from the face. Place the face at the circle on the screen </string>
+    <string name="ic_default_no_face_data_info">No face detected. Please re recognize it in a bright place</string>
+    <string name="ic_default_entry_face_data_error_info">Can not enter, face recognition is unsuccessful, please keep the front camera clean, and then try to try again.</string>
+    
+   <string name="app_name">Face</string>
+    <string name="action_settings">Setting</string>
+    <string name="hello_world">Hello world!</string>
+    <string name="start_register">Start Register</string>
+    <string name="stop_register">Stop Register</string>
+    <string name="start_identify">Start Identify</string>
+    <string name="stop_identify">Stop Identify</string>
+    <string name="ok">OK</string>
+    <string name="notice">NOTICE</string>
+    <string name="front_camera">Front Camera</string>
+    <string name="rear_camera">Rear Camera</string>
+	
+    <string name="move_closer">move closer</string>
+    <string name="move_father">move further</string>
+    <string name="move_left">move left</string>
+    <string name="move_right">move right</string>
+    <string name="abnormallight">Too strong light </string>
+    
+    <string name="detectglasses">take off the glasses</string>
+    
+    <string name="overtime_register">Register overtime and try it again.</string>
+    <string name="overtime_identify">Identify overtime and try it again.</string>
+    <string name="too_close">Too Close.</string>
+    <string name="close_camera">Please exit camera first.</string>
+    
+    <string name="registererror">Register Failed.</string>
+    <string name="identifyerror">Identify Failed.</string>
+    <string name="face_register_success_text">Register Success</string>  
+    <string name="face_delete_success_text">Delete Success</string>
+          
+    <string name="no_feature">No feature, please register first.</string>
+    
+    <string name="error_device">Unauthorized device！</string>
 
+    <string name="face_not_init">Please initialize face first</string>
+    <string name="face_not_recognized">Identify failed</string>  
+    <string name="face_identify_first_text">Please identify face first.</string>  
+    <string name="face_notify_view_title">Close the face</string>  
+	<string name="face_notify_view_text">You have mastered the face use process, confirm please close the face interface!</string> 	
+    <string name="face_fakeeye">Please stop malicious attacks</string>
+    <string name="face_wear_glasses">Try to adjust the Angle or take off glasses</string>
+    <string name="face_too_closer">Please leave a bit further</string>
+    <string name="face_too_farther">Please close to the point</string>
+    <string name="face_keep_frame">Please keep eyes on the frame</string>
+    <string name="face_error_light_value">Please leave outdoor light environment or used in indoor environment</string>
+    <string name="face_open_eye">Please open your eyes, or adjust the Angle</string>
+    <string name="face_suitable">Is scanning, please remain stable</string>
+    <string name="face_blink_eye">Please the blink of an eye</string>
+    <string name="face_blink_eye_times">times</string>
+	<string name="face_cancel_op">Face entry operation cancelled</string>
+	<string name="face_cancel_identify">Face detect operation cancelled</string>
+	<string name="face_face_get">Recognition failure</string>
+    <string name="face_entry_timeout">Entry Failed, Entry Failed</string>
+    <string name="add_fingerprint_message_secturity">You need set secturity password first</string>
+    <string name="cancel_face_entering">Canclelled face Entry</string>
+    <string name="ic_default_move_face_center">Move the face into the middle of the frame</string>
+    <string name="ic_default_stay_font">Please keep your face straight</string>
+    <string name="ic_default_dark_light">The ambient light is dim at this time. Please go back to the bright place to identify</string>
+
+    <string name="ok">OK</string>
+    <string name="cancel">Cancel</string>
+    <string name="back_to_keyguard">Back</string>
+    <string name="delete_pin">Delete</string>
+    <string name="privacy_data">Privacy Data</string>
 </resources>
Index: frameworks/base/packages/Keyguard/res/values/styles_iris.xml
===================================================================
--- frameworks/base/packages/Keyguard/res/values/styles_iris.xml	(revision 0)
+++ frameworks/base/packages/Keyguard/res/values/styles_iris.xml	(revision 2329)
@@ -0,0 +1,32 @@
+<resources>
+
+    <!--
+        Base application theme, dependent on API level. This theme is replaced
+        by AppBaseTheme from res/values-vXX/styles.xml on newer devices.
+    -->
+    <style name="AppBaseTheme" parent="android:Theme.Light">
+        <!--
+            Theme customizations available in newer API levels can go in
+            res/values-vXX/styles.xml, while customizations related to
+            backward-compatibility can go here.
+        -->
+    </style>
+
+    <!-- Application theme. -->
+    <style name="AppTheme" parent="AppBaseTheme">
+        <!-- All customizations that are NOT specific to a particular API-level can go here. -->
+    </style>
+    
+     <style name="MyTheme" parent="@android:style/Theme.Holo.Light">
+        <item name="android:actionBarStyle">@style/MyActionBar</item>
+    </style>
+    
+     
+      <style name="MyActionBar" parent="@android:style/Widget.Holo.Light.ActionBar">
+        <item name="android:background">#F27300</item>
+        <item name="android:textColor">#ffffff</item>
+        <item name="android:textSize" >40dp</item>
+        
+    </style>
+
+</resources>
Index: frameworks/base/packages/Keyguard/res/values/attrs.xml
===================================================================
--- frameworks/base/packages/Keyguard/res/values/attrs.xml	(revision 2328)
+++ frameworks/base/packages/Keyguard/res/values/attrs.xml	(revision 2329)
@@ -40,4 +40,19 @@
     <declare-styleable name="CarrierText">
         <attr name="allCaps" format="boolean" />
     </declare-styleable>
+
+    <declare-styleable name="RoundProgressBar">
+        <attr name="roundColor" format="color"/>
+        <attr name="roundProgressColor" format="color"/>
+        <attr name="roundWidth" format="dimension"></attr>
+        <attr name="textColor" format="color" />
+        <attr name="textSize" format="dimension" />
+        <attr name="max" format="integer"></attr>
+        <attr name="roundProgressInterCycle" format="integer"></attr>
+        <attr name="textIsDisplayable" format="boolean"></attr>
+        <attr name="style">
+            <enum name="STROKE" value="0"></enum>
+            <enum name="FILL" value="1"></enum>
+        </attr>
+    </declare-styleable>
 </resources>
Index: frameworks/base/packages/Keyguard/res/values/dimens.xml
===================================================================
--- frameworks/base/packages/Keyguard/res/values/dimens.xml	(revision 2328)
+++ frameworks/base/packages/Keyguard/res/values/dimens.xml	(revision 2329)
@@ -58,4 +58,21 @@
 
     <!-- The translation for disappearing security views after having solved them. -->
     <dimen name="disappear_y_translation">-32dp</dimen>
+    <dimen name="activity_left_margin">16dp</dimen>
+    <dimen name="activity_right_margin">16dp</dimen>
+    <dimen name="activity_top_margin">8dp</dimen>
+    <dimen name="activity_bottom_margin">8dp</dimen>
+    <dimen name="actionBar_text_size">16sp</dimen>
+    <dimen name="body_text_size">15sp</dimen>
+    <dimen name="body_hint_text_size">10sp</dimen>
+    <dimen name="activity_horizontal_margin">16dp</dimen>
+    <dimen name="activity_vertical_margin">16dp</dimen>
+    <dimen name="face_scan_button_size">57px</dimen>
+    <dimen name="face_scan_steps_button_width">42px</dimen>
+    <dimen name="face_scan_steps_button_height">30px</dimen>
+    <dimen name="dialog_text_size">20sp</dimen>
+    <dimen name="dialog_text_title_size">15sp</dimen>
+    <dimen name="face_scan_steps_text">12sp</dimen>
+    <dimen name="ic_default_settings_summary_size">12sp</dimen>
+    <dimen name="ic_default_error_info_size">18sp</dimen>
 </resources>
Index: frameworks/base/packages/Keyguard/res/values/colors.xml
===================================================================
--- frameworks/base/packages/Keyguard/res/values/colors.xml	(revision 2328)
+++ frameworks/base/packages/Keyguard/res/values/colors.xml	(revision 2329)
@@ -18,4 +18,17 @@
     <!-- Clock -->
     <color name="clock_white">#ffffffff</color>
     <color name="clock_gray">@*android:color/secondary_text_default_material_dark</color>
+    <color name="colorPrimaryRed">#de2020</color>
+    <color name="actionBar_text_clock">#0EAAFF</color>
+    <color name="face_scan_state_checked_bg_clock">#09A6F9</color>
+    <color name="face_scan_state_checked_bg_stroke_clock">#096699</color>
+    <color name="face_scan_state_checked_bg_clock_gray">#979797</color>
+    <color name="face_scan_state_checked_bg_stroke_clock_gray">#676767</color>
+    <color name="actionBar_bg_clock">#FFFFFF</color>
+    <color name="face_scan_steps_text_color_normal">#1db4dc</color>
+    <color name="face_scan_steps_text_color_select">#551db4dc</color>
+    <color name="ic_default_title_text_color">#CC000000</color>
+    <color name="ic_default_error_text_color">#ED6E52</color>
+    <color name="white">#FFFFFF</color>
+    <color name="colorBackground">#80000000</color>
 </resources>
Index: frameworks/base/packages/Keyguard/res/drawable-hdpi/circle_eight.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: frameworks/base/packages/Keyguard/res/drawable-hdpi/circle_eight.png
===================================================================
--- frameworks/base/packages/Keyguard/res/drawable-hdpi/circle_eight.png	(revision 0)
+++ frameworks/base/packages/Keyguard/res/drawable-hdpi/circle_eight.png	(revision 2329)

Property changes on: frameworks/base/packages/Keyguard/res/drawable-hdpi/circle_eight.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: frameworks/base/packages/Keyguard/res/drawable-hdpi/circle_six.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: frameworks/base/packages/Keyguard/res/drawable-hdpi/circle_six.png
===================================================================
--- frameworks/base/packages/Keyguard/res/drawable-hdpi/circle_six.png	(revision 0)
+++ frameworks/base/packages/Keyguard/res/drawable-hdpi/circle_six.png	(revision 2329)

Property changes on: frameworks/base/packages/Keyguard/res/drawable-hdpi/circle_six.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: frameworks/base/packages/Keyguard/res/drawable-hdpi/circle_three.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: frameworks/base/packages/Keyguard/res/drawable-hdpi/circle_three.png
===================================================================
--- frameworks/base/packages/Keyguard/res/drawable-hdpi/circle_three.png	(revision 0)
+++ frameworks/base/packages/Keyguard/res/drawable-hdpi/circle_three.png	(revision 2329)

Property changes on: frameworks/base/packages/Keyguard/res/drawable-hdpi/circle_three.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: frameworks/base/packages/Keyguard/res/drawable-hdpi/circle_two.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: frameworks/base/packages/Keyguard/res/drawable-hdpi/circle_two.png
===================================================================
--- frameworks/base/packages/Keyguard/res/drawable-hdpi/circle_two.png	(revision 0)
+++ frameworks/base/packages/Keyguard/res/drawable-hdpi/circle_two.png	(revision 2329)

Property changes on: frameworks/base/packages/Keyguard/res/drawable-hdpi/circle_two.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: frameworks/base/packages/Keyguard/res/drawable-hdpi/circle_four.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: frameworks/base/packages/Keyguard/res/drawable-hdpi/circle_four.png
===================================================================
--- frameworks/base/packages/Keyguard/res/drawable-hdpi/circle_four.png	(revision 0)
+++ frameworks/base/packages/Keyguard/res/drawable-hdpi/circle_four.png	(revision 2329)

Property changes on: frameworks/base/packages/Keyguard/res/drawable-hdpi/circle_four.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: frameworks/base/packages/Keyguard/res/drawable-hdpi/iris_notify.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: frameworks/base/packages/Keyguard/res/drawable-hdpi/iris_notify.png
===================================================================
--- frameworks/base/packages/Keyguard/res/drawable-hdpi/iris_notify.png	(revision 0)
+++ frameworks/base/packages/Keyguard/res/drawable-hdpi/iris_notify.png	(revision 2329)

Property changes on: frameworks/base/packages/Keyguard/res/drawable-hdpi/iris_notify.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: frameworks/base/packages/Keyguard/res/drawable-hdpi/circle_focus.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: frameworks/base/packages/Keyguard/res/drawable-hdpi/circle_focus.png
===================================================================
--- frameworks/base/packages/Keyguard/res/drawable-hdpi/circle_focus.png	(revision 0)
+++ frameworks/base/packages/Keyguard/res/drawable-hdpi/circle_focus.png	(revision 2329)

Property changes on: frameworks/base/packages/Keyguard/res/drawable-hdpi/circle_focus.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: frameworks/base/packages/Keyguard/res/drawable-hdpi/circle_seven.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: frameworks/base/packages/Keyguard/res/drawable-hdpi/circle_seven.png
===================================================================
--- frameworks/base/packages/Keyguard/res/drawable-hdpi/circle_seven.png	(revision 0)
+++ frameworks/base/packages/Keyguard/res/drawable-hdpi/circle_seven.png	(revision 2329)

Property changes on: frameworks/base/packages/Keyguard/res/drawable-hdpi/circle_seven.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: frameworks/base/packages/Keyguard/res/drawable-hdpi/circle_dark.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: frameworks/base/packages/Keyguard/res/drawable-hdpi/circle_dark.png
===================================================================
--- frameworks/base/packages/Keyguard/res/drawable-hdpi/circle_dark.png	(revision 0)
+++ frameworks/base/packages/Keyguard/res/drawable-hdpi/circle_dark.png	(revision 2329)

Property changes on: frameworks/base/packages/Keyguard/res/drawable-hdpi/circle_dark.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: frameworks/base/packages/Keyguard/res/drawable-hdpi/circle_one.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: frameworks/base/packages/Keyguard/res/drawable-hdpi/circle_one.png
===================================================================
--- frameworks/base/packages/Keyguard/res/drawable-hdpi/circle_one.png	(revision 0)
+++ frameworks/base/packages/Keyguard/res/drawable-hdpi/circle_one.png	(revision 2329)

Property changes on: frameworks/base/packages/Keyguard/res/drawable-hdpi/circle_one.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: frameworks/base/packages/Keyguard/res/drawable-hdpi/circle_ten.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: frameworks/base/packages/Keyguard/res/drawable-hdpi/circle_ten.png
===================================================================
--- frameworks/base/packages/Keyguard/res/drawable-hdpi/circle_ten.png	(revision 0)
+++ frameworks/base/packages/Keyguard/res/drawable-hdpi/circle_ten.png	(revision 2329)

Property changes on: frameworks/base/packages/Keyguard/res/drawable-hdpi/circle_ten.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: frameworks/base/packages/Keyguard/res/drawable-hdpi/circle_five.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: frameworks/base/packages/Keyguard/res/drawable-hdpi/circle_five.png
===================================================================
--- frameworks/base/packages/Keyguard/res/drawable-hdpi/circle_five.png	(revision 0)
+++ frameworks/base/packages/Keyguard/res/drawable-hdpi/circle_five.png	(revision 2329)

Property changes on: frameworks/base/packages/Keyguard/res/drawable-hdpi/circle_five.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: frameworks/base/packages/Keyguard/res/drawable-hdpi/circle_nine.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: frameworks/base/packages/Keyguard/res/drawable-hdpi/circle_nine.png
===================================================================
--- frameworks/base/packages/Keyguard/res/drawable-hdpi/circle_nine.png	(revision 0)
+++ frameworks/base/packages/Keyguard/res/drawable-hdpi/circle_nine.png	(revision 2329)

Property changes on: frameworks/base/packages/Keyguard/res/drawable-hdpi/circle_nine.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: frameworks/base/packages/Keyguard/res/drawable-hdpi/b_3_2_ok_00.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: frameworks/base/packages/Keyguard/res/drawable-hdpi/b_3_2_ok_00.png
===================================================================
--- frameworks/base/packages/Keyguard/res/drawable-hdpi/b_3_2_ok_00.png	(revision 0)
+++ frameworks/base/packages/Keyguard/res/drawable-hdpi/b_3_2_ok_00.png	(revision 2329)

Property changes on: frameworks/base/packages/Keyguard/res/drawable-hdpi/b_3_2_ok_00.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: frameworks/base/packages/Keyguard/res/drawable-hdpi/circle_dark_block.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: frameworks/base/packages/Keyguard/res/drawable-hdpi/circle_dark_block.png
===================================================================
--- frameworks/base/packages/Keyguard/res/drawable-hdpi/circle_dark_block.png	(revision 0)
+++ frameworks/base/packages/Keyguard/res/drawable-hdpi/circle_dark_block.png	(revision 2329)

Property changes on: frameworks/base/packages/Keyguard/res/drawable-hdpi/circle_dark_block.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: frameworks/base/packages/Keyguard/res/layout/activity_register.xml
===================================================================
--- frameworks/base/packages/Keyguard/res/layout/activity_register.xml	(revision 0)
+++ frameworks/base/packages/Keyguard/res/layout/activity_register.xml	(revision 2329)
@@ -0,0 +1,164 @@
+<?xml version="1.0" encoding="utf-8"?>
+<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:android_custom="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical" >
+
+    <RelativeLayout
+        android:layout_width="match_parent"
+        android:layout_height="400dp"
+        android:layout_centerHorizontal="true"
+        android:gravity="center"
+        android:orientation="vertical"
+        android:visibility="gone" >
+
+        <com.sensetime.faceunlock.widget.FaceUnlockCyleView
+            android:layout_width="280dp"
+            android:layout_height="280dp"
+            android:layout_gravity="center"
+            android_custom:roundColor="#D1D1D1"
+            android_custom:roundProgressColor="#3C87FE"
+            android_custom:roundWidth="6dp"
+            android_custom:textColor="#9A32CD"
+            android_custom:textSize="18sp" />
+    </RelativeLayout>
+
+    <com.sensetime.faceunlock.widget.CameraView
+        android:id="@+id/camera_view"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android_custom:resolution="480"
+        android_custom:scale="scale_16_9"/>
+    <com.sensetime.faceunlock.widget.MaskView
+        android:id="@+id/mask_view"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:layout_below="@+id/toolbar"
+        android:background="@color/colorBackground"/>
+
+    <RelativeLayout
+        android:id="@+id/face_unlock_scan_layout"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:layout_centerHorizontal="true"
+        android:gravity="center"
+        android:orientation="vertical"
+        android:visibility="gone">
+
+        <com.sensetime.faceunlock.widget.FaceUnlockCyleView
+            android:id="@+id/face_unlock_cycle_view"
+            android:layout_width="310dp"
+            android:layout_height="540dp"
+            android:layout_gravity="center"
+            android:layout_marginTop="110dp"
+            android_custom:roundColor="#D1D1D1"
+            android_custom:roundProgressColor="#3C87FE"
+            android_custom:roundWidth="6dp"
+            android_custom:textColor="#3C87FE"
+            android_custom:textSize="18sp" />
+    </RelativeLayout>
+
+    <LinearLayout
+        android:id="@+id/register"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_alignParentRight="true"
+        android:layout_marginRight="14dp"
+        android:layout_marginTop="20dp"
+        android:background="#3f000000"
+        android:orientation="vertical"
+        android:paddingBottom="15sp"
+        android:paddingLeft="12dp"
+        android:paddingRight="12dp"
+        android:paddingTop="15dp"
+        android:visibility="gone" >
+
+        <CheckBox
+            android:id="@+id/register_front"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:button="@drawable/checkbox_button_selector"
+            android:clickable="false"
+            android:text="@string/register_front"
+            android:textColor="@drawable/checkbox_text_color_selector"
+            android:textSize="16sp" />
+
+        <CheckBox
+            android:id="@+id/register_up"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_marginTop="18dp"
+            android:button="@drawable/checkbox_button_selector"
+            android:clickable="false"
+            android:text="@string/register_up"
+            android:textColor="@drawable/checkbox_text_color_selector"
+            android:textSize="16sp" />
+
+        <CheckBox
+            android:id="@+id/register_down"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_marginTop="18dp"
+            android:button="@drawable/checkbox_button_selector"
+            android:clickable="false"
+            android:text="@string/register_down"
+            android:textColor="@drawable/checkbox_text_color_selector"
+            android:textSize="16sp" />
+
+        <CheckBox
+            android:id="@+id/register_left"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_marginTop="18dp"
+            android:button="@drawable/checkbox_button_selector"
+            android:clickable="false"
+            android:text="@string/register_left"
+            android:textColor="@drawable/checkbox_text_color_selector"
+            android:textSize="16sp" />
+
+        <CheckBox
+            android:id="@+id/register_right"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_marginTop="18dp"
+            android:button="@drawable/checkbox_button_selector"
+            android:clickable="false"
+            android:text="@string/register_right"
+            android:textColor="@drawable/checkbox_text_color_selector"
+            android:textSize="16sp" />
+    </LinearLayout>
+
+    <TextView
+        android:id="@+id/face_unlock_info_text"
+        android:layout_width="match_parent"
+        android:layout_marginTop="420dp"
+        android:layout_height="wrap_content"
+        android:gravity="center_horizontal"
+        android:textStyle="bold"
+        android:textSize="@dimen/ic_default_error_info_size" 
+        android:textColor="@color/ic_default_error_text_color"
+        android:visibility="gone" />
+		
+	<LinearLayout
+	    android:orientation="vertical"
+        android:layout_width="280dp"
+        android:layout_height="wrap_content"
+		android:layout_gravity="center_horizontal"
+        android:layout_marginTop="480dp" >
+
+		
+		<TextView
+			android:id="@+id/face_unlock_scan_bottom_info"
+			android:layout_width="280dp"
+			android:layout_height="wrap_content"
+			android:gravity="center_horizontal"
+			android:lineSpacingExtra="10dp"
+			android:text="@string/ic_default_sacn_face_description_info"
+			android:textSize="15sp" 
+			android:textColor="@color/white" />
+	
+	</LinearLayout>
+
+</FrameLayout>
\ No newline at end of file
Index: frameworks/base/packages/Keyguard/res/layout/activity_privacy_space.xml
===================================================================
--- frameworks/base/packages/Keyguard/res/layout/activity_privacy_space.xml	(revision 0)
+++ frameworks/base/packages/Keyguard/res/layout/activity_privacy_space.xml	(revision 2329)
@@ -0,0 +1,68 @@
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    xmlns:android_custom="http://schemas.android.com/apk/res-auto"
+    android:id="@+id/allHongmoContentLayout"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:keepScreenOn="true"
+    android:orientation="vertical"
+    android:background="#b2000000">  
+    <RelativeLayout
+        android:id="@+id/hongmoContentLayout"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="vertical" > 
+
+        <FrameLayout
+            android:id="@+id/frame_big"
+            android:paddingTop="71px"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content" >
+            
+            <com.face.scanner.view.EyeView
+                android:id="@+id/eye"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:background="#00000000" />
+            
+            <com.face.scanner.view.RoundProgressBar
+                    android:id="@+id/roundProgress"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:adjustViewBounds="true"
+                    android_custom:roundColor="@android:color/white"
+                    android_custom:roundProgressColor="#00FF00"
+                    android_custom:roundWidth="6dip"
+                    android_custom:textIsDisplayable="false"
+                    android:visibility="gone"/>
+        </FrameLayout>
+        
+        <LinearLayout
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content"
+            android:layout_alignParentTop="true"
+            android:layout_centerHorizontal="true"
+            android:orientation="vertical"
+            android:visibility="gone">
+
+            <TextView
+                android:id="@+id/ie_final_result"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:textColor="#FF0000"
+                android:textSize="18sp" />
+        </LinearLayout>
+
+    </RelativeLayout>
+
+    <RelativeLayout
+        android:id="@+id/ll_config"
+        android:layout_below="@id/hongmoContentLayout"
+        android:layout_width="match_parent"
+        android:layout_height="0dp"
+        android:layout_weight="1"
+        android:gravity="bottom" >
+        
+    </RelativeLayout>
+    
+</RelativeLayout>
Index: frameworks/base/packages/Keyguard/res/layout/activity_face_identify.xml
===================================================================
--- frameworks/base/packages/Keyguard/res/layout/activity_face_identify.xml	(revision 0)
+++ frameworks/base/packages/Keyguard/res/layout/activity_face_identify.xml	(revision 2329)
@@ -0,0 +1,267 @@
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    xmlns:android_custom="http://schemas.android.com/apk/res-auto"
+    android:id="@+id/allHongmoContentLayout"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:keepScreenOn="true"
+    android:orientation="vertical" >
+
+    <RelativeLayout
+        android:id="@+id/hongmoContentLayout"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="vertical" >
+
+        <FrameLayout
+            android:id="@+id/frame_big"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content" >
+            
+            <com.face.scanner.view.EyeView
+                android:id="@+id/eye"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:background="#00000000" />
+            
+            <com.face.scanner.view.RoundProgressBar
+                    android:id="@+id/roundProgress"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:adjustViewBounds="true"
+                    android_custom:roundColor="@android:color/white"
+                    android_custom:roundProgressColor="#00FF00"
+                    android_custom:roundWidth="6dip"
+                    android_custom:textIsDisplayable="false" 
+                    android:visibility="gone"/>
+        </FrameLayout>
+        
+        <LinearLayout
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_alignParentTop="true"
+            android:layout_centerHorizontal="true"
+            android:orientation="vertical" 
+            android:visibility="gone">
+        </LinearLayout>
+
+    </RelativeLayout>
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="vertical"
+        android:id="@+id/face_scan_content"
+        android:layout_alignParentBottom="true"
+        android:background="@drawable/ic_face_scan_steps_bg">
+
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="72dp"
+            android:layout_marginBottom="16dp"
+            android:orientation="vertical"
+            android:id="@+id/face_scan_steps">
+
+            <RelativeLayout
+                android:layout_width="match_parent"
+                android:layout_height="0dp"
+                android:layout_weight="1"
+                android:visibility="gone">
+
+                <View
+                    android:layout_width="match_parent"
+                    android:layout_height="1dp"
+                    android:layout_centerVertical="true"
+                    android:background="@color/actionBar_text_clock"/>
+
+
+            </RelativeLayout>
+
+            <LinearLayout
+                android:layout_width="match_parent"
+                android:layout_height="0dp"
+                android:layout_weight="1"
+                android:gravity="center_vertical"
+                android:orientation="horizontal"
+                android:visibility="gone">
+
+                <LinearLayout
+                    android:layout_width="0dp"
+                    android:layout_height="wrap_content"
+                    android:layout_weight="1"
+                    android:gravity="center">
+
+                    <TextView
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:text="@string/text_face_scan_1"/>
+
+                </LinearLayout>
+
+                <LinearLayout
+                    android:layout_width="0dp"
+                    android:layout_height="wrap_content"
+                    android:layout_weight="1"
+                    android:gravity="center">
+
+                    <TextView
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:text="@string/text_face_scan_2"/>
+                </LinearLayout>
+
+                <LinearLayout
+                    android:layout_width="0dp"
+                    android:layout_height="wrap_content"
+                    android:layout_weight="1"
+                    android:gravity="center">
+
+                    <TextView
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:text="@string/text_face_scan_3"/>
+
+                </LinearLayout>
+            </LinearLayout>
+        </LinearLayout>
+
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_gravity="bottom"
+            android:gravity="center_vertical"
+            android:layout_marginBottom="60px"
+            android:orientation="horizontal"
+            android:layout_marginLeft="@dimen/activity_left_margin"
+            android:layout_marginRight="@dimen/activity_right_margin">
+                <LinearLayout
+                    android:layout_width="0dp"
+                    android:layout_height="wrap_content"
+                    android:layout_weight="1"
+                    android:gravity="center">
+
+                    <Button
+                        android:id="@+id/face_scan_button_1"
+                        style="?android:attr/borderlessButtonStyle"
+                        android:layout_width="@dimen/face_scan_button_size"
+                        android:layout_height="@dimen/face_scan_button_size"
+                        android:background="@drawable/face_scan_button_bg"
+                        android:text="@string/button_text_face_scan_1"
+                        android:textColor="@color/face_scan_steps_text_color_normal"/>
+
+                </LinearLayout>
+            
+            <LinearLayout
+                android:layout_width="@dimen/face_scan_steps_button_width"
+                android:layout_height="@dimen/face_scan_steps_button_height"
+                android:background="@drawable/face_scan_steps_btn_bg">
+
+            </LinearLayout>
+
+                <LinearLayout
+                    android:layout_width="0dp"
+                    android:layout_height="wrap_content"
+                    android:layout_weight="1"
+                    android:gravity="center">
+
+                    <Button
+                        android:id="@+id/face_scan_button_2"
+                        style="?android:attr/borderlessButtonStyle"
+                        android:layout_width="@dimen/face_scan_button_size"
+                        android:layout_height="@dimen/face_scan_button_size"
+                        android:background="@drawable/face_scan_button_bg"
+                        android:text="@string/button_text_face_scan_2"
+                        android:textColor="@color/face_scan_steps_text_color_normal"/>
+
+                </LinearLayout>
+
+            <LinearLayout
+                android:layout_width="@dimen/face_scan_steps_button_width"
+                android:layout_height="@dimen/face_scan_steps_button_height"
+                android:background="@drawable/face_scan_steps_btn_bg">
+                </LinearLayout>
+
+                <LinearLayout
+                    android:layout_width="0dp"
+                    android:layout_height="wrap_content"
+                    android:layout_weight="1"
+                    android:gravity="center">
+
+                    <Button
+                        android:id="@+id/face_scan_button_3"
+                        style="?android:attr/borderlessButtonStyle"
+                        android:layout_width="@dimen/face_scan_button_size"
+                        android:layout_height="@dimen/face_scan_button_size"
+                        android:background="@drawable/face_scan_button_bg"
+                        android:text="@string/button_text_face_scan_3"
+                        android:textColor="@color/face_scan_steps_text_color_normal"/>
+
+                </LinearLayout>
+        </LinearLayout>
+
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_gravity="bottom"
+            android:layout_marginBottom="81px"
+            android:gravity="center_vertical"
+            android:orientation="horizontal"
+            android:layout_marginLeft="@dimen/activity_top_margin"
+            android:layout_marginRight="@dimen/activity_bottom_margin">
+
+            <LinearLayout
+                android:layout_width="0dp"
+                android:layout_height="wrap_content"
+                android:layout_weight="1"
+                android:gravity="center">
+
+                <TextView
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:text="@string/text_face_scan_1"
+                    android:textSize="@dimen/face_scan_steps_text"
+                    android:textColor="@color/face_scan_steps_text_color_normal"/>
+
+            </LinearLayout>
+
+            <LinearLayout
+                android:layout_width="0dp"
+                android:layout_height="wrap_content"
+                android:layout_weight="1"
+                android:gravity="center">
+
+                <TextView
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:text="@string/text_face_scan_2"
+                    android:textSize="@dimen/face_scan_steps_text"
+                    android:textColor="@color/face_scan_steps_text_color_normal"/>
+            </LinearLayout>
+
+            <LinearLayout
+                android:layout_width="0dp"
+                android:layout_height="wrap_content"
+                android:layout_weight="1"
+                android:gravity="center">
+
+                <TextView
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:text="@string/text_face_scan_3"
+                    android:textSize="@dimen/face_scan_steps_text"
+                    android:textColor="@color/face_scan_steps_text_color_normal"/>
+
+            </LinearLayout>
+
+        </LinearLayout>
+    </LinearLayout>
+    
+    <TextView
+        android:id="@+id/ie_final_result"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:textColor="#ffffff"
+        android:gravity="center"
+        android:layout_below="@id/hongmoContentLayout"
+        android:textSize="15sp" />
+</RelativeLayout>
Index: frameworks/base/packages/Keyguard/res/layout/keyguard_status_area.xml
===================================================================
--- frameworks/base/packages/Keyguard/res/layout/keyguard_status_area.xml	(revision 2328)
+++ frameworks/base/packages/Keyguard/res/layout/keyguard_status_area.xml	(revision 2329)
@@ -35,6 +35,7 @@
         android:textAllCaps="true"
         android:letterSpacing="0.15"
         android:gravity="center"
+		android:visibility="gone"
         />
     <!--end-modify by zengjie  for task:5429900 -->
     <TextView android:id="@+id/alarm_status"
Index: frameworks/base/packages/Keyguard/res/layout/keyguard_status_view.xml
===================================================================
--- frameworks/base/packages/Keyguard/res/layout/keyguard_status_view.xml	(revision 2328)
+++ frameworks/base/packages/Keyguard/res/layout/keyguard_status_view.xml	(revision 2329)
@@ -43,6 +43,7 @@
             android:textColor="@color/clock_white"
             android:singleLine="true"
             style="@style/widget_big_thin_customer"
+			android:visibility="gone"
             android:format12Hour="@string/keyguard_widget_12_hours_format"
             android:format24Hour="@string/keyguard_widget_24_hours_format"
             android:layout_marginBottom="@dimen/bottom_text_spacing_digital" />
Index: frameworks/base/packages/Keyguard/res/layout/face_service_view.xml
===================================================================
--- frameworks/base/packages/Keyguard/res/layout/face_service_view.xml	(revision 0)
+++ frameworks/base/packages/Keyguard/res/layout/face_service_view.xml	(revision 2329)
@@ -0,0 +1,57 @@
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    xmlns:android_custom="http://schemas.android.com/apk/res-auto"
+    android:id="@+id/allHongmoContentLayout"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:keepScreenOn="true"
+    android:orientation="vertical"
+    android:screenOrientation="portrait" >
+
+    <RelativeLayout
+        android:id="@+id/hongmoContentLayout"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="vertical" >
+
+        <FrameLayout
+            android:id="@+id/frame_big"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content" >
+
+            <com.sensetime.faceunlock.widget.CameraView
+                android:id="@+id/camera_view"
+                android:layout_width="wrap_content"
+                android:layout_height="match_parent"
+                android_custom:resolution="0"
+                android_custom:scale="scale_16_9"
+                android:background="#00000000"/>
+        </FrameLayout>
+
+        <LinearLayout
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content"
+            android:layout_alignParentTop="true"
+            android:layout_centerHorizontal="true"
+            android:orientation="vertical"
+            android:visibility="gone" >
+
+            <TextView
+                android:id="@+id/ie_final_result"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:textColor="#FF0000"
+                android:textSize="18sp" />
+        </LinearLayout>
+    </RelativeLayout>
+
+    <RelativeLayout
+        android:id="@+id/ll_config"
+        android:layout_width="match_parent"
+        android:layout_height="0dp"
+        android:layout_below="@id/hongmoContentLayout"
+        android:layout_weight="1"
+        android:gravity="bottom" >
+    </RelativeLayout>
+
+</RelativeLayout>
Index: frameworks/base/packages/Keyguard/res/layout/activity_verify.xml
===================================================================
--- frameworks/base/packages/Keyguard/res/layout/activity_verify.xml	(revision 0)
+++ frameworks/base/packages/Keyguard/res/layout/activity_verify.xml	(revision 2329)
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="utf-8"?>
+<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent" >
+
+    <com.sensetime.faceunlock.widget.CameraView
+        android:id="@+id/camera_view"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        app:resolution="0"
+        app:scale="scale_16_9" />
+
+</FrameLayout>
\ No newline at end of file
Index: frameworks/base/packages/Keyguard/res/drawable/checkbox_text_color_selector.xml
===================================================================
--- frameworks/base/packages/Keyguard/res/drawable/checkbox_text_color_selector.xml	(revision 0)
+++ frameworks/base/packages/Keyguard/res/drawable/checkbox_text_color_selector.xml	(revision 2329)
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:color="@color/colorPrimaryRed" android:state_checked="true"></item>
+    <item android:color="@android:color/white"></item>
+</selector>
\ No newline at end of file
Index: frameworks/base/packages/Keyguard/res/drawable/face_scan_steps_btn_bg.xml
===================================================================
--- frameworks/base/packages/Keyguard/res/drawable/face_scan_steps_btn_bg.xml	(revision 0)
+++ frameworks/base/packages/Keyguard/res/drawable/face_scan_steps_btn_bg.xml	(revision 2329)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:state_selected="true"
+          android:drawable="@drawable/ic_face_scan_steps_finish">
+
+    </item>
+
+    <item
+        android:drawable="@drawable/ic_face_scan_steps_normal">
+
+    </item>
+</selector>
\ No newline at end of file
Index: frameworks/base/packages/Keyguard/res/drawable/checkbox_button_selector.xml
===================================================================
--- frameworks/base/packages/Keyguard/res/drawable/checkbox_button_selector.xml	(revision 0)
+++ frameworks/base/packages/Keyguard/res/drawable/checkbox_button_selector.xml	(revision 2329)
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:drawable="@mipmap/ic_checkbox_checked" android:state_checked="true"></item>
+    <item android:drawable="@mipmap/ic_checkbox_unchecked"></item>
+</selector>
\ No newline at end of file
Index: frameworks/base/packages/Keyguard/res/drawable/face_scan_button_bg.xml
===================================================================
--- frameworks/base/packages/Keyguard/res/drawable/face_scan_button_bg.xml	(revision 0)
+++ frameworks/base/packages/Keyguard/res/drawable/face_scan_button_bg.xml	(revision 2329)
@@ -0,0 +1,52 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android"
+    >
+    <!--<item android:state_selected="true">-->
+        <!--<shape android:shape="oval">-->
+            <!--<padding android:top="2dp"-->
+                     <!--android:bottom="2dp"-->
+                     <!--android:left="2dp"-->
+                     <!--android:right="2dp"/>-->
+
+
+            <!--<solid android:color="@color/face_scan_state_checked_bg_clock"/>-->
+
+            <!--<stroke android:width="3dp"-->
+                    <!--android:color="@color/face_scan_state_checked_bg_stroke_clock"/>-->
+
+            <!--<size android:width="12dp"-->
+                  <!--android:height="12dp"/>-->
+        <!--</shape>-->
+    <!--</item>-->
+
+    <!--<item >-->
+        <!--<shape android:shape="oval">-->
+            <!--<padding android:top="2dp"-->
+                     <!--android:bottom="2dp"-->
+                     <!--android:left="2dp"-->
+                     <!--android:right="2dp"/>-->
+
+            <!--<solid android:color="@color/face_scan_state_checked_bg_clock_gray"/>-->
+
+            <!--<stroke android:width="3dp"-->
+                    <!--android:color="@color/face_scan_state_checked_bg_stroke_clock_gray"/>-->
+
+            <!--<size android:width="12dp"-->
+                  <!--android:height="12dp"/>-->
+        <!--</shape>-->
+    <!--</item>-->
+
+    <item android:state_selected="true"
+        android:drawable="@drawable/ic_face_scan_steps_num_select">
+
+    </item>
+
+    <item
+        android:drawable="@drawable/ic_face_scan_steps_num_normal">
+
+    </item>
+
+    <item android:state_focused="false"
+          android:drawable="@drawable/ic_face_scan_steps_num_finish"/>
+
+</selector>
\ No newline at end of file
Index: frameworks/base/packages
===================================================================
--- frameworks/base/packages	(revision 2328)
+++ frameworks/base/packages	(revision 2329)

Property changes on: frameworks/base/packages
___________________________________________________________________
Modified: svn:mergeinfo
   Merged /L05A/Trunk/ALPS-MP-N1.MP18-V1_AUS6739_66_N1_INHOUSE/frameworks/base/packages:r2195-2198
Index: frameworks/base/Android.mk
===================================================================
--- frameworks/base/Android.mk	(revision 2328)
+++ frameworks/base/Android.mk	(revision 2329)
@@ -344,6 +344,9 @@
 	core/java/com/android/internal/policy/IKeyguardService.aidl \
 	core/java/com/android/internal/policy/IKeyguardStateCallback.aidl \
 	core/java/com/android/internal/policy/IShortcutService.aidl \
+	core/java/com/android/internal/policy/IFaceService.aidl \
+	core/java/com/android/internal/policy/IFaceStateCallback.aidl \
+	core/java/com/android/internal/policy/IFaceOverTimeCallback.aidl \
 	core/java/com/android/internal/os/IDropBoxManagerService.aidl \
 	core/java/com/android/internal/os/IParcelFileDescriptorFactory.aidl \
 	core/java/com/android/internal/os/IResultReceiver.aidl \
Index: frameworks/base/services/core/java/com/android/server/policy/PhoneWindowManager.java
===================================================================
--- frameworks/base/services/core/java/com/android/server/policy/PhoneWindowManager.java	(revision 2328)
+++ frameworks/base/services/core/java/com/android/server/policy/PhoneWindowManager.java	(revision 2329)
@@ -154,7 +154,7 @@
 import com.android.server.policy.keyguard.KeyguardServiceDelegate;
 import com.android.server.policy.keyguard.KeyguardServiceDelegate.DrawnListener;
 import com.android.server.statusbar.StatusBarManagerInternal;
-
+import android.widget.Toast;
 import java.io.File;
 import java.io.FileReader;
 import java.io.IOException;
@@ -171,6 +171,12 @@
 import android.content.Intent;
 import android.provider.Settings.Secure;
 import android.os.SystemClock;
+import com.android.internal.policy.IFaceService;
+import com.android.internal.policy.IFaceStateCallback;
+import com.android.internal.policy.IFaceOverTimeCallback;
+import java.lang.reflect.Method;
+import android.widget.TextView;
+import android.graphics.Color;
 //add wqq end}
 
 //add by dongdongli for 111401 20171122 start
@@ -258,6 +264,7 @@
     static public final String SYSTEM_DIALOG_REASON_RECENT_APPS = "recentapps";
     static public final String SYSTEM_DIALOG_REASON_HOME_KEY = "homekey";
     static public final String SYSTEM_DIALOG_REASON_ASSIST = "assist";
+    private final static String CAMERA_STOP_FACE_SERVICE = "camera_stop_face_service";
 
     /**
      * These are the system UI flags that, when changing, can cause the layout
@@ -436,6 +443,10 @@
     volatile boolean mGoingToSleep;
     volatile boolean mRecentsVisible;
     volatile boolean mTvPictureInPictureVisible;
+	
+	volatile boolean mF1KeyHandled;
+    volatile boolean mF1KeyCancelUp;
+    volatile boolean mF2KeyHandled;
 
     // Used to hold the last user key used to wake the device.  This helps us prevent up events
     // from being passed to the foregrounded app without a corresponding down event
@@ -767,6 +778,16 @@
 
     private static final int MSG_REQUEST_TRANSIENT_BARS_ARG_STATUS = 0;
     private static final int MSG_REQUEST_TRANSIENT_BARS_ARG_NAVIGATION = 1;
+	
+	private static final int MSG_FACE_VERIFY_SUCESS = 20;
+    private static final int MSG_FACE_VERITY_FAIL = 21;
+    private static final int MSG_NO_FACE_VERITY= 22;
+    private static final int MSG_EXIT_FACE_VERIFY = 23;
+    private static final int MSG_REMOVE_FACE_TIP = 24;
+    private static final int MSG_REMOVE_NO_FACE_WINDOW = 25;
+    private static final int MSG_DISPATCH_START_FACE_VERIFY = 26;
+    private static final int MSG_ADD_NOT_ENTER_SECURE_WINDOW = 27;
+    private static final int MSG_REMOVE_NOT_ENTER_SECURE_WINDOW = 28;
 
     private class PolicyHandler extends Handler {
         @Override
@@ -834,6 +855,23 @@
                 case MSG_DISPOSE_INPUT_CONSUMER:
                     disposeInputConsumer((InputConsumer) msg.obj);
                     break;
+                case MSG_FACE_VERIFY_SUCESS:
+                    executeFaceVerifySucess();
+                    break;
+                case MSG_FACE_VERITY_FAIL:
+                    executeFaceVerifyFail();
+                    break;
+                case MSG_NO_FACE_VERITY:
+                    executeFaceVerifyTimeout();
+                    break;
+                case MSG_EXIT_FACE_VERIFY:
+                    if (mFaceVerifyRun) {
+                        exitFaceVerify();
+                    }
+                    break;
+                case MSG_REMOVE_FACE_TIP:
+                    removeFaceVerifyTip();
+                    break;
             }
         }
     }
@@ -1136,6 +1174,17 @@
                         mBeganFromNonInteractive = true;
                     }
                 }
+				   mHandler.postDelayed(new Runnable() {
+                    @Override
+                    public void run() {
+                        if (true/*!isSimPinKeyguardStart zxp*/) {
+                            Slog.d(TAG, "--start face verify when wakeup");
+                            startFaceVerify();
+                        } else {
+                            Slog.d(TAG, "--can't start face verify when wakeup simpinKeyguard on");
+                        }
+                    }
+                }, START_FACE_VERIFY_DELAY);
             }
         }
     }
@@ -3208,6 +3257,23 @@
                 return -1;
             }
 			
+			 //[BUGFIX]-Mod-BEGIN by TCTNB.yubin.ying,10/21/2016,3179079,
+            /*if (mScreenRecordVolumeUpKeyTriggered && !mScreenshotChordPowerKeyTriggered) {
+                final long now = SystemClock.uptimeMillis();
+                final long timeoutTime = mScreenRecordVolumeUpKeyTime
+                        + SCREENSHOT_CHORD_DEBOUNCE_DELAY_MILLIS;
+                if (now < timeoutTime) {
+                    return timeoutTime - now;
+                }
+            }
+            if (keyCode == KeyEvent.KEYCODE_VOLUME_UP
+                    && mScreenRecordVolumeUpKeyConsumed ) {
+                    if (!down) {
+                        mScreenRecordVolumeUpKeyConsumed = false;
+                    }
+                return -1;
+            }*/
+         //[BUGFIX]-Mod-END by TCTNB.yubin.ying
         }
 
         /// M: Screen unpinning @{
@@ -3674,7 +3740,347 @@
         // Let the application handle the key.
         return 0;
     }
+	
+    private final Runnable mF1KeyLongPressTimeoutRunnable = new Runnable() {
+        @Override
+        public void run() {
+            if (!mF1KeyHandled) {
 
+	    //begin add for camera && face  by yukai,2017/7/29
+	    IntentFilter filter1 = new IntentFilter();
+	    filter1.addAction(CAMERA_STOP_FACE_SERVICE);
+	    mContext.registerReceiver(mBroadcastReceiver,filter1); 
+	    //begin add for camera && face  by yukai,2017/7/29
+
+		    mF1KeyHandled = true;
+		    Intent intent = new Intent();
+		    ActivityManager activityManager = (ActivityManager)mContext.getSystemService(Context.ACTIVITY_SERVICE);
+		    ComponentName topActivity = activityManager.getRunningTasks(1).get(0).topActivity;				
+		    String state = Settings.System.getStringForUser(mContext.getContentResolver(),Settings.System.FACE_STATE_ENABLED, 0);
+             if (state == null) {
+                state = "0";
+             }
+		    String topPkgName = topActivity.getPackageName();
+
+
+		    if (topActivity.getPackageName().equals("com.mediatek.camera")) {
+			Log.i("==yukai","camera");
+                        /*Toast.makeText(mContext, R.string.camera_occpuy_face,Toast.LENGTH_LONG).show();*/
+			return;
+		    }
+		    /*if( topPkgName.equals("com.android.dialer") || topPkgName.equals("com.android.contacts")
+				    || topPkgName.equals("com.android.mms") || topPkgName.equals("com.android.gallery3d")) {
+			    if( state.equals("1") ) {						
+				    return;
+			    } else {
+				    isShowSpecialContent = 1;
+			    }
+		    } else {
+			    isShowSpecialContent = 0;
+		    }*/
+		    //add by pythoncat in 2017/03/29 start
+		    if( mContext != null ){
+			    mContext.sendBroadcast(new Intent("android.int ent.action.SECURITY_KEY_LONG_CLICK"));
+		    }
+                //add by pythoncat in 2017/03/29 end
+                if( state.equals("1")) {			
+                    //intent.setClassName("com.android.systemui", "com.face.scanner.PrivacySpaceActivity");
+                    //public static final int MODE_UNLOCK_PRIVACY = 2;
+                    //public static final int MODE_SWITCH_TO_PRIVACY = 4;
+                    //add by zhanghui for 91071 start
+                    if(mContext!=null){
+                       collapsingNotification(mContext);
+                    }
+                    //add by zhanghui for 91071 end
+
+                    //intent.putExtra("privacyState",keyguardOn()?2:4);
+                    //intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+                    //startActivityAsUser(intent, UserHandle.CURRENT_OR_SELF);
+                    if (mContext != null) {
+                        mFaceMode = FACE_MODE_SWITCH;
+                        intent.setClassName("com.android.systemui", "com.face.scanner.FaceService");
+                        intent.putExtra("privacyState",keyguardOn()?2:4);
+                        intent.putExtra("call_package", "PhoneWindowManager_FACE_MODE_SWITCH in " + topPkgName);
+                        mContext.bindService(intent, mFaceVerifyConn,  Context.BIND_AUTO_CREATE);
+                    }
+                } else {
+                    if (keyguardOn()) {
+                        addNoFaceWindow();
+                    } else {
+                        intent.setClassName("com.android.settings", "com.android.settings.face.FaceEntryDialog");
+                        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+                       // intent.putExtra("ShowCustomContent", isShowSpecialContent);
+                        startActivityAsUser(intent, UserHandle.CURRENT_OR_SELF);
+                    }
+                }
+
+            }
+        }
+    };
+
+    public static void collapsingNotification(Context context) {
+        Object service = context.getSystemService("statusbar");
+        if (null == service)
+            return;
+        try {
+           Class<?> clazz = Class.forName("android.app.StatusBarManager");
+           int sdkVersion = android.os.Build.VERSION.SDK_INT;
+           Method collapse = null;
+           if (sdkVersion <= 16) {
+               collapse = clazz.getMethod("collapse");
+           } else {
+               collapse = clazz.getMethod("collapsePanels");
+           }
+           collapse.setAccessible(true);
+           collapse.invoke(service);
+        } catch (Exception e) {
+               e.printStackTrace();
+        }
+    }
+
+    private IFaceService mFaceService;
+    private boolean mFaceVerifyRun = false;
+    private static final int FACE_MODE_INVALID = -1;
+    private static final int FACE_MODE_UNLOCK = 0;
+    private static final int FACE_MODE_SWITCH = 1;
+    private static final int FACE_MODE_FACEME = 2;
+    private int mFaceMode = FACE_MODE_INVALID;
+    private static final int START_FACE_VERIFY_DELAY = 150;
+	
+     private final BroadcastReceiver mBroadcastReceiver = new BroadcastReceiver() {
+        public void onReceive(Context context, Intent intent) {
+            String action = intent.getAction();
+
+            if (action == CAMERA_STOP_FACE_SERVICE) {
+                Log.d(TAG,"*camera stop face service **");
+		        mContext.unbindService(mFaceVerifyConn);
+            }
+        }
+    };
+
+    private ServiceConnection mFaceVerifyConn = new ServiceConnection() {
+        @Override
+        public void onServiceConnected(ComponentName name, IBinder service) {
+            mFaceService = IFaceService.Stub.asInterface(service);
+            try {
+                mFaceService.setStateCallback(mFaceVerifyStateCallback);
+                mFaceService.faceOverTimeCallback(mFaceVerityTimeoutCallback);
+
+                mFaceService.startFaceIdentify();
+                mFaceVerifyRun = true;
+            } catch (RemoteException e) {
+                Log.d(TAG, "start verity face failed");
+            }
+        }
+
+        @Override
+        public void onServiceDisconnected(ComponentName name) {
+            mFaceService = null;
+            mFaceVerifyRun = false;
+        }
+    };
+	
+    IFaceStateCallback.Stub mFaceVerifyStateCallback = new IFaceStateCallback.Stub() {
+
+        @Override
+        public void onIdentifyResult(boolean success) {
+            mHandler.removeMessages(MSG_NO_FACE_VERITY);
+            mHandler.sendEmptyMessage(MSG_EXIT_FACE_VERIFY);
+            if (success) {
+                mHandler.sendEmptyMessage(MSG_FACE_VERIFY_SUCESS);
+            } else {
+                mHandler.sendEmptyMessage(MSG_FACE_VERITY_FAIL);
+            }
+        }
+    };
+
+	
+    IFaceOverTimeCallback.Stub mFaceVerityTimeoutCallback = new IFaceOverTimeCallback.Stub() {
+
+        @Override
+        public void faceOverTime(){
+            mHandler.sendEmptyMessage(MSG_NO_FACE_VERITY);
+        }
+    };
+	
+	
+    private void executeFaceVerifySucess() {
+        if (mFaceMode == FACE_MODE_SWITCH) {
+            //String userId;
+           // userId = Settings.System.getStringForUser(mContext.getContentResolver(),Settings.System.PRIVACY_USER_ID, 0);
+            //int id = Integer.parseInt(userId);
+            try{
+                Intent i = new Intent("PRIVACY_SPACE_SWITCH");
+                //i.putExtra("userid",id);
+                mContext.sendBroadcast(i);
+            }catch(Exception re) {
+               
+            }
+        } else if (mFaceMode == FACE_MODE_FACEME) {
+            handleFacemeVerify(true);
+        }
+        mFaceMode = FACE_MODE_INVALID;
+    }
+	
+   private void executeFaceVerifyFail() {
+        if (mFaceMode == FACE_MODE_FACEME) {
+            handleFacemeVerify(false);
+        } else if (mFaceMode == FACE_MODE_UNLOCK) {
+            handleUnlockVerityFail();
+        }
+        mFaceMode = FACE_MODE_INVALID;
+        addFaceVerifyTip(true);
+    }
+
+    private void executeFaceVerifyTimeout() {
+        if (mFaceVerifyRun) {
+            exitFaceVerify();
+        }
+        addFaceVerifyTip(false);
+    }
+	TextView mFaceTip = null;
+    private void addFaceVerifyTip(boolean fail) {
+        if (mFaceTip == null) {
+            mFaceTip = new TextView(mContext);
+            mFaceTip.setTextSize(14.0f);
+            mFaceTip.setTextColor(Color.WHITE);
+            mFaceTip.setGravity(Gravity.CENTER);
+            mFaceTip.setPadding(25, 10, 25, 10);
+            mFaceTip.setBackgroundResource(com.android.internal.R.drawable.face_verify_frame);
+        }
+        if (fail) {
+            mFaceTip.setText(com.android.internal.R.string.face_verify_fail_tip);
+        } else {
+            mFaceTip.setText(com.android.internal.R.string.face_verify_timeout_tip);
+        }
+        WindowManager wm = (WindowManager) mContext.getSystemService(Context.WINDOW_SERVICE);
+        WindowManager.LayoutParams lp = new WindowManager.LayoutParams();
+        lp.type = WindowManager.LayoutParams.TYPE_SYSTEM_ERROR;
+        lp.format = PixelFormat.RGBA_8888;
+        lp.gravity =Gravity.LEFT | Gravity.TOP;
+        lp.width= WindowManager.LayoutParams.WRAP_CONTENT;
+        lp.height =WindowManager.LayoutParams.WRAP_CONTENT;
+        lp.flags = WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE |
+                WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL |
+                WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE;
+        String laungue = mContext. getResources().getConfiguration().locale.getLanguage();
+		int isVertical = mContext. getResources().getConfiguration().orientation;
+        if (fail) {
+            if (laungue.equals("zh")) {
+				if(isVertical == Configuration.ORIENTATION_PORTRAIT){
+					lp.x = 254;
+				}else{
+					lp.x = 520;
+				}
+            } else {
+                //lp.x = 232;
+				if(isVertical == Configuration.ORIENTATION_PORTRAIT){
+					lp.x = 232;
+				}else{
+					lp.x = 515;
+				}
+            }
+        } else {
+            if (laungue.equals("zh")) {
+                //lp.x = 226;
+				if(isVertical == Configuration.ORIENTATION_PORTRAIT){
+					lp.x = 226;
+				}else{
+					lp.x = 510;
+				}
+            } else {
+                //lp.x = 174;
+				if(isVertical == Configuration.ORIENTATION_PORTRAIT){
+					lp.x = 174;
+				}else{
+					lp.x = 450;
+				}
+            }
+        }
+        lp.y = 980;
+        wm.addView(mFaceTip, lp);
+        mHandler.sendEmptyMessageDelayed(MSG_REMOVE_FACE_TIP, 2000);
+    }
+	
+   private void removeFaceVerifyTip() {
+        if (mFaceTip != null) {
+            WindowManager wm = (WindowManager) mContext.getSystemService(Context.WINDOW_SERVICE);
+            wm.removeView(mFaceTip);
+        }
+    }
+
+	
+    private TextView mNoFaceWindow = null;
+    private void addNoFaceWindow() {
+        if (mNoFaceWindow == null) {
+            mNoFaceWindow = new TextView(mContext);
+            mNoFaceWindow.setTextSize(14.0f);
+            mNoFaceWindow.setTextColor(Color.WHITE);
+            mNoFaceWindow.setGravity(Gravity.CENTER);
+            mNoFaceWindow.setPadding(0, 5, 0, 5);
+            //mNoFaceWindow.setBackgroundResource(com.android.internal.R.drawable.face_verify_frame);
+        }
+       // mNoFaceWindow.setText(com.android.internal.R.string.keyguard_no_face_tip);
+        WindowManager wm = (WindowManager) mContext.getSystemService(Context.WINDOW_SERVICE);
+        WindowManager.LayoutParams lp = new WindowManager.LayoutParams();
+        lp.type = WindowManager.LayoutParams.TYPE_SYSTEM_ERROR;
+        lp.format = PixelFormat.RGBA_8888;
+        lp.gravity =Gravity.LEFT | Gravity.TOP;
+        lp.width= WindowManager.LayoutParams.WRAP_CONTENT;
+        lp.height =WindowManager.LayoutParams.WRAP_CONTENT;
+        lp.flags = WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE |
+                WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL |
+                WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE;
+        lp.x = 40;
+        lp.y = 980;
+        wm.addView(mNoFaceWindow, lp);
+        mHandler.sendEmptyMessageDelayed(MSG_REMOVE_NO_FACE_WINDOW, 2000);
+    }
+	
+    private void removeNoFaceWindow() {
+        if (mNoFaceWindow != null) {
+            WindowManager wm = (WindowManager) mContext.getSystemService(Context.WINDOW_SERVICE);
+            wm.removeView(mNoFaceWindow);
+        }
+    }
+	
+
+    private void handleFacemeVerify(boolean verifySucess) {
+        try {
+            IStatusBarService statusbar = getStatusBarService();
+            if (statusbar != null) {
+                statusbar.handleFacemeVerify(verifySucess);
+            }
+        } catch (RemoteException e) {
+            Slog.e(TAG, "RemoteException when  handle faceme verify", e);
+            // re-acquire status bar service next time it is needed.
+            mStatusBarService = null;
+        }
+    }
+
+    private void handleUnlockVerityFail() {
+        try {
+            IStatusBarService statusbar = getStatusBarService();
+            if (statusbar != null) {
+                statusbar.handleUnlockVerityFail();
+            }
+        } catch (RemoteException e) {
+            Slog.e(TAG, "RemoteException when  handle faceme verify", e);
+            // re-acquire status bar service next time it is needed.
+            mStatusBarService = null;
+        }
+    }
+	
+    private void exitFaceVerify(){
+        try {
+            Log.d(TAG,"**unbind face service for fail or timeout**");
+            mContext.unbindService(mFaceVerifyConn);
+            mFaceVerifyRun = false;
+        } catch (Exception ex) {
+            Slog.w(TAG, "--exit face verify fail");
+        }
+    }
+
     /** {@inheritDoc} */
     @Override
     public KeyEvent dispatchUnhandledKey(WindowState win, KeyEvent event, int policyFlags) {
@@ -6720,6 +7126,47 @@
         mPowerManager.wakeUp(wakeTime, reason);
         return true;
     }
+	
+	
+	    private void startFaceVerify() { //startFaceVerifyInternal
+        if (!mFaceVerifyRun && keyguardOn() /*&& !isSimPinKeyguardStart && !inCall() && !isSwitchingUser zxp*/) {
+            String faceEnable = Settings.System.getStringForUser(mContext.getContentResolver(), Settings.System.FACE_STATE_ENABLED, 0);
+            int faceUnlockState = Settings.System.getInt(mContext.getContentResolver(), Settings.System.FACE_UNLOCK_STATE_ENABLED, 0);
+           // int facemeMode = Settings.System.getInt(mContext.getContentResolver(), Settings.System.PRIVACY_PROTECTION_ENABLED, 0);
+            /*int activeNotificationCountactiveNotificationCount = Settings.System.getInt(mContext.getContentResolver(), Settings.System.ACTIVE_NOTIFICATION_COUNT, 0);
+            int showNotification = Settings.Secure.getInt(mContext.getContentResolver(), Settings.Secure.LOCK_SCREEN_SHOW_NOTIFICATIONS, 0);
+            Slog.d(TAG, "--faceEnable: " + faceEnable + " ,faceUnlockState: " + faceUnlockState
+                         + " ,faceMode: " + facemeMode + " ,activeNotificationCount" + activeNotificationCount
+                         + " ,showNotification: " + showNotification);zxp*/
+            if (faceEnable == null) {
+                faceEnable = "0";
+            }
+            if (faceEnable.equals("1")) {
+                if (faceUnlockState == 1) {
+                    //mFaceMode = FACE_MODE_UNLOCK;//zxp
+                    bindFaceService();
+                } /*else if (facemeMode == 1 && showNotification == 1 && activeNotificationCount > 0) {
+                    mFaceMode = FACE_MODE_FACEME;
+                    bindFaceService();
+                }zxp*/
+            }
+			Slog.d(TAG, "faceEnable = "+faceEnable);
+        } else {
+             Slog.d(TAG, "--can't bind FaceService mFaceVerifyRun:");
+        }
+    }
+    private void bindFaceService() {
+        Intent intent = new Intent();
+        intent.setClassName("com.android.systemui", "com.face.scanner.FaceService");
+        if (mFaceMode == FACE_MODE_UNLOCK) {
+            intent.putExtra("privacyState", 2);
+            intent.putExtra("call_package", "PhoneWindowManager_FACE_MODE_UNLOCK");
+        } else {
+            intent.putExtra("call_package", "PhoneWindowManager_FACE_MODE_FACEME");
+        }
+        Slog.d(TAG, "--start bind FaceService-");
+        mContext.bindService(intent, mFaceVerifyConn, Context.BIND_AUTO_CREATE);
+    }
 
     private void finishKeyguardDrawn() {
         synchronized (mLock) {
Index: frameworks/base/services/core/java/com/android/server/statusbar/StatusBarManagerService.java
===================================================================
--- frameworks/base/services/core/java/com/android/server/statusbar/StatusBarManagerService.java	(revision 2328)
+++ frameworks/base/services/core/java/com/android/server/statusbar/StatusBarManagerService.java	(revision 2329)
@@ -374,6 +374,9 @@
             }
         }
     }
+	
+	
+	
 
     @Override
     public void collapsePanels() {
@@ -386,6 +389,14 @@
             }
         }
     }
+    @Override
+    public void handleFacemeVerify(boolean verifySucess){
+		
+	}
+       @Override
+    public void handleUnlockVerityFail(){
+		
+	}
 
     @Override
     public void expandSettingsPanel(String subPanel) {
Index: frameworks/base/services
===================================================================
--- frameworks/base/services	(revision 2328)
+++ frameworks/base/services	(revision 2329)

Property changes on: frameworks/base/services
___________________________________________________________________
Modified: svn:mergeinfo
   Merged /L05A/Trunk/ALPS-MP-N1.MP18-V1_AUS6739_66_N1_INHOUSE/frameworks/base/services:r2195-2198
Index: frameworks/base/core/res/res/drawable-hdpi/face_verify_frame.9.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: frameworks/base/core/res/res/drawable-hdpi/face_verify_frame.9.png
===================================================================
--- frameworks/base/core/res/res/drawable-hdpi/face_verify_frame.9.png	(revision 0)
+++ frameworks/base/core/res/res/drawable-hdpi/face_verify_frame.9.png	(revision 2329)

Property changes on: frameworks/base/core/res/res/drawable-hdpi/face_verify_frame.9.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: frameworks/base/core/res/res/values/symbols.xml
===================================================================
--- frameworks/base/core/res/res/values/symbols.xml	(revision 2328)
+++ frameworks/base/core/res/res/values/symbols.xml	(revision 2329)
@@ -2720,7 +2720,7 @@
   <!-- Screen-size-dependent modes for picker dialogs. -->
   <java-symbol type="integer" name="time_picker_mode" />
   <java-symbol type="integer" name="date_picker_mode" />
-  
+
   <!-- add by dongdongli 20170905 start -->
   <java-symbol type="style" name="Theme.SystemUI.Dialog" />
   <java-symbol type="string" name="immersive_cling_positive" />
@@ -2740,5 +2740,8 @@
   <java-symbol type="id" name="line" />
   <java-symbol type="id" name="power_dialog_info" />
   <java-symbol type="id" name="content_dialog_line" />
+  <java-symbol type="string" name="face_verify_timeout_tip" />
+  <java-symbol type="string" name="face_verify_fail_tip" />
+  <java-symbol type="drawable" name="face_verify_frame" />
 
 </resources>
Index: frameworks/base/core/res/res/values/strings.xml
===================================================================
--- frameworks/base/core/res/res/values/strings.xml	(revision 2328)
+++ frameworks/base/core/res/res/values/strings.xml	(revision 2329)
@@ -4528,4 +4528,6 @@
   <string name="reboot_confirm">Your phone will reboot</string>
   <string name="battery_countdown">Your phone will shut down after 15 seconds.</string>
   <string name="global_action_enforce_restart">Press and hold the power key for at least 8 seconds to power off or hold it longer to reboot.</string>
+    <string name="face_verify_fail_tip">Verify failure </string>
+    <string name="face_verify_timeout_tip">No face was detected</string>
 </resources>
Index: frameworks/base/core/java/com/android/internal/policy/IFaceStateCallback.aidl
===================================================================
--- frameworks/base/core/java/com/android/internal/policy/IFaceStateCallback.aidl	(revision 0)
+++ frameworks/base/core/java/com/android/internal/policy/IFaceStateCallback.aidl	(revision 2329)
@@ -0,0 +1,20 @@
+/*
+ * Copyright (C) 2014 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.android.internal.policy;
+
+interface IFaceStateCallback {
+    void onIdentifyResult(boolean success);
+}
\ No newline at end of file
Index: frameworks/base/core/java/com/android/internal/policy/IFaceService.aidl
===================================================================
--- frameworks/base/core/java/com/android/internal/policy/IFaceService.aidl	(revision 0)
+++ frameworks/base/core/java/com/android/internal/policy/IFaceService.aidl	(revision 2329)
@@ -0,0 +1,30 @@
+/*
+ * Copyright (C) 2013 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.android.internal.policy;
+
+import com.android.internal.policy.IFaceStateCallback;
+import com.android.internal.policy.IFaceOverTimeCallback;
+import android.os.Bundle;
+
+oneway interface IFaceService {
+
+    void setStateCallback(IFaceStateCallback callback);
+	void faceOverTimeCallback(IFaceOverTimeCallback mCallback);
+
+    void startFaceIdentify();
+    void stopFaceIdentify();
+    
+}
Index: frameworks/base/core/java/com/android/internal/policy/IFaceOverTimeCallback.aidl
===================================================================
--- frameworks/base/core/java/com/android/internal/policy/IFaceOverTimeCallback.aidl	(revision 0)
+++ frameworks/base/core/java/com/android/internal/policy/IFaceOverTimeCallback.aidl	(revision 2329)
@@ -0,0 +1,20 @@
+/*
+ * Copyright (C) 2014 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.android.internal.policy;
+
+interface IFaceOverTimeCallback {
+    void faceOverTime();
+}
\ No newline at end of file
Index: frameworks/base/core/java/com/android/internal/statusbar/IStatusBarService.aidl
===================================================================
--- frameworks/base/core/java/com/android/internal/statusbar/IStatusBarService.aidl	(revision 2328)
+++ frameworks/base/core/java/com/android/internal/statusbar/IStatusBarService.aidl	(revision 2329)
@@ -70,4 +70,6 @@
     //ADD-S By Justin.Shen for Hide/Show navigation-bar
     void showNavigationBar();
     //ADD-E By Justin.Shen for Hide/Show navigation-bar
+    void handleFacemeVerify(boolean verifySucess);
+    void handleUnlockVerityFail();
 }
Index: frameworks/base/core/java/android/provider/Settings.java
===================================================================
--- frameworks/base/core/java/android/provider/Settings.java	(revision 2328)
+++ frameworks/base/core/java/android/provider/Settings.java	(revision 2329)
@@ -3081,6 +3081,19 @@
                 }
             }
         };
+		
+       /**
+         * 
+         * 
+         * @hide
+         */
+        public static final String FACE_STATE_ENABLED = "face_state_enabled";
+        /**
+         *
+         *
+         * @hide
+         */
+        public static final String FACE_UNLOCK_STATE_ENABLED = "face_unlokc_state_enabled";
 
         /**
          * Setting to enable Auto Replace (AutoText) in text editors. 1 = On, 0 = Off
Index: frameworks/base/core
===================================================================
--- frameworks/base/core	(revision 2328)
+++ frameworks/base/core	(revision 2329)

Property changes on: frameworks/base/core
___________________________________________________________________
Modified: svn:mergeinfo
   Merged /L05A/Trunk/ALPS-MP-N1.MP18-V1_AUS6739_66_N1_INHOUSE/frameworks/base/core:r2195-2198
Index: frameworks/base
===================================================================
--- frameworks/base	(revision 2328)
+++ frameworks/base	(revision 2329)

Property changes on: frameworks/base
___________________________________________________________________
Modified: svn:mergeinfo
   Merged /L05A/Trunk/ALPS-MP-N1.MP18-V1_AUS6739_66_N1_INHOUSE/frameworks/base:r2195-2198
Index: frameworks
===================================================================
--- frameworks	(revision 2328)
+++ frameworks	(revision 2329)

Property changes on: frameworks
___________________________________________________________________
Modified: svn:mergeinfo
   Merged /L05A/Trunk/ALPS-MP-N1.MP18-V1_AUS6739_66_N1_INHOUSE/frameworks:r1814-1816,1852-1854,1884,2195-2198
Index: .
===================================================================
--- .	(revision 2328)
+++ .	(revision 2329)

Property changes on: .
___________________________________________________________________
Modified: svn:mergeinfo
   Merged /L05A/Trunk/ALPS-MP-N1.MP18-V1_AUS6739_66_N1_INHOUSE:r1752,1757,1814-1816,1852-1854,1884,1955-1959,2195-2198
