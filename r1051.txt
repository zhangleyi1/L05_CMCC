Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/tprawdata/TpRawData.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/tprawdata/TpRawData.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/tprawdata/TpRawData.java	(revision 1051)
@@ -0,0 +1,114 @@
+package com.android.mmi.tprawdata;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.TextView;
+
+import android.view.View.OnClickListener;
+import com.android.mmi.MMITestDevice;
+import com.android.mmi.R;
+//import com.mediatek.factorymode.earphone.Earphone;
+
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.content.BroadcastReceiver;
+import android.util.Log;
+import android.content.Context;
+
+import android.content.ComponentName;
+
+public class TpRawData extends Activity implements OnClickListener{
+	private static final int PROGRESS_BAR_MAX = 10000;
+	//private Button succesButton ;
+	//private Button failButton ;
+	Button bt_base_left, bt_base_right;
+	TextView tprawdata_content;
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+		//getWindow().addFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		setContentView(R.layout.activity_tprawdata);
+
+     
+
+		tprawdata_content=(TextView) findViewById(R.id.tprawdata_content);
+		bt_base_left = (Button) findViewById(R.id.bt_base_left);
+		bt_base_left.setText(R.string.bt_pass);
+		bt_base_left.setOnClickListener(this);
+		bt_base_left.setEnabled(false);
+		bt_base_right = (Button) findViewById(R.id.bt_base_right);
+		bt_base_right.setText(R.string.bt_fail);
+		bt_base_right.setOnClickListener(this);
+		
+		
+	
+	}
+	
+	
+	public void testFinish() {
+				bt_base_left.setEnabled(true);
+				Intent intentResult = new Intent(TpRawData.this, MMITestDevice.class);
+				setResult(RESULT_OK,intentResult);
+				finish();
+	}
+
+
+	@Override
+	protected void onPause() {
+		// TODO Auto-generated method stub
+		super.onPause();
+	}
+
+	@Override
+	protected void onResume() {
+		// TODO Auto-generated method stub
+		super.onResume();
+	}
+
+	@Override
+	protected void onDestroy() {
+		//getWindow().clearFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		super.onDestroy();
+	}
+	
+	@Override
+	public void onClick(View v) {
+		switch (v.getId()) {
+		case R.id.bt_base_left: {
+			Intent intent = new Intent(TpRawData.this, MMITestDevice.class);
+			setResult(RESULT_OK, intent);
+			finish();
+			break;
+		}
+
+		case R.id.bt_base_right: {
+			Intent intent = new Intent(TpRawData.this, MMITestDevice.class);
+			setResult(RESULT_CANCELED, intent);
+			finish();
+			break;
+		}
+
+		}
+	}
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(TpRawData.this, MMITestDevice.class);
+			setResult(RESULT_CANCELED,intent);
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/fingerprint/Fingerprint.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/fingerprint/Fingerprint.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/fingerprint/Fingerprint.java	(revision 1051)
@@ -0,0 +1,133 @@
+package com.android.mmi.fingerprint;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.TextView;
+
+import android.view.View.OnClickListener;
+import com.android.mmi.MMITestDevice;
+import com.android.mmi.R;
+//import com.mediatek.factorymode.earphone.Earphone;
+
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.content.BroadcastReceiver;
+import android.util.Log;
+import android.content.Context;
+
+import android.content.ComponentName;
+
+public class Fingerprint extends Activity implements OnClickListener{
+	private static final int PROGRESS_BAR_MAX = 10000;
+	//private Button succesButton ;
+	//private Button failButton ;
+	Button bt_base_left, bt_base_right;
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+		//getWindow().addFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		setContentView(R.layout.activity_fingerprint);
+
+        Intent i = new Intent(Intent.ACTION_MAIN);
+        i.setComponent(new ComponentName("com.android.settings","com.android.settings.fingerprint.FingerprintEnrollFindSensor"));
+        byte[] token = new byte[69];
+        i.putExtra("hw_auth_token", token);
+        i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+        startActivity(i);
+
+		
+		bt_base_left = (Button) findViewById(R.id.bt_base_left);
+		bt_base_left.setText(R.string.bt_pass);
+		bt_base_left.setOnClickListener(this);
+		bt_base_left.setEnabled(false);
+		bt_base_right = (Button) findViewById(R.id.bt_base_right);
+		bt_base_right.setText(R.string.bt_fail);
+		bt_base_right.setOnClickListener(this);
+		
+	/*	
+		IntentFilter mfilter = new IntentFilter();
+		mfilter.addAction("intent.action.finger_FACTORY_MODE_TEST");
+		registerReceiver(new BroadcastReceiver() {
+			@Override
+			public void onReceive(Context context, Intent intent) {
+				Log.v("Finger", "finger_FACTORY_MODE_TEST");
+				int progress = intent.getIntExtra("progress", 0);
+				if (progress > 0) {
+				    bt_base_left.setEnabled(true);
+				}
+				if (progress >= PROGRESS_BAR_MAX) {
+				    testFinish();
+			  }
+			}
+        }, mfilter);*/
+		bt_base_left.setEnabled(true);
+	}
+	
+	
+	public void testFinish() {
+				bt_base_left.setEnabled(true);
+				Intent intentResult = new Intent(Fingerprint.this, MMITestDevice.class);
+				setResult(RESULT_OK,intentResult);
+				finish();
+	}
+
+
+	@Override
+	protected void onPause() {
+		// TODO Auto-generated method stub
+		super.onPause();
+	}
+
+	@Override
+	protected void onResume() {
+		// TODO Auto-generated method stub
+		super.onResume();
+	}
+
+	@Override
+	protected void onDestroy() {
+		//getWindow().clearFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		super.onDestroy();
+	}
+	
+	@Override
+	public void onClick(View v) {
+		switch (v.getId()) {
+		case R.id.bt_base_left: {
+			Intent intent = new Intent(Fingerprint.this, MMITestDevice.class);
+			setResult(RESULT_OK, intent);
+			finish();
+			break;
+		}
+
+		case R.id.bt_base_right: {
+			Intent intent = new Intent(Fingerprint.this, MMITestDevice.class);
+			setResult(RESULT_CANCELED, intent);
+			finish();
+			break;
+		}
+
+		}
+	}
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(Fingerprint.this, MMITestDevice.class);
+			setResult(RESULT_CANCELED,intent);
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/vibrator/MyVibrator.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/vibrator/MyVibrator.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/vibrator/MyVibrator.java	(revision 1051)
@@ -0,0 +1,154 @@
+package com.android.mmi.vibrator;
+
+import java.util.Timer;
+import java.util.TimerTask;
+
+import android.app.Activity;
+import android.app.Service;
+import android.content.Intent;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Message;
+import android.os.Vibrator;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.TextView;
+
+import com.android.mmi.MMITestDevice;
+import com.android.mmi.R;
+
+public class MyVibrator extends Activity implements OnClickListener {
+	TextView tv_base_title, tv_base_pixi;
+	Button bt_base_left, bt_base_right, bt_retest;
+	Vibrator vib;
+	/*
+	Timer timer = new Timer();
+	Handler handler = new Handler() {
+		public void handleMessage(Message msg) {
+			if (msg.what == 0) {
+				onMyVibrator();
+			}
+			super.handleMessage(msg);
+		}
+
+	};
+/*
+	class MytimerTask extends TimerTask {
+		public void run() {
+			Message message = new Message();
+			message.what = 0;
+			handler.sendMessage(message);
+		}
+	}
+*/
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		super.onCreate(savedInstanceState);
+		requestWindowFeature(Window.FEATURE_NO_TITLE);
+		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
+				WindowManager.LayoutParams.FLAG_FULLSCREEN);
+		getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_IMMERSIVE_GESTURE_ISOLATED);
+		getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
+		setContentView(R.layout.activity_vibrator);
+		tv_base_title = (TextView) findViewById(R.id.tv_base_title);
+		tv_base_title.setText(R.string.vibrator_name);
+		tv_base_pixi = (TextView) findViewById(R.id.tv_base_pixi);
+		tv_base_pixi.setText(R.string.is_vibrator_on);
+		tv_base_pixi.setVisibility(View.GONE);
+
+		bt_base_left = (Button) findViewById(R.id.bt_base_left);
+		bt_base_left.setText(R.string.bt_pass);
+		bt_base_left.setOnClickListener(this);
+		bt_base_right = (Button) findViewById(R.id.bt_base_right);
+		bt_base_right.setText(R.string.bt_fail);
+		bt_base_right.setOnClickListener(this);
+
+		bt_retest = (Button) findViewById(R.id.bt_retest);
+		bt_retest.setText(R.string.bt_retest);
+		bt_retest.setOnClickListener(this);
+		vib = (Vibrator) getSystemService(Service.VIBRATOR_SERVICE);
+	}
+
+	@Override
+	public void onClick(View v) {
+		switch (v.getId()) {
+		case R.id.bt_base_left: {
+			Intent intent = new Intent(MyVibrator.this, MMITestDevice.class);
+			setResult(RESULT_OK, intent);
+			finish();
+			break;
+		}
+
+		case R.id.bt_base_right: {
+			Intent intent = new Intent(MyVibrator.this, MMITestDevice.class);
+			setResult(RESULT_CANCELED, intent);
+			finish();
+			break;
+		}
+
+	/*	case R.id.bt_retest: {
+			tv_base_pixi.setText(R.string.is_vibrator_on);
+			bt_base_left.setVisibility(View.GONE);
+			bt_base_right.setVisibility(View.GONE);
+			bt_retest.setVisibility(View.GONE);
+			onMyVibrator();
+			break;
+		}
+		*/
+		}
+	}
+
+	private void onMyVibrator() {		
+	    if(vib != null){
+			//vib.vibrate(1000);
+			vib.vibrate(new long[]{2000,1000,1000,1000}, 0);//
+			//tv_base_pixi.setText(R.string.test_finished);
+			bt_base_left.setVisibility(View.VISIBLE);
+			bt_base_right.setVisibility(View.VISIBLE);
+			//bt_retest.setVisibility(View.VISIBLE);
+		}		
+	}
+
+	@Override
+	protected void onResume() {
+		super.onResume();
+		bt_base_left.setVisibility(View.GONE);
+		bt_base_right.setVisibility(View.GONE);
+		bt_retest.setVisibility(View.GONE);
+		onMyVibrator();
+		
+		
+		//timer.schedule(new MytimerTask(),2000,1000);
+		
+	}
+
+	@Override
+	protected void onPause() {
+		super.onPause();
+		if (vib != null) {
+			vib.cancel();
+			vib = null;
+		}
+	}
+
+	@Override
+	protected void onDestroy() {
+		super.onDestroy();
+		/*if (timer != null) {
+			timer.cancel();
+			timer = null;
+		}*/
+	}
+
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		if (MMITestDevice.isAutoTest()) {			
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/camera/DrawCaptureRect.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/camera/DrawCaptureRect.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/camera/DrawCaptureRect.java	(revision 1051)
@@ -0,0 +1,35 @@
+package com.android.mmi.camera;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.view.View;
+
+class DrawCaptureRect extends View
+{
+ private int mcolorfill;
+ private int mleft, mtop, mwidth, mheight;
+public DrawCaptureRect(Context context,int left, int top, int width, int height, int colorfill) {
+super(context);
+// TODO Auto-generated constructor stub
+this.mcolorfill = colorfill;
+this.mleft = left;
+this.mtop = top;
+this.mwidth = width;
+this.mheight = height;
+}
+@Override
+protected void onDraw(Canvas canvas) {
+// TODO Auto-generated method stub
+Paint mpaint = new Paint();
+mpaint.setColor(mcolorfill);
+mpaint.setStyle(Paint.Style.FILL);
+mpaint.setStrokeWidth(1.0f);
+canvas.drawLine(mleft, mtop, mleft+mwidth, mtop, mpaint);
+canvas.drawLine(mleft+mwidth, mtop, mleft+mwidth, mtop+mheight, mpaint);
+canvas.drawLine(mleft, mtop, mleft, mtop+mheight, mpaint);
+canvas.drawLine(mleft, mtop+mheight, mleft+mwidth, mtop+mheight, mpaint);
+super.onDraw(canvas); 
+}
+                  
+}
\ No newline at end of file
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/camera/MyCamera.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/camera/MyCamera.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/camera/MyCamera.java	(revision 1051)
@@ -0,0 +1,409 @@
+package com.android.mmi.camera;
+
+import android.annotation.SuppressLint;
+import android.app.Activity;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Message;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.widget.ImageView;
+import android.widget.TextView;
+import android.os.Build;
+import java.io.IOException;
+import java.io.BufferedReader;
+import java.io.FileReader;
+import java.lang.reflect.Method;
+
+import android.graphics.PixelFormat;
+import android.graphics.Rect;
+import android.graphics.RectF;
+import android.hardware.Camera;
+import android.content.Context;
+import android.content.Intent;
+import android.hardware.Camera.AutoFocusCallback;
+import android.hardware.Camera.Parameters;
+import android.os.Build;
+import android.os.Bundle;
+import android.view.KeyEvent;
+import android.view.MotionEvent;
+import android.view.SurfaceHolder;
+import android.view.SurfaceView;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.view.View.OnTouchListener;
+import android.view.ViewGroup.LayoutParams;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.TextView;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import android.hardware.Camera.Size;
+
+import com.android.mmi.MMITestDevice;
+import com.android.mmi.R;
+import android.util.Log;
+
+
+public class MyCamera extends Activity implements OnClickListener ,OnTouchListener{
+	TextView tv_base_title,tv_otp,tv_pixel,tv_id;
+	Button bt_base_left, bt_base_right;
+	String sid = "ID: ";
+	String spixel = "   pixel: "+"13M_AF"	;
+	String sotp = "OTP: ";
+	private SurfaceView sv_camera;
+	private SurfaceHolder holder;
+	private Camera camera;
+	Camera.Parameters parameters;
+	private int mScreenWidth;
+	private int mScreenHeigh;
+    float x;
+    float y;
+    ImageView focus;
+
+        Handler handler = new Handler() {
+            public void handleMessage(Message msg) {
+                focus.setVisibility(View.INVISIBLE);
+                super.handleMessage(msg);
+            }
+        }; 
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		super.onCreate(savedInstanceState);
+		requestWindowFeature(Window.FEATURE_NO_TITLE);
+		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
+				WindowManager.LayoutParams.FLAG_FULLSCREEN);
+		getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_IMMERSIVE_GESTURE_ISOLATED);
+		getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
+		setContentView(R.layout.activity_camera);
+		tv_base_title = (TextView) findViewById(R.id.tv_base_title);
+		tv_base_title.setText(R.string.camera_name);
+
+        DrawCaptureRect mDraw = new DrawCaptureRect(MyCamera.this, 290,100,200,200,getResources().getColor(R.drawable.background_camera));
+        addContentView(mDraw, new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT));
+		tv_otp = (TextView) findViewById(R.id.tv_otp);
+		tv_pixel = (TextView) findViewById(R.id.tv_pixel);
+		tv_id =	(TextView) findViewById(R.id.tv_id);
+        focus = (ImageView) findViewById(R.id.focus);
+        focus.setVisibility(View.INVISIBLE);	
+		getCameraInfo();		
+		sv_camera = (SurfaceView) this.findViewById(R.id.sv_camera);
+		WindowManager dpy = (WindowManager) getSystemService(Context.WINDOW_SERVICE);
+		mScreenWidth = dpy.getDefaultDisplay().getWidth();
+		mScreenHeigh = dpy.getDefaultDisplay().getHeight();
+		bt_base_left = (Button) findViewById(R.id.bt_base_left);
+		bt_base_left.setText(R.string.bt_pass);
+		bt_base_left.getBackground().setAlpha(0);
+		bt_base_left.setOnClickListener(this);
+		bt_base_right = (Button) findViewById(R.id.bt_base_right);
+		bt_base_right.setText(R.string.bt_fail);
+		bt_base_right.getBackground().setAlpha(0);
+		bt_base_right.setOnClickListener(this);
+
+        sv_camera.setFocusable(true);
+        sv_camera.setKeepScreenOn(true);
+		holder = sv_camera.getHolder();
+		holder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);
+		holder.addCallback(new MyHolderCallback());
+        sv_camera.setOnTouchListener(this);
+	}
+	private String getCameraInfo() {
+		
+		String filePath = "/proc/driver/camera_info1";
+		String CameraInfo =getFileContent(filePath);
+
+		String mainid = CameraInfo.substring(7, CameraInfo.indexOf(";CAM[1]"));
+		String mainotp = CameraInfo.substring(CameraInfo.indexOf("MAIN_OTP:"), CameraInfo.indexOf("MAIN_OTP:")+10);
+		if(mainotp.equals("MAIN_OTP:1")){
+			tv_otp.setText(sotp+"ok");
+		}else{tv_otp.setText(sotp+"not ok");};
+		tv_id.setText(sid+mainid);
+		tv_pixel.setText(spixel);
+		return "" + CameraInfo;
+	}
+	private static String getFileContent(String filePath) {
+		if (filePath == null) {
+			return null;
+		}
+		StringBuilder builder = new StringBuilder();
+		BufferedReader reader = null;
+		try {
+			reader = new BufferedReader(new FileReader(filePath));
+			char[] buffer = new char[500];
+			int ret = -1;
+			while ((ret = reader.read(buffer)) != -1) {
+				builder.append(buffer, 0, ret);
+			}
+		} catch (IOException e) {
+		} finally {
+			if (reader != null) {
+				try {
+					reader.close();
+				} catch (IOException e) {
+				}
+			}
+		}
+		String result = builder.toString();
+		if (result != null) {
+			result = result.trim();
+		}
+		return result;
+	}
+
+	@Override
+	public void onClick(View v) {
+		switch (v.getId()) {
+		case R.id.bt_base_left: {
+			if (camera != null) {
+				camera.stopPreview();
+				camera.release();
+				camera = null;
+			}
+			Intent intent = new Intent(MyCamera.this, MMITestDevice.class);
+			setResult(RESULT_OK, intent);
+			finish();
+			break;
+		}
+
+		case R.id.bt_base_right: {
+			Intent intent = new Intent(MyCamera.this, MMITestDevice.class);
+			setResult(RESULT_CANCELED, intent);
+			finish();
+			break;
+		}
+
+		}
+	}
+
+	private class MyHolderCallback implements SurfaceHolder.Callback {
+
+		public void surfaceCreated(SurfaceHolder holder) {
+
+			if (null == camera) {
+				camera = Camera.open();
+				Camera.Parameters Mparameters = camera.getParameters(); 
+				 List<Size> sizes = Mparameters.getSupportedPictureSizes();
+				 if (sizes == null) {
+            		 return;
+         			}
+         int maxSize = 0;
+         int width = 0;
+         int height = 0;
+         for (int i = 0; i < sizes.size(); i++) {
+             Size size = sizes.get(i);
+             int pix = size.width * size.height;
+			 Log.i("TAG_ZC","pix--->"+pix);
+             if (pix > maxSize) {
+              	  maxSize = pix;
+                  width = size.width;
+                  height = size.height;
+             }
+         }	
+	
+				try {
+					camera.setPreviewDisplay(holder);
+					initCamera();
+					camera.startPreview();
+				} catch (IOException e) {
+					e.printStackTrace();
+				}
+			}
+
+		}
+
+		public void surfaceChanged(SurfaceHolder holder, int format, int width,
+				int height) {
+			camera.autoFocus(new AutoFocusCallback() {
+				@Override
+				public void onAutoFocus(boolean success, Camera camera) {
+					if (success) {
+                        initCamera();
+						camera.cancelAutoFocus();
+					}
+				}
+
+			});
+		}
+
+		public void surfaceDestroyed(SurfaceHolder holder) {
+			if (camera != null) {
+				camera.stopPreview();
+				camera.release();
+				camera = null;
+			}			
+		}
+	}
+
+	private void initCamera() {
+		if(camera != null){
+			parameters = camera.getParameters();
+			//Camera.Parameters Mparameters = camera.getParameters(); 
+			List<Size> sizes = parameters.getSupportedPictureSizes();
+			if (sizes == null) {
+				return;
+					   }
+			int maxSize = 0;
+			int width = 0;
+			int height = 0;
+			for (int i = 0; i < sizes.size(); i++) {
+				Size size = sizes.get(i);
+				int pix = size.width * size.height;
+				Log.i("TAG_ZC","pix1--->"+pix);
+				if (pix > maxSize) {
+				   maxSize = pix;
+					width = size.width;
+					height = size.height;
+				}
+			}  
+
+
+			float tmp = 0f;  
+		    float mindiff = 100f;  
+		    float x_d_y = (float)mScreenWidth/ (float)mScreenHeigh;  
+		    Size best = null;  
+		    List<Size> supportedPreviewSizes = parameters.getSupportedPreviewSizes();  
+		    for(Size s : supportedPreviewSizes){  
+		        tmp = Math.abs(((float)s.height/(float)s.width)-x_d_y);  
+		        if(tmp<mindiff){  
+		            mindiff = tmp;  
+		            best = s;  
+		        }  
+		    }  
+					
+			parameters.setPictureFormat(PixelFormat.JPEG);
+			parameters.setFlashMode(Parameters.FLASH_MODE_OFF);
+	        parameters.setFocusMode(Parameters.FOCUS_MODE_CONTINUOUS_PICTURE);
+			parameters.setPreviewSize(best.width, best.height);
+			setDispaly(parameters, camera);
+			camera.setParameters(parameters);
+			camera.startPreview();
+			camera.cancelAutoFocus();
+		}
+	}
+
+	private void setDispaly(Camera.Parameters parameters, Camera camera) {
+		if (Integer.parseInt(Build.VERSION.SDK) >= 8) {
+			setDisplayOrientation(camera, 90);
+		} else {
+			parameters.setRotation(90);
+		}
+
+	}
+
+	private void setDisplayOrientation(Camera camera, int i) {
+		Method downPolymorphic;
+		try {
+			downPolymorphic = camera.getClass().getMethod(
+					"setDisplayOrientation", new Class[] { int.class });
+			if (downPolymorphic != null) {
+				downPolymorphic.invoke(camera, new Object[] { i });
+			}
+		} catch (Exception e) {
+		}
+	}
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		if (MMITestDevice.isAutoTest()) {			
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+        @Override
+        public boolean onTouch(View v, MotionEvent event) {
+            if (event.getPointerCount() == 1) {
+            handleFocus(event, camera);
+}
+            x=event.getRawX();
+            y=event.getRawY();
+            focus.setVisibility(View.VISIBLE);
+            onFocusBegin(x,y);
+            return false;
+        }
+        private static void handleFocus(MotionEvent event, Camera camera) {
+            Camera.Parameters params = camera.getParameters();
+            Camera.Size previewSize = params.getPreviewSize();
+            Rect focusRect = calculateTapArea(event.getX(), event.getY(), 1f, previewSize);
+            camera.cancelAutoFocus();
+            if (params.getMaxNumFocusAreas() > 0) {
+                List<Camera.Area> focusAreas = new ArrayList<>();
+                int left = (int) (event.getX() - 300);
+                int top = (int) (event.getY() - 300);
+                int right =(int) (event.getX() + 300);
+                int bottom = (int) (event.getY() + 300);
+                left = left < -1000 ? -1000 : left;
+                top = top < -1000 ? -1000 : top;
+                right = right > 1000 ? 1000 : right;
+                bottom = bottom > 1000 ? 1000 : bottom;
+                focusAreas.add(new Camera.Area(new Rect(left, top, right, bottom), 100));
+                params.setFocusAreas(focusAreas);
+            } else {
+                Log.i("TAG_ZC", "focus areas not supported");
+            }
+            final String currentFocusMode = params.getFocusMode();
+            params.setFocusMode(Camera.Parameters.FOCUS_MODE_MACRO);
+            try {
+            camera.setParameters(params);
+                } catch (Exception e) {
+                    e.printStackTrace();
+                }
+            camera.autoFocus(new Camera.AutoFocusCallback() {
+                @Override
+                public void onAutoFocus(boolean success, Camera camera) {
+                    Camera.Parameters params = camera.getParameters();
+                    params.setFocusMode(currentFocusMode);
+                    camera.setParameters(params);
+                }
+            });
+            Rect meteringRect = calculateTapArea(event.getX(), event.getY(), 1.5f, previewSize);
+            if (params.getMaxNumMeteringAreas() > 0) {
+                List<Camera.Area> meteringAreas = new ArrayList<>();
+                meteringAreas.add(new Camera.Area(meteringRect, 800));
+                params.setMeteringAreas(meteringAreas);
+            } else {
+                Log.i("TAG", "metering areas not supported");
+            }
+        }
+        private static Rect calculateTapArea(float x, float y, float coefficient, Camera.Size previewSize) {
+            float focusAreaSize = 300;
+            int areaSize = Float.valueOf(focusAreaSize * coefficient).intValue();
+            int centerX = (int) (x / previewSize.width - 1000);
+            int centerY = (int) (y / previewSize.height - 1000);
+            int left = clamp(centerX - areaSize / 2, -1000, 1000);
+            int top = clamp(centerY - areaSize / 2, -1000, 1000);
+            RectF rectF = new RectF(left, top, left + areaSize, top + areaSize);
+            return new Rect(Math.round(rectF.left), Math.round(rectF.top), Math.round(rectF.right), Math.round(rectF.bottom));
+        }
+        private static int clamp(int x, int min, int max) {
+            if (x > max) {
+                return max;
+            }
+            if (x < min) {
+                return min;
+            }
+            return x;
+        }
+        public void onFocusBegin(float x,float y) {  
+            focus.setX(x-focus.getWidth()/2);  
+            focus.setY(y-focus.getHeight()/2);  
+            deley();
+        }  
+        protected void deley() {
+            final Message message = new Message();
+            message.what = 000;
+            new Thread(new Runnable()
+            {  
+                public void run()
+                {  
+                    try {
+                    Thread.sleep(2000);
+                    } catch (InterruptedException e) {
+                    e.printStackTrace();
+                    }  
+                    handler.sendMessage(message);
+                }  
+            }).start();}
+    }
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/usb/Usb.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/usb/Usb.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/usb/Usb.java	(revision 1051)
@@ -0,0 +1,125 @@
+package com.android.mmi.usb;
+
+import android.app.Activity;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.os.Bundle;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.TextView;
+
+import com.android.mmi.MMITestDevice;
+import com.android.mmi.R;
+
+public class Usb extends Activity implements OnClickListener {
+	TextView tv_base_title, tv_insert_usb, tv_usb_state, tv_remove_usb;
+	String insert_usb = "Please insert USB cable";
+	String usb = "USB:";
+	String remove_usb = "Please remove USB cable";
+	Button bt_base_left, bt_base_right;
+	private final static String ACTION = "android.hardware.usb.action.USB_STATE";
+
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+		requestWindowFeature(Window.FEATURE_NO_TITLE);
+		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
+				WindowManager.LayoutParams.FLAG_FULLSCREEN);
+		getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_IMMERSIVE_GESTURE_ISOLATED);
+		getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
+		setContentView(R.layout.activity_usb);
+
+		tv_base_title = (TextView) this.findViewById(R.id.tv_base_title);
+		tv_base_title.setText(R.string.usb_name);
+		tv_insert_usb = (TextView) this.findViewById(R.id.tv_insert_usb);
+		tv_insert_usb.setText(insert_usb);
+		tv_usb_state = (TextView) this
+				.findViewById(R.id.tv_usb_state);
+		tv_remove_usb = (TextView) this
+				.findViewById(R.id.tv_remove_usb);
+		
+		bt_base_left = (Button) findViewById(R.id.bt_base_left);
+		bt_base_left.setText(R.string.bt_pass);
+		bt_base_left.setEnabled(false);
+		bt_base_left.setOnClickListener(this);
+		bt_base_right = (Button) findViewById(R.id.bt_base_right);
+		bt_base_right.setText(R.string.bt_fail);
+		bt_base_right.setOnClickListener(this);
+
+	}
+
+	@Override
+	protected void onResume() {
+		super.onResume();
+		IntentFilter filter = new IntentFilter();
+		filter.addAction(ACTION);
+		registerReceiver(BtStatusReceiver, filter);
+	}
+
+	@Override
+	protected void onPause() {
+		super.onPause();
+		unregisterReceiver(BtStatusReceiver);
+	}
+
+	@Override
+	protected void onDestroy() {
+		super.onDestroy();
+	}
+
+	public BroadcastReceiver BtStatusReceiver = new BroadcastReceiver() {
+		@Override
+		public void onReceive(Context context, Intent intent) {
+			String action = intent.getAction();
+			if (action.equals(ACTION)) {
+				boolean connected = intent.getExtras().getBoolean("connected");		
+				if (connected) {
+					tv_insert_usb.setVisibility(View.GONE);
+					tv_usb_state.setText(usb + "OK");
+					tv_remove_usb.setText(remove_usb);
+					bt_base_left.setEnabled(true);
+					tv_remove_usb.setVisibility(View.VISIBLE);
+				} else {
+					tv_usb_state.setText(usb + "unknown");
+					tv_insert_usb.setVisibility(View.VISIBLE);
+					tv_remove_usb.setVisibility(View.GONE);
+				}
+			}
+		}
+	};
+
+	@Override
+	public void onClick(View v) {
+		switch (v.getId()) {
+		case R.id.bt_base_left: {
+			Intent intent = new Intent(Usb.this, MMITestDevice.class);
+			setResult(RESULT_OK, intent);
+			finish();
+			break;
+		}
+
+		case R.id.bt_base_right: {
+			Intent intent = new Intent(Usb.this, MMITestDevice.class);
+			setResult(RESULT_CANCELED, intent);
+			finish();
+			break;
+		}
+
+		}
+	}
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		if (MMITestDevice.isAutoTest()) {			
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/accessory/Accessory.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/accessory/Accessory.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/accessory/Accessory.java	(revision 1051)
@@ -0,0 +1,365 @@
+package com.android.mmi.accessory;
+
+import android.app.Activity;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.media.AudioFormat;
+import android.media.AudioManager;
+import android.media.AudioRecord;
+import android.media.AudioTrack;
+import android.media.MediaPlayer;
+import android.media.MediaRecorder;
+import android.os.Bundle;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import com.android.mmi.MMITestDevice;
+import com.android.mmi.R;
+import android.os.Handler;
+import android.os.Message;
+
+public class Accessory extends Activity implements OnClickListener {
+	TextView tv_base_title, tv_fm_station;
+	Button bt_base_left, bt_base_right, bt_fm_change_station, bt_volume_down,
+			bt_volume_up;
+	LinearLayout ll_fm_change_station;
+	AudioManager mAudioManager;
+	boolean isDefaultStation,isMic,isInsert, isPullOut,isBegin;
+	String fmStation;
+	int count;
+	private MediaPlayer musicPlayer;
+	AudioRecord audioRecord;
+	AudioTrack audioTrack;
+	RecordThread rec;
+	Handler handler = new Handler() {
+		public void handleMessage(Message msg) {
+				bt_base_left.setEnabled(true);
+			super.handleMessage(msg);
+		}
+	};
+
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		super.onCreate(savedInstanceState);
+		requestWindowFeature(Window.FEATURE_NO_TITLE);
+		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
+				WindowManager.LayoutParams.FLAG_FULLSCREEN);
+		getWindow().getDecorView().setSystemUiVisibility(
+				View.SYSTEM_UI_FLAG_IMMERSIVE_GESTURE_ISOLATED);
+		getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
+		setContentView(R.layout.activity_accessory);
+		mAudioManager = (AudioManager) getSystemService(Context.AUDIO_SERVICE);
+		tv_base_title = (TextView) this.findViewById(R.id.tv_base_title);
+		tv_base_title.setText(R.string.accessory_name);
+		tv_fm_station = (TextView) this.findViewById(R.id.tv_fm_station);
+		tv_fm_station.setText(R.string.fm_low_station);
+		tv_fm_station.setText("Please insert headset");
+		bt_fm_change_station = (Button) findViewById(R.id.bt_fm_change_station);
+		bt_fm_change_station.setOnClickListener(this);
+		bt_fm_change_station.setVisibility(View.GONE);
+
+		bt_volume_down = (Button) findViewById(R.id.bt_volume_down);
+		bt_volume_down.setText(R.string.bt_volume_down);
+		bt_volume_down.setVisibility(View.GONE);
+		bt_volume_down.setOnClickListener(this);
+		bt_volume_up = (Button) findViewById(R.id.bt_volume_up);
+		bt_volume_up.setVisibility(View.GONE);
+		bt_volume_up.setText(R.string.bt_volume_up);
+		bt_volume_up.setOnClickListener(this);
+		
+		
+		ll_fm_change_station = (LinearLayout) findViewById(R.id.ll_fm_change_station);
+		ll_fm_change_station.setOnClickListener(this);
+		ll_fm_change_station.setEnabled(false);
+
+
+		bt_base_left = (Button) findViewById(R.id.bt_base_left);
+		bt_base_left.setText(R.string.bt_pass);
+		bt_base_left.setOnClickListener(this);
+		bt_base_left.setEnabled(false);
+		bt_base_right = (Button) findViewById(R.id.bt_base_right);
+		bt_base_right.setText(R.string.bt_fail);
+		bt_base_right.setOnClickListener(this);
+
+	}
+
+	@Override
+	protected void onResume() {
+		super.onResume();
+		isDefaultStation = true;
+		count = 0;
+		isMic = true;
+		isInsert = false;
+		isPullOut = false;
+		isBegin = true;
+		IntentFilter filter = new IntentFilter();
+		filter.addAction(Intent.ACTION_TIME_TICK);
+		filter.addAction(Intent.ACTION_HEADSET_PLUG);
+		registerReceiver(mIntentReceiver, filter);
+		new Thread() {
+			@Override
+			public void run() {
+				while (isBegin) {
+					if (isPullOut) {
+						isBegin = false;
+						Intent intent = new Intent(Accessory.this,
+								MMITestDevice.class);
+						setResult(RESULT_CANCELED, intent);
+						finish();
+					}
+				}
+			};
+		}.start();
+	}
+
+	private BroadcastReceiver mIntentReceiver = new BroadcastReceiver() {
+		@Override
+		public void onReceive(Context context, Intent intent) {
+			String action = intent.getAction();
+			if (action.equals(Intent.ACTION_HEADSET_PLUG)) {
+				if (intent.getIntExtra("state", 0) == 0) {
+					if (isInsert) {
+						isPullOut = true;
+					}else {
+						tv_fm_station.setText("Please insert headset");
+						if (musicPlayer != null) {
+							musicPlayer.release();
+							musicPlayer = null;
+						}
+					}
+				} else {
+					tv_fm_station.setText("Headset right discrete test");
+					MusicPlayer();
+					isInsert = true;
+					deley(1500);
+				}
+
+			}
+		}
+	};
+
+	@Override
+	protected void onPause() {
+		super.onPause();
+		unregisterReceiver(mIntentReceiver);
+		if (musicPlayer != null) {
+			musicPlayer.release();
+			musicPlayer = null;
+		}
+		isMic = false;
+		isBegin = false;
+		fmStation = "close_FMMMIService";
+		sendBroadcast();
+	}
+
+	@Override
+	protected void onDestroy() {
+		super.onDestroy();
+	}
+
+	@Override
+	public void onClick(View v) {
+		switch (v.getId()) {
+		case R.id.bt_base_left: {
+			if (count == 0) {
+				if (musicPlayer != null) {
+					musicPlayer.release();
+					musicPlayer = null;
+				}
+				bt_base_left.setEnabled(false);
+				tv_fm_station.setText("Headset left discrete test");
+				count++;
+				MusicPlayer();
+				deley(1500);
+			} else if (count == 1) {
+				if (musicPlayer != null) {
+					musicPlayer.release();
+					musicPlayer = null;
+				}
+				bt_base_left.setEnabled(false);
+				tv_fm_station.setText("Headset Mic loop");
+				rec = new RecordThread();
+				rec.start();
+				count++;
+				deley(2000);
+			} else if (count == 2) {
+				bt_base_left.setEnabled(false);
+				isMic = false;
+				tv_base_title.setText(R.string.fmradio_name);
+				tv_fm_station.setText(R.string.fm_low_station);
+				bt_fm_change_station.setVisibility(View.VISIBLE);
+				bt_volume_down.setVisibility(View.VISIBLE);
+				bt_volume_up.setVisibility(View.VISIBLE);
+				ll_fm_change_station.setEnabled(true);
+				isDefaultStation = true;
+				fmStation = "1036";
+				tv_fm_station.setText(R.string.fm_height_station);
+				sendBroadcast();
+				count++;
+				deley(1500);
+			} else if (count == 3) {
+				bt_fm_change_station.setVisibility(View.GONE);
+				bt_volume_down.setVisibility(View.GONE);
+				bt_volume_up.setVisibility(View.GONE);
+				Intent intent = new Intent(Accessory.this, MMITestDevice.class);
+				setResult(RESULT_OK, intent);
+				finish();
+			}
+			break;
+		}
+
+		case R.id.bt_base_right: {
+			Intent intent = new Intent(Accessory.this, MMITestDevice.class);
+			setResult(RESULT_CANCELED, intent);
+			finish();
+			break;
+		}
+
+		case R.id.bt_fm_change_station: {
+			if (isDefaultStation) {
+				isDefaultStation = false;
+				fmStation = "1036";
+				tv_fm_station.setText(R.string.fm_height_station);
+			} else {
+				isDefaultStation = true;
+				fmStation = "875";
+				tv_fm_station.setText(R.string.fm_low_station);
+			}
+
+			sendBroadcast();
+			break;
+		}
+		
+		case R.id.ll_fm_change_station: {
+			if (isDefaultStation) {
+				isDefaultStation = false;
+				fmStation = "1036";
+				tv_fm_station.setText(R.string.fm_height_station);
+			} else {
+				isDefaultStation = true;
+				fmStation = "875";
+				tv_fm_station.setText(R.string.fm_low_station);
+			}
+
+			sendBroadcast();
+			break;
+		}
+		
+
+		case R.id.bt_volume_down: {
+			if (mAudioManager != null) {
+				mAudioManager.adjustStreamVolume(AudioManager.STREAM_MUSIC,
+						AudioManager.ADJUST_LOWER,
+						AudioManager.FX_FOCUS_NAVIGATION_UP);
+			}
+			break;
+		}
+		case R.id.bt_volume_up: {
+			if (mAudioManager != null) {
+				mAudioManager.adjustStreamVolume(AudioManager.STREAM_MUSIC,
+						AudioManager.ADJUST_RAISE,
+						AudioManager.FX_FOCUS_NAVIGATION_UP);
+			}
+			break;
+		}
+		}
+	}
+
+	private void sendBroadcast() {
+		Intent intent = new Intent();
+		intent.setAction("com.android.fmradio.MMIFMRadioTest");
+		Bundle bundle = new Bundle();
+		intent.putExtra("fmStation", fmStation);
+		intent.putExtras(bundle);
+		sendBroadcast(intent);
+	}
+
+	protected void MusicPlayer() {
+		if (count == 0) {
+			musicPlayer = MediaPlayer.create(this, R.raw.speakerr);
+		} else {
+			musicPlayer = MediaPlayer.create(this, R.raw.speakerl);
+		}
+		if (musicPlayer != null) {
+			musicPlayer.start();
+			musicPlayer
+					.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
+
+						@Override
+						public void onCompletion(MediaPlayer arg0) {
+							musicPlayer.start();
+							musicPlayer.setLooping(true);
+						}
+					});
+		}
+
+	}
+
+	class RecordThread extends Thread {
+		static final int frequency = 44100;
+		static final int channelConfiguration = AudioFormat.CHANNEL_CONFIGURATION_MONO;
+		static final int audioEncoding = AudioFormat.ENCODING_PCM_16BIT;
+
+		@Override
+		public void run() {
+			int recBufSize = AudioRecord.getMinBufferSize(frequency,
+					channelConfiguration, audioEncoding) * 2;
+			int plyBufSize = AudioTrack.getMinBufferSize(frequency,
+					channelConfiguration, audioEncoding) * 2;
+
+			audioRecord = new AudioRecord(MediaRecorder.AudioSource.MIC,
+					frequency, channelConfiguration, audioEncoding, recBufSize);
+
+			audioTrack = new AudioTrack(AudioManager.STREAM_MUSIC, frequency,
+					channelConfiguration, audioEncoding, plyBufSize,
+					AudioTrack.MODE_STREAM);
+
+			byte[] recBuf = new byte[recBufSize];
+			if (audioRecord != null && audioTrack != null) {
+				audioRecord.startRecording();
+				audioTrack.play();
+				while (isMic) {
+					int readLen = audioRecord.read(recBuf, 0, recBufSize);
+					audioTrack.write(recBuf, 0, readLen);
+				}
+				audioTrack.stop();
+				audioRecord.stop();
+				audioRecord.release();
+				audioRecord = null;
+				audioTrack.release();
+				audioTrack = null;
+			}
+		}
+	}
+
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		if (MMITestDevice.isAutoTest()) {
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+	protected void deley(long time) {
+		Message message = new Message();
+		message.what = 000;
+	 	new Thread(new Runnable()
+        {  
+            public void run()
+            {  
+                try {
+                Thread.sleep(time);
+                } catch (InterruptedException e) {
+                e.printStackTrace();
+                }  
+                handler.sendMessage(message);
+            }  
+        }).start();}
+}
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/tplock/TpLock.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/tplock/TpLock.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/tplock/TpLock.java	(revision 1051)
@@ -0,0 +1,118 @@
+package com.android.mmi.tplock;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.TextView;
+
+import android.view.View.OnClickListener;
+import com.android.mmi.MMITestDevice;
+import com.android.mmi.R;
+//import com.mediatek.factorymode.earphone.Earphone;
+
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.content.BroadcastReceiver;
+import android.util.Log;
+import android.content.Context;
+
+import android.content.ComponentName;
+import android.os.PowerManager;
+
+
+public class TpLock extends Activity implements OnClickListener{
+	Button bt_base_left, bt_base_right;
+	TextView tplock_content;
+	PowerManager pm;
+	
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+		//getWindow().addFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		setContentView(R.layout.activity_tplock);
+
+		pm = (PowerManager)getSystemService(Context.POWER_SERVICE);
+		tplock_content=(TextView)findViewById(R.id.bt_base_left);
+		bt_base_left = (Button) findViewById(R.id.bt_base_left);
+		bt_base_left.setText(R.string.bt_pass);
+		bt_base_left.setOnClickListener(this);
+		bt_base_left.setEnabled(false);
+		bt_base_right = (Button) findViewById(R.id.bt_base_right);
+		bt_base_right.setText(R.string.bt_fail);
+		bt_base_right.setOnClickListener(this);
+	}
+	
+	
+	public void testFinish() {
+		bt_base_left.setEnabled(true);
+		Intent intentResult = new Intent(TpLock.this, MMITestDevice.class);
+		setResult(RESULT_OK,intentResult);
+		finish();
+	}
+
+
+	@Override
+	protected void onPause() {
+		 boolean isScreenOn = pm.isScreenOn();
+        if(!isScreenOn){
+			bt_base_left.setEnabled(true);
+           };
+		super.onPause();
+	}
+
+	@Override
+	protected void onResume() {
+		boolean isScreenOn = pm.isScreenOn();
+		if(!isScreenOn){
+			bt_base_left.setEnabled(true);
+           };
+		super.onResume();
+	}
+
+	@Override
+	protected void onDestroy() {
+		//getWindow().clearFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		super.onDestroy();
+	}
+	
+	@Override
+	public void onClick(View v) {
+		switch (v.getId()) {
+		case R.id.bt_base_left: {
+			Intent intent = new Intent(TpLock.this, MMITestDevice.class);
+			setResult(RESULT_OK, intent);
+			finish();
+			break;
+		}
+
+		case R.id.bt_base_right: {
+			Intent intent = new Intent(TpLock.this, MMITestDevice.class);
+			setResult(RESULT_CANCELED, intent);
+			finish();
+			break;
+		}
+
+		}
+	}
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(TpLock.this, MMITestDevice.class);
+			setResult(RESULT_CANCELED,intent);
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
+
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/batterytemp/BatteryTemp.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/batterytemp/BatteryTemp.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/batterytemp/BatteryTemp.java	(revision 1051)
@@ -0,0 +1,169 @@
+package com.android.mmi.batterytemp;
+
+import android.app.Activity;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.os.BatteryManager;
+import android.os.Bundle;
+import android.util.Log;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.TextView;
+
+import com.android.mmi.MMITestDevice;
+import com.android.mmi.R;
+
+public class BatteryTemp extends Activity implements OnClickListener {
+	private IntentFilter mIntentFilter;
+	TextView tv_base_title, tv_battery_temp, tv_battery_content,
+			tv_battery_voltage, tv_battery_id;
+	String battery_temp = "Battery temperature \n should be between \n 20~50℃ \n current is: \n";
+	String battery_content = "Battery content should \n be between 30~80% \n current is: ";
+	String battery_voltage = "Battery Voltage is: ";
+	String battery_id = "Battery ID is: ";
+	Button bt_base_left, bt_base_right;
+
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+		requestWindowFeature(Window.FEATURE_NO_TITLE);
+		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
+				WindowManager.LayoutParams.FLAG_FULLSCREEN);
+		getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_IMMERSIVE_GESTURE_ISOLATED);
+		getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
+		setContentView(R.layout.activity_battery);
+
+		IntentFilter filter = new IntentFilter();
+		filter.addAction(Intent.ACTION_BATTERY_CHANGED);
+		registerReceiver(mIntentReceiver, filter);
+		tv_base_title = (TextView) this.findViewById(R.id.tv_base_title);
+		tv_base_title.setText(R.string.battery_temp_name);
+		tv_battery_temp = (TextView) this.findViewById(R.id.tv_battery_temp);
+		tv_battery_temp.setText(battery_temp);
+		tv_battery_content = (TextView) this
+				.findViewById(R.id.tv_battery_content);
+		tv_battery_content.setText(battery_content);
+		tv_battery_voltage = (TextView) this
+				.findViewById(R.id.tv_battery_voltage);
+		tv_battery_voltage.setText(battery_voltage);
+		tv_battery_id = (TextView) this
+				.findViewById(R.id.tv_battery_id);
+		tv_battery_id.setText(battery_id);
+		tv_battery_id.setVisibility(View.GONE);
+		bt_base_left = (Button) findViewById(R.id.bt_base_left);
+		bt_base_left.setText(R.string.bt_pass);
+		bt_base_left.setOnClickListener(this);
+		bt_base_right = (Button) findViewById(R.id.bt_base_right);
+		bt_base_right.setText(R.string.bt_fail);
+		bt_base_right.setOnClickListener(this);
+	}
+
+	@Override
+	protected void onResume() {
+		super.onResume();
+
+		IntentFilter filter = new IntentFilter();
+
+		filter.addAction(Intent.ACTION_BATTERY_CHANGED);
+		registerReceiver(mIntentReceiver, filter);
+	}
+
+	@Override
+	protected void onPause() {
+		super.onPause();
+		unregisterReceiver(mIntentReceiver);
+	}
+
+	@Override
+	protected void onDestroy() {
+		super.onDestroy();
+	}
+
+	private BroadcastReceiver mIntentReceiver = new BroadcastReceiver() {
+		@Override
+		public void onReceive(Context context, Intent intent) {
+			String action = intent.getAction();
+			int health = intent.getIntExtra("health", 0);
+			boolean present = intent.getBooleanExtra("present", false);
+			int level = intent.getIntExtra("level", 0);
+			int icon_small = intent.getIntExtra("icon-small", 0);
+			int plugged = intent.getIntExtra("plugged", 0);
+			double voltage = intent.getIntExtra("voltage", 0);
+			int temperature = intent.getIntExtra("temperature", 0);
+			String technology = intent.getStringExtra("technology");
+			
+			String acString = "";
+			switch (plugged) {
+			case BatteryManager.BATTERY_PLUGGED_AC:
+				acString = "plugged ac";
+				break;
+			case BatteryManager.BATTERY_PLUGGED_USB:
+				acString = "plugged usb";
+				break;
+			}
+			BatteryTemp.this.tv_battery_temp.setText(battery_temp + temperature/10 + "℃");
+			BatteryTemp.this.tv_battery_content.setText(battery_content + level + "%");
+
+			BatteryTemp.this.tv_battery_voltage.setText(battery_voltage + voltage/1000 + "V");
+			BatteryTemp.this.tv_battery_id.setText(battery_id);
+
+			if (action.equals(Intent.ACTION_BATTERY_CHANGED)) {
+
+				Log.d("Battery", "" + intent.getIntExtra("level", 0));
+
+				Log.d("Battery", "" + intent.getIntExtra("scale", 0));
+
+				Log.d("Battery", "" + intent.getIntExtra("batteryVoltage", 0));
+
+				Log.d("Battery", "" + intent.getIntExtra("temperature", 0));
+
+				Log.d("Battery",
+						"ss"
+								+ intent.getIntExtra("status",
+										BatteryManager.BATTERY_STATUS_CHARGING));
+
+				Log.d("Battery", "" + intent.getIntExtra("plugged", 0));
+
+				Log.d("Battery",
+						""
+								+ intent.getIntExtra("health",
+										BatteryManager.BATTERY_HEALTH_UNKNOWN));
+			}
+		}
+	};
+	@Override
+	public void onClick(View v) {
+		switch (v.getId()) {
+		case R.id.bt_base_left: {
+			Intent intent = new Intent(BatteryTemp.this, MMITestDevice.class);
+			setResult(RESULT_OK, intent);
+			finish();
+			break;
+		}
+
+		case R.id.bt_base_right: {
+			Intent intent = new Intent(BatteryTemp.this, MMITestDevice.class);
+			setResult(RESULT_CANCELED, intent);
+			finish();
+			break;
+		}
+
+		}
+	}
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		if (MMITestDevice.isAutoTest()) {			
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+	
+}
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/sdcard/SdCard.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/sdcard/SdCard.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/sdcard/SdCard.java	(revision 1051)
@@ -0,0 +1,117 @@
+package com.android.mmi.sdcard;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.os.Bundle;
+import android.os.Environment;
+import android.os.StatFs;
+import android.os.storage.StorageManager;
+import android.os.SystemProperties;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.Window;
+import android.view.WindowManager;
+import android.view.View.OnClickListener;
+import android.widget.Button;
+import android.widget.TextView;
+
+import com.android.mmi.MMITestDevice;
+import com.android.mmi.R;
+
+public class SdCard extends Activity implements OnClickListener {
+	public static final String TAG = "SDCard";
+	private static String SD_CARD = SystemProperties.get("vold.path.external_sd");
+    //private static String SD_CARD = "/storage/sdcard0";
+	TextView tv_base_title, tv_base_pixi;
+
+	Button bt_base_left, bt_base_right;
+
+	private StorageManager mStorageManager;
+
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		super.onCreate(savedInstanceState);
+		requestWindowFeature(Window.FEATURE_NO_TITLE);
+		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
+				WindowManager.LayoutParams.FLAG_FULLSCREEN);
+		getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_IMMERSIVE_GESTURE_ISOLATED);
+		getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
+		setContentView(R.layout.activity_base);
+		tv_base_title = (TextView) findViewById(R.id.tv_base_title);
+		tv_base_title.setText(R.string.sd_card_name);
+		tv_base_pixi = (TextView) findViewById(R.id.tv_base_pixi);
+		bt_base_left = (Button) findViewById(R.id.bt_base_left);
+		bt_base_left.setText(R.string.bt_pass);
+		bt_base_left.setOnClickListener(this);
+		bt_base_left.setEnabled(false);
+		bt_base_right = (Button) findViewById(R.id.bt_base_right);
+		bt_base_right.setText(R.string.bt_fail);
+		bt_base_right.setOnClickListener(this);
+
+		mStorageManager = (StorageManager) this
+				.getSystemService(Context.STORAGE_SERVICE);
+		if (mStorageManager.getVolumeState(SD_CARD).equals(
+				Environment.MEDIA_MOUNTED)) {
+			long availableMB = getAvailaleSize();
+			long totalMB = getAllSize();
+			tv_base_pixi.setText("SDCard tips success" + "\n\n"
+					+ "SDCard totalsize" + totalMB
+					+ " MB\n\n" + "SDCard freesize"
+					+ availableMB + " MB");
+			if (totalMB != 0) {
+				bt_base_left.setEnabled(true);
+			}
+
+		} else {
+			tv_base_pixi.setText("SDCard tips failed");
+		}
+	}
+
+	@Override
+	protected void onDestroy() {
+		super.onDestroy();
+	}
+
+	public long getAvailaleSize() {
+		StatFs stat = new StatFs(SD_CARD);
+		long blockSize = stat.getBlockSize();
+		long availableBlocks = stat.getAvailableBlocks();
+		return (availableBlocks * blockSize) / 1024 / 1024;
+	}
+
+	public long getAllSize() {
+		StatFs stat = new StatFs(SD_CARD);
+		long blockSize = stat.getBlockSize();
+		long availableBlocks = stat.getBlockCount();
+		return (availableBlocks * blockSize) / 1024 / 1024;
+	}
+
+	@Override
+	public void onClick(View v) {
+		switch (v.getId()) {
+		case R.id.bt_base_left: {
+			Intent intent = new Intent(SdCard.this, MMITestDevice.class);
+			setResult(RESULT_OK, intent);
+			finish();
+			break;
+		}
+
+		case R.id.bt_base_right: {
+			Intent intent = new Intent(SdCard.this, MMITestDevice.class);
+			setResult(RESULT_CANCELED, intent);
+			finish();
+			break;
+		}
+
+		}
+	}
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		if (MMITestDevice.isAutoTest()) {			
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/compass/Compass.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/compass/Compass.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/compass/Compass.java	(revision 1051)
@@ -0,0 +1,207 @@
+package com.android.mmi.compass;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.TextView;
+
+import android.view.View.OnClickListener;
+import com.android.mmi.MMITestDevice;
+import com.android.mmi.R;
+//import com.mediatek.factorymode.earphone.Earphone;
+
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.content.BroadcastReceiver;
+import android.util.Log;
+import android.content.Context;
+
+import android.content.ComponentName;
+import android.hardware.Sensor;
+import android.hardware.SensorEvent;
+import android.hardware.SensorEventListener;
+import android.hardware.SensorManager;
+import android.view.animation.Animation;
+import android.view.animation.RotateAnimation;
+import android.widget.ImageView;
+import java.util.List;
+
+
+
+
+public class Compass extends Activity implements SensorEventListener, OnClickListener{
+	private static final int PROGRESS_BAR_MAX = 10000;
+	//private float currentDegree = 0f; 
+	//private Button succesButton ;
+	//private Button failButton ;
+	Button bt_base_left, bt_base_right;
+	ImageView iv_compass;
+	SensorManager sm ;
+	private Sensor aSensor;  
+    private Sensor mSensor;  
+    private float currentDegree = 0f;   
+    float[] accelerometerValues = new float[3];  
+    float[] magneticFieldValues = new float[3]; 
+	private boolean mRegisteredSensor;
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+		//getWindow().addFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		setContentView(R.layout.activity_compass);
+		mRegisteredSensor = false;
+
+		iv_compass = (ImageView) findViewById(R.id.iv_compass);
+		bt_base_left = (Button) findViewById(R.id.bt_base_left);
+		bt_base_left.setText(R.string.bt_pass);
+		bt_base_left.setOnClickListener(this);
+		bt_base_left.setEnabled(false);
+		bt_base_right = (Button) findViewById(R.id.bt_base_right);
+		bt_base_right.setText(R.string.bt_fail);
+		bt_base_right.setOnClickListener(this);
+		bt_base_left.setEnabled(true);
+		
+        sm = (SensorManager)getSystemService(Context.SENSOR_SERVICE);  
+        aSensor = sm.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);  
+        mSensor = sm.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);  
+        sm.registerListener(myListener, aSensor, SensorManager.SENSOR_DELAY_NORMAL);  
+        sm.registerListener(myListener, mSensor,SensorManager.SENSOR_DELAY_NORMAL);  
+        calculateOrientation(); 
+	
+	}
+	
+	
+	public void testFiniah() {
+				bt_base_left.setEnabled(true);
+				Intent intentResult = new Intent(Compass.this, MMITestDevice.class);
+				setResult(RESULT_OK,intentResult);
+				finish();
+	}
+
+
+	@Override
+	protected void onPause() {
+		// TODO Auto-generated method stub
+		if (mRegisteredSensor) {
+			sm.unregisterListener(this);
+			sm.unregisterListener(myListener); 
+			mRegisteredSensor = false;}
+		super.onPause();
+	}
+
+	@Override
+	protected void onResume() {
+		// TODO Auto-generated method stub
+		super.onResume();
+		List<Sensor> sensors = sm.getSensorList(Sensor.TYPE_MAGNETIC_FIELD);
+		if (sensors.size() > 0) {
+			Sensor sensor = sensors.get(0);
+			mRegisteredSensor = sm.registerListener(this, sensor, SensorManager.SENSOR_DELAY_FASTEST);
+		}
+		sm.registerListener(myListener, aSensor, SensorManager.SENSOR_DELAY_NORMAL);  
+        sm.registerListener(myListener, mSensor,SensorManager.SENSOR_DELAY_NORMAL);  
+	}
+
+	SensorEventListener myListener = new SensorEventListener() {  
+	   public void onSensorChanged(SensorEvent sensorEvent) {  
+	   if (sensorEvent.sensor.getType() == Sensor.TYPE_MAGNETIC_FIELD)	
+	   magneticFieldValues = sensorEvent.values;  
+	   if (sensorEvent.sensor.getType() == Sensor.TYPE_ACCELEROMETER)  
+		   accelerometerValues = sensorEvent.values;  
+	   calculateOrientation();	
+	   }  
+	   public void onAccuracyChanged(Sensor sensor, int accuracy) {
+	   }  
+	   };  
+	@Override
+	protected void onDestroy() {
+		//getWindow().clearFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		sm.unregisterListener(myListener); 
+		super.onDestroy();
+	}
+	
+	@Override
+	public void onClick(View v) {
+		switch (v.getId()) {
+		case R.id.bt_base_left: {
+			Intent intent = new Intent(Compass.this, MMITestDevice.class);
+			setResult(RESULT_OK, intent);
+			finish();
+			break;
+		}
+
+		case R.id.bt_base_right: {
+			Intent intent = new Intent(Compass.this, MMITestDevice.class);
+			setResult(RESULT_CANCELED, intent);
+			finish();
+			break;
+		}
+
+		}
+	}
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(Compass.this, MMITestDevice.class);
+			setResult(RESULT_CANCELED,intent);
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+
+
+	 public void onSensorChanged(SensorEvent event) {  
+	 	
+     /*   if (event.sensor.getType() == Sensor.TYPE_MAGNETIC_FIELD) {  
+            float degree = event.values[0];  
+       
+            RotateAnimation ra = new RotateAnimation(currentDegree, -degree,  
+                    Animation.RELATIVE_TO_SELF, 0.5f,  
+                    Animation.RELATIVE_TO_SELF, 0.5f);  
+            ra.setDuration(200);  
+            iv_compass.startAnimation(ra);  
+              
+            currentDegree = -degree;  
+        }  */
+    }  
+    public void onAccuracyChanged(Sensor sensor, int accuracy) {  
+  
+    }  
+
+
+
+		  private  void calculateOrientation() {  
+          float[] values = new float[3];  
+          float[] R = new float[9];  
+          SensorManager.getRotationMatrix(R, null, accelerometerValues, magneticFieldValues);           
+          SensorManager.getOrientation(R, values);  
+  
+           
+          float degree =  values[0] = (float) Math.toDegrees(values[0]);  
+          Log.i("TAG", values[0]+"");  
+          //values[1] = (float) Math.toDegrees(values[1]);  
+          //values[2] = (float) Math.toDegrees(values[2]);  
+          
+         
+      //    float degree = event.values[0];  
+     
+          RotateAnimation ra = new RotateAnimation(currentDegree, -degree,  
+                  Animation.RELATIVE_TO_SELF, 0.5f,  
+                  Animation.RELATIVE_TO_SELF, 0.5f);  
+          ra.setDuration(200);  
+          iv_compass.startAnimation(ra);  
+            
+          currentDegree = -degree;  
+       
+        }
+}
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/frontcameraflasher/FrontCameraFlasher.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/frontcameraflasher/FrontCameraFlasher.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/frontcameraflasher/FrontCameraFlasher.java	(revision 1051)
@@ -0,0 +1,194 @@
+package com.android.mmi.frontcameraflasher;
+
+import java.util.Timer;
+import java.util.TimerTask;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.hardware.Camera;
+import android.hardware.Camera.Parameters;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Message;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.TextView;
+
+import com.android.mmi.MMITestDevice;
+import com.android.mmi.R;
+import android.hardware.Camera.CameraInfo;
+import android.hardware.Camera.Parameters;
+import com.android.mmi.ShellUtils;
+
+
+public class FrontCameraFlasher extends Activity implements OnClickListener {
+	private static final String FLASHLIGHT_TEST = "/dev/flashlight_test";
+	 private int bInput = 0;
+	TextView tv_base_title, tv_base_pixi;
+	Button bt_base_left, bt_base_right;
+	Camera camera;
+	Parameters p;
+	Timer timer = new Timer();
+	int count = 0;
+	int showCount = 0;
+	static final int FLASH_NUMBER = 4;
+	static final int DELAY = 1000;
+	static final int INTERVAL = 500;
+	Handler handler = new Handler() {
+		public void handleMessage(Message msg) {
+			if (//msg.what % 2 == 0
+				true) {
+				processOnFlash();
+			} else {
+				processOffFlash();
+			}
+			showCount++;
+			if (showCount == (FLASH_NUMBER - 1) * 2) {
+				bt_base_left.setVisibility(View.VISIBLE);
+				bt_base_right.setVisibility(View.VISIBLE);
+			}
+			super.handleMessage(msg);
+		}
+
+	};
+
+	class MytimerTask extends TimerTask {
+		public void run() {
+			Message message = new Message();
+			message.what = count;
+			handler.sendMessage(message);
+			count++;
+		}
+	}
+
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		super.onCreate(savedInstanceState);
+		requestWindowFeature(Window.FEATURE_NO_TITLE);
+		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
+				WindowManager.LayoutParams.FLAG_FULLSCREEN);
+		getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_IMMERSIVE_GESTURE_ISOLATED);
+		getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
+		setContentView(R.layout.activity_base);
+		tv_base_title = (TextView) findViewById(R.id.tv_base_title);
+		tv_base_title.setText(R.string.camera_led_name);
+		tv_base_pixi = (TextView) findViewById(R.id.tv_base_pixi);
+		tv_base_pixi.setText(R.string.camera_led_state);
+
+		bt_base_left = (Button) findViewById(R.id.bt_base_left);
+		bt_base_left.setText(R.string.bt_pass);
+		bt_base_left.setOnClickListener(this);
+		bt_base_right = (Button) findViewById(R.id.bt_base_right);
+		bt_base_right.setText(R.string.bt_fail);
+		bt_base_right.setOnClickListener(this);
+		bt_base_left.setVisibility(View.GONE);
+		bt_base_right.setVisibility(View.GONE);
+	}
+
+	@Override
+	protected void onResume() {
+		super.onResume();
+		count = 0;
+	//	camera = Camera.open();
+		openFrontCamera();
+		p = camera.getParameters();
+		for (int i = 0; i < FLASH_NUMBER * 2 - 1; i++) {
+			timer.schedule(new MytimerTask(), DELAY + INTERVAL * i);
+		}
+	}
+
+	@Override
+	public void onClick(View v) {
+		switch (v.getId()) {
+		case R.id.bt_base_left: {
+			processOffFlash();
+			if (camera != null) {
+				camera.stopPreview();
+				camera.release();
+				camera = null;
+			}
+			Intent intent = new Intent(FrontCameraFlasher.this, MMITestDevice.class);
+			setResult(RESULT_OK, intent);
+			finish();
+			break;
+		}
+
+		case R.id.bt_base_right: {
+			processOffFlash();
+			Intent intent = new Intent(FrontCameraFlasher.this, MMITestDevice.class);
+			setResult(RESULT_CANCELED, intent);
+			finish();
+			break;
+		}
+
+		}
+	}
+
+	private void processOnFlash() {
+		 bInput = bInput | 0x01;
+         FlashLightControl(String.valueOf(bInput)); 
+	}
+
+	private void processOffFlash() {
+		bInput = bInput & 0x02;
+        FlashLightControl(String.valueOf(bInput));
+		}
+	public void FlashLightControl(String code) {
+	  ShellUtils.writeFile(FLASHLIGHT_TEST,code);
+	}
+
+	@Override
+	protected void onPause() {
+		super.onPause();
+		if (camera != null) {
+			camera.setPreviewCallback(null);
+			camera.stopPreview();
+			camera.release();
+			camera = null;
+			p = null;
+		}
+	}
+
+	@Override
+	protected void onDestroy() {
+		super.onDestroy();
+		if (timer != null) {
+			timer.cancel();
+			timer = null;
+		}
+	}
+
+	@Override
+	public boolean onKeyDown(int keyCode, KeyEvent event) {
+		if (keyCode == KeyEvent.KEYCODE_MENU || keyCode == KeyEvent.KEYCODE_BACK ) {
+			return true;
+		}		
+		return super.onKeyDown(keyCode, event);
+	}
+
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		if (MMITestDevice.isAutoTest()) {			
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+
+	public void openFrontCamera() {
+        for (int i = 0; i < Camera.getNumberOfCameras(); i++) {
+            CameraInfo info = new CameraInfo();
+            Camera.getCameraInfo(i, info);
+            if (info.facing == CameraInfo.CAMERA_FACING_FRONT
+                    && null == camera) {
+                camera = Camera.open(i);  
+            }else{
+     //       camera = Camera.open();
+            }
+        }
+    }
+}
+
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/nfc/Nfc.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/nfc/Nfc.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/nfc/Nfc.java	(revision 1051)
@@ -0,0 +1,115 @@
+package com.android.mmi.nfc;
+
+import android.app.Activity;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.net.Uri;
+import android.os.Bundle;
+import android.util.Log;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.Toast;
+
+import android.view.View.OnClickListener;
+import com.android.mmi.MMITestDevice;
+import com.android.mmi.R;
+
+public class Nfc extends Activity implements OnClickListener{
+	
+//	private Button successbutton;
+	//private Button failbuttonButton;
+	Button bt_base_left, bt_base_right;
+	
+	private long exitTime = 0;
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+		setContentView(R.layout.activity_nfc);
+		
+		bt_base_left = (Button) findViewById(R.id.bt_base_left);
+		bt_base_left.setText(R.string.bt_pass);
+		bt_base_left.setOnClickListener(this);
+		bt_base_left.setEnabled(false);
+		bt_base_right = (Button) findViewById(R.id.bt_base_right);
+		bt_base_right.setText(R.string.bt_fail);
+		bt_base_right.setOnClickListener(this);
+		
+		
+		IntentFilter mfilter = new IntentFilter();
+		mfilter.addAction("intent.action.NFC_FACTORY_MODE_TEST");
+		registerReceiver(new BroadcastReceiver() {
+			@Override
+			public void onReceive(Context context, Intent intent) {
+				Log.d("NFC", "NFC_FACTORY_MODE_TEST");
+				bt_base_left.setEnabled(true);
+			}
+		}, mfilter);
+		
+		Intent intent = new Intent();
+		//intent.setClassName("com.android.nfctester", "com.android.nfctester.SimpleListViewActivity");
+		//intent.setClassName("com.brcm.nfcutil", "com.brcm.nfcutil.NfcUtilActivity");
+		intent.setClassName("com.techain.nfctest", "com.techain.nfctest.NfcTest");
+		startActivity(intent);
+	}
+	@Override
+	protected void onRestart() {
+		// TODO Auto-generated method stub
+		super.onRestart();
+	}
+	@Override
+	protected void onResume() {
+		// TODO Auto-generated method stub
+		super.onResume();
+	}
+	
+	@Override
+	protected void onDestroy() {
+
+		super.onDestroy();
+	}
+	
+	@Override
+	public void onClick(View v) {
+		switch (v.getId()) {
+		case R.id.bt_base_left: {
+			Intent intent = new Intent(Nfc.this, MMITestDevice.class);
+			setResult(RESULT_OK, intent);
+			finish();
+			break;
+		}
+
+		case R.id.bt_base_right: {
+			Intent intent = new Intent(Nfc.this, MMITestDevice.class);
+			setResult(RESULT_CANCELED, intent);
+			finish();
+			break;
+			}
+		}
+	}
+	
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+   //   if((System.currentTimeMillis()-exitTime) > 2000 && FactoryMode.isAutoTest){
+   //     Toast.makeText(getApplicationContext(), getString(R.string.exit_message), Toast.LENGTH_SHORT).show();
+   //     exitTime = System.currentTimeMillis();
+   //   } else {
+        Intent intent = new Intent(Nfc.this, MMITestDevice.class);
+        setResult(RESULT_CANCELED,intent);
+        finish();
+   //   }
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/tracability/Tracability.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/tracability/Tracability.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/tracability/Tracability.java	(revision 1051)
@@ -0,0 +1,258 @@
+package com.android.mmi.tracability;
+
+import android.R.integer;
+import android.app.Activity;
+import android.bluetooth.BluetoothAdapter;
+import android.content.Context;
+import android.content.Intent;
+import android.net.wifi.WifiInfo;
+import android.net.wifi.WifiManager;
+import android.os.Bundle;
+import android.telephony.TelephonyManager;
+import android.text.TextUtils;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.view.KeyEvent;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.TextView;
+import com.mediatek.telephony.TelephonyManagerEx;
+import com.android.mmi.FeatureOption;
+import com.android.mmi.MMITestDevice;
+import com.android.mmi.NvRAMAgent;
+import com.android.mmi.R;
+import android.os.IBinder;
+import android.os.ServiceManager;
+import android.util.Log;
+
+public class Tracability extends Activity implements OnClickListener {
+	private static final String PRODUCT_INFO_NVRAM_PATH = "/data/nvram/APCFG/APRDEB/PRODUCT_INFO";
+	TextView tv_base_title, tv_base_pixi;
+	Button bt_base_left, bt_base_right;
+	StringBuffer imei1 = new StringBuffer().append("\nIMEI1:");
+	StringBuffer imei2 = new StringBuffer().append("\nIMEI2:");
+	String imei1_1 = "\nIMEI1:";
+	String imei2_2 = "\nIMEI2:";
+	String bsn = "\nBSN:";
+	String bt = "\nBT:";
+	String wifi = "\nWIFI:";
+	String cu_ref = "\nCU_REF:";
+	String hOrS_pn = "\nH/S PN:";
+	String pth = "\nPTH:";
+	String pt = "\nPT:";
+	String bw = "\nBW:";
+	String mmi = "\nMMI:";
+	String ft = "\nFT:";
+	String date_code = "\nDate Code:";
+	String phase = "\nPhase:";
+	int count = 0;
+	static byte[] product_info = null;
+	IBinder binder;
+	static NvRAMAgent agent; 
+
+	private static final int PRODUCT_INFO_NVRAM_LID = 59;
+
+	private static final int STRING = 0;
+	private static final int HEX = 1;
+	private static final int INT = 2;
+
+	private static final int IMEI1 = 321;
+	private static final int IMEI1_LENGTH = 10;
+	private static final int IMEI2 = 331;
+	private static final int IMEI2_LENGTH = 10;
+	private static final int BSN = 12;
+	private static final int BSN_LENGTH = 15;
+	private static final int BT = 309;
+	private static final int BT_LENGTH = 6;
+	private static final int WIFI = 315;
+	private static final int WIFI_LENGTH = 6;
+	private static final int CU_REF = 166;
+	private static final int CU_REF_LENGTH = 20;
+	private static final int HS_PN = 27;
+	private static final int HS_PN_LENGTH = 12;
+	private static final int PTH = 39;
+	private static final int PTH_LENGTH = 2;
+	private static final int PT1 = 106;
+	private static final int PT1_LENGTH = 1;
+	private static final int PT2 = 114;
+	private static final int PT2_LENGTH = 1;
+	private static final int BW = 130;
+	private static final int BW_LENGTH = 1;
+	private static final int MMI = 143;
+	private static final int MMI_LENGTH = 1;
+	private static final int FT1 = 147;
+	private static final int FT1_LENGTH = 1;
+	private static final int FT2 = 155;
+	private static final int FT2_LENGTH = 1;
+	private static final int DATECODE = 43;
+	private static final int DATECODE_LENGTH = 3;
+	private static final int PHASE = 50;
+	private static final int PHASE_LENGTH = 3;
+
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		super.onCreate(savedInstanceState);
+		requestWindowFeature(Window.FEATURE_NO_TITLE);
+		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
+				WindowManager.LayoutParams.FLAG_FULLSCREEN);
+		getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_IMMERSIVE_GESTURE_ISOLATED);
+		getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
+		setContentView(R.layout.activity_base);
+		tv_base_title = (TextView) this.findViewById(R.id.tv_base_title);
+		tv_base_title.setText(R.string.tracability_name);
+		tv_base_pixi = (TextView) this.findViewById(R.id.tv_base_pixi);
+		tv_base_pixi.setText("put the Handset Up and towards up");
+		bt_base_left = (Button) findViewById(R.id.bt_base_left);
+		bt_base_left.setText(R.string.bt_pass);
+		bt_base_left.setOnClickListener(this);
+		bt_base_right = (Button) findViewById(R.id.bt_base_right);
+		bt_base_right.setText(R.string.bt_fail);
+		bt_base_right.setOnClickListener(this);
+		initProductInfo();
+		getTracability();
+	}
+
+	@Override
+	protected void onResume() {
+		super.onResume();
+	}
+
+	private String getImei() {
+		TelephonyManager tm = (TelephonyManager) this
+				.getSystemService(TELEPHONY_SERVICE);
+		if (FeatureOption.MTK_GEMINI_SUPPORT) {
+			String[] imeis = new String[2];
+			for (int i = 0; i < imeis.length; i++) {
+				String imei = TelephonyManagerEx.getDefault().getDeviceId(i);
+				imeis[i] = TextUtils.isEmpty(imei) ? "unknow" : imei;
+			}
+
+			imei1.append(imeis[0]);
+			imei2.append(imeis[1]);
+			return imei1.append(imei2).toString();
+		} else {
+			String imei = ((TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE))
+					.getDeviceId()/* getDeviceIdGemini(0) */;
+			if (imei == null || imei.length() == 0) {
+				imei = "unknow";
+			}
+
+			imei = "IMEI: " + imei;
+			return imei;
+		}
+	}
+
+	private void getTracability() {
+		tv_base_pixi.setText(getImei() + bsn
+				+ buffString(BSN, BSN_LENGTH, STRING) + bt
+				+ buffString(BT, BT_LENGTH, HEX) + wifi
+				+ buffString(WIFI, WIFI_LENGTH, HEX) + cu_ref
+				+ buffString(CU_REF, CU_REF_LENGTH, STRING) + hOrS_pn
+				+ buffString(HS_PN, HS_PN_LENGTH, STRING) + pth
+				+ buffString(PTH, PTH_LENGTH, STRING) + pt + product_info[PT1]
+				+ product_info[PT2] + bw + buffString(BW, BW_LENGTH, HEX) + mmi
+				+ buffString(MMI, MMI_LENGTH, HEX) + ft + product_info[FT1]
+						/*+ product_info[FT2]+ date_code
+				+ buffString(DATECODE, DATECODE_LENGTH, STRING) + phase
+				+ buffString(PHASE, PHASE_LENGTH, STRING)*/);
+	}
+
+	private void initProductInfo() {
+		binder = ServiceManager.getService("NvRAMAgent");
+		agent = NvRAMAgent.Stub.asInterface(binder);
+		try {
+		//	product_info = agent.readFile(PRODUCT_INFO_NVRAM_LID);
+			product_info = agent.readFileByName(PRODUCT_INFO_NVRAM_PATH);
+		} catch (Exception e) {
+			e.printStackTrace();
+		}
+	}
+
+	public static void setMMITestResult(byte result) {
+		product_info[MMI] = result;
+		try 
+		{
+			agent.writeFile(PRODUCT_INFO_NVRAM_LID, product_info);
+		}catch(Exception e){
+			e.printStackTrace();
+			return ;
+		}	
+	}
+
+	private String buffString(int start, int length, int type) {
+/*
+		StringBuffer stringBuffer = new StringBuffer();
+        
+		for (int i = 0; i < length; i++) {
+			switch (type) {
+			case STRING:
+				stringBuffer.append((char) product_info[start + i]);
+				break;
+
+			case HEX:
+				stringBuffer.append(Integer
+						.toHexString(product_info[start + i])
+						+ (i != length - 1 ? ":" : ""));
+				break;
+			case INT:
+				stringBuffer.append(product_info[start + i]);
+				break;
+			}
+		}
+*/
+
+        // for(int i = 0; i < 512; i++){
+            // Log.d("tracability","product_info"+i+"="+product_info[i]);
+        // }
+        
+        if(type == STRING){
+            String stringBuffer =  new String(product_info, start, length);
+            return stringBuffer.equals("") ? null : stringBuffer.toString().toUpperCase();
+        }else{
+            StringBuffer stringBuffer = new StringBuffer();
+            for (int i = 0; i < length; i++) {
+                int productInfo = product_info[start + i]& 0xFF; 
+				if( productInfo < 16){
+					stringBuffer.append("0" + Integer
+                    .toHexString(productInfo)
+                    + (i != length - 1 ? ":" : ""));
+				}else{
+					stringBuffer.append(Integer
+                    .toHexString(productInfo)
+                    + (i != length - 1 ? ":" : ""));
+				}
+            }
+            return stringBuffer.equals("") ? null : stringBuffer.toString().toUpperCase();
+        }
+		
+	}
+
+	@Override
+	public void onClick(View v) {
+		switch (v.getId()) {
+		case R.id.bt_base_left: {
+			Intent intent = new Intent(Tracability.this, MMITestDevice.class);
+			setResult(RESULT_OK, intent);
+			finish();
+			break;
+		}
+
+		case R.id.bt_base_right: {
+			Intent intent = new Intent(Tracability.this, MMITestDevice.class);
+			setResult(RESULT_CANCELED, intent);
+			finish();
+			break;
+		}
+
+		}
+	}
+
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		if (MMITestDevice.isAutoTest()) {			
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/ShellUtils.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/ShellUtils.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/ShellUtils.java	(revision 1051)
@@ -0,0 +1,104 @@
+package com.android.mmi;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import android.util.Log;
+import java.io.File;
+import java.io.FileReader;
+import java.io.FileOutputStream;
+import java.io.BufferedOutputStream;
+
+public class ShellUtils {
+
+    static final String TAG = "ShellUtils";
+
+    public static synchronized String execShellStr(String cmd) {
+        Log.d(TAG, "execShellStr: " + cmd);
+        String[] cmdStrings = new String[] {
+                "sh", "-c", cmd
+        };
+        String retString = "";
+        try {
+            Process process = Runtime.getRuntime().exec(cmdStrings);
+            BufferedReader stdout = new BufferedReader(new InputStreamReader(
+                    process.getInputStream()), 7777);
+            BufferedReader stderr = new BufferedReader(new InputStreamReader(
+                    process.getErrorStream()), 7777);
+            String line = null;
+            while ((null != (line = stdout.readLine()))
+                    || (null != (line = stderr.readLine()))) {
+                if ("" != line) {
+                    retString += line + "\n";
+                }
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        return retString;
+
+    }
+
+    public static synchronized String readFile(String path) {
+        File file = new File(path);
+        String str = new String("");
+        BufferedReader reader = null;
+        try {
+            reader = new BufferedReader(new FileReader(file));
+            String line = null;
+            while ((line = reader.readLine()) != null) {
+                str = str + line;
+            }
+        } catch (Exception e) {
+            Log.d(TAG, "Read file error!!!");
+            str = "readError";
+            e.printStackTrace();
+        } finally {
+            if (reader != null) {
+                try {
+                    reader.close();
+                } catch (Exception e2) {
+                    e2.printStackTrace();
+                }
+            }
+        }
+        Log.d(TAG, "read " + path + " value is " + str.trim());
+        return str.trim();
+    }
+
+    public static synchronized void writeFile(String path, String cmd) {
+        Log.d(TAG, "path: " + path + "; cmd: " + cmd);
+        File file = new File(path);
+        if (!file.exists()) {
+            Log.d(TAG, "the file is not exists");
+            return;
+        }
+        FileOutputStream fos = null;
+        BufferedOutputStream bos = null;
+        try {
+            fos = new FileOutputStream(file);
+            bos = new BufferedOutputStream(fos);
+            byte[] bytes = cmd.getBytes();
+            bos.write(bytes);
+        } catch (Exception e) {
+            e.printStackTrace();
+        } finally {
+            if (bos != null) {
+                try {
+                    bos.close();
+                } catch (Exception e) {
+                    e.printStackTrace();
+                }
+            }
+            if (fos != null) {
+                try {
+                    fos.close();
+                } catch (Exception e) {
+                    e.printStackTrace();
+                }
+            }
+        }
+    }
+
+}
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/factoryreset/FactoryReset.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/factoryreset/FactoryReset.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/factoryreset/FactoryReset.java	(revision 1051)
@@ -0,0 +1,76 @@
+package com.android.mmi.factoryreset;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.TextView;
+
+import com.android.mmi.MMITestDevice;
+import com.android.mmi.R;
+//import com.android.internal.os.storage.ExternalStorageFormatter;
+public class FactoryReset extends Activity implements OnClickListener {
+	TextView tv_base_title, tv_base_pixi;
+	Button bt_base_left, bt_base_right;
+
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		super.onCreate(savedInstanceState);
+		requestWindowFeature(Window.FEATURE_NO_TITLE);
+		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
+				WindowManager.LayoutParams.FLAG_FULLSCREEN);
+		getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_IMMERSIVE_GESTURE_ISOLATED);
+		getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
+		setContentView(R.layout.activity_base);
+
+		tv_base_title = (TextView) findViewById(R.id.tv_base_title);
+		tv_base_title.setText(R.string.factory_reset_name);
+		tv_base_pixi = (TextView) findViewById(R.id.tv_base_pixi);
+		tv_base_pixi
+				.setText("Factory reset need to reboot and go to recovery\n process now! do it Now?");
+		bt_base_left = (Button) findViewById(R.id.bt_base_left);
+		bt_base_left.setText(R.string.bt_ok);
+		bt_base_left.setOnClickListener(this);
+		bt_base_right = (Button) findViewById(R.id.bt_base_right);
+		bt_base_right.setText(R.string.bt_no);
+		bt_base_right.setOnClickListener(this);
+	}
+
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		if (MMITestDevice.isAutoTest()) {			
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+
+	@Override
+	public void onClick(View v) {
+		switch (v.getId()) {
+		case R.id.bt_base_left: {/*
+			Intent formatintent = new Intent(ExternalStorageFormatter.FORMAT_AND_FACTORY_RESET);
+			formatintent.setComponent(ExternalStorageFormatter.COMPONENT_NAME);
+			startService(formatintent);
+			break;*/
+			Intent intent=new Intent("com.android.settings.RESET_FACTORY");
+			intent.addFlags(Intent.FLAG_INCLUDE_STOPPED_PACKAGES);
+			this.sendBroadcast(intent);
+			
+		
+		}
+
+		case R.id.bt_base_right: {
+			Intent intent = new Intent(FactoryReset.this, MMITestDevice.class);
+			setResult(RESULT_CANCELED, intent);
+			finish();
+			break;
+		}
+
+		}
+	}
+}
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/lcdmirergb/LcdMireRGB.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/lcdmirergb/LcdMireRGB.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/lcdmirergb/LcdMireRGB.java	(revision 1051)
@@ -0,0 +1,66 @@
+package com.android.mmi.lcdmirergb;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.Button;
+
+import com.android.mmi.MMITestDevice;
+import com.android.mmi.R;
+
+public class LcdMireRGB extends Activity implements OnClickListener {
+
+	Button bt_base_left, bt_base_right;
+
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		super.onCreate(savedInstanceState);
+		requestWindowFeature(Window.FEATURE_NO_TITLE);
+		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
+				WindowManager.LayoutParams.FLAG_FULLSCREEN);
+		getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_IMMERSIVE_GESTURE_ISOLATED);
+		getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
+		setContentView(R.layout.activity_lcd);
+		bt_base_left = (Button) findViewById(R.id.bt_base_left);
+		bt_base_left.setText(R.string.bt_pass);
+		bt_base_left.getBackground().setAlpha(0);
+		bt_base_left.setOnClickListener(this);
+		bt_base_right = (Button) findViewById(R.id.bt_base_right);
+		bt_base_right.setText(R.string.bt_fail);
+		bt_base_right.getBackground().setAlpha(0);
+		bt_base_right.setOnClickListener(this);
+	}
+
+	@Override
+	public void onClick(View v) {
+		switch (v.getId()) {
+		case R.id.bt_base_left: {
+			Intent intent = new Intent(LcdMireRGB.this, MMITestDevice.class);
+			setResult(RESULT_OK, intent);
+			finish();
+			break;
+		}
+
+		case R.id.bt_base_right: {
+			Intent intent = new Intent(LcdMireRGB.this, MMITestDevice.class);
+			setResult(RESULT_CANCELED, intent);
+			finish();
+			break;
+		}
+
+		}
+	}
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		if (MMITestDevice.isAutoTest()) {			
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/charger/Charger.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/charger/Charger.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/charger/Charger.java	(revision 1051)
@@ -0,0 +1,239 @@
+package com.android.mmi.charger;
+
+import java.io.BufferedReader;
+import java.io.FileReader;
+import java.io.IOException;
+
+import android.app.Activity;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.os.BatteryManager;
+import android.os.Bundle;
+import android.util.Log;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.TextView;
+
+import com.android.mmi.MMITestDevice;
+import com.android.mmi.R;
+
+public class Charger extends Activity implements OnClickListener {
+	private IntentFilter mIntentFilter;
+	TextView tv_base_title, insertCharger, batteryVoltage, chargerCurrent,
+			status, removeCharger;
+
+	Button bt_base_left, bt_base_right;
+
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+		requestWindowFeature(Window.FEATURE_NO_TITLE);
+		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
+				WindowManager.LayoutParams.FLAG_FULLSCREEN);
+		getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_IMMERSIVE_GESTURE_ISOLATED);
+		getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
+		setContentView(R.layout.activity_charger);
+
+		IntentFilter filter = new IntentFilter();
+		filter.addAction(Intent.ACTION_BATTERY_CHANGED);
+		registerReceiver(mIntentReceiver, filter);
+		tv_base_title = (TextView) this.findViewById(R.id.tv_base_title);
+		tv_base_title.setText(R.string.charger_name);
+		insertCharger = (TextView) this.findViewById(R.id.insertCharger);
+		insertCharger.setText("Please insert Charger cable");
+		removeCharger = (TextView) this.findViewById(R.id.removeCharger);
+		removeCharger.setText("Please remove Charger cable");
+		removeCharger.setVisibility(View.GONE);
+		batteryVoltage = (TextView) this.findViewById(R.id.batteryVoltage);
+		batteryVoltage.setVisibility(View.GONE);
+		chargerCurrent = (TextView) this.findViewById(R.id.chargerCurrent);
+		chargerCurrent.setVisibility(View.GONE);
+		status = (TextView) this.findViewById(R.id.status);
+
+		bt_base_left = (Button) findViewById(R.id.bt_base_left);
+		bt_base_left.setText(R.string.bt_pass);
+		bt_base_left.setEnabled(false);
+		bt_base_left.setOnClickListener(this);
+		bt_base_right = (Button) findViewById(R.id.bt_base_right);
+		bt_base_right.setText(R.string.bt_fail);
+		bt_base_right.setOnClickListener(this);
+	}
+
+	@Override
+	protected void onResume() {
+		super.onResume();
+
+		IntentFilter filter = new IntentFilter();
+
+		filter.addAction(Intent.ACTION_BATTERY_CHANGED);
+		registerReceiver(mIntentReceiver, filter);
+	}
+
+	@Override
+	protected void onPause() {
+		super.onPause();
+		unregisterReceiver(mIntentReceiver);
+	}
+
+	@Override
+	protected void onDestroy() {
+		super.onDestroy();
+	}
+
+	private BroadcastReceiver mIntentReceiver = new BroadcastReceiver() {
+		@Override
+		public void onReceive(Context context, Intent intent) {
+			String action = intent.getAction();
+			int status = intent.getIntExtra("status", 0);
+			int plugged = intent.getIntExtra("plugged", 0);
+			int voltage = intent.getIntExtra("voltage", 0);
+			String statusString = "";
+			switch (status) {
+			case BatteryManager.BATTERY_STATUS_UNKNOWN:
+				statusString = "unknown";
+				removeCharger.setVisibility(View.GONE);
+				insertCharger.setVisibility(View.VISIBLE);
+				batteryVoltage.setVisibility(View.GONE);
+				chargerCurrent.setVisibility(View.GONE);
+				break;
+			case BatteryManager.BATTERY_STATUS_CHARGING:
+				statusString = "OK";
+				insertCharger.setVisibility(View.GONE);
+				removeCharger.setVisibility(View.VISIBLE);
+				bt_base_left.setEnabled(true);
+				batteryVoltage.setVisibility(View.VISIBLE);
+				chargerCurrent.setVisibility(View.VISIBLE);
+
+				batteryVoltage.setText("BatteryVoltage:" + voltage+" mV");
+				chargerCurrent.setText("ChargerCurrent:" + getDianliu()+" mA");
+				break;
+			case BatteryManager.BATTERY_STATUS_DISCHARGING:
+				statusString = "discharging";
+				removeCharger.setVisibility(View.GONE);
+				insertCharger.setVisibility(View.VISIBLE);
+				batteryVoltage.setVisibility(View.GONE);
+				chargerCurrent.setVisibility(View.GONE);
+				break;
+			case BatteryManager.BATTERY_STATUS_NOT_CHARGING:
+				statusString = "not charging";
+				removeCharger.setVisibility(View.GONE);
+				insertCharger.setVisibility(View.VISIBLE);
+				batteryVoltage.setVisibility(View.GONE);
+				chargerCurrent.setVisibility(View.GONE);
+				break;
+			case BatteryManager.BATTERY_STATUS_FULL:
+				statusString = "full";
+				removeCharger.setVisibility(View.VISIBLE);
+				bt_base_left.setEnabled(true);
+				break;
+			}
+			String acString = "";
+			switch (plugged) {
+			case BatteryManager.BATTERY_PLUGGED_AC:
+				acString = "plugged ac";
+				break;
+			case BatteryManager.BATTERY_PLUGGED_USB:
+				acString = "plugged usb";
+				break;
+			}
+
+			Charger.this.status.setText("Charger:" + statusString);
+
+			if (action.equals(Intent.ACTION_BATTERY_CHANGED)) {
+
+				Log.d("Battery", "" + intent.getIntExtra("level", 0));
+
+				Log.d("Battery", "" + intent.getIntExtra("scale", 0));
+
+				Log.d("Battery", "" + intent.getIntExtra("batteryVoltage", 0));
+
+				Log.d("Battery", "" + intent.getIntExtra("temperature", 0));
+
+				Log.d("Battery",
+						"ss"
+								+ intent.getIntExtra("status",
+										BatteryManager.BATTERY_STATUS_CHARGING));
+
+				Log.d("Battery", "" + intent.getIntExtra("plugged", 0));
+
+				Log.d("Battery",
+						""
+								+ intent.getIntExtra("health",
+										BatteryManager.BATTERY_HEALTH_UNKNOWN));
+			}
+		}
+	};
+
+	private String getDianliu() {
+		// String filePath = "/sys/devices/platform/battery/FG_Battery_CurrentConsumption";
+		String filePath = "/sys/class/power_supply/battery/chg_current";
+		float f = Float.valueOf(getFileContent(filePath));
+		return "" + f;
+	}
+
+	private static String getFileContent(String filePath) {
+		if (filePath == null) {
+			return null;
+		}
+		StringBuilder builder = new StringBuilder();
+		BufferedReader reader = null;
+		try {
+			reader = new BufferedReader(new FileReader(filePath));
+			char[] buffer = new char[500];
+			int ret = -1;
+			while ((ret = reader.read(buffer)) != -1) {
+				builder.append(buffer, 0, ret);
+			}
+		} catch (IOException e) {
+			// Elog.e(TAG, "IOException:" + e.getMessage());
+		} finally {
+			if (reader != null) {
+				try {
+					reader.close();
+				} catch (IOException e) {
+					// Elog.e(TAG, "IOException:" + e.getMessage());
+				}
+			}
+		}
+		String result = builder.toString();
+		if (result != null) {
+			result = result.trim();
+		}
+		return result;
+	}
+
+	@Override
+	public void onClick(View v) {
+		switch (v.getId()) {
+		case R.id.bt_base_left: {
+			Intent intent = new Intent(Charger.this, MMITestDevice.class);
+			setResult(RESULT_OK, intent);
+			finish();
+			break;
+		}
+
+		case R.id.bt_base_right: {
+			Intent intent = new Intent(Charger.this, MMITestDevice.class);
+			setResult(RESULT_CANCELED, intent);
+			finish();
+			break;
+		}
+
+		}
+	}
+
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		if (MMITestDevice.isAutoTest()) {			
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/call/Call.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/call/Call.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/call/Call.java	(revision 1051)
@@ -0,0 +1,98 @@
+package com.android.mmi.call;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.net.Uri;
+import android.os.Bundle;
+import android.util.Log;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.WindowManager;
+import android.widget.Button;
+
+import com.android.mmi.MMITestDevice;
+import com.android.mmi.R;
+import android.view.View.OnClickListener;
+
+public class Call extends Activity implements OnClickListener{
+	
+	
+	
+	Button bt_base_left, bt_base_right;
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+		
+	//	requestWindowFeature(Window.FEATURE_NO_TITLE);
+		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
+				WindowManager.LayoutParams.FLAG_FULLSCREEN);
+		getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_IMMERSIVE_GESTURE_ISOLATED);
+		getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
+		
+		setContentView(R.layout.activity_call);
+		
+		bt_base_left = (Button) findViewById(R.id.bt_base_left);
+		bt_base_left.setText(R.string.bt_pass);
+		bt_base_left.setOnClickListener(this);
+	//	bt_base_left.setEnabled(false);
+		bt_base_right = (Button) findViewById(R.id.bt_base_right);
+		bt_base_right.setText(R.string.bt_fail);
+		bt_base_right.setOnClickListener(this);
+		
+		Intent callIntent = new Intent(Intent.ACTION_DIAL,Uri.parse("tel:112"));
+		callIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+		startActivity(callIntent);
+	}
+	@Override
+	protected void onRestart() {
+		// TODO Auto-generated method stub
+		super.onRestart();
+	}
+	@Override
+	protected void onResume() {
+		// TODO Auto-generated method stub
+		super.onResume();
+	}
+	
+	@Override
+	protected void onDestroy() {
+		//getWindow().clearFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		super.onDestroy();
+	}
+	
+	@Override
+	public void onClick(View v) {
+		switch (v.getId()) {
+		case R.id.bt_base_left: {
+			Intent intent = new Intent(Call.this, MMITestDevice.class);
+			setResult(RESULT_OK, intent);
+			finish();
+			break;
+		}
+
+		case R.id.bt_base_right: {
+			Intent intent = new Intent(Call.this, MMITestDevice.class);
+			setResult(RESULT_CANCELED, intent);
+			finish();
+			break;
+		}
+
+		}
+	}
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+	/*	switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(Signal.this, FactoryMode.class);
+			setResult(FactoryMode.TEST_CANCEL,intent);
+			finish();
+			return true;
+		}*/
+		return super.onKeyUp(keyCode, event);
+	}
+}
\ No newline at end of file
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/gsensor/Gsensor.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/gsensor/Gsensor.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/gsensor/Gsensor.java	(revision 1051)
@@ -0,0 +1,208 @@
+package com.android.mmi.gsensor;
+
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.app.AlertDialog.Builder;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.hardware.Sensor;
+import android.hardware.SensorEvent;
+import android.hardware.SensorEventListener;
+import android.hardware.SensorManager;
+import android.os.Bundle;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.RelativeLayout;
+import android.widget.TextView;
+
+import com.android.mmi.MMITestDevice;
+import com.android.mmi.R;
+
+public class Gsensor extends Activity implements OnClickListener,
+		SensorEventListener {
+	TextView tv_base_title, tv_base_swn, tv_down;
+	RelativeLayout rl_gsensor;
+	LinearLayout ll_gsensor;
+	ImageView iv_up, iv_faceUp, iv_faceDown, iv_left, iv_right, iv_down;
+	Button bt_base_left, bt_base_right, bt_gsensor_pcba;
+	SensorManager sensorManager = null;
+	Sensor gSensor = null;
+	boolean upIsTrue = false;
+	boolean leftIsTrue = false;
+	boolean rightIsTrue = false;
+	boolean downIsTrue = false;
+	boolean faceUpIsTrue = false;
+	boolean faceDownIsTrue = false;
+	float x;
+	float y;
+	float z;
+
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		super.onCreate(savedInstanceState);
+		requestWindowFeature(Window.FEATURE_NO_TITLE);
+		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
+				WindowManager.LayoutParams.FLAG_FULLSCREEN);
+		getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_IMMERSIVE_GESTURE_ISOLATED);
+		getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
+		setContentView(R.layout.activity_gsensor);
+
+		sensorManager = (SensorManager) getSystemService(Context.SENSOR_SERVICE);
+
+		gSensor = sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
+		tv_base_title = (TextView) this.findViewById(R.id.tv_base_title);
+		tv_base_title.setText(R.string.gsensor_name);
+		tv_base_swn = (TextView) this.findViewById(R.id.tv_base_swn);
+		tv_down = (TextView) this.findViewById(R.id.tv_down);
+		tv_base_swn.setText("put the Handset Up and towards up");
+		iv_up = (ImageView) this.findViewById(R.id.iv_up);
+		iv_faceUp = (ImageView) this.findViewById(R.id.iv_faceUp);
+		iv_faceDown = (ImageView) this.findViewById(R.id.iv_faceDown);
+		iv_left = (ImageView) this.findViewById(R.id.iv_left);
+		iv_right = (ImageView) this.findViewById(R.id.iv_right);
+		iv_down = (ImageView) this.findViewById(R.id.iv_down);
+		rl_gsensor = (RelativeLayout) this.findViewById(R.id.rl_gsensor);
+		ll_gsensor = (LinearLayout) this.findViewById(R.id.ll_gsensor);
+		ll_gsensor.setVisibility(View.GONE);
+
+		bt_gsensor_pcba = (Button) findViewById(R.id.bt_gsensor_pcba);
+		bt_gsensor_pcba.setOnClickListener(this);
+
+		bt_base_left = (Button) findViewById(R.id.bt_base_left);
+		bt_base_left.setText(R.string.bt_pass);
+		bt_base_left.setEnabled(false);
+		bt_base_left.setOnClickListener(this);
+		bt_base_right = (Button) findViewById(R.id.bt_base_right);
+		bt_base_right.setText(R.string.bt_fail);
+		bt_base_right.setOnClickListener(this);
+	}
+
+	@Override
+	protected void onResume() {
+		super.onResume();
+		sensorManager.registerListener(this, gSensor,
+				SensorManager.SENSOR_DELAY_NORMAL);
+	}
+
+	@Override
+	protected void onPause() {
+		super.onPause();
+		sensorManager.unregisterListener(this, gSensor);
+	}
+
+	@Override
+	public void onSensorChanged(SensorEvent event) {
+		if (event.sensor.getType() == Sensor.TYPE_ACCELEROMETER) {
+			float[] values = event.values;
+			x = values[SensorManager.DATA_X];
+			y = values[SensorManager.DATA_Y];
+			z = values[SensorManager.DATA_Z];
+			if (Math.abs(x) < 1 && y > 9 && Math.abs(z) < 1) {
+				// tv_down.setText("X:" + x + "\nY:" + y + "\nZ:" + z);
+				rl_gsensor.setVisibility(View.GONE);
+				ll_gsensor.setVisibility(View.VISIBLE);
+				bt_gsensor_pcba.setVisibility(View.INVISIBLE);
+				upIsTrue = true;
+			} else if (Math.abs(x) < 1 && y < -9 && Math.abs(z) < 1) {
+				iv_down.setVisibility(View.GONE);
+				downIsTrue = true;
+			} else if (x > 9 && Math.abs(y) < 1 && Math.abs(z) < 1) {
+				iv_left.setVisibility(View.GONE);
+				leftIsTrue = true;
+			} else if (x < -9 && Math.abs(y) < 1 && Math.abs(z) < 1) {
+				iv_right.setVisibility(View.GONE);
+				rightIsTrue = true;
+			} else if (Math.abs(x) < 1 && Math.abs(y) < 1 && z > 9) {
+				iv_faceUp.setVisibility(View.GONE);
+				faceUpIsTrue = true;
+			} else if (Math.abs(x) < 1 && Math.abs(y) < 1 && z < -9) {
+				iv_faceDown.setVisibility(View.GONE);
+				faceDownIsTrue = true;
+			}
+			if (upIsTrue && leftIsTrue && rightIsTrue && downIsTrue
+					&& faceUpIsTrue && faceDownIsTrue) {
+				tv_down.setText("All positions checked!");
+				tv_down.setVisibility(View.VISIBLE);
+				bt_gsensor_pcba.setVisibility(View.INVISIBLE);
+				ll_gsensor.setBackgroundColor(getResources().getColor(
+						R.color.black));
+				bt_base_left.setEnabled(true);
+			}
+		}
+	}
+
+	protected void showSuccessDialog() {
+		AlertDialog.Builder builder = new Builder(Gsensor.this);
+		builder.setMessage("x=" + x + "\ny=" + y + "\nz=" + z+"\nG-Sensor test OK!");
+		builder.setTitle("PCBA");
+		builder.setPositiveButton("PASS",
+				new android.content.DialogInterface.OnClickListener() {
+					@Override
+					public void onClick(DialogInterface dialog, int which) {
+						dialog.dismiss();
+						Intent intent = new Intent(Gsensor.this,
+								MMITestDevice.class);
+						setResult(RESULT_OK, intent);
+						finish();
+					}
+				});
+
+		builder.setNegativeButton("FAIL",
+				new android.content.DialogInterface.OnClickListener() {
+
+					@Override
+					public void onClick(DialogInterface dialog, int which) {
+						Intent intent = new Intent(Gsensor.this,
+								MMITestDevice.class);
+						setResult(RESULT_CANCELED, intent);
+						finish();
+						dialog.dismiss();
+					}
+				});
+
+		builder.create().show();
+	}
+
+	@Override
+	public void onClick(View v) {
+		switch (v.getId()) {
+		case R.id.bt_gsensor_pcba: {
+			showSuccessDialog();
+			break;
+		}
+		case R.id.bt_base_left: {
+			Intent intent = new Intent(Gsensor.this, MMITestDevice.class);
+			setResult(RESULT_OK, intent);
+			finish();
+			break;
+		}
+
+		case R.id.bt_base_right: {
+			Intent intent = new Intent(Gsensor.this, MMITestDevice.class);
+			setResult(RESULT_CANCELED, intent);
+			finish();
+			break;
+		}
+
+		}
+	}
+
+	@Override
+	public void onAccuracyChanged(Sensor sensor, int accuracy) {
+	}
+
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		if (MMITestDevice.isAutoTest()) {			
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
\ No newline at end of file
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/fmradio/MyFmRadio.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/fmradio/MyFmRadio.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/fmradio/MyFmRadio.java	(revision 1051)
@@ -0,0 +1,88 @@
+package com.android.mmi.fmradio;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.TextView;
+
+import com.android.mmi.MMITestDevice;
+import com.android.mmi.R;
+
+public class MyFmRadio extends Activity implements OnClickListener {
+	TextView tv_base_title, tv_base_pixi;
+	Button bt_base_left, bt_base_right;
+
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		super.onCreate(savedInstanceState);
+		requestWindowFeature(Window.FEATURE_NO_TITLE);
+		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
+				WindowManager.LayoutParams.FLAG_FULLSCREEN);
+		getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_IMMERSIVE_GESTURE_ISOLATED);
+		getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
+		setContentView(R.layout.activity_base);
+
+		tv_base_title = (TextView) this.findViewById(R.id.tv_base_title);
+		tv_base_title.setText(R.string.fmradio_name);
+		tv_base_pixi = (TextView) this.findViewById(R.id.tv_base_pixi);
+		tv_base_pixi.setText(R.string.test_finished);
+
+		bt_base_left = (Button) findViewById(R.id.bt_base_left);
+		bt_base_left.setText(R.string.bt_pass);
+		bt_base_left.setOnClickListener(this);
+		bt_base_right = (Button) findViewById(R.id.bt_base_right);
+		bt_base_right.setText(R.string.bt_fail);
+		bt_base_right.setOnClickListener(this);	
+
+		Intent intent = new Intent();
+		intent.setClassName("com.android.fmradio", "com.android.fmradio.FmMainActivity");
+		startActivity(intent);
+	}
+
+	@Override
+	protected void onPause() {
+		super.onPause();
+	}
+
+	@Override
+	protected void onDestroy() {		
+		super.onDestroy();
+		Intent intent = new Intent("com.mediatek.FMRadio.FMRadioService.ACTION_TOFMSERVICE_POWERDOWN");
+		sendBroadcast(intent);
+	}
+
+
+	@Override
+	public void onClick(View v) {
+		switch (v.getId()) {
+		case R.id.bt_base_left: {
+			Intent intent = new Intent(MyFmRadio.this, MMITestDevice.class);
+			setResult(RESULT_OK, intent);
+			finish();
+			break;
+		}
+
+		case R.id.bt_base_right: {
+			Intent intent = new Intent(MyFmRadio.this, MMITestDevice.class);
+			setResult(RESULT_CANCELED, intent);
+			finish();
+			break;
+		}
+
+		}
+	}
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		if (MMITestDevice.isAutoTest()) {			
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/NvRAMAgent.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/NvRAMAgent.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/NvRAMAgent.java	(revision 1051)
@@ -0,0 +1,198 @@
+/* Copyright Statement:
+ *
+ * This software/firmware and related documentation ("MediaTek Software") are
+ * protected under relevant copyright laws. The information contained herein is
+ * confidential and proprietary to MediaTek Inc. and/or its licensors. Without
+ * the prior written permission of MediaTek inc. and/or its licensors, any
+ * reproduction, modification, use or disclosure of MediaTek Software, and
+ * information contained herein, in whole or in part, shall be strictly
+ * prohibited.
+ *
+ * MediaTek Inc. (C) 2010. All rights reserved.
+ *
+ * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
+ * THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
+ * RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO RECEIVER
+ * ON AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL
+ * WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR
+ * NONINFRINGEMENT. NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH
+ * RESPECT TO THE SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY,
+ * INCORPORATED IN, OR SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES
+ * TO LOOK ONLY TO SUCH THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO.
+ * RECEIVER EXPRESSLY ACKNOWLEDGES THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO
+ * OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES CONTAINED IN MEDIATEK
+ * SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK SOFTWARE
+ * RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
+ * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S
+ * ENTIRE AND CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE
+ * RELEASED HEREUNDER WILL BE, AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE
+ * MEDIATEK SOFTWARE AT ISSUE, OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE
+ * CHARGE PAID BY RECEIVER TO MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
+ *
+ * The following software/firmware and/or related documentation ("MediaTek
+ * Software") have been modified by MediaTek Inc. All revisions are subject to
+ * any receiver's applicable license agreements with MediaTek Inc.
+ */
+
+/*
+ * This file is auto-generated.  DO NOT MODIFY.
+ * Original file: NvRAMAgent.aidl
+ */
+
+package com.android.mmi;
+
+
+//import java.lang.String;
+//import android.os.RemoteException;
+import android.os.IBinder;
+//import android.os.IInterface;
+//import android.os.Binder;
+//import android.os.Parcel;
+
+public interface NvRAMAgent extends android.os.IInterface {   
+    /** Local-side IPC implementation stub class. */
+    public abstract static class Stub extends android.os.Binder implements NvRAMAgent
+    {
+        private static final java.lang.String DESCRIPTOR = "NvRAMAgent";
+        /** Construct the stub at attach it to the interface. */
+        public Stub() {
+            this.attachInterface(this, DESCRIPTOR);
+        }
+        /**
+         * Cast an IBinder object into an NvRAMAgent interface,
+         * generating a proxy if needed.
+         */
+        public static NvRAMAgent asInterface(android.os.IBinder obj) {
+            if ((obj == null)) {
+                return null;
+            }
+            android.os.IInterface iin = (android.os.IInterface)obj.queryLocalInterface(DESCRIPTOR);
+            if (((iin != null) && (iin instanceof NvRAMAgent))) {
+                return ((NvRAMAgent)iin);
+            }
+            return new NvRAMAgent.Stub.Proxy(obj);
+        }
+        public android.os.IBinder asBinder() {
+            return this;
+        }
+        public boolean onTransact(int code, android.os.Parcel data, android.os.Parcel reply, int flags)
+                throws android.os.RemoteException {
+            switch (code) {
+                case INTERFACE_TRANSACTION:
+                    reply.writeString(DESCRIPTOR);
+                    return true;
+                case TRANSACTION_READFILE:
+                    data.enforceInterface(DESCRIPTOR);
+                    int myArg0;
+                    myArg0 = data.readInt();
+                    byte[] myResult = this.readFile(myArg0);
+                    reply.writeNoException();
+                    reply.writeByteArray(myResult);
+                    return true;
+                case TRANSACTION_WRITEFILE:
+                    data.enforceInterface(DESCRIPTOR);
+                    int myArg01;
+                    myArg01 = data.readInt();
+                    byte[] arg1;
+                    arg1 = data.createByteArray();
+                    int myResult2 = this.writeFile(myArg01, arg1);
+                    reply.writeNoException();
+                    reply.writeInt(myResult2);
+                    return true;
+                default:
+                    break;
+            }
+            return super.onTransact(code, data, reply, flags);
+        } 
+        private static class Proxy implements NvRAMAgent {
+            private android.os.IBinder mRemote;
+            Proxy(android.os.IBinder remote) {
+                mRemote = remote;
+            }
+            public android.os.IBinder asBinder() {
+                return mRemote;
+            }
+            public java.lang.String getInterfaceDescriptor() {
+                return DESCRIPTOR;
+            }
+            public byte[] readFile(int fileLid) throws android.os.RemoteException
+            {
+                android.os.Parcel data = android.os.Parcel.obtain();
+                android.os.Parcel reply = android.os.Parcel.obtain();
+                byte[] result;
+                try {
+                    data.writeInterfaceToken(DESCRIPTOR);
+                    data.writeInt(fileLid);
+                    mRemote.transact(Stub.TRANSACTION_READFILE, data, reply, 0);
+                    reply.readException();
+                    result = reply.createByteArray();
+                } finally {
+                    reply.recycle();
+                    data.recycle();
+                }
+                return result;
+            }
+            public int writeFile(int fileLid, byte[] buff) throws android.os.RemoteException
+            {
+                android.os.Parcel data = android.os.Parcel.obtain();
+                android.os.Parcel reply = android.os.Parcel.obtain();
+                int result;
+                try {
+                    data.writeInterfaceToken(DESCRIPTOR);
+                    data.writeInt(fileLid);
+                    data.writeByteArray(buff);
+                    mRemote.transact(Stub.TRANSACTION_WRITEFILE, data, reply, 0);
+                    reply.readException();
+                    result = reply.readInt();
+                } finally {
+                    reply.recycle();
+                    data.recycle();
+                }
+                return result;
+            }
+			     public byte[] readFileByName(String filename) throws android.os.RemoteException {
+				 	android.os.Parcel _data = android.os.Parcel.obtain();
+					android.os.Parcel _reply = android.os.Parcel.obtain();
+					byte[] _result;
+					try {
+						_data.writeInterfaceToken(DESCRIPTOR);
+						_data.writeString(filename);
+						mRemote.transact(Stub.TRANSACTION_READFILEBYNAME, _data, _reply, 0);
+						_reply.readException();
+						_result = _reply.createByteArray();
+						} finally {
+						_reply.recycle(); 
+						_data.recycle();
+						} 
+						return _result;
+						}
+				 public int writeFileByName(String filename, byte[] buff)
+				 	throws android.os.RemoteException {
+				 	android.os.Parcel _data = android.os.Parcel.obtain();
+					android.os.Parcel _reply = android.os.Parcel.obtain();
+					int _result;
+					try {
+						_data.writeInterfaceToken(DESCRIPTOR);
+						_data.writeString(filename);
+						_data.writeByteArray(buff);
+						mRemote.transact(Stub.TRANSACTION_WRITEFILEBYNAME, _data, _reply, 0);
+						_reply.readException();
+						_result = _reply.readInt();
+						} finally {
+						_reply.recycle();
+						_data.recycle();
+						}
+						return _result;
+						}
+        }
+        static final int TRANSACTION_READFILE = (IBinder.FIRST_CALL_TRANSACTION + 0);
+        static final int TRANSACTION_WRITEFILE = (IBinder.FIRST_CALL_TRANSACTION + 1);
+		static final int TRANSACTION_READFILEBYNAME = (IBinder.FIRST_CALL_TRANSACTION + 2);
+		static final int TRANSACTION_WRITEFILEBYNAME = (IBinder.FIRST_CALL_TRANSACTION + 3);
+    }
+    byte[] readFile(int fileLid) throws android.os.RemoteException;
+    int writeFile(int fileLid, byte[] buff) throws android.os.RemoteException;
+	public byte[] readFileByName(String filepath) throws android.os.RemoteException;
+	public int writeFileByName(String filepath, byte[] buff) throws android.os.RemoteException;
+}
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/backlight/Backlight.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/backlight/Backlight.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/backlight/Backlight.java	(revision 1051)
@@ -0,0 +1,188 @@
+package com.android.mmi.backlight;
+
+import java.util.Timer;
+import java.util.TimerTask;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Message;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.TextView;
+import android.os.PowerManager;
+
+import com.android.mmi.MMITestDevice;
+import com.android.mmi.R;
+
+public class Backlight extends Activity implements OnClickListener {
+	TextView tv_base_title, tv_base_pixi;
+	Button bt_base_left, bt_base_right, bt_retest;
+	int count = 0;
+	int showCount = 0;
+	int backLightValue = 0;
+	Timer timer = null;
+	static final int FLASH_NUMBER = 6;
+	static final int DELAY = 1000;
+	static final int INTERVAL = 500;
+    private PowerManager mPowerManager;
+    
+	Handler handler = new Handler() {
+		public void handleMessage(Message msg) {
+			if (msg.what % 2 == 0) {
+				//Bright();
+				if(mPowerManager != null){
+					mPowerManager.setBacklightOffForWfd(false);
+	                mPowerManager.setButtonOffForWfd(true);
+				}
+				
+			} else {
+				//Dark();
+				if(mPowerManager != null){
+					mPowerManager.setBacklightOffForWfd(true);
+	                mPowerManager.setButtonOffForWfd(false);
+				}
+			}
+			showCount++;
+			if (showCount == (FLASH_NUMBER - 1) * 2) {
+                if(timer != null){
+                    timer.cancel();
+                    timer = null;
+                }
+                if(mPowerManager != null){
+                	mPowerManager.setBacklightOffForWfd(false);
+                    mPowerManager.setButtonOffForWfd(true);
+                }
+                
+				bt_base_left.setVisibility(View.VISIBLE);
+				bt_base_right.setVisibility(View.VISIBLE);
+				bt_retest.setVisibility(View.VISIBLE);
+			}
+			super.handleMessage(msg);
+		}
+
+	};
+
+	class MytimerTask extends TimerTask {
+		public void run() {
+			Message message = new Message();
+			message.what = count;
+			handler.sendMessage(message);
+			count++;
+		}
+	}
+
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		super.onCreate(savedInstanceState);
+		requestWindowFeature(Window.FEATURE_NO_TITLE);
+		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
+				WindowManager.LayoutParams.FLAG_FULLSCREEN);
+		getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_IMMERSIVE_GESTURE_ISOLATED);
+		getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
+		setContentView(R.layout.activity_backlight);
+        
+        mPowerManager = (PowerManager) getSystemService(POWER_SERVICE);
+        
+		tv_base_title = (TextView) this.findViewById(R.id.tv_base_title);
+		tv_base_title.setText(R.string.backlight_name);
+		tv_base_pixi = (TextView) this.findViewById(R.id.tv_base_pixi);
+		tv_base_pixi.setText("Is Keypad&LCD backlight flashing?");
+
+		bt_base_left = (Button) findViewById(R.id.bt_base_left);
+		bt_base_left.setText(R.string.bt_pass);
+		bt_base_left.setOnClickListener(this);
+		bt_base_right = (Button) findViewById(R.id.bt_base_right);
+		bt_base_right.setText(R.string.bt_fail);
+		bt_base_right.setOnClickListener(this);
+		bt_retest = (Button) findViewById(R.id.bt_retest);
+		bt_retest.setText(R.string.bt_retest);
+		bt_retest.setOnClickListener(this);
+		bt_retest.setVisibility(View.GONE);
+		bt_base_left.setVisibility(View.GONE);
+		bt_base_right.setVisibility(View.GONE);
+        
+		backLight();
+	}
+
+	@Override
+	protected void onResume() {
+		super.onResume();		
+		//backLightValue = Integer.parseInt(GetBackLightValue().replaceAll("\\D+","").replaceAll("\r", "").replaceAll("\n", "").trim());
+	}
+
+	private void backLight() {
+		count = 0;
+		showCount = 0;
+		if(timer == null){
+            timer = new Timer();
+		    timer.schedule(new MytimerTask(), DELAY, INTERVAL);
+        }
+	}
+
+	@Override
+	protected void onDestroy() {
+		super.onDestroy();
+		if (timer != null) {
+			timer.cancel();
+			timer = null;
+		}
+		//SetBackLightValue(backLightValue);
+		if(mPowerManager != null){
+			mPowerManager.setBacklightOffForWfd(false);
+	        mPowerManager.setButtonOffForWfd(true);
+		}
+		
+	}
+
+	public native void Bright();
+
+	public native void Dark();
+
+	public native String GetBackLightValue();
+
+	public native void SetBackLightValue(int value);
+
+	static {
+		System.loadLibrary("mmitestdevice");
+	}
+
+	@Override
+	public void onClick(View v) {
+		switch (v.getId()) {
+		case R.id.bt_base_left: {
+			Intent intent = new Intent(Backlight.this, MMITestDevice.class);
+			setResult(RESULT_OK, intent);
+			finish();
+			break;
+		}
+
+		case R.id.bt_base_right: {
+			Intent intent = new Intent(Backlight.this, MMITestDevice.class);
+			setResult(RESULT_CANCELED, intent);
+			finish();
+			break;
+		}
+		case R.id.bt_retest: {
+			bt_retest.setVisibility(View.GONE);
+			bt_base_left.setVisibility(View.GONE);
+			bt_base_right.setVisibility(View.GONE);
+			backLight();
+			break;
+		}
+		}
+	}
+
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		if (MMITestDevice.isAutoTest()) {			
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
\ No newline at end of file
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/gps/Gps.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/gps/Gps.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/gps/Gps.java	(revision 1051)
@@ -0,0 +1,241 @@
+package com.android.mmi.gps;
+
+import java.text.DecimalFormat;
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+
+import android.app.Activity;
+import android.app.PendingIntent;
+import android.app.PendingIntent.CanceledException;
+import android.content.ContentResolver;
+import android.content.Context;
+import android.content.Intent;
+import android.location.GpsSatellite;
+import android.location.GpsStatus;
+import android.location.Location;
+import android.location.LocationListener;
+import android.location.LocationManager;
+import android.net.Uri;
+import android.os.Bundle;
+import android.provider.Settings;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.view.ViewDebug.IntToString;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.TextView;
+
+import com.android.mmi.MMITestDevice;
+import com.android.mmi.R;
+
+import android.util.Log;
+
+public class Gps extends Activity implements OnClickListener {
+	private String Tag = "MMIDeviceTest/GPS";
+	private TextView tv_base_title, gps_satellite_id, gps_signal_id;
+	Button bt_base_left, bt_base_right;
+	int updateCount;
+	private LocationManager mLocationManager;
+	private List<GpsSatellite> numSatelliteList;
+	private StringBuffer prnBuffer, snrbBuffer;
+	private float sumSnr;
+	int count;
+	String prn = "";
+	String snr = "";
+	String p = ".00";
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		super.onCreate(savedInstanceState);
+		requestWindowFeature(Window.FEATURE_NO_TITLE);
+		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
+				WindowManager.LayoutParams.FLAG_FULLSCREEN);
+		getWindow().getDecorView().setSystemUiVisibility(
+				View.SYSTEM_UI_FLAG_IMMERSIVE_GESTURE_ISOLATED);
+		getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
+		setContentView(R.layout.activity_gps);
+		tv_base_title = (TextView) this.findViewById(R.id.tv_base_title);
+		tv_base_title.setText(R.string.gps_name);
+		gps_satellite_id = (TextView) this.findViewById(R.id.gps_satellite_id);
+//		gps_satellite_id.setText("0 satellites");
+		gps_satellite_id.setText("0 satellites\nPRN="
+				+ prn + " tracked\nSNR=" + snr + " tracked\n\nAverSNR=" + p
+				+"\n");
+		gps_signal_id = (TextView) this.findViewById(R.id.gps_signal_id);
+		gps_signal_id.setText("updates = 0");
+		bt_base_left = (Button) findViewById(R.id.bt_base_left);
+		bt_base_left.setText(R.string.bt_pass);
+		bt_base_left.setEnabled(false);
+		bt_base_left.setOnClickListener(this);
+		bt_base_right = (Button) findViewById(R.id.bt_base_right);
+		bt_base_right.setText(R.string.bt_fail);
+		bt_base_right.setOnClickListener(this);
+	}
+
+	@Override
+	protected void onPause() {
+
+		super.onPause();
+	}
+
+	@Override
+	protected void onResume() {
+
+		numSatelliteList = new ArrayList<GpsSatellite>();
+		updateCount = 0;
+		openGPSSettings();
+		getLocation();
+
+		super.onResume();
+	}
+
+	@Override
+	protected void onDestroy() {
+		mLocationManager.removeUpdates(locationListener);
+		mLocationManager.removeGpsStatusListener(statusListener);
+
+		super.onDestroy();
+	}
+
+	private void openGPSSettings() {
+		int currentMode = Settings.Secure.getInt(getContentResolver(),
+				Settings.Secure.LOCATION_MODE,
+				Settings.Secure.LOCATION_MODE_OFF);
+		Log.d(Tag, "openGPSSettings: currentMode = " + currentMode);
+		if (currentMode != Settings.Secure.LOCATION_MODE_SENSORS_ONLY) {
+			int newMode = Settings.Secure.LOCATION_MODE_SENSORS_ONLY;
+			Intent intent = new Intent(
+					"com.android.settings.location.MODE_CHANGING");
+			intent.putExtra("CURRENT_MODE", currentMode);
+			intent.putExtra("NEW_MODE", newMode);
+			sendBroadcast(intent,
+					android.Manifest.permission.WRITE_SECURE_SETTINGS);
+			Settings.Secure.putInt(getContentResolver(),
+					Settings.Secure.LOCATION_MODE, newMode);
+		}
+
+	}
+
+	private void getLocation() {
+
+		String serviceName = Context.LOCATION_SERVICE;
+		mLocationManager = (LocationManager) this.getSystemService(serviceName);
+
+		String provider = LocationManager.GPS_PROVIDER;
+		Location location = mLocationManager.getLastKnownLocation(provider);
+		if (location == null)
+			location = mLocationManager
+					.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);
+		updateToNewLocation(location);
+
+		mLocationManager.requestLocationUpdates(provider, 1000, 0,
+				locationListener);
+		mLocationManager.addGpsStatusListener(statusListener);
+	}
+
+	private final GpsStatus.Listener statusListener = new GpsStatus.Listener() {
+		public void onGpsStatusChanged(int event) {
+			updateCount++;
+			GpsStatus status = mLocationManager.getGpsStatus(null);
+			updateGpsStatus(event, status);
+		}
+	};
+
+	private void updateGpsStatus(int event, GpsStatus status) {
+		if (event == GpsStatus.GPS_EVENT_SATELLITE_STATUS) {
+			int maxSatellites = status.getMaxSatellites();
+			Iterator<GpsSatellite> it = status.getSatellites().iterator();
+			numSatelliteList.clear();
+			count = 0;
+			sumSnr = 0;
+			prnBuffer = new StringBuffer();
+			snrbBuffer = new StringBuffer();
+			while (it.hasNext() && count <= maxSatellites) {
+				GpsSatellite s = it.next();
+				sumSnr += s.getSnr();
+				if (count != 0) {
+					prnBuffer.append("/");
+					snrbBuffer.append("/");
+				}
+				prnBuffer.append(String.valueOf(s.getPrn()));
+				snrbBuffer.append(String.valueOf(s.getSnr()));
+				numSatelliteList.add(s);
+				count++;
+			}
+			prn = prnBuffer.toString();
+			snr = snrbBuffer.toString();
+		}
+
+		if (sumSnr > 0 && count > 0) {
+			sumSnr = sumSnr / count;
+		}
+		DecimalFormat decimalFormat = new DecimalFormat(".00");
+		p = decimalFormat.format(sumSnr);
+		gps_satellite_id.setText(numSatelliteList.size() + " satellites\nPRN="
+				+ prn + " tracked\nSNR=" + snr + " tracked\n\nAverSNR=" + p
+				+"\n");
+
+		gps_signal_id.setText("updates = " + updateCount);
+		if (numSatelliteList.size() > 3) {
+			bt_base_left.setEnabled(true);
+		}
+	}
+
+	private void updateToNewLocation(Location location) {
+		if (location != null) {
+		} else {
+
+		}
+	}
+
+	private final LocationListener locationListener = new LocationListener() {
+		public void onLocationChanged(Location location) {
+			if (location != null) {
+				updateToNewLocation(location);
+
+			}
+		}
+
+		public void onProviderDisabled(String provider) {
+			updateToNewLocation(null);
+		}
+
+		public void onProviderEnabled(String provider) {
+
+		}
+
+		public void onStatusChanged(String provider, int status, Bundle extras) {
+
+		}
+	};
+
+	@Override
+	public void onClick(View v) {
+		switch (v.getId()) {
+		case R.id.bt_base_left: {
+			Intent intent = new Intent(Gps.this, MMITestDevice.class);
+			setResult(RESULT_OK, intent);
+			finish();
+			break;
+		}
+
+		case R.id.bt_base_right: {
+			Intent intent = new Intent(Gps.this, MMITestDevice.class);
+			setResult(RESULT_CANCELED, intent);
+			finish();
+			break;
+		}
+
+		}
+	}
+
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		if (MMITestDevice.isAutoTest()) {
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/dtv/Dtv.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/dtv/Dtv.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/dtv/Dtv.java	(revision 1051)
@@ -0,0 +1,117 @@
+package com.android.mmi.dtv;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.TextView;
+
+import android.view.View.OnClickListener;
+import com.android.mmi.MMITestDevice;
+import com.android.mmi.R;
+//import com.mediatek.factorymode.earphone.Earphone;
+
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.content.BroadcastReceiver;
+import android.util.Log;
+import android.content.Context;
+
+import android.content.ComponentName;
+
+public class Dtv extends Activity implements OnClickListener{
+	private static final int PROGRESS_BAR_MAX = 10000;
+	//private Button succesButton ;
+	//private Button failButton ;
+	Button bt_base_left, bt_base_right;
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+		//getWindow().addFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		setContentView(R.layout.activity_dtv);
+
+     
+
+		
+		bt_base_left = (Button) findViewById(R.id.bt_base_left);
+		bt_base_left.setText(R.string.bt_pass);
+		bt_base_left.setOnClickListener(this);
+	//	bt_base_left.setEnabled(false);
+		bt_base_right = (Button) findViewById(R.id.bt_base_right);
+		bt_base_right.setText(R.string.bt_fail);
+		bt_base_right.setOnClickListener(this);
+		
+		Intent intent = new Intent();
+        intent.setClassName("kr.co.fci.tv", "kr.co.fci.tv.activity.IntroActivity");
+        startActivity(intent);
+	
+	}
+
+	
+	
+	public void testFiniah() {
+				bt_base_left.setEnabled(true);
+				Intent intentResult = new Intent(Dtv.this, MMITestDevice.class);
+				setResult(RESULT_OK,intentResult);
+				finish();
+	}
+
+
+	@Override
+	protected void onPause() {
+		// TODO Auto-generated method stub
+		super.onPause();
+	}
+
+	@Override
+	protected void onResume() {
+		// TODO Auto-generated method stub
+		super.onResume();
+	}
+
+	@Override
+	protected void onDestroy() {
+		//getWindow().clearFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		super.onDestroy();
+	}
+	
+	@Override
+	public void onClick(View v) {
+		switch (v.getId()) {
+		case R.id.bt_base_left: {
+			Intent intent = new Intent(Dtv.this, MMITestDevice.class);
+			setResult(RESULT_OK, intent);
+			finish();
+			break;
+		}
+
+		case R.id.bt_base_right: {
+			Intent intent = new Intent(Dtv.this, MMITestDevice.class);
+			setResult(RESULT_CANCELED, intent);
+			finish();
+			break;
+		}
+
+		}
+	}
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(Dtv.this, MMITestDevice.class);
+			setResult(RESULT_CANCELED,intent);
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
+
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/MyAutoTest.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/MyAutoTest.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/MyAutoTest.java	(revision 1051)
@@ -0,0 +1,70 @@
+package com.android.mmi;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.graphics.Color;
+import android.os.Bundle;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.view.KeyEvent;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.TextView;
+
+public class MyAutoTest extends Activity implements OnClickListener {
+	
+	TextView tv_base_title, tv_base_pixi, tv_base_swn;
+	Button bt_base_left, bt_base_right;
+	
+	
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		super.onCreate(savedInstanceState);
+		requestWindowFeature(Window.FEATURE_NO_TITLE);
+		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
+				WindowManager.LayoutParams.FLAG_FULLSCREEN);
+		getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_IMMERSIVE_GESTURE_ISOLATED);
+		getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON); 
+		setContentView(R.layout.activity_base);
+		Bundle bundle = this.getIntent().getExtras();  
+		String str=bundle.getString("fail_item");
+		tv_base_title = (TextView) findViewById(R.id.tv_base_title);
+		tv_base_title.setText(R.string.autotest_name);
+		tv_base_pixi = (TextView) findViewById(R.id.tv_base_pixi);
+		tv_base_pixi.setTextColor(Color.RED);
+		tv_base_pixi.setText(str);
+
+		bt_base_left = (Button) findViewById(R.id.bt_base_left);
+		bt_base_left.setText(R.string.bt_no);
+		bt_base_left.setOnClickListener(this);
+		bt_base_right = (Button) findViewById(R.id.bt_base_right);
+		bt_base_right.setText(R.string.bt_yes);
+		bt_base_right.setOnClickListener(this);
+	}
+
+	@Override
+	public void onClick(View v) {
+		switch (v.getId()) {
+		case R.id.bt_base_left: {
+			Intent intent = new Intent(MyAutoTest.this, MMITestDevice.class);
+			setResult(RESULT_CANCELED, intent);
+			finish();
+			break;
+		}
+
+		case R.id.bt_base_right: {
+			Intent intent = new Intent(MyAutoTest.this, MMITestDevice.class);
+			setResult(RESULT_OK, intent);
+			finish();
+			break;
+		}
+
+		}
+	}
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/cameraimgfront/CameraImgFront.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/cameraimgfront/CameraImgFront.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/cameraimgfront/CameraImgFront.java	(revision 1051)
@@ -0,0 +1,210 @@
+package com.android.mmi.cameraimgfront;
+
+import java.io.IOException;
+import java.lang.reflect.Method;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.graphics.PixelFormat;
+import android.hardware.Camera;
+import android.content.Context;
+import android.hardware.Camera.AutoFocusCallback;
+import android.hardware.Camera.CameraInfo;
+import android.hardware.Camera.Parameters;
+import android.os.Build;
+import android.os.Bundle;
+import android.view.KeyEvent;
+import android.view.SurfaceHolder;
+import android.view.SurfaceView;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.TextView;
+import java.util.List;
+import android.hardware.Camera.Size;
+import com.android.mmi.MMITestDevice;
+import com.android.mmi.R;
+
+public class CameraImgFront extends Activity implements OnClickListener {
+	TextView tv_base_title,tv_otp,tv_pixel,tv_id;
+	Button bt_base_left, bt_base_right;
+	private SurfaceView sv_camera;
+	private SurfaceHolder holder;
+	private Camera camera;
+	Camera.Parameters parameters;
+	private int mScreenWidth;
+	private int mScreenHeigh;
+	
+	
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		super.onCreate(savedInstanceState);
+		requestWindowFeature(Window.FEATURE_NO_TITLE);
+		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
+				WindowManager.LayoutParams.FLAG_FULLSCREEN);
+		getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_IMMERSIVE_GESTURE_ISOLATED);
+		getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
+		setContentView(R.layout.activity_camera);
+		tv_base_title = (TextView) findViewById(R.id.tv_base_title);
+		tv_base_title.setText(R.string.camera_img_front_name);
+		WindowManager dpy = (WindowManager) getSystemService(Context.WINDOW_SERVICE);
+		mScreenWidth = dpy.getDefaultDisplay().getWidth();
+		mScreenHeigh = dpy.getDefaultDisplay().getHeight();
+		sv_camera = (SurfaceView) this.findViewById(R.id.sv_camera);
+
+		//tv_otp = (TextView) findViewById(R.id.tv_otp);
+		tv_pixel = (TextView) findViewById(R.id.tv_pixel);
+		tv_id =	(TextView) findViewById(R.id.tv_id);
+
+		String sid = "ID: "+"gc5025_mipi_raw   ";
+		String spixel = "   pixel: "+"5M_FF"	;
+		String sotp = "OTP: "+"not OK"	;
+		
+		//tv_otp.setText(sotp);
+		tv_pixel.setText(spixel);
+		tv_id.setText(sid);
+
+		bt_base_left = (Button) findViewById(R.id.bt_base_left);
+		bt_base_left.setText(R.string.bt_pass);
+		bt_base_left.getBackground().setAlpha(0);
+		bt_base_left.setOnClickListener(this);
+		bt_base_right = (Button) findViewById(R.id.bt_base_right);
+		bt_base_right.setText(R.string.bt_fail);
+		bt_base_right.getBackground().setAlpha(0);
+		bt_base_right.setOnClickListener(this);
+
+		holder = sv_camera.getHolder();
+		holder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);
+		holder.addCallback(new MyHolderCallback());
+	}
+
+	@Override
+	public void onClick(View v) {
+		switch (v.getId()) {
+		case R.id.bt_base_left: {
+			if (camera != null) {
+				camera.stopPreview();
+				camera.release();
+				camera = null;
+			}
+			Intent intent = new Intent(CameraImgFront.this, MMITestDevice.class);
+			setResult(RESULT_OK, intent);
+			finish();
+			break;
+		}
+
+		case R.id.bt_base_right: {
+			Intent intent = new Intent(CameraImgFront.this, MMITestDevice.class);
+			setResult(RESULT_CANCELED, intent);
+			finish();
+			break;
+		}
+
+		}
+	}
+
+	private class MyHolderCallback implements SurfaceHolder.Callback {
+
+		public void surfaceCreated(SurfaceHolder holder) {
+			for (int i = 0; i < Camera.getNumberOfCameras(); i++) {
+				CameraInfo info = new CameraInfo();
+				Camera.getCameraInfo(i, info);
+				if (info.facing == CameraInfo.CAMERA_FACING_FRONT
+						&& null == camera) {
+					camera = Camera.open(i);
+					try {
+						camera.setPreviewDisplay(holder);
+						initCamera();
+						camera.startPreview();
+					} catch (IOException e) {
+						e.printStackTrace();
+					}
+				}
+			}
+		}
+
+		public void surfaceChanged(SurfaceHolder holder, int format, int width,
+				int height) {
+			camera.autoFocus(new AutoFocusCallback() {
+				@Override
+				public void onAutoFocus(boolean success, Camera camera) {
+					if (success) {
+						camera.cancelAutoFocus();
+					}
+				}
+
+			});
+		}
+
+		public void surfaceDestroyed(SurfaceHolder holder) {
+			if (camera != null) {
+				camera.stopPreview();
+				camera.release();
+				camera = null;
+			}
+		}
+	}
+
+	private void initCamera() {
+		if(camera != null){
+			parameters = camera.getParameters();
+			
+			float tmp = 0f;  
+		    float mindiff = 100f;  
+		    float x_d_y = (float)mScreenWidth/ (float)mScreenHeigh;  
+		    Size best = null;  
+		    List<Size> supportedPreviewSizes = parameters.getSupportedPreviewSizes();  
+		    for(Size s : supportedPreviewSizes){  
+		        tmp = Math.abs(((float)s.height/(float)s.width)-x_d_y);  
+		        if(tmp<mindiff){  
+		            mindiff = tmp;  
+		            best = s;  
+		        }  
+		    }  
+					
+			parameters.setPictureFormat(PixelFormat.JPEG);
+			parameters.setFlashMode(Parameters.FLASH_MODE_OFF);
+			parameters.setPreviewSize(best.width, best.height);
+			setDispaly(parameters, camera);
+			camera.setParameters(parameters);
+			camera.startPreview();
+			camera.cancelAutoFocus();
+		}
+	}
+
+	private void setDispaly(Camera.Parameters parameters, Camera camera) {
+		if (Integer.parseInt(Build.VERSION.SDK) >= 8) {
+			setDisplayOrientation(camera, 90);
+		} else {
+			parameters.setRotation(90);
+		}
+
+	}
+
+	private void setDisplayOrientation(Camera camera, int i) {
+		Method downPolymorphic;
+		try {
+			downPolymorphic = camera.getClass().getMethod(
+					"setDisplayOrientation", new Class[] { int.class });
+			if (downPolymorphic != null) {
+				downPolymorphic.invoke(camera, new Object[] { i });
+			}
+		} catch (Exception e) {
+		}
+	}
+
+	@Override
+	protected void onDestroy() {
+		super.onDestroy();
+	}
+
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		if (MMITestDevice.isAutoTest()) {			
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/wifi/Wifi.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/wifi/Wifi.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/wifi/Wifi.java	(revision 1051)
@@ -0,0 +1,203 @@
+package com.android.mmi.wifi;
+
+import java.util.List;
+
+import android.app.Activity;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.net.wifi.ScanResult;
+import android.net.wifi.WifiInfo;
+import android.net.wifi.WifiManager;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Message;
+import android.util.Log;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.TextView;
+
+import com.android.mmi.MMITestDevice;
+import com.android.mmi.R;
+
+public class Wifi extends Activity implements OnClickListener {
+	TextView tv_base_title, tv_base_pixi;
+	Button bt_base_left, bt_base_right;
+	int countPass = 0;
+
+	private WifiManager mWifiManager;
+	private WifiStateReceiver mWifiStateReceiver;
+
+	private final int SET_WIFI_ADDRESS = 1;
+
+	List<ScanResult> currentWifiList;
+	public boolean wifiFlag = false;
+	Handler handlerWiFi;
+
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		super.onCreate(savedInstanceState);
+		requestWindowFeature(Window.FEATURE_NO_TITLE);
+		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
+				WindowManager.LayoutParams.FLAG_FULLSCREEN);
+		getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_IMMERSIVE_GESTURE_ISOLATED);
+		getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
+		setContentView(R.layout.activity_base);
+		tv_base_title = (TextView) this.findViewById(R.id.tv_base_title);
+		tv_base_title.setText(R.string.wifi_name);
+		tv_base_pixi = (TextView) this.findViewById(R.id.tv_base_pixi);
+		tv_base_pixi.setText(R.string.wifi_init_wait);
+
+		bt_base_left = (Button) findViewById(R.id.bt_base_left);
+		bt_base_left.setText(R.string.bt_pass);
+		bt_base_left.setOnClickListener(this);
+		bt_base_left.setEnabled(false);
+		bt_base_right = (Button) findViewById(R.id.bt_base_right);
+		bt_base_right.setText(R.string.bt_fail);
+		bt_base_right.setOnClickListener(this);
+		mWifiManager = (WifiManager) this.getSystemService(this.WIFI_SERVICE);
+		if (mWifiManager.isWifiEnabled()) {
+			// mHandler.sendEmptyMessageDelayed(SET_WIFI_ADDRESS, 1000);
+
+		} else {
+			tv_base_pixi.setText(getString(R.string.wifi_init_wait));
+		}
+		mWifiManager.setWifiEnabled(true);
+		IntentFilter intentFilter = new IntentFilter();
+		intentFilter.addAction(WifiManager.WIFI_STATE_CHANGED_ACTION);
+		intentFilter.addAction(WifiManager.SCAN_RESULTS_AVAILABLE_ACTION);
+
+		mWifiStateReceiver = new WifiStateReceiver();
+		registerReceiver(mWifiStateReceiver, intentFilter);
+		mWifiManager.startScan();
+		tv_base_pixi.setText(getString(R.string.wifi_init_wait));
+		handlerWiFi = new Handler() {
+			@Override
+			public void handleMessage(Message msg) {
+				super.handleMessage(msg);
+				if (msg.what == 0x1231) {
+					Intent intent = new Intent(Wifi.this, MMITestDevice.class);
+					setResult(RESULT_OK, intent);
+					finish();
+				}
+			}
+		};
+	}
+
+	@Override
+	protected void onDestroy() {
+		// TODO Auto-generated method stub
+		// getWindow().clearFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		mWifiManager.setWifiEnabled(false);
+		super.onDestroy();
+	}
+
+	@Override
+	protected void onStop() {
+		if (mWifiStateReceiver != null) {
+			this.unregisterReceiver(mWifiStateReceiver);
+			mWifiStateReceiver = null;
+		}
+
+		if (currentWifiList != null) {
+			currentWifiList.clear();
+			currentWifiList = null;
+		}
+
+		if (mWifiManager != null) {
+			mWifiManager.setWifiEnabled(false);
+		}
+
+		super.onStop();
+	}
+
+	class WifiStateReceiver extends BroadcastReceiver {
+		public void onReceive(Context c, Intent intent) {
+			String action = intent.getAction();
+
+			if (WifiManager.WIFI_STATE_CHANGED_ACTION.equals(action)) {
+				Bundle bundle = intent.getExtras();
+				int oldInt = bundle.getInt("previous_wifi_state");
+				int newInt = bundle.getInt("wifi_state");
+
+				if (newInt == WifiManager.WIFI_STATE_DISABLED) {
+					tv_base_pixi.setText("WiFi info close");
+				} else if (newInt == WifiManager.WIFI_STATE_ENABLED) {
+					// mHandler.sendEmptyMessageDelayed(SET_WIFI_ADDRESS, 1000);
+				} else if (newInt == WifiManager.WIFI_STATE_ENABLING) {
+					tv_base_pixi.setText("WiFi info opening");
+				} else if (newInt == WifiManager.WIFI_STATE_DISABLING) {
+					tv_base_pixi.setText("WiFi info closeing");
+				} else {
+
+				}
+			} else if (WifiManager.SCAN_RESULTS_AVAILABLE_ACTION.equals(action)) {
+				currentWifiList = mWifiManager.getScanResults();
+				if (currentWifiList == null) {
+					return;
+				}
+
+				String listview = " ";
+				for (int i = currentWifiList.size() - 1; i > 0; i--) {
+					// currentWifiList.get(i).BSSID;
+					listview = currentWifiList.get(i).SSID + "\n" + listview;
+					Log.v("wwwwwwww", listview);
+				}
+				tv_base_pixi.setText(listview + "");
+				bt_base_left.setEnabled(true);
+			}
+
+		}
+	}
+
+	public static String StringizeIp(int ip) {
+		int ip4 = (ip >> 24) & 0x000000FF;
+		int ip3 = (ip >> 16) & 0x000000FF;
+		int ip2 = (ip >> 8) & 0x000000FF;
+		int ip1 = ip & 0x000000FF;
+		return Integer.toString(ip1) + "." + ip2 + "." + ip3 + "." + ip4;
+	}
+
+	private void onWifiStateChange() {
+		String ip_str = "";
+		WifiInfo info = mWifiManager.getConnectionInfo();
+		if (info != null) {
+			int ipaddr = info.getIpAddress();
+			String wifissid = info.getSSID();
+			ip_str = " (ip=" + StringizeIp(ipaddr) + ")";
+		}
+	}
+
+	@Override
+	public void onClick(View v) {
+		switch (v.getId()) {
+		case R.id.bt_base_left: {
+			Intent intent = new Intent(Wifi.this, MMITestDevice.class);
+			setResult(RESULT_OK, intent);
+			finish();
+			break;
+		}
+
+		case R.id.bt_base_right: {
+			Intent intent = new Intent(Wifi.this, MMITestDevice.class);
+			setResult(RESULT_CANCELED, intent);
+			finish();
+			break;
+		}
+
+		}
+	}
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		if (MMITestDevice.isAutoTest()) {			
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/lcdblack/LcdBlack.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/lcdblack/LcdBlack.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/lcdblack/LcdBlack.java	(revision 1051)
@@ -0,0 +1,73 @@
+package com.android.mmi.lcdblack;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.RelativeLayout;
+
+import com.android.mmi.MMITestDevice;
+import com.android.mmi.R;
+
+public class LcdBlack extends Activity implements OnClickListener{
+
+	RelativeLayout rl_momochrome;
+	Button bt_base_left, bt_base_right;
+
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		super.onCreate(savedInstanceState);
+		requestWindowFeature(Window.FEATURE_NO_TITLE);
+		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
+				WindowManager.LayoutParams.FLAG_FULLSCREEN);
+		getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_IMMERSIVE_GESTURE_ISOLATED);
+		getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
+		setContentView(R.layout.activity_lcd_monochrome);
+		rl_momochrome = (RelativeLayout) findViewById(R.id.rl_momochrome);
+		rl_momochrome.setBackgroundColor(getResources().getColor(R.color.black));
+		
+		
+		bt_base_left = (Button) findViewById(R.id.bt_base_left);
+		bt_base_left.getBackground().setAlpha(0);
+		bt_base_left.setText(R.string.bt_pass);
+		bt_base_left.setTextColor(this.getResources().getColor(R.color.white));
+		bt_base_left.setOnClickListener(this);
+		bt_base_right = (Button) findViewById(R.id.bt_base_right);
+		bt_base_right.setText(R.string.bt_fail);
+		bt_base_right.getBackground().setAlpha(0);
+		bt_base_right.setTextColor(this.getResources().getColor(R.color.white));
+		bt_base_right.setOnClickListener(this);
+	}
+
+	@Override
+	public void onClick(View v) {
+		switch (v.getId()) {
+		case R.id.bt_base_left: {
+			Intent intent = new Intent(LcdBlack.this, MMITestDevice.class);
+			setResult(RESULT_OK, intent);
+			finish();
+			break;
+		}
+
+		case R.id.bt_base_right: {
+			Intent intent = new Intent(LcdBlack.this, MMITestDevice.class);
+			setResult(RESULT_CANCELED, intent);
+			finish();
+			break;
+		}
+
+		}
+	}
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		if (MMITestDevice.isAutoTest()) {			
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/chargerled/ChargerLed.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/chargerled/ChargerLed.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/chargerled/ChargerLed.java	(revision 1051)
@@ -0,0 +1,156 @@
+package com.android.mmi.chargerled;
+
+import java.util.Timer;
+import java.util.TimerTask;
+
+import android.app.Activity;
+import android.app.Notification;
+import android.app.NotificationManager;
+import android.content.Intent;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Message;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.TextView;
+
+import com.android.mmi.MMITestDevice;
+import com.android.mmi.R;
+
+public class ChargerLed extends Activity implements OnClickListener {
+	TextView tv_base_title, tv_base_pixi;
+	Button bt_base_left, bt_base_right;
+	NotificationManager gNotMgr = null;
+	Timer timer = new Timer();
+	int count = 0;
+	int showCount = 0;
+	static final int FLASH_NUMBER = 4;
+	static final int DELAY = 1000;
+	static final int INTERVAL = 500;
+	Handler handler = new Handler() {
+		public void handleMessage(Message msg) {
+			if (msg.what % 2 == 0) {
+				onLed();
+			} else {
+				offLed();
+			}
+			showCount++;
+			if (showCount == (FLASH_NUMBER - 1) * 2) {
+				bt_base_left.setVisibility(View.VISIBLE);
+				bt_base_right.setVisibility(View.VISIBLE);
+			}
+			super.handleMessage(msg);
+		}
+
+	};
+
+	class MytimerTask extends TimerTask {
+		public void run() {
+			Message message = new Message();
+			message.what = count;
+			handler.sendMessage(message);
+			count++;
+		}
+	}
+
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		super.onCreate(savedInstanceState);
+		requestWindowFeature(Window.FEATURE_NO_TITLE);
+		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
+				WindowManager.LayoutParams.FLAG_FULLSCREEN);
+		getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_IMMERSIVE_GESTURE_ISOLATED);
+		getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
+		setContentView(R.layout.activity_base);
+		tv_base_title = (TextView) findViewById(R.id.tv_base_title);
+		tv_base_title.setText(R.string.charger_led_name);
+		tv_base_pixi = (TextView) findViewById(R.id.tv_base_pixi);
+		tv_base_pixi.setText(R.string.charger_led_state);
+		gNotMgr = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);
+		bt_base_left = (Button) findViewById(R.id.bt_base_left);
+		bt_base_left.setText(R.string.bt_pass);
+		bt_base_left.setOnClickListener(this);
+		bt_base_right = (Button) findViewById(R.id.bt_base_right);
+		bt_base_right.setText(R.string.bt_fail);
+		bt_base_right.setOnClickListener(this);
+		bt_base_left.setVisibility(View.GONE);
+		bt_base_right.setVisibility(View.GONE);
+		Intent sendled = new Intent(); 
+		sendled.setAction("com.mediatek.factorymode.led.action_red");
+		ChargerLed.this.sendBroadcast(sendled);
+	}
+
+	@Override
+	protected void onResume() {
+		super.onResume();
+		count = 0;
+		for (int i = 0; i < FLASH_NUMBER * 2 - 1; i++) {
+			timer.schedule(new MytimerTask(), DELAY + INTERVAL * i);
+		}
+	}
+
+	public void onLed() {
+		Notification tBNot = new Notification();
+		int icon = tBNot.icon=R.drawable.ic_launcher;  
+		tBNot.ledARGB = 0xffffffff;
+		tBNot.ledOnMS = 5000;
+		tBNot.flags |= Notification.FLAG_SHOW_LIGHTS;
+		tBNot.icon=icon; 
+		gNotMgr.notify(10086, tBNot);
+	}
+
+	public void offLed() {
+		gNotMgr.cancel(10086);
+	}
+
+	@Override
+	protected void onPostResume() {
+		super.onPostResume();
+		gNotMgr.cancel(10086);
+	}
+
+	@Override
+	protected void onDestroy() {
+		super.onDestroy();
+		if (timer != null) {
+			timer.cancel();
+			timer = null;
+		}
+		gNotMgr.cancel(10086);
+		Intent sendled = new Intent(); 
+				sendled.setAction("com.mediatek.factorymode.led.action_blue");
+				ChargerLed.this.sendBroadcast(sendled);
+	}
+
+	@Override
+	public void onClick(View v) {
+		switch (v.getId()) {
+		case R.id.bt_base_left: {
+			Intent intent = new Intent(ChargerLed.this, MMITestDevice.class);
+			setResult(RESULT_OK, intent);
+			finish();
+			break;
+		}
+
+		case R.id.bt_base_right: {
+			Intent intent = new Intent(ChargerLed.this, MMITestDevice.class);
+			setResult(RESULT_CANCELED, intent);
+			finish();
+			break;
+		}
+
+		}
+	}
+
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		if (MMITestDevice.isAutoTest()) {			
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/audio/Audio.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/audio/Audio.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/audio/Audio.java	(revision 1051)
@@ -0,0 +1,293 @@
+package com.android.mmi.audio;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.media.AudioFormat;
+import android.media.AudioManager;
+import android.media.AudioRecord;
+import android.media.AudioTrack;
+import android.media.MediaPlayer;
+import android.media.MediaRecorder;
+import android.os.Bundle;
+import android.util.Log;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.view.KeyEvent;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.TextView;
+import android.os.SystemProperties;
+import com.android.mmi.MMITestDevice;
+import com.android.mmi.R;
+import android.media.AudioSystem;
+import android.os.Handler;
+import android.os.Message;
+
+public class Audio extends Activity implements OnClickListener {
+	TextView tv_base_title, tv_base_pixi;
+	Button bt_base_left, bt_base_right;
+	private MediaPlayer musicPlayer;
+	AudioManager audioManager;
+	int count = 0;
+	int maxVolume;
+	int currentVolume;
+	private static final int MIC_VALUE = 3;
+	private static final int TEST_VOLUME = 15;
+	AudioRecord audioRecord;
+	AudioTrack audioTrack;
+	RecordThread rec;
+	boolean isMic = true;
+	Handler handler = new Handler() {
+		public void handleMessage(Message msg) {
+				bt_base_left.setVisibility(View.VISIBLE);
+				bt_base_right.setVisibility(View.VISIBLE);
+			super.handleMessage(msg);
+		}
+	};
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		super.onCreate(savedInstanceState);
+		requestWindowFeature(Window.FEATURE_NO_TITLE);
+		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
+				WindowManager.LayoutParams.FLAG_FULLSCREEN);
+		getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_IMMERSIVE_GESTURE_ISOLATED);
+		getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
+		setContentView(R.layout.activity_base);
+		
+		tv_base_title = (TextView) findViewById(R.id.tv_base_title);
+		tv_base_title.setText(R.string.audio_name);
+		tv_base_pixi = (TextView) findViewById(R.id.tv_base_pixi);
+		tv_base_pixi.setText("Receiver discrete test");
+		bt_base_left = (Button) findViewById(R.id.bt_base_left);
+		bt_base_left.setText(R.string.bt_pass);
+		bt_base_left.setOnClickListener(this);
+		bt_base_right = (Button) findViewById(R.id.bt_base_right);
+		bt_base_right.setText(R.string.bt_fail);
+		bt_base_right.setOnClickListener(this);
+		audioManager = (AudioManager) getSystemService(Context.AUDIO_SERVICE);
+		currentVolume = audioManager.getStreamVolume(AudioManager.STREAM_MUSIC);
+		maxVolume = audioManager.getStreamMaxVolume(AudioManager.STREAM_MUSIC); 
+		Log.e("yyAudio", "maxVolume=" + maxVolume + "currentVolume=" + currentVolume);
+		bt_base_left.setVisibility(View.GONE);
+		bt_base_right.setVisibility(View.GONE);
+		delay(4000);
+	}
+
+	@Override
+	protected void onResume() {
+		super.onResume();
+		if(audioManager != null){
+			audioManager.setStreamVolume(AudioManager.STREAM_MUSIC, maxVolume , AudioManager.FLAG_PLAY_SOUND|AudioManager.FLAG_SHOW_UI );
+		}
+		  
+		Earphone();		
+	}
+	
+	@Override
+	protected void onPause() {
+		super.onPause();
+		if (musicPlayer != null) {
+			musicPlayer.release();
+			musicPlayer = null;
+		}		
+	}
+
+	@Override
+	public void onClick(View v) {
+		switch (v.getId()) {
+		case R.id.bt_base_left: {
+			if (count == 0) {
+				if (musicPlayer != null) {
+					musicPlayer.release();
+					musicPlayer = null;
+				}
+				tv_base_pixi.setText("Speaker Melody Test");
+				bt_base_left.setVisibility(View.GONE);
+				bt_base_right.setVisibility(View.GONE);
+				count++;
+                SystemProperties.set("persist.sys.testearphone", "0");
+				Speaker();
+				delay(4000);
+			} else if (count == 1) {
+				if (musicPlayer != null) {
+					musicPlayer.release();
+					musicPlayer = null;
+				}
+                SystemProperties.set("persist.sys.testspeaker", "0");
+				bt_base_left.setEnabled(true);
+				tv_base_pixi.setText("Loop from MAIN MIC test");
+				bt_base_left.setVisibility(View.GONE);
+				bt_base_right.setVisibility(View.GONE);
+				AudioSystem.setParameters("ForceUseSpecificMic=0");
+				rec = new RecordThread();
+				rec.start();
+				count++;
+				delay(2000);
+			} else if (count == 2) {
+				bt_base_left.setEnabled(true);
+				tv_base_pixi.setText("Loop from SEC MIC test");
+				bt_base_left.setVisibility(View.GONE);
+				bt_base_right.setVisibility(View.GONE);
+				AudioSystem.setParameters("ForceUseSpecificMic=2");
+				count++;
+				delay(2000);
+			} else if (count == 3) {
+				Intent intent = new Intent(Audio.this, MMITestDevice.class);
+				setResult(RESULT_OK, intent);
+				finish();
+			}
+			break;
+		}
+
+		case R.id.bt_base_right: {
+			Intent intent = new Intent(Audio.this, MMITestDevice.class);
+			setResult(RESULT_CANCELED, intent);
+			finish();
+			break;
+		}
+
+		}
+	}
+
+	protected void Earphone() {
+		setSpeakerphoneOn(false);
+		musicPlayer = MediaPlayer.create(this, R.raw.speaker);
+		musicPlayer.start();
+		musicPlayer
+				.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
+
+					@Override
+					public void onCompletion(MediaPlayer arg0) {
+						musicPlayer.start();
+						musicPlayer.setLooping(true);
+					}
+				});
+	}
+
+	protected void Speaker() {
+		setSpeakerphoneOn(true);
+		musicPlayer = MediaPlayer.create(this, R.raw.speaker);
+		musicPlayer.start();
+		musicPlayer
+				.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
+
+					@Override
+					public void onCompletion(MediaPlayer arg0) {
+						musicPlayer.start();
+						musicPlayer.setLooping(true);
+					}
+				});
+	}
+
+	
+	private void setSpeakerphoneOn(boolean on) {
+		if (on) {
+            SystemProperties.set("persist.sys.testspeaker", "1");
+            if(audioManager != null){
+            	audioManager.setSpeakerphoneOn(true);
+    			audioManager.setMode(AudioManager.MODE_NORMAL);		
+            }					
+		} else {			
+			SystemProperties.set("persist.sys.testearphone", "1");
+			 if(audioManager != null){
+			audioManager.setSpeakerphoneOn(false);// 关闭扬声器
+				audioManager.setMode(AudioManager.MODE_IN_CALL);
+			 }
+			
+		}
+	}
+
+	protected void onStop() {
+		super.onStop();
+        
+	    SystemProperties.set("persist.sys.testearphone", "0");
+        SystemProperties.set("persist.sys.testspeaker", "0");
+
+        if (musicPlayer != null) {
+            musicPlayer.release();
+            musicPlayer = null;
+        }
+        isMic = false;
+        if(audioManager != null){
+            audioManager.setMode(AudioManager.MODE_NORMAL);            
+			audioManager.setStreamVolume(AudioManager.STREAM_MUSIC, currentVolume, 0); 
+		}
+	}
+	
+	@Override
+	protected void onDestroy() {
+		super.onDestroy();
+		if (musicPlayer != null) {
+			musicPlayer.release();
+			musicPlayer = null;
+		}
+		isMic = false;
+	}
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		if (MMITestDevice.isAutoTest()) {			
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+	
+	class RecordThread extends Thread {
+		static final int frequency = 44100;
+		static final int channelConfiguration = AudioFormat.CHANNEL_CONFIGURATION_MONO;
+		static final int audioEncoding = AudioFormat.ENCODING_PCM_16BIT;
+
+		@Override
+		public void run() {
+			int recBufSize = AudioRecord.getMinBufferSize(frequency,
+					channelConfiguration, audioEncoding) * 2;
+			int plyBufSize = AudioTrack.getMinBufferSize(frequency,
+					channelConfiguration, audioEncoding) * 2;
+
+			audioRecord = new AudioRecord(MediaRecorder.AudioSource.MIC,
+					frequency, channelConfiguration, audioEncoding, recBufSize);
+
+			audioTrack = new AudioTrack(AudioManager.STREAM_MUSIC, frequency,
+					channelConfiguration, audioEncoding, plyBufSize,
+					AudioTrack.MODE_STREAM);
+
+			byte[] recBuf = new byte[recBufSize];
+			audioRecord.startRecording();
+			audioTrack.play();
+			if(audioTrack != null && audioRecord != null){
+				while (isMic) {
+					if (audioManager.getStreamVolume(AudioManager.STREAM_MUSIC) != MIC_VALUE) {
+						audioManager.setStreamVolume(AudioManager.STREAM_MUSIC, MIC_VALUE, 0);
+					}
+					int readLen = audioRecord.read(recBuf, 0, recBufSize);
+					audioTrack.write(recBuf, 0, readLen);
+				}
+				audioTrack.stop();
+				audioRecord.stop();
+				audioRecord = null;
+				audioTrack = null;
+			}
+			
+			if(audioManager != null){
+				audioManager.setStreamVolume(AudioManager.STREAM_MUSIC, currentVolume, 0); 
+			}
+		}
+	}
+	protected void delay(long time) {
+		Message message = new Message();
+		message.what = 000;
+	 	new Thread(new Runnable()
+        {  
+            public void run()
+            {  
+                try {
+                Thread.sleep(time);
+                } catch (InterruptedException e) {
+                e.printStackTrace();
+                }  
+                handler.sendMessage(message);
+            }  
+        }).start();}
+}
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/lightsensor/LightSensor.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/lightsensor/LightSensor.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/lightsensor/LightSensor.java	(revision 1051)
@@ -0,0 +1,129 @@
+package com.android.mmi.lightsensor;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.hardware.Sensor;
+import android.hardware.SensorEvent;
+import android.hardware.SensorEventListener;
+import android.hardware.SensorManager;
+import android.os.Bundle;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.TextView;
+
+import com.android.mmi.MMITestDevice;
+import com.android.mmi.R;
+
+public class LightSensor extends Activity implements OnClickListener,
+		SensorEventListener {
+	TextView tv_base_title, tv_light_value, tv_light_dark, tv_light_bright;
+	Button bt_base_left, bt_base_right;
+	SensorManager sensorManager = null;// 传感器管理器引用
+	Sensor lightSensor = null;// 光线传感器引用
+	boolean bright = false;
+	boolean dark = false;
+
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+		requestWindowFeature(Window.FEATURE_NO_TITLE);
+		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
+				WindowManager.LayoutParams.FLAG_FULLSCREEN);
+		getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_IMMERSIVE_GESTURE_ISOLATED);
+		getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
+		setContentView(R.layout.activity_lightsensor);
+		// 获得传感器管理器实例
+		sensorManager = (SensorManager) getSystemService(Context.SENSOR_SERVICE);
+		// 获得光线传感器实例
+		lightSensor = sensorManager.getDefaultSensor(Sensor.TYPE_LIGHT);
+		tv_base_title = (TextView) this.findViewById(R.id.tv_base_title);
+		tv_base_title.setText(R.string.sensor_name);
+		tv_light_value = (TextView) this.findViewById(R.id.tv_light_value);
+		tv_light_dark = (TextView) this.findViewById(R.id.tv_light_dark);
+		tv_light_bright = (TextView) this.findViewById(R.id.tv_light_bright);
+		tv_light_bright.setText("bright: not tested");
+		tv_light_dark.setText("dark: not tested");
+		bt_base_left = (Button) findViewById(R.id.bt_base_left);
+		bt_base_left.setText(R.string.bt_pass);
+		bt_base_left.setOnClickListener(this);
+		bt_base_left.setEnabled(false);
+		bt_base_right = (Button) findViewById(R.id.bt_base_right);
+		bt_base_right.setText(R.string.bt_fail);
+		bt_base_right.setOnClickListener(this);
+
+	}
+
+	@Override
+	protected void onResume() {
+		super.onResume();
+		sensorManager.registerListener(this, lightSensor,
+				SensorManager.SENSOR_DELAY_NORMAL);
+	}
+
+	@Override
+	protected void onPause() {
+		super.onPause();
+		sensorManager.unregisterListener(this, lightSensor);
+	}
+
+	@Override
+	public void onSensorChanged(SensorEvent event) {
+		if (event.sensor.getType() == Sensor.TYPE_LIGHT) {
+			float[] values = event.values;
+			if (values[0] > 30) {
+				bright = true;
+				tv_light_bright.setText("bright: OK");
+			} else {
+				dark = true;
+				tv_light_dark.setText("dark: OK");
+			}
+			tv_light_value.setText("ambient light is" + values[0]);
+			if (bright && dark) {
+				bt_base_left.setEnabled(true);
+			}
+		}
+	}
+
+	@Override
+	protected void onDestroy() {
+		super.onDestroy();
+	}
+
+	@Override
+	public void onClick(View v) {
+		switch (v.getId()) {
+		case R.id.bt_base_left: {
+			Intent intent = new Intent(LightSensor.this, MMITestDevice.class);
+			setResult(RESULT_OK, intent);
+			finish();
+			break;
+		}
+
+		case R.id.bt_base_right: {
+			Intent intent = new Intent(LightSensor.this, MMITestDevice.class);
+			setResult(RESULT_CANCELED, intent);
+			finish();
+			break;
+		}
+
+		}
+	}
+
+	@Override
+	public void onAccuracyChanged(Sensor sensor, int accuracy) {
+	}
+
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		if (MMITestDevice.isAutoTest()) {			
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/batterylevel/BatteryLevel.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/batterylevel/BatteryLevel.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/batterylevel/BatteryLevel.java	(revision 1051)
@@ -0,0 +1,172 @@
+package com.android.mmi.batterylevel;
+
+import android.app.Activity;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.os.BatteryManager;
+import android.os.Bundle;
+import android.util.Log;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.TextView;
+import android.widget.RelativeLayout;
+
+import com.android.mmi.MMITestDevice;
+import com.android.mmi.R;
+
+public class BatteryLevel extends Activity implements OnClickListener {
+	private IntentFilter mIntentFilter;
+	TextView tv_base_title, tv_battery_temp, tv_battery_content,
+			tv_battery_voltage, tv_battery_id;
+//	String battery_temp = "Battery temperature \n should be between \n 20~50℃ \n current is: \n";
+	String battery_content = "Battery content should \n be between 40~60% \n current is: ";
+//	String battery_voltage = "Battery Voltage is: ";
+	String battery_id = "Battery ID is: ";
+	Button bt_base_left, bt_base_right,power_off;
+	RelativeLayout rl_battery_level;
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+		requestWindowFeature(Window.FEATURE_NO_TITLE);
+		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
+				WindowManager.LayoutParams.FLAG_FULLSCREEN);
+		getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_IMMERSIVE_GESTURE_ISOLATED);
+		getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
+		setContentView(R.layout.activity_battery_level);
+
+		IntentFilter filter = new IntentFilter();
+		filter.addAction(Intent.ACTION_BATTERY_CHANGED);
+		registerReceiver(mIntentReceiver, filter);
+		rl_battery_level =(RelativeLayout)this.findViewById(R.id.rl_battery_level);
+		tv_base_title = (TextView) this.findViewById(R.id.tv_base_title);
+		tv_base_title.setText(R.string.battery_temp_name);
+		tv_battery_temp = (TextView) this.findViewById(R.id.tv_battery_temp);
+		//tv_battery_temp.setText(battery_temp);
+		tv_battery_content = (TextView) this
+				.findViewById(R.id.tv_battery_content);
+		tv_battery_content.setText(battery_content);
+		tv_battery_voltage = (TextView) this
+				.findViewById(R.id.tv_battery_voltage);
+		//tv_battery_voltage.setText(battery_voltage);
+		tv_battery_id = (TextView) this
+				.findViewById(R.id.tv_battery_id);
+		tv_battery_id.setText(battery_id);
+		tv_battery_id.setVisibility(View.GONE);
+		bt_base_left = (Button) findViewById(R.id.bt_base_left);
+		bt_base_left.setText(R.string.bt_pass);
+		bt_base_left.setOnClickListener(this);
+		bt_base_right = (Button) findViewById(R.id.bt_base_right);
+		bt_base_right.setText(R.string.bt_fail);
+		bt_base_right.setOnClickListener(this);
+		power_off  = (Button) findViewById(R.id.power_off);
+		power_off.setOnClickListener(this);
+	}
+
+	@Override
+	protected void onResume() {
+		super.onResume();
+
+		IntentFilter filter = new IntentFilter();
+
+		filter.addAction(Intent.ACTION_BATTERY_CHANGED);
+		registerReceiver(mIntentReceiver, filter);
+	}
+
+	@Override
+	protected void onPause() {
+		super.onPause();
+		unregisterReceiver(mIntentReceiver);
+	}
+
+	@Override
+	protected void onDestroy() {
+		super.onDestroy();
+	}
+
+	private BroadcastReceiver mIntentReceiver = new BroadcastReceiver() {
+		@Override
+		public void onReceive(Context context, Intent intent) {
+			String action = intent.getAction();
+			int health = intent.getIntExtra("health", 0);
+			boolean present = intent.getBooleanExtra("present", false);
+			int level = intent.getIntExtra("level", 0);
+			int icon_small = intent.getIntExtra("icon-small", 0);
+			int plugged = intent.getIntExtra("plugged", 0);
+			double voltage = intent.getIntExtra("voltage", 0);
+			int temperature = intent.getIntExtra("temperature", 0);
+			String technology = intent.getStringExtra("technology");
+			
+			String acString = "";
+			switch (plugged) {
+			case BatteryManager.BATTERY_PLUGGED_AC:
+				acString = "plugged ac";
+				break;
+			case BatteryManager.BATTERY_PLUGGED_USB:
+				acString = "plugged usb";
+				break;
+			}
+		//	BatteryLevel.this.tv_battery_temp.setText(battery_temp + temperature/10 + "℃");
+			BatteryLevel.this.tv_battery_content.setText(battery_content + level + "%");
+			if(level>=40&&level<=60){
+				rl_battery_level.setBackgroundColor(getResources().getColor(R.color.green));
+			}else{
+				rl_battery_level.setBackgroundColor(getResources().getColor(R.color.red));
+			}
+		//	BatteryLevel.this.tv_battery_voltage.setText(battery_voltage + voltage/1000 + "V");
+			BatteryLevel.this.tv_battery_id.setText(battery_id);
+
+			if (action.equals(Intent.ACTION_BATTERY_CHANGED)) {
+
+				Log.d("Battery", "" + intent.getIntExtra("level", 0));
+
+				Log.d("Battery", "" + intent.getIntExtra("scale", 0));
+
+				Log.d("Battery", "" + intent.getIntExtra("batteryVoltage", 0));
+
+				Log.d("Battery", "" + intent.getIntExtra("temperature", 0));
+
+				Log.d("Battery",
+						"ss"
+								+ intent.getIntExtra("status",
+										BatteryManager.BATTERY_STATUS_CHARGING));
+
+				Log.d("Battery", "" + intent.getIntExtra("plugged", 0));
+
+				Log.d("Battery",
+						""
+								+ intent.getIntExtra("health",
+										BatteryManager.BATTERY_HEALTH_UNKNOWN));
+			}
+		}
+	};
+	@Override
+	public void onClick(View v) {
+		switch (v.getId()) {
+		case R.id.power_off: {
+			Intent intent = new Intent("android.intent.action.ACTION_REQUEST_SHUTDOWN");
+            intent.putExtra("android.intent.extra.KEY_CONFIRM", false);
+            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+            startActivity(intent);
+			break;
+		}
+
+		
+		}
+	}
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		if (MMITestDevice.isAutoTest()) {			
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+	
+}
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/lcdwhite/LcdWhite.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/lcdwhite/LcdWhite.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/lcdwhite/LcdWhite.java	(revision 1051)
@@ -0,0 +1,70 @@
+package com.android.mmi.lcdwhite;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.RelativeLayout;
+
+import com.android.mmi.MMITestDevice;
+import com.android.mmi.R;
+
+public class LcdWhite extends Activity implements OnClickListener {
+	RelativeLayout rl_momochrome;
+	Button bt_base_left, bt_base_right;
+
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		super.onCreate(savedInstanceState);
+		requestWindowFeature(Window.FEATURE_NO_TITLE);
+		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
+				WindowManager.LayoutParams.FLAG_FULLSCREEN);
+		getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_IMMERSIVE_GESTURE_ISOLATED);
+		getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
+		setContentView(R.layout.activity_lcd_monochrome);
+		rl_momochrome = (RelativeLayout) findViewById(R.id.rl_momochrome);
+		rl_momochrome
+				.setBackgroundColor(getResources().getColor(R.color.white));
+		bt_base_left = (Button) findViewById(R.id.bt_base_left);
+		bt_base_left.setText(R.string.bt_pass);
+		bt_base_left.getBackground().setAlpha(0);
+		bt_base_left.setOnClickListener(this);
+		bt_base_right = (Button) findViewById(R.id.bt_base_right);
+		bt_base_right.setText(R.string.bt_fail);
+		bt_base_right.getBackground().setAlpha(0);
+		bt_base_right.setOnClickListener(this);
+	}
+
+	@Override
+	public void onClick(View v) {
+		switch (v.getId()) {
+		case R.id.bt_base_left: {
+			Intent intent = new Intent(LcdWhite.this, MMITestDevice.class);
+			setResult(RESULT_OK, intent);
+			finish();
+			break;
+		}
+
+		case R.id.bt_base_right: {
+			Intent intent = new Intent(LcdWhite.this, MMITestDevice.class);
+			setResult(RESULT_CANCELED, intent);
+			finish();
+			break;
+		}
+
+		}
+	}
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		if (MMITestDevice.isAutoTest()) {			
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/FeatureOption.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/FeatureOption.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/FeatureOption.java	(revision 1051)
@@ -0,0 +1,79 @@
+
+package com.android.mmi;
+
+import android.os.SystemProperties;
+import android.telephony.TelephonyManager;
+
+public class FeatureOption {
+    public static final boolean MTK_GEMINI_SUPPORT = getValue("ro.mtk_gemini_support");
+    public static final boolean MTK_GEMINI_3SIM_SUPPORT = TelephonyManager.getDefault().getPhoneCount() == 3;
+    public static final boolean MTK_GEMINI_4SIM_SUPPORT = TelephonyManager.getDefault().getPhoneCount() == 4;
+    public static final boolean MTK_VOICE_UNLOCK_SUPPORT = getValue("ro.mtk_voice_unlock_support");
+    public static final boolean MTK_AUDIO_PROFILES = getValue("ro.mtk_audio_profiles");
+    public static final boolean MTK_LCA_ROM_OPTIMIZE = getValue("ro.mtk_lca_rom_optimize");
+    public static final boolean PURE_AP_USE_EXTERNAL_MODEM = getValue("ro.pure_ap_use_external_modem");
+    public static final boolean EVDO_DT_SUPPORT = getValue("ro.evdo_dt_support");
+    public static final boolean MTK_SYSTEM_UPDATE_SUPPORT = getValue("ro.mtk_system_update_support");
+    public static final boolean MTK_SCOMO_ENTRY = getValue("ro.mtk_scomo_entry");
+    public static final boolean MTK_MDM_SCOMO = getValue("ro.mtk_mdm_scomo");
+    public static final boolean MTK_FOTA_ENTRY = getValue("ro.mtk_fota_entry");
+    public static final boolean MTK_MDM_FUMO = getValue("ro.mtk_mdm_fumo");
+    public static final boolean MTK_DRM_APP = getValue("ro.mtk_drm_app");
+    public static final boolean MTK_EMMC_SUPPORT = getValue("ro.mtk_emmc_support");
+    public static final boolean MTK_CACHE_MERGE_SUPPORT = getValue("ro.mtk_cache_merge_support");
+    public static final boolean MTK_TETHERING_EEM_SUPPORT = getValue("ro.mtk_tethering_eem_support");
+    public static final boolean MTK_TETHERINGIPV6_SUPPORT = getValue("ro.mtk_tetheringipv6_support");
+    public static final boolean MTK_NFC_ADDON_SUPPORT = getValue("ro.mtk_nfc_addon_support");
+    public static final boolean MTK_IPO_SUPPORT = getValue("ro.mtk_ipo_support");
+    public static final boolean MTK_ONLY_OWNER_SIM_SUPPORT = getValue("ro.mtk_owner_sim_support");
+    public static final boolean MTK_2SDCARD_SWAP = getValue("ro.mtk_2sdcard_swap");
+    public static final boolean MTK_SHARED_SDCARD = getValue("ro.mtk_shared_sdcard");
+    public static final boolean MTK_OWNER_SDCARD_ONLY_SUPPORT = getValue("ro.mtk_owner_sdcard_support");
+    public static final boolean MTK_WFD_SUPPORT = getValue("ro.mtk_wfd_support");
+    public static final boolean MTK_WLAN_SUPPORT = getValue("ro.mtk_wlan_support");
+    public static final boolean MTK_GPS_SUPPORT = getValue("ro.mtk_gps_support");
+    public static final boolean MTK_BT_SUPPORT = getValue("ro.mtk_bt_support");
+    public static final boolean MTK_PASSPOINT_R1_SUPPORT = getValue("ro.mtk_passpoint_r1_support");
+    public static final boolean MTK_DHCPV6C_WIFI = getValue("ro.mtk_dhcpv6c_wifi");
+    public static final boolean MTK_EAP_SIM_AKA = getValue("ro.mtk_eap_sim_aka");
+    public static final boolean MTK_WAPI_SUPPORT = getValue("ro.mtk_wapi_support");
+    public static final boolean WIFI_WEP_KEY_ID_SET = getValue("ro.wifi_wep_key_id_set");
+    public static final boolean MTK_AUDENH_SUPPORT = getValue("ro.mtk_audenh_support");
+    public static final boolean MTK_MULTISIM_RINGTONE_SUPPORT = getValue("ro.mtk_multisim_ringtone");
+    public static final boolean MTK_VT3G324M_SUPPORT = getValue("ro.mtk_vt3g324m_support");
+    public static final boolean MTK_GEMINI_3G_SWITCH = getValue("ro.mtk_gemini_3g_switch");
+    public static final boolean MTK_SMARTBOOK_SUPPORT = getValue("ro.mtk_smartbook_support");
+    public static final boolean MTK_AGPS_APP = getValue("ro.mtk_agps_app");
+    public static final boolean MTK_OMACP_SUPPORT = getValue("ro.mtk_omacp_support");
+    public static final boolean MTK_BEAM_PLUS_SUPPORT = getValue("ro.mtk_beam_plus_support");
+    public static final boolean MTK_CLEARMOTION_SUPPORT = getValue("ro.mtk_clearmotion_support");
+    public static final boolean MTK_THEMEMANAGER_APP = getValue("ro.mtk_thememanager_app");
+    public static final boolean MTK_POWER_SAVING_SWITCH_UI_SUPPORT = getValue("ro.mtk_pwr_save_switch");
+    public static final boolean MTK_BG_POWER_SAVING_SUPPORT = getValue("ro.mtk_bg_power_saving_support");
+    public static final boolean MTK_BG_POWER_SAVING_UI_SUPPORT = getValue("ro.mtk_bg_power_saving_ui");
+    public static final boolean MTK_VOICE_UI_SUPPORT = getValue("ro.mtk_voice_ui_support");
+    public static final boolean MTK_MULTI_PARTITION_MOUNT_ONLY_SUPPORT = getValue("ro.mtk_multi_patition");
+    public static final boolean MTK_WIFIWPSP2P_NFC_SUPPORT = getValue("ro.mtk_wifiwpsp2p_nfc_support");
+    public static final boolean MTK_LCA_RAM_OPTIMIZE = getValue("ro.mtk_lca_ram_optimize");
+    public static final boolean MTK_WFD_SINK_SUPPORT = getValue("ro.mtk_wfd_sink_support");
+    public static final boolean MTK_WFD_SINK_UIBC_SUPPORT = getValue("ro.mtk_wfd_sink_uibc_support");
+    //public static final boolean MTK_BESLOUDNESS_SUPPORT = getValue("ro.mtk_besloudness_support");
+    public static final boolean MTK_BESLOUDNESS_SUPPORT = true;
+    public static final boolean MTK_BESSURROUND_SUPPORT = getValue("ro.mtk_bessurround_support");
+    public static final boolean MTK_MIRAVISION_SETTING_SUPPORT = getValue("ro.mtk_miravision_support");
+    public static final boolean MTK_TC1_FEATURE = getValue("ro.mtk_tc1_feature");
+    public static final boolean MTK_LOSSLESS_SUPPORT = getValue("ro.mtk_lossless_bt_audio");
+    public static final boolean MTK_VOLTE_SUPPORT = getValue("ro.mtk_volte_support");
+    public static final boolean MTK_IMS_SUPPORT = getValue("ro.mtk_ims_support");
+    public static final boolean MTK_DUAL_INPUT_CHARGER_SUPPORT = SystemProperties.get("ro.mtk_diso_support").equals("true");
+    public static final boolean MTK_PRODUCT_IS_TABLET = SystemProperties.get("ro.build.characteristics").equals("tablet");
+    
+    public static boolean isLteSupport() {
+        return getValue("ro.mtk_lte_support");
+    }
+    // Important!!!  the SystemProperties key's length must less than 31 , or will have JE
+    /* get the key's value*/
+    private static boolean getValue(String key) {
+        return SystemProperties.get(key).equals("1");
+    }
+}
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/proximity/Proximity.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/proximity/Proximity.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/proximity/Proximity.java	(revision 1051)
@@ -0,0 +1,146 @@
+package com.android.mmi.proximity;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.hardware.Sensor;
+import android.hardware.SensorEvent;
+import android.hardware.SensorEventListener;
+import android.hardware.SensorManager;
+import android.os.Bundle;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.TextView;
+
+import com.android.mmi.MMITestDevice;
+import com.android.mmi.R;
+
+public class Proximity extends Activity implements OnClickListener,
+		SensorEventListener {
+	TextView tv_base_title, tv_base_pixi, tv_base_swn,tv_tips,tv_ps;
+	private boolean nearFlag = false;
+	private boolean farFlag = false;
+	Button bt_base_left, bt_base_right;
+	SensorManager sensorManager = null;// 传感器管理器引用
+	Sensor proxiSensor = null;// 光线传感器引用
+	int countfar2near = 0;
+	int countnear2far = 0;
+    private boolean isFirstTime = true;
+
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		super.onCreate(savedInstanceState);
+		requestWindowFeature(Window.FEATURE_NO_TITLE);
+		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
+				WindowManager.LayoutParams.FLAG_FULLSCREEN);
+		getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_IMMERSIVE_GESTURE_ISOLATED);
+		getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
+		setContentView(R.layout.activity_proximity);
+
+		sensorManager = (SensorManager) getSystemService(Context.SENSOR_SERVICE);
+
+		proxiSensor = sensorManager.getDefaultSensor(Sensor.TYPE_PROXIMITY);
+		tv_base_title = (TextView) this.findViewById(R.id.tv_base_title);
+		tv_base_title.setText(R.string.proximity_name);
+		tv_base_swn = (TextView) this.findViewById(R.id.tv_base_swn);
+		tv_ps = (TextView) this.findViewById(R.id.tv_ps);
+		tv_tips = (TextView) this.findViewById(R.id.tv_tips);
+		tv_base_pixi = (TextView) this.findViewById(R.id.tv_base_pixi);
+		
+		bt_base_left = (Button) findViewById(R.id.bt_base_left);
+		bt_base_left.setText(R.string.bt_pass);
+		bt_base_left.setEnabled(false);
+		bt_base_left.setOnClickListener(this);
+		bt_base_right = (Button) findViewById(R.id.bt_base_right);
+		bt_base_right.setText(R.string.bt_fail);
+		bt_base_right.setOnClickListener(this);
+	}
+
+	@Override
+	protected void onResume() {
+		super.onResume();
+		sensorManager.registerListener(this, proxiSensor,
+				SensorManager.SENSOR_DELAY_NORMAL);
+		tv_base_pixi.setText("near-far:"+countfar2near);
+		tv_base_swn.setText("far-near:"+countnear2far);
+		tv_tips.setText("ProximitySensor detected");
+		tv_ps.setText("ps: 0");
+	}
+
+	@Override
+	protected void onPause() {
+		super.onPause();
+		sensorManager.unregisterListener(this, proxiSensor);
+	}
+
+	@Override
+	public void onSensorChanged(SensorEvent event) {
+		if (event.sensor.getType() == Sensor.TYPE_PROXIMITY) {
+			float[] values = event.values;
+			tv_ps.setText("ps: "+values[0]);
+            if(isFirstTime){
+    			if(values[0]==10.0){
+    				tv_base_pixi.setText("near-far:"+countfar2near);
+					tv_base_swn.setText("far-near:"+countnear2far);
+					countnear2far++;
+    				farFlag = true;
+    			}else {
+    				tv_base_pixi.setText("near-far:"+countfar2near);
+					tv_base_swn.setText("far-near:"+countnear2far);
+					countfar2near++;
+    				nearFlag = true;
+    			}
+    			if(farFlag && nearFlag){
+    				bt_base_left.setEnabled(true);
+    			}
+            }
+		}
+	}
+
+	@Override
+	protected void onDestroy() {
+		super.onDestroy();
+		if(proxiSensor != null){
+			proxiSensor = null;
+		}
+		if(sensorManager != null){
+			sensorManager = null;
+		}
+	}
+
+	@Override
+	public void onClick(View v) {
+		switch (v.getId()) {
+		case R.id.bt_base_left: {
+			Intent intent = new Intent(Proximity.this, MMITestDevice.class);
+			setResult(RESULT_OK, intent);
+			finish();
+			break;
+		}
+
+		case R.id.bt_base_right: {
+			Intent intent = new Intent(Proximity.this, MMITestDevice.class);
+			setResult(RESULT_CANCELED, intent);
+			finish();
+			break;
+		}
+
+		}
+	}
+
+	@Override
+	public void onAccuracyChanged(Sensor sensor, int accuracy) {
+	}
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		if (MMITestDevice.isAutoTest()) {			
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
\ No newline at end of file
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/bt/Bt.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/bt/Bt.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/bt/Bt.java	(revision 1051)
@@ -0,0 +1,197 @@
+package com.android.mmi.bt;
+
+import android.app.Activity;
+import android.bluetooth.BluetoothAdapter;
+import android.bluetooth.BluetoothDevice;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Message;
+import android.util.Log;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.ArrayAdapter;
+import android.widget.Button;
+import android.widget.ListView;
+import android.widget.TextView;
+
+import com.android.mmi.MMITestDevice;
+import com.android.mmi.R;
+
+public class Bt extends Activity implements OnClickListener {
+	TextView tv_base_title, tv_base_pixi;
+	Button bt_base_left, bt_base_right;
+	private ListView btlistview;
+	private BluetoothAdapter btadapter;
+	private ArrayAdapter<String> adapter;
+	Handler handlerBluetooth;
+
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		super.onCreate(savedInstanceState);
+		requestWindowFeature(Window.FEATURE_NO_TITLE);
+		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
+				WindowManager.LayoutParams.FLAG_FULLSCREEN);
+		getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_IMMERSIVE_GESTURE_ISOLATED);
+		getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
+		setContentView(R.layout.activity_bt);
+
+		tv_base_title = (TextView) this.findViewById(R.id.tv_base_title);
+		tv_base_title.setText(R.string.bt_name);
+		tv_base_pixi = (TextView) this.findViewById(R.id.tv_base_pixi);
+		tv_base_pixi.setText(R.string.bluetooth_init_wait);
+
+		bt_base_left = (Button) findViewById(R.id.bt_base_left);
+		bt_base_left.setText(R.string.bt_pass);
+		bt_base_left.setOnClickListener(this);
+		bt_base_left.setEnabled(false);
+		bt_base_right = (Button) findViewById(R.id.bt_base_right);
+		bt_base_right.setText(R.string.bt_fail);
+		bt_base_right.setOnClickListener(this);
+
+		btlistview = (ListView) this.findViewById(R.id.listView1);
+		adapter = new ArrayAdapter<String>(this,
+				R.layout.listview_bt_item);
+
+		btlistview.setAdapter(adapter);
+
+		btadapter = BluetoothAdapter.getDefaultAdapter();
+
+		if (btadapter == null) {
+			tv_base_pixi.setText("not support bluetooth");
+		} else {
+			if (!btadapter.isEnabled()) {
+				tv_base_pixi.setText("Bluetooth opening");
+				btadapter.enable();
+			} else {
+				// btstate.setText(getString(R.string.Bluetooth_open));
+				BluetoothAdapter bluetooth = BluetoothAdapter
+						.getDefaultAdapter();
+				String BTAddress = bluetooth.isEnabled() ? bluetooth
+						.getAddress() : null;
+
+				if (BTAddress == null) {
+					// device not BT capable
+					BTAddress = "unavailable";
+				}
+				tv_base_pixi.setText("Bluetooth open" + "\nBlueTooth Address: "
+						+ BTAddress);
+			}
+			IntentFilter intentFilter = new IntentFilter();
+			intentFilter.addAction(BluetoothDevice.ACTION_FOUND);
+			intentFilter.addAction(BluetoothDevice.ACTION_BOND_STATE_CHANGED);
+			intentFilter.addAction(BluetoothAdapter.ACTION_SCAN_MODE_CHANGED);
+			intentFilter.addAction(BluetoothAdapter.ACTION_STATE_CHANGED);
+			intentFilter.addAction(BluetoothAdapter.ACTION_DISCOVERY_FINISHED);
+			registerReceiver(receiver, intentFilter);
+			btadapter.startDiscovery();
+
+		}
+		handlerBluetooth = new Handler() {
+			@Override
+			public void handleMessage(Message msg) {
+				super.handleMessage(msg);
+				if (msg.what == 0x1232) {
+					Intent intent = new Intent(Bt.this, MMITestDevice.class);
+					setResult(RESULT_OK, intent);
+					finish();
+				}
+			}
+		};
+	}
+
+	@Override
+	protected void onPause() {
+		super.onPause();
+		unregisterReceiver(receiver);
+	}
+
+	@Override
+	protected void onDestroy() {
+		if (btadapter != null) {
+			btadapter.disable();
+		}
+		super.onDestroy();
+	}
+
+	private BroadcastReceiver receiver = new BroadcastReceiver() {
+		@Override
+		public void onReceive(Context context, Intent intent) {
+			String action = intent.getAction();
+			Log.d("BT>>>>>>>>>>>>>action", action);
+			if (BluetoothDevice.ACTION_FOUND.equals(action)) {
+
+				BluetoothDevice device = intent
+						.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
+				Log.d("BT>>>>>>>>>>>>>" + device.getName(),
+						"22222:" + device.getAddress());
+				tv_base_pixi.setVisibility(View.GONE);
+				adapter.add("device name:" + device.getName()
+						+ "\ndevice addr:" + device.getAddress());
+				btlistview.setAdapter(adapter);
+				bt_base_left.setEnabled(true);
+			} else if (BluetoothAdapter.ACTION_STATE_CHANGED.equals(action)) {
+
+				String stateExtra = BluetoothAdapter.EXTRA_STATE;
+				int btstates = intent.getIntExtra(stateExtra, -1);
+				if ((btstates == BluetoothAdapter.STATE_TURNING_ON)
+						|| (btstates == BluetoothAdapter.STATE_ON)) {
+					tv_base_pixi.setText("Search.....");
+					if (btstates == BluetoothAdapter.STATE_ON) {
+						BluetoothAdapter bluetooth = BluetoothAdapter
+								.getDefaultAdapter();
+						String BTAddress = bluetooth.isEnabled() ? bluetooth
+								.getAddress() : null;
+						if (BTAddress == null) {
+							BTAddress = "unavailable";
+						}
+					}
+					btadapter.startDiscovery();
+				} else if ((btstates == BluetoothAdapter.STATE_TURNING_OFF)
+						|| (btstates == BluetoothAdapter.STATE_OFF)) {
+					tv_base_pixi.setText("Bluetooth closed");
+				}
+			} else if (BluetoothDevice.ACTION_BOND_STATE_CHANGED.equals(action)) {
+
+				BluetoothDevice device = intent
+						.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
+			} else if ((BluetoothAdapter.ACTION_DISCOVERY_FINISHED)
+					.equals(action)) {
+			}
+		}
+	};
+
+	@Override
+	public void onClick(View v) {
+		switch (v.getId()) {
+		case R.id.bt_base_left: {
+			Intent intent = new Intent(Bt.this, MMITestDevice.class);
+			setResult(RESULT_OK, intent);
+			finish();
+			break;
+		}
+
+		case R.id.bt_base_right: {
+			Intent intent = new Intent(Bt.this, MMITestDevice.class);
+			setResult(RESULT_CANCELED, intent);
+			finish();
+			break;
+		}
+
+		}
+	}
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		if (MMITestDevice.isAutoTest()) {			
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/AutoTestItem.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/AutoTestItem.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/AutoTestItem.java	(revision 1051)
@@ -0,0 +1,76 @@
+package com.android.mmi;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.TextView;
+
+public class AutoTestItem extends Activity implements OnClickListener {
+
+	TextView tv_base_title, tv_failed_msg;
+	Button bt_yes, bt_no, bt_next;
+	
+	
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		super.onCreate(savedInstanceState);
+		requestWindowFeature(Window.FEATURE_NO_TITLE);
+		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
+				WindowManager.LayoutParams.FLAG_FULLSCREEN);
+		getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_IMMERSIVE_GESTURE_ISOLATED);
+		getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON); 				
+		setContentView(R.layout.activity_autotestitem);
+		Bundle bundle = this.getIntent().getExtras();  
+		String str=bundle.getString("fail_item");
+		tv_base_title = (TextView) findViewById(R.id.tv_base_title);
+		tv_base_title.setText(R.string.autotest_name);
+		tv_failed_msg = (TextView) findViewById(R.id.tv_failed_msg);
+		tv_failed_msg.setText(str + "\n\nfailed Restart?");
+
+		bt_yes = (Button) findViewById(R.id.bt_yes);
+		bt_yes.setText(R.string.bt_yes);
+		bt_yes.setOnClickListener(this);
+		bt_no = (Button) findViewById(R.id.bt_no);
+		bt_no.setText(R.string.bt_no);
+		bt_no.setOnClickListener(this);
+		bt_next = (Button) findViewById(R.id.bt_next);
+		bt_next.setText(R.string.bt_next);
+		bt_next.setOnClickListener(this);
+	}
+
+	@Override
+	public void onClick(View v) {
+		switch (v.getId()) {
+		case R.id.bt_yes: {
+			Intent intent = new Intent(AutoTestItem.this, MMITestDevice.class);
+			setResult(RESULT_OK, intent);
+			finish();
+			break;
+		}
+
+		case R.id.bt_no: {
+			Intent intent = new Intent(AutoTestItem.this, MMITestDevice.class);
+			setResult(RESULT_CANCELED, intent);
+			finish();
+			break;
+		}
+		case R.id.bt_next: {
+			Intent intent = new Intent(AutoTestItem.this, MMITestDevice.class);
+			setResult(MMITestDevice.RESTART_NEXT, intent);
+			finish();
+			break;
+		}
+		}
+	}
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/lcdgreychart/LcdGreychart.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/lcdgreychart/LcdGreychart.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/lcdgreychart/LcdGreychart.java	(revision 1051)
@@ -0,0 +1,69 @@
+package com.android.mmi.lcdgreychart;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.RelativeLayout;
+
+import com.android.mmi.MMITestDevice;
+import com.android.mmi.R;
+
+public class LcdGreychart extends Activity implements OnClickListener {
+	RelativeLayout rl_momochrome;
+	Button bt_base_left, bt_base_right;
+
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		super.onCreate(savedInstanceState);
+		requestWindowFeature(Window.FEATURE_NO_TITLE);
+		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
+				WindowManager.LayoutParams.FLAG_FULLSCREEN);
+		getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_IMMERSIVE_GESTURE_ISOLATED);
+		getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
+		setContentView(R.layout.activity_lcd_monochrome);
+		rl_momochrome = (RelativeLayout) findViewById(R.id.rl_momochrome);
+		rl_momochrome.setBackgroundColor(getResources().getColor(R.color.grey));
+		bt_base_left = (Button) findViewById(R.id.bt_base_left);
+		bt_base_left.setText(R.string.bt_pass);
+		bt_base_left.getBackground().setAlpha(0);
+		bt_base_left.setOnClickListener(this);
+		bt_base_right = (Button) findViewById(R.id.bt_base_right);
+		bt_base_right.setText(R.string.bt_fail);
+		bt_base_right.getBackground().setAlpha(0);
+		bt_base_right.setOnClickListener(this);
+	}
+
+	@Override
+	public void onClick(View v) {
+		switch (v.getId()) {
+		case R.id.bt_base_left: {
+			Intent intent = new Intent(LcdGreychart.this, MMITestDevice.class);
+			setResult(RESULT_OK, intent);
+			finish();
+			break;
+		}
+
+		case R.id.bt_base_right: {
+			Intent intent = new Intent(LcdGreychart.this, MMITestDevice.class);
+			setResult(RESULT_CANCELED, intent);
+			finish();
+			break;
+		}
+
+		}
+	}
+
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		if (MMITestDevice.isAutoTest()) {			
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/tptwo/TpTwo.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/tptwo/TpTwo.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/tptwo/TpTwo.java	(revision 1051)
@@ -0,0 +1,300 @@
+package com.android.mmi.tptwo;
+
+import java.util.ArrayList;
+
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.app.AlertDialog.Builder;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.DialogInterface.OnClickListener;
+import android.content.Intent;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Paint;
+import android.graphics.Paint.Align;
+import android.os.Bundle;
+import android.view.KeyEvent;
+import android.view.MotionEvent;
+import android.view.VelocityTracker;
+import android.view.View;
+import android.view.ViewGroup.LayoutParams;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.RelativeLayout;
+
+import com.android.mmi.MMITestDevice;
+import com.android.mmi.R;
+
+public class TpTwo extends Activity {
+	static final float MAX_VELOCITY = 160;
+	static final int MARGIN_WIDTH = 120;
+	static final int LINE_WIDTH = 80;
+	static final int ERROR_RANGE = 120;
+
+	private View mLineView;
+	boolean isbounds = false;
+	private boolean[] state_referenceLine = { false, false, false };
+
+	private ArrayList<PT> mPoints = new ArrayList<PT>();
+	private Paint mPaint;
+	private Paint mTextpaint;
+	private Paint mTargetPaint;
+	private int mScreenWidth;
+	private int mScreenHeigh;
+
+	private VelocityTracker mVelocity;
+
+	@Override
+	public void onCreate(Bundle savedInstanceState) {
+		super.onCreate(savedInstanceState);
+		this.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
+				WindowManager.LayoutParams.FLAG_FULLSCREEN);
+		requestWindowFeature(Window.FEATURE_NO_TITLE);
+		// getWindow().addFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_IMMERSIVE_GESTURE_ISOLATED);
+		getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
+		setContentView(R.layout.activity_touch);
+
+		mLineView = new LineView(this);
+		RelativeLayout.LayoutParams param = new RelativeLayout.LayoutParams(
+				LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);
+		addContentView(mLineView, param);
+
+		initView();
+	}
+
+	private void initView() {
+		WindowManager dpy = (WindowManager) getSystemService(Context.WINDOW_SERVICE);
+		mScreenWidth = dpy.getDefaultDisplay().getWidth();
+		mScreenHeigh = dpy.getDefaultDisplay().getHeight();
+
+		mPaint = new Paint();
+		mPaint.setAntiAlias(true);
+		mPaint.setColor(Color.YELLOW);
+		mPaint.setStyle(Paint.Style.STROKE);
+		mPaint.setStrokeWidth(LINE_WIDTH);
+		
+		mTextpaint = new Paint();
+		mTextpaint.setColor(Color.BLACK);
+		mTextpaint.setAntiAlias(true);
+		mTextpaint.setTextSize(26);
+		mTextpaint.setTextAlign(Align.CENTER);
+		
+		mTargetPaint = new Paint();
+		mTargetPaint.setAntiAlias(true);
+		mTargetPaint.setColor(Color.RED);
+		mTargetPaint.setStyle(Paint.Style.STROKE);
+		mTargetPaint.setStrokeWidth(3);
+	}
+
+	private boolean checkPoint(float x) {
+		if ((x > MARGIN_WIDTH - LINE_WIDTH / 2 && x < MARGIN_WIDTH + LINE_WIDTH
+				/ 2)
+				|| (x > mScreenWidth / 2 - LINE_WIDTH / 2 && x < mScreenWidth
+						/ 2 + LINE_WIDTH / 2)
+				|| (x > mScreenWidth - MARGIN_WIDTH - LINE_WIDTH / 2 && x < mScreenWidth
+						- MARGIN_WIDTH + LINE_WIDTH / 2)) {
+			return false;
+		}
+		return true;
+	}
+
+	private void changLineState(float x) {
+		if (x > MARGIN_WIDTH - LINE_WIDTH / 2
+				&& x < MARGIN_WIDTH + LINE_WIDTH / 2) {
+			state_referenceLine[0] = true;
+		} else if (x > mScreenWidth / 2 - LINE_WIDTH / 2
+				&& x < mScreenWidth / 2 + LINE_WIDTH / 2) {
+			state_referenceLine[1] = true;
+		} else if (x > mScreenWidth - MARGIN_WIDTH - LINE_WIDTH / 2
+				&& x < mScreenWidth - MARGIN_WIDTH + LINE_WIDTH / 2) {
+			state_referenceLine[2] = true;
+		}
+	}
+
+	private boolean isSuccess() {
+		boolean isSuccess = true;
+		for (boolean iterable : state_referenceLine) {
+			if (!iterable) {
+				isSuccess = false;
+				break;
+			}
+		}
+		return isSuccess;
+	}
+
+	public class LineView extends View {
+
+		public LineView(Context context) {
+			super(context);
+		}
+
+		@Override
+		protected void onDraw(Canvas canvas) {			
+			canvas.drawLine(MARGIN_WIDTH, 0, MARGIN_WIDTH, mScreenHeigh, mPaint);
+			canvas.drawLine(mScreenWidth / 2, 0, mScreenWidth / 2,
+					mScreenHeigh, mPaint);
+			canvas.drawLine(mScreenWidth - MARGIN_WIDTH, 0, mScreenWidth
+					- MARGIN_WIDTH, mScreenHeigh, mPaint);
+			canvas.drawText("Please draw on", mScreenWidth / 2, MARGIN_WIDTH,
+					mTextpaint);
+			canvas.drawText("the yellow aera", mScreenWidth / 2, MARGIN_WIDTH*2,
+					mTextpaint);
+			
+			if (mPoints != null && mPoints.size() > 0) {
+				int size = mPoints.size();
+				float lastX = 0, lastY = 0;
+
+				for (int i = 0; i < size; i++) {
+					PT n = mPoints.get(i);
+
+					if (i > 0) {
+						canvas.drawLine(lastX, lastY, n.x, n.y, mTargetPaint);
+						canvas.drawPoint(lastX, lastY, mTargetPaint);
+					}
+					lastX = n.x;
+					lastY = n.y;
+				}
+			}
+		}
+
+		public boolean onTouchEvent(MotionEvent event) {
+			float x = event.getX();
+			float y = event.getY();
+
+			switch (event.getAction()) {
+			case MotionEvent.ACTION_DOWN:
+				clear();
+				isbounds = false;
+				isbounds = checkPoint(x);
+				mVelocity = VelocityTracker.obtain();
+				if (mPoints != null) {
+					mPoints.add(new PT(x, y));
+					invalidate();
+				}
+				break;
+
+			case MotionEvent.ACTION_MOVE:
+				if (!isbounds) {
+					isbounds = checkPoint(x);
+				}
+				mVelocity.addMovement(event);
+				mVelocity.computeCurrentVelocity(10);
+				if (mPoints != null) {
+					mPoints.add(new PT(x, y));
+					invalidate();
+				}
+				break;
+
+			case MotionEvent.ACTION_UP:
+				checkPaint();
+				break;
+			default:
+				clear();
+				break;
+			}
+			return true;
+		}
+
+		void checkPaint() {
+			if (isbounds) {
+				showFailDialog("Pen out of bounds!");
+			} else if (Math.abs(mPoints.get(0).y
+					- mPoints.get(mPoints.size() - 1).y) < mScreenHeigh
+					- ERROR_RANGE) {
+				showFailDialog("Line too short!");
+			} else {
+				changLineState(mPoints.get(0).x);
+			}
+
+			if (isSuccess()) {
+				showSuccessDialog();
+			}
+		}
+	}
+
+	protected void showSuccessDialog() {
+		AlertDialog.Builder builder = new Builder(TpTwo.this);
+		builder.setMessage("OK!");
+		builder.setTitle("TEST RESULT");
+		builder.setPositiveButton("PASS", new OnClickListener() {
+			@Override
+			public void onClick(DialogInterface dialog, int which) {
+				dialog.dismiss();
+				Intent intent = new Intent(TpTwo.this, MMITestDevice.class);
+				setResult(RESULT_OK, intent);
+				finish();
+			}
+		});
+
+		builder.setNegativeButton("FAIL", new OnClickListener() {
+
+			@Override
+			public void onClick(DialogInterface dialog, int which) {
+				clear();
+				dialog.dismiss();
+				Intent intent = new Intent(TpTwo.this, MMITestDevice.class);
+				setResult(RESULT_CANCELED, intent);
+				finish();
+			}
+		});
+
+		builder.create().show();
+	}
+
+	protected void showFailDialog(String message) {
+		AlertDialog.Builder builder = new Builder(TpTwo.this);
+		builder.setMessage(message);
+
+		builder.setTitle("TEST RESULT");
+
+		builder.setNegativeButton("FAIL", new OnClickListener() {
+
+			@Override
+			public void onClick(DialogInterface dialog, int which) {
+				clear();
+				dialog.dismiss();
+			}
+		});
+
+		builder.create().show();
+	}
+
+	@Override
+	protected void onStop() {
+		super.onStop();
+
+		if (mPoints != null) {
+			mPoints.clear();
+		}
+	}
+
+	public class PT {
+		public float x;
+		public float y;
+
+		public PT(float x, float y) {
+			this.x = x;
+			this.y = y;
+		}
+	};
+
+	void clear() {
+		if (mPoints != null) {
+			mPoints.clear();
+		}
+
+		if (mVelocity != null) {
+			mVelocity.clear();
+		}
+	}
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		if (MMITestDevice.isAutoTest()) {			
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/cameraled/CameraLed.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/cameraled/CameraLed.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/cameraled/CameraLed.java	(revision 1051)
@@ -0,0 +1,174 @@
+package com.android.mmi.cameraled;
+
+import java.util.Timer;
+import java.util.TimerTask;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.hardware.Camera;
+import android.hardware.Camera.Parameters;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Message;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.TextView;
+
+import com.android.mmi.MMITestDevice;
+import com.android.mmi.R;
+
+public class CameraLed extends Activity implements OnClickListener {
+	TextView tv_base_title, tv_base_pixi;
+	Button bt_base_left, bt_base_right;
+	Camera camera;
+	Parameters p;
+	Timer timer = new Timer();
+	int count = 0;
+	int showCount = 0;
+	static final int FLASH_NUMBER = 4;
+	static final int DELAY = 1000;
+	static final int INTERVAL = 500;
+	Handler handler = new Handler() {
+		public void handleMessage(Message msg) {
+			if (//msg.what % 2 == 0
+				true) {
+				processOnFlash();
+			} else {
+				processOffFlash();
+			}
+			showCount++;
+			if (showCount == (FLASH_NUMBER - 1) * 2) {
+				bt_base_left.setVisibility(View.VISIBLE);
+				bt_base_right.setVisibility(View.VISIBLE);
+			}
+			super.handleMessage(msg);
+		}
+
+	};
+
+	class MytimerTask extends TimerTask {
+		public void run() {
+			Message message = new Message();
+			message.what = count;
+			handler.sendMessage(message);
+			count++;
+		}
+	}
+
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		super.onCreate(savedInstanceState);
+		requestWindowFeature(Window.FEATURE_NO_TITLE);
+		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
+				WindowManager.LayoutParams.FLAG_FULLSCREEN);
+		getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_IMMERSIVE_GESTURE_ISOLATED);
+		getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
+		setContentView(R.layout.activity_base);
+		tv_base_title = (TextView) findViewById(R.id.tv_base_title);
+		tv_base_title.setText(R.string.camera_led_name);
+		tv_base_pixi = (TextView) findViewById(R.id.tv_base_pixi);
+		tv_base_pixi.setText(R.string.camera_led_state);
+
+		bt_base_left = (Button) findViewById(R.id.bt_base_left);
+		bt_base_left.setText(R.string.bt_pass);
+		bt_base_left.setOnClickListener(this);
+		bt_base_right = (Button) findViewById(R.id.bt_base_right);
+		bt_base_right.setText(R.string.bt_fail);
+		bt_base_right.setOnClickListener(this);
+		bt_base_left.setVisibility(View.GONE);
+		bt_base_right.setVisibility(View.GONE);
+	}
+
+	@Override
+	protected void onResume() {
+		super.onResume();
+		count = 0;
+		camera = Camera.open();
+		p = camera.getParameters();
+		for (int i = 0; i < FLASH_NUMBER * 2 - 1; i++) {
+			timer.schedule(new MytimerTask(), DELAY + INTERVAL * i);
+		}
+	}
+
+	@Override
+	public void onClick(View v) {
+		switch (v.getId()) {
+		case R.id.bt_base_left: {
+			if (camera != null) {
+				camera.stopPreview();
+				camera.release();
+				camera = null;
+			}
+			Intent intent = new Intent(CameraLed.this, MMITestDevice.class);
+			setResult(RESULT_OK, intent);
+			finish();
+			break;
+		}
+
+		case R.id.bt_base_right: {
+			Intent intent = new Intent(CameraLed.this, MMITestDevice.class);
+			setResult(RESULT_CANCELED, intent);
+			finish();
+			break;
+		}
+
+		}
+	}
+
+	private void processOnFlash() {
+		if (p != null || camera != null) {
+			p.setFlashMode(Parameters.FLASH_MODE_TORCH);
+			camera.setParameters(p);
+			camera.startPreview();
+		}
+	}
+
+	private void processOffFlash() {
+		if (p != null || camera != null) {
+			p.setFlashMode(Parameters.FLASH_MODE_OFF);
+			camera.setParameters(p);
+			camera.stopPreview();
+		}
+	}
+
+	@Override
+	protected void onPause() {
+		super.onPause();
+		if (camera != null) {
+			camera.setPreviewCallback(null);
+			camera.stopPreview();
+			camera.release();
+			camera = null;
+			p = null;
+		}
+	}
+
+	@Override
+	protected void onDestroy() {
+		super.onDestroy();
+		if (timer != null) {
+			timer.cancel();
+			timer = null;
+		}
+	}
+
+	@Override
+	public boolean onKeyDown(int keyCode, KeyEvent event) {
+		if (keyCode == KeyEvent.KEYCODE_MENU || keyCode == KeyEvent.KEYCODE_BACK ) {
+			return true;
+		}		
+		return super.onKeyDown(keyCode, event);
+	}
+
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		if (MMITestDevice.isAutoTest()) {			
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/keypad/Keypad.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/keypad/Keypad.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/keypad/Keypad.java	(revision 1051)
@@ -0,0 +1,171 @@
+package com.android.mmi.keypad;
+
+import android.app.Activity;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.os.Bundle;
+import android.os.Environment;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.TextView;
+
+import com.android.mmi.MMITestDevice;
+import com.android.mmi.R;
+import android.util.Log;
+
+
+public class Keypad extends Activity implements OnClickListener {
+	TextView tv_base_title;
+	Button bt_base_left, bt_base_right, bt_keypad_power, bt_keypad_volUp,
+			bt_keypad_volDown, bt_keypad_back, bt_keypad_home, bt_keypad_task;
+
+	private boolean keymenuFlag = false;
+	private boolean keyhomeFlag = false;
+	private boolean keybackFlag = false;
+	private boolean keyupFlag = false;
+	private boolean keydownFlag = false;
+	private boolean keypowerFlag = false;
+	private final static String ACTION = "techain.intent.action.KCTB";
+
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		super.onCreate(savedInstanceState);
+		requestWindowFeature(Window.FEATURE_NO_TITLE);
+		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
+				WindowManager.LayoutParams.FLAG_FULLSCREEN);
+	//	getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_IMMERSIVE_GESTURE_ISOLATED);
+		
+		getWindow().setType(WindowManager.LayoutParams.TYPE_KEYGUARD); 
+	
+		getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
+		setContentView(R.layout.activity_keypad);
+		tv_base_title = (TextView) findViewById(R.id.tv_base_title);
+		tv_base_title.setText(R.string.keypad_name);
+
+		bt_keypad_power = (Button) findViewById(R.id.bt_keypad_power);
+		bt_keypad_power.setText(R.string.power_name);
+		bt_keypad_volUp = (Button) findViewById(R.id.bt_keypad_volUp);
+		bt_keypad_volUp.setText(R.string.volUp_name);
+		bt_keypad_volDown = (Button) findViewById(R.id.bt_keypad_volDown);
+		bt_keypad_volDown.setText(R.string.volDown_name);
+		bt_keypad_back = (Button) findViewById(R.id.bt_keypad_back);
+		bt_keypad_back.setText(R.string.back_name);
+		bt_keypad_home = (Button) findViewById(R.id.bt_keypad_home);
+		bt_keypad_home.setText(R.string.home_name);
+		bt_keypad_task = (Button) findViewById(R.id.bt_keypad_task);
+		bt_keypad_task.setText(R.string.task_name);
+
+		bt_base_left = (Button) findViewById(R.id.bt_base_left);
+		bt_base_left.setText(R.string.bt_pass);
+		bt_base_left.setEnabled(false);
+		bt_base_left.setOnClickListener(this);
+		bt_base_right = (Button) findViewById(R.id.bt_base_right);
+		bt_base_right.setText(R.string.bt_fail);
+		bt_base_right.setOnClickListener(this);
+	}
+
+	@Override
+	protected void onResume() {
+		super.onResume();
+		IntentFilter filter = new IntentFilter();
+		filter.addAction(ACTION);
+		registerReceiver(powerKeyDownReceiver, filter);
+	}
+
+	public BroadcastReceiver powerKeyDownReceiver = new BroadcastReceiver() {
+		@Override
+		public void onReceive(Context context, Intent intent) {
+	
+			String action = intent.getAction();
+			if (action.equals(ACTION)) {
+				
+				keymenuFlag = true;
+				bt_keypad_task.setBackgroundColor(getResources().getColor(
+						R.color.green));
+			}
+			if (keymenuFlag == true && keyhomeFlag == true && keybackFlag == true
+//						&& keybackFlag == true && keyupFlag == true
+				&& keyupFlag == true && keydownFlag == true
+				/*&& keypowerFlag == true*/){
+			bt_base_left.setEnabled(true);}
+//				}
+//			}
+		}
+	};
+
+	@Override
+	protected void onDestroy() {
+		super.onDestroy();
+	//	unregisterReceiver(powerKeyDownReceiver);
+	}
+
+	@Override
+	public void onClick(View v) {
+		switch (v.getId()) {
+		case R.id.bt_base_left: {
+			Intent intent = new Intent(Keypad.this, MMITestDevice.class);
+			setResult(RESULT_OK, intent);
+			finish();
+			break;
+		}
+
+		case R.id.bt_base_right: {
+			Intent intent = new Intent(Keypad.this, MMITestDevice.class);
+			setResult(RESULT_CANCELED, intent);
+			finish();
+			break;
+		}
+
+		}
+	}
+
+	@Override
+	public boolean onKeyDown(int keyCode, KeyEvent event) {
+	
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_HOME:
+			keyhomeFlag = true;
+			bt_keypad_home.setBackgroundColor(getResources().getColor(
+					R.color.green));
+			break;
+		case KeyEvent.KEYCODE_BACK:
+			keybackFlag = true;
+			bt_keypad_back.setBackgroundColor(getResources().getColor(
+					R.color.green));
+			break;
+		case KeyEvent.KEYCODE_MENU:
+        case KeyEvent.KEYCODE_APP_SWITCH:
+			keymenuFlag = true;
+			bt_keypad_task.setBackgroundColor(getResources().getColor(
+					R.color.green));
+			break;
+		case KeyEvent.KEYCODE_VOLUME_DOWN:
+			keydownFlag = true;
+			bt_keypad_volDown.setBackgroundColor(getResources().getColor(
+					R.color.green));
+			break;
+		case KeyEvent.KEYCODE_VOLUME_UP:
+			keyupFlag = true;
+			bt_keypad_volUp.setBackgroundColor(getResources().getColor(
+					R.color.green));
+			break;
+		case KeyEvent.KEYCODE_POWER:
+			keypowerFlag = true;
+			bt_keypad_power.setBackgroundColor(getResources().getColor(
+						R.color.green));
+			break;	
+		}
+		if (keymenuFlag == true && keyhomeFlag == true && keybackFlag == true
+				&& keyupFlag == true && keydownFlag == true
+				/*&& keypowerFlag == true*/) {
+			bt_base_left.setEnabled(true);
+		}
+		return true;
+	}
+}
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/lcdgraylevel/LcdGraylevel.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/lcdgraylevel/LcdGraylevel.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/lcdgraylevel/LcdGraylevel.java	(revision 1051)
@@ -0,0 +1,67 @@
+package com.android.mmi.lcdgraylevel;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.Button;
+
+import com.android.mmi.MMITestDevice;
+import com.android.mmi.R;
+
+public class LcdGraylevel extends Activity implements OnClickListener {
+	Button bt_base_left, bt_base_right;
+
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		super.onCreate(savedInstanceState);
+		requestWindowFeature(Window.FEATURE_NO_TITLE);
+		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
+				WindowManager.LayoutParams.FLAG_FULLSCREEN);
+		getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_IMMERSIVE_GESTURE_ISOLATED);
+		getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
+		setContentView(R.layout.activity_gradient);
+		
+		
+		bt_base_left = (Button) findViewById(R.id.bt_base_left);
+		bt_base_left.setText(R.string.bt_pass);
+		bt_base_left.getBackground().setAlpha(0);
+		bt_base_left.setOnClickListener(this);
+		bt_base_right = (Button) findViewById(R.id.bt_base_right);
+		bt_base_right.setText(R.string.bt_fail);
+		bt_base_right.getBackground().setAlpha(0);
+		bt_base_right.setOnClickListener(this);
+	}
+
+	@Override
+	public void onClick(View v) {
+		switch (v.getId()) {
+		case R.id.bt_base_left: {
+			Intent intent = new Intent(LcdGraylevel.this, MMITestDevice.class);
+			setResult(RESULT_OK, intent);
+			finish();
+			break;
+		}
+
+		case R.id.bt_base_right: {
+			Intent intent = new Intent(LcdGraylevel.this, MMITestDevice.class);
+			setResult(RESULT_CANCELED, intent);
+			finish();
+			break;
+		}
+
+		}
+	}
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		if (MMITestDevice.isAutoTest()) {			
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/gyro/Gyro.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/gyro/Gyro.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/gyro/Gyro.java	(revision 1051)
@@ -0,0 +1,207 @@
+
+package com.android.mmi.gyro;
+
+
+import java.util.List;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.hardware.Sensor;
+import android.hardware.SensorEvent;
+import android.hardware.SensorEventListener;
+import android.hardware.SensorManager;
+import android.os.Bundle;
+import android.util.Log;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.TextView;
+import android.os.Handler;
+import android.os.Message;
+
+import android.view.View.OnClickListener;
+import com.android.mmi.MMITestDevice;
+import com.android.mmi.R;
+
+public class Gyro extends Activity implements SensorEventListener, OnClickListener {
+
+    private static final String TAG = "Gyro";
+    private static final float NS2S = 1.0f / 1000000000.0f;
+    private static final float F_ZERO = 0.00001f;
+    private static final int EVENT_CHECK_RESULT = 100;
+    private static final int CHECK_RESULT_DELAY_TIME = 2000;
+    private final int MIN_SUCCESS_COUNT = 3;
+
+    private boolean mRegisteredSensor;
+    private SensorManager mSensorManager = null;
+    private Sensor mGyroSensor = null;
+    private TextView mGyroNameView, mGyroValueView;
+    //private Button successButton, failButton;
+			Button bt_base_left, bt_base_right;
+    private float mTimestamp;
+    private float angle[] = new float[3];
+    private float xOldValues, yOldValues, zOldValues;
+    private int xSuccessCount, ySuccessCount, zSuccessCount;
+
+    private Handler mHandler = new Handler() {
+        @Override
+        public void handleMessage(Message msg) {
+            switch (msg.what) {
+                case EVENT_CHECK_RESULT:
+                    bt_base_left.setEnabled(true);
+                    Intent intent = new Intent(Gyro.this, MMITestDevice.class);
+                    setResult(RESULT_OK, intent);
+                    finish();
+                    break;
+            }
+            super.handleMessage(msg);
+        }
+    };
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        // TODO Auto-generated method stub
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_gyro);
+
+        mRegisteredSensor = false;
+        mSensorManager = (SensorManager) getSystemService(this.SENSOR_SERVICE);
+        mGyroSensor = mSensorManager.getDefaultSensor(Sensor.TYPE_GYROSCOPE);
+
+        mGyroNameView = (TextView) this.findViewById(R.id.gyro_info);
+        mGyroValueView = (TextView) this.findViewById(R.id.gsensor_xyz);
+        mGyroNameView.setText(getString(R.string.GSensor_tips));
+        mGyroValueView.setText("X:\nY:\nZ");
+		
+		bt_base_left = (Button) findViewById(R.id.bt_base_left);
+		bt_base_left.setText(R.string.bt_pass);
+		bt_base_left.setOnClickListener(this);
+		bt_base_left.setEnabled(false);
+		bt_base_right = (Button) findViewById(R.id.bt_base_right);
+		bt_base_right.setText(R.string.bt_fail);
+		bt_base_right.setOnClickListener(this);
+	
+    }
+
+    @Override
+    public void onAccuracyChanged(Sensor sensor, int accuracy) {
+        // TODO Auto-generated method stub
+    }
+
+    @Override
+    protected void onPause() {
+        // TODO Auto-generated method stub
+        if (mRegisteredSensor) {
+            mSensorManager.unregisterListener(this);
+            mRegisteredSensor = false;
+        }
+        super.onPause();
+    }
+
+    @Override
+    protected void onResume() {
+        // TODO Auto-generated method stub
+        super.onResume();
+        List<Sensor> sensors = mSensorManager.getSensorList(Sensor.TYPE_GYROSCOPE);
+        if (sensors.size() > 0) {
+            Sensor sensor = sensors.get(0);
+            mRegisteredSensor = mSensorManager.registerListener(this, sensor,
+                    SensorManager.SENSOR_DELAY_FASTEST);
+        }
+    }
+
+    @Override
+    public void onSensorChanged(SensorEvent event) {
+        if (event.sensor.getType() == Sensor.TYPE_GYROSCOPE) {
+
+            /*
+             * Viewed from the x, y, z axis of the forward position in the
+             * original orientation of the device, if the device is rotated
+             * counterclockwise, you will receive positive; otherwise, it is
+             * negative
+             */
+            if (mTimestamp != 0) {
+
+                final float dT = (event.timestamp - mTimestamp) * NS2S;
+
+                angle[0] += event.values[0] * dT;
+                angle[1] += event.values[1] * dT;
+                angle[2] += event.values[2] * dT;
+                // The converted angle in radians
+                float anglex = (float) Math.toDegrees(angle[0]);
+                float angley = (float) Math.toDegrees(angle[1]);
+                float anglez = (float) Math.toDegrees(angle[2]);
+
+                Log.d(TAG, "anglex------------>" + anglex);
+                Log.d(TAG, "angley------------>" + angley);
+                Log.d(TAG, "anglez------------>" + anglez);
+                Log.d(TAG, "gyroscopeSensor.getMinDelay()----------->" + mGyroSensor.getMinDelay());
+                mGyroValueView.setText("X:" + anglex + "\nY:" + angley + "\nZ:" + anglez);
+
+                if (checkSeonsorState(anglex, angley, anglez)) {
+                    mHandler.sendEmptyMessageDelayed(EVENT_CHECK_RESULT, CHECK_RESULT_DELAY_TIME);
+                }
+            }
+            mTimestamp = event.timestamp;
+        }
+    }
+
+    private boolean checkSeonsorState(float x, float y, float z) {
+        if (Math.abs(xOldValues - x) > F_ZERO) {
+            xSuccessCount++;
+        }
+        if (Math.abs(yOldValues - y) > F_ZERO) {
+            ySuccessCount++;
+        }
+        if (Math.abs(zOldValues - z) > F_ZERO) {
+            zSuccessCount++;
+        }
+        xOldValues = x;
+        yOldValues = y;
+        zOldValues = z;
+
+        if ((xSuccessCount >= MIN_SUCCESS_COUNT) && (ySuccessCount >= MIN_SUCCESS_COUNT)
+                && (zSuccessCount >= MIN_SUCCESS_COUNT)) {
+            return true;
+        }
+        return false;
+    }
+	
+	
+	@Override
+	public void onClick(View v) {
+		switch (v.getId()) {
+		case R.id.bt_base_left: {
+			Intent intent = new Intent(Gyro.this, MMITestDevice.class);
+			setResult(RESULT_OK, intent);
+			finish();
+			break;
+		}
+
+		case R.id.bt_base_right: {
+			Intent intent = new Intent(Gyro.this, MMITestDevice.class);
+			setResult(RESULT_CANCELED, intent);
+			finish();
+			break;
+		}
+
+		}
+	}
+
+    @Override
+    public boolean onKeyUp(int keyCode, KeyEvent event) {
+        switch (keyCode) {
+            case KeyEvent.KEYCODE_MENU:
+                return true;
+
+            case KeyEvent.KEYCODE_BACK:
+                    Intent intent = new Intent(Gyro.this, MMITestDevice.class);
+                    setResult(RESULT_CANCELED, intent);
+                    finish();
+                    return true;
+        }
+        return super.onKeyUp(keyCode, event);
+    }
+
+}
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/hall/Hall.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/hall/Hall.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/hall/Hall.java	(revision 1051)
@@ -0,0 +1,114 @@
+package com.android.mmi.hall;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.TextView;
+
+import android.view.View.OnClickListener;
+import com.android.mmi.MMITestDevice;
+import com.android.mmi.R;
+
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.content.BroadcastReceiver;
+import android.util.Log;
+import android.content.Context;
+
+public class Hall extends Activity implements OnClickListener{
+	
+	Button bt_base_left, bt_base_right;
+	
+	
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onCreate(savedInstanceState);
+		//getWindow().addFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		setContentView(R.layout.activity_hall);
+		
+		bt_base_left = (Button) findViewById(R.id.bt_base_left);
+		bt_base_left.setText(R.string.bt_pass);
+		bt_base_left.setOnClickListener(this);
+		bt_base_left.setEnabled(false);
+		bt_base_right = (Button) findViewById(R.id.bt_base_right);
+		bt_base_right.setText(R.string.bt_fail);
+		bt_base_right.setOnClickListener(this);
+
+		
+		IntentFilter mfilter = new IntentFilter();
+      	mfilter.addAction("intent.action.HALL_FACTORY_MODE_TEST");
+        registerReceiver(new BroadcastReceiver() {
+			@Override
+			public void onReceive(Context context, Intent intent) {
+				Log.v("HALL", "HALL_FACTORY_MODE_TEST");
+				testFinish();
+			}
+        }, mfilter);
+	}
+	
+	public void testFinish() {
+				bt_base_left.setEnabled(true);
+				Intent intentResult = new Intent(Hall.this, MMITestDevice.class);
+				setResult(RESULT_OK,intentResult);
+				finish();
+	}
+
+	@Override
+	protected void onPause() {
+		// TODO Auto-generated method stub
+		super.onPause();
+	}
+
+	@Override
+	protected void onResume() {
+		// TODO Auto-generated method stub
+		super.onResume();
+	}
+
+	@Override
+	protected void onDestroy() {
+		//getWindow().clearFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		super.onDestroy();
+	}
+	
+	@Override
+	public void onClick(View v) {
+		switch (v.getId()) {
+		case R.id.bt_base_left: {
+			Intent intent = new Intent(Hall.this, MMITestDevice.class);
+			setResult(RESULT_OK, intent);
+			finish();
+			break;
+		}
+
+		case R.id.bt_base_right: {
+			Intent intent = new Intent(Hall.this, MMITestDevice.class);
+			setResult(RESULT_CANCELED, intent);
+			finish();
+			break;
+		}
+
+		}
+	}
+
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			Intent intent = new Intent(Hall.this, MMITestDevice.class);
+			setResult(RESULT_CANCELED,intent);
+			finish();
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/simcard/SimCard.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/simcard/SimCard.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/simcard/SimCard.java	(revision 1051)
@@ -0,0 +1,127 @@
+package com.android.mmi.simcard;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+import android.telephony.TelephonyManager;
+import android.util.Log;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.TextView;
+import com.android.internal.telephony.ITelephony;
+import com.android.internal.telephony.PhoneConstants;
+import android.os.ServiceManager;
+import com.android.mmi.FeatureOption;
+import com.android.mmi.MMITestDevice;
+import com.android.mmi.R;
+
+public class SimCard extends Activity {
+	public static final String TAG = "SimCard test";
+	private boolean simFlag_1 = false;
+	private boolean simFlag_2 = false;
+	private boolean simFlag_3 = false;
+	private TelephonyManager mTelephonyManager;
+
+	TextView tv_base_title, tv_sim1_info, tv_sim2_info;
+	Button bt_base_left, bt_base_right;
+
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		super.onCreate(savedInstanceState);
+		requestWindowFeature(Window.FEATURE_NO_TITLE);
+		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
+				WindowManager.LayoutParams.FLAG_FULLSCREEN);
+		getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_IMMERSIVE_GESTURE_ISOLATED);
+		getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
+		setContentView(R.layout.activity_base);
+		mTelephonyManager = (TelephonyManager) getSystemService(this.TELEPHONY_SERVICE);
+		boolean Sim1Exist = false;
+		boolean Sim2Exist = false;
+		tv_base_title = (TextView) this.findViewById(R.id.tv_base_title);
+		tv_base_title.setText(R.string.sim_card_name);
+		tv_sim1_info = (TextView) this.findViewById(R.id.tv_base_pixi);
+		tv_sim2_info = (TextView) this.findViewById(R.id.tv_base_swn);
+		bt_base_left = (Button) this.findViewById(R.id.bt_base_left);
+		bt_base_left.setText(R.string.bt_pass);
+		bt_base_left.setEnabled(false);
+		bt_base_right = (Button) this.findViewById(R.id.bt_base_right);
+		bt_base_right.setText(R.string.bt_fail);
+
+		if (//FeatureOption.MTK_GEMINI_SUPPORT == 
+				true ) {
+			try {
+				Sim1Exist = (mTelephonyManager
+						.getSimState(PhoneConstants.SIM_ID_1) != TelephonyManager.SIM_STATE_ABSENT);
+				Sim2Exist = (mTelephonyManager
+						.getSimState(PhoneConstants.SIM_ID_2) != TelephonyManager.SIM_STATE_ABSENT);
+			} catch (Exception e) {
+				Log.i(TAG, "RemoteException happens......");
+			}
+
+			if (Sim1Exist) {
+				tv_sim1_info.setText("SIM1 card is exist");
+				simFlag_1 = true;
+
+			} else {
+				tv_sim1_info.setText("SIM1 card is missing");
+			}
+
+			if (Sim2Exist) {
+				tv_sim2_info.setText("SIM2 card is exist");
+				simFlag_2 = true;
+
+			} else {
+				tv_sim2_info.setText("SIM2 card is missing");
+			}
+		} else {
+			try {
+				Sim1Exist = (mTelephonyManager
+						.getSimState(PhoneConstants.SIM_ID_1) != TelephonyManager.SIM_STATE_ABSENT);
+			} catch (Exception e) {
+				Log.i(TAG, "RemoteException happens......");
+			}
+
+			if (Sim1Exist) {
+				tv_sim1_info.setText("SIM card is exist");
+				simFlag_3 = true;
+			} else {
+				tv_sim1_info.setText("SIM card is missing");
+			}
+		}
+		if ((simFlag_1 == true && simFlag_2 == true) || simFlag_3 == true) {
+			bt_base_left.setEnabled(true);
+		}
+
+		bt_base_left.setOnClickListener(new Button.OnClickListener() {
+
+			@Override
+			public void onClick(View v) {
+				Intent intent = new Intent(SimCard.this, MMITestDevice.class);
+				setResult(RESULT_OK, intent);
+				finish();
+			}
+
+		});
+		bt_base_right.setOnClickListener(new Button.OnClickListener() {
+
+			@Override
+			public void onClick(View v) {
+				Intent intent = new Intent(SimCard.this, MMITestDevice.class);
+				setResult(RESULT_CANCELED, intent);
+				finish();
+			}
+
+		});
+	}
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		if (MMITestDevice.isAutoTest()) {			
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/MMITestDevice.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/MMITestDevice.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/MMITestDevice.java	(revision 1051)
@@ -0,0 +1,850 @@
+package com.android.mmi;
+
+import java.io.ByteArrayOutputStream;
+import java.io.InputStream;
+import java.util.ArrayList;
+import java.util.List;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.content.SharedPreferences.Editor;
+import android.content.res.AssetManager;
+import android.os.Bundle;
+import android.os.IBinder;
+import android.util.Log;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.AdapterView;
+import android.widget.AdapterView.OnItemClickListener;
+import android.widget.ArrayAdapter;
+import android.widget.Button;
+import android.widget.LinearLayout;
+import android.widget.ListView;
+import android.widget.TextView;
+import android.os.SystemProperties;
+
+import com.android.mmi.accessory.Accessory;
+import com.android.mmi.audio.Audio;
+import com.android.mmi.backlight.Backlight;
+import com.android.mmi.batterytemp.BatteryTemp;
+import com.android.mmi.bt.Bt;
+import com.android.mmi.camera.MyCamera;
+import com.android.mmi.cameraimgfront.CameraImgFront;
+import com.android.mmi.cameraled.CameraLed;
+import com.android.mmi.charger.Charger;
+import com.android.mmi.chargerled.ChargerLed;
+import com.android.mmi.factoryreset.FactoryReset;
+import com.android.mmi.fmradio.MyFmRadio;
+import com.android.mmi.gps.Gps;
+import com.android.mmi.gsensor.Gsensor;
+import com.android.mmi.keypad.Keypad;
+import com.android.mmi.lcdblack.LcdBlack;
+import com.android.mmi.lcdgraylevel.LcdGraylevel;
+import com.android.mmi.lcdgreychart.LcdGreychart;
+import com.android.mmi.lcdmirergb.LcdMireRGB;
+import com.android.mmi.lcdwhite.LcdWhite;
+import com.android.mmi.lightsensor.LightSensor;
+import com.android.mmi.proximity.Proximity;
+import com.android.mmi.sdcard.SdCard;
+import com.android.mmi.simcard.SimCard;
+import com.android.mmi.tpone.TpOne;
+import com.android.mmi.tptwo.TpTwo;
+import com.android.mmi.tpzero.TpZero;
+import com.android.mmi.tracability.Tracability;
+import com.android.mmi.usb.Usb;
+import com.android.mmi.vibrator.MyVibrator;
+import com.android.mmi.wifi.Wifi;
+
+ import android.net.Uri;
+ import com.android.mmi.call.Call;
+ import com.android.mmi.gyro.Gyro;
+ import com.android.mmi.gyro.Gyro;
+ import com.android.mmi.hall.Hall;
+ import com.android.mmi.nfc.Nfc;
+ import com.android.mmi.fingerprint.Fingerprint;
+ import com.android.mmi.compass.Compass;
+ import com.android.mmi.tprawdata.TpRawData;
+ import com.android.mmi.tplock.TpLock;
+ import com.android.mmi.dtv.Dtv;
+ import com.android.mmi.batterylevel.BatteryLevel;
+ import com.android.mmi.frontcameraflasher.FrontCameraFlasher;
+	
+
+
+public class MMITestDevice extends Activity implements OnClickListener {
+
+	TextView tv_base_title, tv_base_pixi, tv_base_swn;
+	Button bt_base_left, bt_base_right;
+	ListView lv_base_testItems;
+	LinearLayout ll_base_title, ll_base_bottom;
+	private SharedPreferences sp; 
+	boolean goToNext = false;
+	boolean goToItemFail = false;
+	boolean allTestSeccuss;
+	boolean hasFailItem = false;
+	public static final String TAG = "MMITest";
+	
+	public static final int RESTART_ALL = 1111;
+	public static final int RESTART_ITEM= 2222;
+	public static final int RESTART_NEXT= 3333;
+	public static final int TESTITEM_START = 0;
+	public static final int TESTITEM_TRACABILITY = TESTITEM_START;
+	public static final int TESTITEM_TP0 = 1;
+	public static final int TESTITEM_TP1 = 2;
+	public static final int TESTITEM_TP2 = 3;
+	public static final int TESTITEM_LCD_MIRERGB = 4;
+	public static final int TESTITEM_LCD_BLACK = 5;
+	public static final int TESTITEM_LCD_GREYCHART = 6;
+	public static final int TESTITEM_LCD_GRAYLEVEL = 7;
+	public static final int TESTITEM_LCD_WHITE = 8;
+	public static final int TESTITEM_KEYPAD = 9;
+	public static final int TESTITEM_BACKLIGHT = 10;
+	public static final int TESTITEM_CAMERA = 11;
+	public static final int TESTITEM_VIBRATOR = 12;
+	public static final int TESTITEM_CAMERA_IMG_FRONT = 13;
+	public static final int TESTITEM_AUDIO = 14;
+	public static final int TESTITEM_CAMERA_LED = 15;
+	public static final int TESTITEM_CHARGER_LED = 16;	
+	public static final int TESTITEM_ACCESSORY = 17;
+	public static final int TESTITEM_CHARGER = 18;
+	public static final int TESTITEM_USB = 19;
+	public static final int TESTITEM_GSENSOR = 20;
+	public static final int TESTITEM_LIGHT_SENSOR = 21;
+	public static final int TESTITEM_PROXIMITY = 22;
+	public static final int TESTITEM_SIM_CARD = 23;
+	public static final int TESTITEM_SD_CARD = 24;
+	public static final int TESTITEM_BATTERY_TEMP = 25;
+	public static final int TESTITEM_BT = 26;
+	public static final int TESTITEM_WIFI = 27;
+	public static final int TESTITEM_GPS = 28;
+	public static final int TESTITEM_FACTORY_RESET = 29;
+	public static final int TESTITEM_FMRADIO = 30;
+	public static final int TESTITEM_TATOL = 39;
+
+  	public static final int TESTITEM_CALLING = 31;
+  	public static final int TESTITEM_GYRO = 32;
+  	public static final int TESTITEM_HALL = 33;
+  	public static final int TESTITEM_NFC = 34;
+  	public static final int TESTITEM_FINGER = 35;
+  	public static final int TESTITEM_FRONTCAMERAFLASHER = 36;
+  	public static final int TESTITEM_COMPASS = 37;
+  	public static final int TESTITEM_TPRAWDATA = 38;
+  	public static final int TESTITEM_TPLOCK = 39;
+  	public static final int TESTITEM_DTV = 40;
+	public static final int TESTITEM_BATTERY_LEVERl = 41;
+	public static final int TESTITEM_CAMERA_SUBMAIN = 42;
+
+	private static int currentTestMode = 0;
+	public static int currenttestitem = TESTITEM_TRACABILITY;
+	public static final int TESTMODE_ALLTEST = 1;
+	public static final int TESTMODE_AUTOTEST = 2;
+	
+	private String version;
+	public static int testResult[];
+	public static final int TEST_OK = 1;
+	public static final int TEST_FAIL = 2;
+	public static final int NOTTEST = 0;
+	
+	public static final int alltestitem[] = { 
+		TESTITEM_TRACABILITY,
+//			TESTITEM_TP0, 
+			TESTITEM_TP1, 
+			TESTITEM_TP2, 
+			TESTITEM_TPLOCK,
+			TESTITEM_LCD_MIRERGB,
+			TESTITEM_LCD_BLACK, 
+			TESTITEM_LCD_GREYCHART, 
+			TESTITEM_LCD_GRAYLEVEL,
+			TESTITEM_LCD_WHITE, 
+			TESTITEM_BACKLIGHT,
+			TESTITEM_KEYPAD, 
+			TESTITEM_CAMERA, 
+			TESTITEM_CAMERA_SUBMAIN,
+			TESTITEM_CAMERA_IMG_FRONT,
+			TESTITEM_CAMERA_LED,			
+			TESTITEM_FRONTCAMERAFLASHER,
+			TESTITEM_CHARGER_LED, 
+			TESTITEM_AUDIO,
+			TESTITEM_VIBRATOR,
+//			TESTITEM_DTV,
+			TESTITEM_ACCESSORY, 
+			TESTITEM_CHARGER, 
+			TESTITEM_USB,
+			TESTITEM_COMPASS,
+			TESTITEM_GSENSOR, 
+//			TESTITEM_GYRO,
+			TESTITEM_LIGHT_SENSOR, 
+			TESTITEM_PROXIMITY,
+			TESTITEM_SIM_CARD, 
+			TESTITEM_SD_CARD, 
+			TESTITEM_BATTERY_TEMP,
+			TESTITEM_BT, 
+			TESTITEM_WIFI, 
+			TESTITEM_GPS, 
+			TESTITEM_FINGER,
+			
+  			TESTITEM_CALLING,
+			TESTITEM_FACTORY_RESET,
+			TESTITEM_BATTERY_LEVERl
+  		//	TESTITEM_HALL,
+  		//	TESTITEM_NFC,
+  		//	TESTITEM_TPRAWDATA,
+		
+//			TESTITEM_TATOL 
+			};
+
+	public static final int autotestitem[] = { 
+		TESTITEM_TRACABILITY,
+//		TESTITEM_TP0, 
+		TESTITEM_TP1, 
+		TESTITEM_TP2, 
+		TESTITEM_TPLOCK,
+		TESTITEM_LCD_MIRERGB,
+		TESTITEM_LCD_BLACK, 
+		TESTITEM_LCD_GREYCHART, 
+		TESTITEM_LCD_GRAYLEVEL,
+		TESTITEM_LCD_WHITE,
+		TESTITEM_BACKLIGHT,		
+		TESTITEM_KEYPAD, 
+		TESTITEM_CAMERA, 
+		TESTITEM_CAMERA_SUBMAIN,
+		TESTITEM_CAMERA_IMG_FRONT,
+		TESTITEM_CAMERA_LED,
+		TESTITEM_FRONTCAMERAFLASHER,
+		TESTITEM_CHARGER_LED, 
+		TESTITEM_AUDIO,
+		TESTITEM_VIBRATOR,
+//		TESTITEM_DTV,
+		TESTITEM_ACCESSORY, 
+//		TESTITEM_FMRADIO,
+		TESTITEM_CHARGER, 
+		TESTITEM_USB,
+		TESTITEM_COMPASS,
+		TESTITEM_GSENSOR,
+//		TESTITEM_GYRO,
+		TESTITEM_LIGHT_SENSOR, 
+		TESTITEM_PROXIMITY,
+		TESTITEM_SIM_CARD, 
+		TESTITEM_SD_CARD, 
+		TESTITEM_BATTERY_TEMP,
+		TESTITEM_BT, 
+		TESTITEM_WIFI, 
+		TESTITEM_GPS, 
+		TESTITEM_FINGER,
+  		TESTITEM_CALLING,
+ // 	TESTITEM_GYRO
+ // 	TESTITEM_HALL,
+ // 	TESTITEM_NFC,
+ // 	TESTITEM_TPRAWDATA,
+//		TESTITEM_FACTORY_RESET,
+//		TESTITEM_TATOL 
+			};
+
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		super.onCreate(savedInstanceState);
+
+		requestWindowFeature(Window.FEATURE_NO_TITLE);
+		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
+				WindowManager.LayoutParams.FLAG_FULLSCREEN);
+		getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_IMMERSIVE_GESTURE_ISOLATED);
+		getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON); 
+		setContentView(R.layout.activity_main);
+		sp = this.getSharedPreferences("autoTestResult", Context.MODE_WORLD_READABLE|Context.MODE_WORLD_WRITEABLE);
+
+		ll_base_title = (LinearLayout) findViewById(R.id.ll_base_title);
+		ll_base_bottom = (LinearLayout) findViewById(R.id.ll_base_bottom);
+
+		tv_base_title = (TextView) findViewById(R.id.tv_base_title);
+		tv_base_title.setText(R.string.phone_name);
+		tv_base_pixi = (TextView) findViewById(R.id.tv_base_pixi);
+		tv_base_pixi.setText(R.string.pixi_name);
+		tv_base_swn = (TextView) findViewById(R.id.tv_base_swn);
+				
+		version = SystemProperties.get("ro.build.version.custintid");
+				
+		tv_base_swn.setText(getString(R.string.swn_name) + version);
+		bt_base_left = (Button) findViewById(R.id.bt_base_left);
+		bt_base_left.setText(R.string.bt_auto);
+		bt_base_left.setOnClickListener(this);
+		bt_base_right = (Button) findViewById(R.id.bt_base_right);
+		bt_base_right.setText(R.string.bt_manu);
+		bt_base_right.setOnClickListener(this);
+
+		lv_base_testItems = (ListView) findViewById(R.id.lv_base_testItems);
+		lv_base_testItems.setVisibility(View.GONE);
+		lv_base_testItems.setAdapter(new ArrayAdapter<String>(this,
+				R.layout.listview_main_item, getMMIItems()));
+		testResult = new int[TESTITEM_TATOL];
+
+		lv_base_testItems.setOnItemClickListener(new ItemClickListener());
+	}
+
+	@Override
+	public void onClick(View v) {
+		switch (v.getId()) {
+		case R.id.bt_base_left:
+			getTestReport();
+			if (hasFailItem) {
+				goToAutoTestResultView();
+			}else{
+				startAutoTest();
+			}
+			break;
+
+		case R.id.bt_base_right:
+			lv_base_testItems.setVisibility(View.VISIBLE);
+			ll_base_title.setVisibility(View.GONE);
+			ll_base_bottom.setVisibility(View.GONE);
+			break;
+		}
+	}
+	
+
+	@Override
+	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
+		if (requestCode < 0) {
+			return;
+		}
+		if (requestCode == RESTART_ALL) {
+			if (resultCode == RESULT_OK) {
+				startAutoTest();
+			}
+			return;
+		}
+		if (MMITestDevice.getCurrentTestMode() == TESTMODE_AUTOTEST) {
+			int index = getIndex(requestCode);
+			if (requestCode == RESTART_ITEM) {
+				if (resultCode == RESULT_OK) {
+					goToNext = false;
+				} else if (resultCode == RESTART_NEXT) {
+					goToNext = true;
+				} else {
+					saveTestReport();
+					Tracability.setMMITestResult((byte)0);
+					return;
+				}
+				goToItemFail = false;
+			} else {
+				if (resultCode == RESULT_OK) {
+					goToNext = true;
+					goToItemFail = false;
+					testResult[index] = MMITestDevice.TEST_OK;
+				} else {
+					goToNext = false;
+					goToItemFail = true;
+					allTestSeccuss = false;
+					testResult[index] = MMITestDevice.TEST_FAIL;
+				}
+			}
+
+			if (goToNext) {
+				currenttestitem = currenttestitem + 1;
+			}
+			if (goToItemFail) {
+				goToFailItemView(requestCode);
+				return;
+			}
+			if (currenttestitem == autotestitem.length) {
+				saveTestReport();
+				if (!allTestSeccuss) {
+					goToAutoTestResultView();
+					Tracability.setMMITestResult((byte)0);
+				}else{
+					Tracability.setMMITestResult((byte)1);
+				}
+			} else {
+				TestSelectedItem(autotestitem[currenttestitem]);
+			}
+		}
+	}
+	
+
+	@Override
+	public boolean onKeyDown(int keyCode, KeyEvent event) {
+		if (keyCode == KeyEvent.KEYCODE_BACK){
+			if(lv_base_testItems.getVisibility() == View.VISIBLE) {
+				lv_base_testItems.setVisibility(View.GONE);
+				ll_base_title.setVisibility(View.VISIBLE);
+				ll_base_bottom.setVisibility(View.VISIBLE);				
+			}else {
+				finish();
+			}
+		}
+		return false;
+	}
+	
+	class ItemClickListener implements OnItemClickListener {
+		public void onItemClick(AdapterView<?> arg0,// The AdapterView where the
+													// click happened
+				View arg1,// The view within the AdapterView that was clicked
+				int arg2,// The position of the view in the adapter
+				long arg3// The row id of the item that was clicked
+		) {
+			MMITestDevice.setCurrtetTestMode(0);
+			TestSelectedItem(alltestitem[arg2]);
+		}
+	}
+
+	public String getStringbyitemid(int item_id) {
+		String str = null;
+		switch (item_id) {
+		case TESTITEM_TRACABILITY:
+			str = getString(R.string.tracability_name);
+			break;
+		case TESTITEM_TP0:
+			str = getString(R.string.tp0_name);
+			break;
+		case TESTITEM_TP1:
+			str = getString(R.string.tp1_name);
+			break;
+		case TESTITEM_TP2:
+			str = getString(R.string.tp2_name);
+			break;
+		case TESTITEM_LCD_MIRERGB:
+			str = getString(R.string.lcd_mirergb_name);
+			break;
+		case TESTITEM_LCD_BLACK:
+			str = getString(R.string.lcd_back_name);
+			break;
+		case TESTITEM_LCD_GREYCHART:
+			str = getString(R.string.lcd_greychart_name);
+			break;
+		case TESTITEM_LCD_GRAYLEVEL:
+			str = getString(R.string.lcd_graylevel_name);
+			break;
+		case TESTITEM_LCD_WHITE:
+			str = getString(R.string.lcd_white_name);
+			break;
+		case TESTITEM_KEYPAD:
+			str = getString(R.string.keypad_name);
+			break;
+		case TESTITEM_BACKLIGHT:
+			str = getString(R.string.backlight_name);
+			break;
+		case TESTITEM_CAMERA:
+			str = getString(R.string.camera_name);
+			break;		
+		case TESTITEM_CAMERA_SUBMAIN:
+			str = getString(R.string.camera_submain_name);
+			break;
+		case TESTITEM_CAMERA_LED:
+			str = getString(R.string.camera_led_name);
+			break;
+		case TESTITEM_CAMERA_IMG_FRONT:
+			str = getString(R.string.camera_img_front_name);
+			break;
+		case TESTITEM_CHARGER_LED:
+			str = getString(R.string.charger_led_name);
+			break;
+		case TESTITEM_AUDIO:
+			str = getString(R.string.audio_name);
+			break;
+		case TESTITEM_VIBRATOR:
+			str = getString(R.string.vibrator_name);
+			break;
+		case TESTITEM_ACCESSORY:
+			str = getString(R.string.accessory_name);
+			break;
+		case TESTITEM_FMRADIO:
+			str = getString(R.string.fmradio_name);
+			break;
+		case TESTITEM_CHARGER:
+			str = getString(R.string.charger_name);
+			break;
+		case TESTITEM_USB:
+			str = getString(R.string.usb_name);
+			break;
+		case TESTITEM_GSENSOR:
+			str = getString(R.string.gsensor_name);
+			break;
+		case TESTITEM_LIGHT_SENSOR:
+			str = getString(R.string.sensor_name);
+			break;
+		case TESTITEM_PROXIMITY:
+			str = getString(R.string.proximity_name);
+			break;
+		case TESTITEM_SIM_CARD:
+			str = getString(R.string.sim_card_name);
+			break;
+		case TESTITEM_SD_CARD:
+			str = getString(R.string.sd_card_name);
+			break;
+		case TESTITEM_BATTERY_TEMP:
+			str = getString(R.string.battery_temp_name);
+			break;
+		case TESTITEM_BT:
+			str = getString(R.string.bt_name);
+			break;
+		case TESTITEM_WIFI:
+			str = getString(R.string.wifi_name);
+			break;
+		case TESTITEM_GPS:
+			str = getString(R.string.gps_name);
+			break;
+		case TESTITEM_FACTORY_RESET:
+			str = getString(R.string.factory_reset_name);
+			break;
+  		case TESTITEM_CALLING:
+  			str = getString(R.string.calling_name);
+  			break;
+  		
+  		case TESTITEM_GYRO:
+  			str = getString(R.string.gyroscope_name);
+  			break;
+  
+  		case TESTITEM_HALL:
+  			str = getString(R.string.hall_name);
+  			break;
+  		
+  		case TESTITEM_NFC:
+  			str = getString(R.string.nfc_name);
+  			break;
+  			
+  		case TESTITEM_FINGER:
+  			str = getString(R.string.finger_name);
+  			break;
+  		
+  		case TESTITEM_FRONTCAMERAFLASHER:
+  			str = getString(R.string.frontcameraflasher_name);
+  			break;
+  			
+  		case TESTITEM_COMPASS:
+  			str = getString(R.string.compass_name);
+  			break;
+  			
+  		case TESTITEM_TPRAWDATA:
+  			str = getString(R.string.tprawdata_name);
+  			break;
+  			
+  		case TESTITEM_TPLOCK:
+  			str = getString(R.string.tplock_name);
+  			break;
+  			
+  		case TESTITEM_DTV:
+  			str = getString(R.string.dtv_name);
+  			break;
+		case TESTITEM_BATTERY_LEVERl:
+  			str = getString(R.string.battery_level_name);
+  			break;	
+		}
+		
+		return str;
+	}
+
+	public void TestSelectedItem(int selectedItem) {
+		Intent intent = new Intent();
+
+		if(selectedItem >= TESTITEM_START && selectedItem < TESTITEM_TATOL) {
+			currenttestitem = getIndex(selectedItem);
+		}
+		switch (selectedItem) {
+		case TESTITEM_TRACABILITY:
+			intent.setClass(this, Tracability.class);
+			startActivityForResult(intent, TESTITEM_TRACABILITY);
+			break;
+		case TESTITEM_TP0:
+			intent.setClass(this, TpZero.class);
+			startActivityForResult(intent, TESTITEM_TP0);
+			break;
+		case TESTITEM_TP1:
+			intent.setClass(this, TpOne.class);
+			startActivityForResult(intent, TESTITEM_TP1);
+			break;
+		case TESTITEM_TP2:
+			intent.setClass(this, TpTwo.class);
+			startActivityForResult(intent, TESTITEM_TP2);
+			break;
+		case TESTITEM_LCD_MIRERGB:
+			intent.setClass(this, LcdMireRGB.class);
+			startActivityForResult(intent, TESTITEM_LCD_MIRERGB);
+			break;
+		case TESTITEM_LCD_BLACK:
+			intent.setClass(this, LcdBlack.class);
+			startActivityForResult(intent, TESTITEM_LCD_BLACK);
+			break;
+		case TESTITEM_LCD_GREYCHART:
+			intent.setClass(this, LcdGreychart.class);
+			startActivityForResult(intent, TESTITEM_LCD_GREYCHART);
+			break;
+		case TESTITEM_LCD_GRAYLEVEL:
+			intent.setClass(this, LcdGraylevel.class);
+			startActivityForResult(intent, TESTITEM_LCD_GRAYLEVEL);
+			break;
+		case TESTITEM_LCD_WHITE:
+			intent.setClass(this, LcdWhite.class);
+			startActivityForResult(intent, TESTITEM_LCD_WHITE);
+			break;
+		case TESTITEM_KEYPAD:
+			intent.setClass(this, Keypad.class);
+			startActivityForResult(intent, TESTITEM_KEYPAD);
+			break;
+		case TESTITEM_BACKLIGHT:
+			intent.setClass(this, Backlight.class);
+			startActivityForResult(intent, TESTITEM_BACKLIGHT);
+			break;
+		case TESTITEM_CAMERA:
+			intent.setClass(this, MyCamera.class);
+			startActivityForResult(intent, TESTITEM_CAMERA);
+			break;		
+		case TESTITEM_CAMERA_SUBMAIN:
+        	intent.setClassName("com.mediatek.emcamera", "com.mediatek.emcamera.Camera_mmi");
+			startActivityForResult(intent, TESTITEM_CAMERA_SUBMAIN);	
+			break;
+		case TESTITEM_CAMERA_LED:
+			intent.setClass(this, CameraLed.class);
+			startActivityForResult(intent, TESTITEM_CAMERA_LED);
+			break;
+		case TESTITEM_CAMERA_IMG_FRONT:
+			intent.setClass(this, CameraImgFront.class);
+			startActivityForResult(intent, TESTITEM_CAMERA_IMG_FRONT);
+			break;
+		case TESTITEM_CHARGER_LED:
+			intent.setClass(this, ChargerLed.class);
+			startActivityForResult(intent, TESTITEM_CHARGER_LED);
+			break;
+		case TESTITEM_AUDIO:
+			intent.setClass(this, Audio.class);
+			startActivityForResult(intent, TESTITEM_AUDIO);
+			break;
+		case TESTITEM_VIBRATOR:
+			intent.setClass(this, MyVibrator.class);
+			startActivityForResult(intent, TESTITEM_VIBRATOR);
+			break;
+		case TESTITEM_ACCESSORY:
+			intent.setClass(this, Accessory.class);
+			startActivityForResult(intent, TESTITEM_ACCESSORY);
+			break;
+		case TESTITEM_FMRADIO:
+			intent.setClass(this, MyFmRadio.class);
+			startActivityForResult(intent, TESTITEM_FMRADIO);
+			break;
+		case TESTITEM_CHARGER:
+			intent.setClass(this, Charger.class);
+			startActivityForResult(intent, TESTITEM_CHARGER);
+			break;
+		case TESTITEM_USB:
+			intent.setClass(this, Usb.class);
+			startActivityForResult(intent, TESTITEM_USB);
+			break;
+		case TESTITEM_GSENSOR:
+			intent.setClass(this, Gsensor.class);
+			startActivityForResult(intent, TESTITEM_GSENSOR);
+			break;
+		case TESTITEM_LIGHT_SENSOR:
+			intent.setClass(this, LightSensor.class);
+			startActivityForResult(intent, TESTITEM_LIGHT_SENSOR);
+			break;
+		case TESTITEM_PROXIMITY:
+			intent.setClass(this, Proximity.class);
+			startActivityForResult(intent, TESTITEM_PROXIMITY);
+			break;
+		case TESTITEM_SIM_CARD:
+			intent.setClass(this, SimCard.class);
+			startActivityForResult(intent, TESTITEM_SIM_CARD);
+			break;
+		case TESTITEM_SD_CARD:
+			intent.setClass(this, SdCard.class);
+			startActivityForResult(intent, TESTITEM_SD_CARD);
+			break;
+		case TESTITEM_BATTERY_TEMP:
+			intent.setClass(this, BatteryTemp.class);
+			startActivityForResult(intent, TESTITEM_BATTERY_TEMP);
+			break;
+		case TESTITEM_BT:
+			intent.setClass(this, Bt.class);
+			startActivityForResult(intent, TESTITEM_BT);
+			break;
+		case TESTITEM_WIFI:
+			intent.setClass(this, Wifi.class);
+			startActivityForResult(intent, TESTITEM_WIFI);
+			break;
+		case TESTITEM_GPS:
+			intent.setClass(this, Gps.class);
+			startActivityForResult(intent, TESTITEM_GPS);
+			break;
+		case TESTITEM_FACTORY_RESET:
+			intent.setClass(this, FactoryReset.class);
+			startActivityForResult(intent, TESTITEM_FACTORY_RESET);
+			break;
+  		case TESTITEM_CALLING:
+  			intent.setClass(this, Call.class);
+  			startActivityForResult(intent, TESTITEM_FACTORY_RESET);
+  			break;
+  		case TESTITEM_GYRO:
+  			intent.setClass(this, Gyro.class);
+  			startActivityForResult(intent, TESTITEM_FACTORY_RESET);
+  			break;	
+  		case TESTITEM_HALL:
+  			intent.setClass(this, Hall.class);
+  			startActivityForResult(intent, TESTITEM_FACTORY_RESET);
+  			break;		
+  		case TESTITEM_NFC:
+  			intent.setClass(this, Nfc.class);
+  			startActivityForResult(intent, TESTITEM_FACTORY_RESET);
+  			break;	
+  		case TESTITEM_FINGER:
+  			intent.setClass(this, Fingerprint.class);
+  			startActivityForResult(intent, TESTITEM_FACTORY_RESET);
+  			break;
+  		case TESTITEM_FRONTCAMERAFLASHER:
+  			intent.setClass(this, FrontCameraFlasher.class);
+  			startActivityForResult(intent, TESTITEM_FACTORY_RESET);
+  			break;			
+  		case TESTITEM_COMPASS:
+  			intent.setClass(this, Compass.class);
+  			startActivityForResult(intent, TESTITEM_FACTORY_RESET);
+  			break;			
+  		case TESTITEM_TPRAWDATA:
+  			intent.setClass(this, TpRawData.class);
+  			startActivityForResult(intent, TESTITEM_FACTORY_RESET);
+  			break;			
+  		case TESTITEM_TPLOCK:
+  			intent.setClass(this, TpLock.class);
+  			startActivityForResult(intent, TESTITEM_FACTORY_RESET);
+  			break;		
+  		case TESTITEM_DTV:
+  			intent.setClass(this, Dtv.class);
+  			startActivityForResult(intent, TESTITEM_FACTORY_RESET);
+  			break;				
+ 		case TESTITEM_BATTERY_LEVERl:
+  			intent.setClass(this, BatteryLevel.class);
+  			startActivityForResult(intent, TESTITEM_FACTORY_RESET);
+  			break;			
+		}
+	}
+
+	private int getIndex(int testCode)
+	{
+	    int index = 0;
+	    if(currentTestMode == TESTMODE_AUTOTEST)
+	    {
+		    for(int i=0;i<autotestitem.length;i++)
+		    {
+		        if(testCode == autotestitem[i])
+		        {
+		            index = i;
+		            break;
+		        }
+		    }
+	    }
+	    else
+	    {
+      	    for(int i=0;i<alltestitem.length;i++)
+      	    {
+      	        if(testCode == alltestitem[i])
+      	        {
+      	            index = i;
+      	            break;
+      	        }
+      	    }
+	    }
+	    return index;
+	}
+	
+	public static int getCurrentTestMode() {
+		return currentTestMode;
+	}
+
+	public static void setCurrtetTestMode(int curmode) {
+		currentTestMode = curmode;
+	}
+
+	private List<String> getMMIItems() {
+		List<String> data = new ArrayList<String>();
+		for (int i = TESTITEM_START; i < alltestitem.length; i++) {
+			data.add(getStringbyitemid(alltestitem[i]));
+		}
+		return data;
+	}
+	
+	public static boolean isAutoTest() {
+		return (currentTestMode == TESTMODE_AUTOTEST || currentTestMode == TESTMODE_ALLTEST) ? true : false;
+	}
+	
+	private void startAutoTest() {
+		MMITestDevice.setCurrtetTestMode(MMITestDevice.TESTMODE_AUTOTEST);
+		currenttestitem = 0;
+		allTestSeccuss = true;
+		testResult = new int[TESTITEM_TATOL];
+		TestSelectedItem(autotestitem[currenttestitem]);
+	}
+
+	private void goToAutoTestResultView() {
+		Intent intent = new Intent();
+		Bundle bundle = new Bundle();
+		bundle.putString("fail_item", getReportText());
+		intent.setClass(this, MyAutoTest.class);
+		intent.putExtras(bundle);
+		startActivityForResult(intent, RESTART_ALL);
+	}
+
+	private void goToFailItemView(int index) {
+		Intent itemIntent = new Intent();
+		Bundle bundle = new Bundle();
+		bundle.putString("fail_item", "Text["+ index + "]" + getStringbyitemid(index));
+		itemIntent.setClass(this, AutoTestItem.class);
+		itemIntent.putExtras(bundle);
+		startActivityForResult(itemIntent, RESTART_ITEM);
+	}
+
+	private String getReportText()
+    {
+		StringBuffer text = new StringBuffer();
+		for(int i=0 ; i < autotestitem.length; i++)
+		{
+			if (testResult[i] == TEST_FAIL) {
+				text.append("Test["+ i +"] " + getStringbyitemid(autotestitem[i]) + "\n");
+			}
+		}
+		text.append("\n\nfailed Restart?");
+		
+		return text.toString();
+		
+    }
+	
+	public void saveTestReport(){
+		
+		StringBuffer result = new StringBuffer();
+		for(int i=0 ; i < autotestitem.length; i++){
+			if (testResult[i] == NOTTEST) {
+				result.append("0");
+			}else if (testResult[i] == TEST_OK) {
+				result.append("1");
+			}else if (testResult[i] == TEST_FAIL) {
+				result.append("2");
+			}
+		}
+		
+		Editor editor =  sp.edit();
+		editor.putString("result", result.toString());
+		editor.commit();
+	}
+
+    public void getTestReport(){
+    	String autoTestResult = sp.getString("result", "");
+		char[] result = new char[TESTITEM_TATOL];
+		hasFailItem = false;
+		if (!"".equals(autoTestResult)) {
+			result = autoTestResult.toCharArray();
+		}
+		
+		for(int i=0 ; i < autotestitem.length; i++){
+			if (result[i] == '1') {
+				testResult[i] = TEST_OK;
+			}else if (result[i] == '2') {
+				testResult[i] = TEST_FAIL;
+			}
+			
+			if (!hasFailItem && testResult[i] == TEST_FAIL) {
+				hasFailItem = true;
+			}
+		}
+    }
+	
+}
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/tpzero/TpZero.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/tpzero/TpZero.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/tpzero/TpZero.java	(revision 1051)
@@ -0,0 +1,39 @@
+package com.android.mmi.tpzero;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.view.KeyEvent;
+
+import com.android.mmi.MMITestDevice;
+
+public class TpZero extends Activity {
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		switch (keyCode) {
+		case KeyEvent.KEYCODE_MENU:
+			if(MMITestDevice.isAutoTest()) {
+				MMITestDevice.currenttestitem = MMITestDevice.currenttestitem - 2;
+				if(MMITestDevice.currenttestitem < -1) {
+					MMITestDevice.currenttestitem = -1;
+				}
+				Intent intent = new Intent(TpZero.this, MMITestDevice.class);
+				setResult(RESULT_CANCELED,intent);
+				finish();
+			}
+			
+			return true;
+			
+		case KeyEvent.KEYCODE_BACK:
+			if(MMITestDevice.isAutoTest()) {
+				MMITestDevice.setCurrtetTestMode(0);
+				Intent intent = new Intent(TpZero.this, MMITestDevice.class);
+				setResult(RESULT_CANCELED,intent);
+				finish();
+				return true;
+			}
+			
+			break;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/tpone/TpOne.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/tpone/TpOne.java	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/tpone/TpOne.java	(revision 1051)
@@ -0,0 +1,308 @@
+package com.android.mmi.tpone;
+
+import java.util.ArrayList;
+
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.app.AlertDialog.Builder;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.DialogInterface.OnClickListener;
+import android.content.Intent;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Paint;
+import android.graphics.Paint.Align;
+import android.os.Bundle;
+import android.view.KeyEvent;
+import android.view.MotionEvent;
+import android.view.VelocityTracker;
+import android.view.View;
+import android.view.ViewGroup.LayoutParams;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.RelativeLayout;
+
+import com.android.mmi.MMITestDevice;
+import com.android.mmi.R;
+
+public class TpOne extends Activity {
+	static final float MAX_VELOCITY = 160;
+	static final int MARGIN_WIDTH = 175;
+	static final int LINE_WIDTH = 120;
+	static final int ERROR_RANGE = 120;
+
+	private View mLineView;
+	boolean isbounds = false;
+	private boolean[] state_referenceLine = { false, false, false, false };
+
+	private ArrayList<PT> mPoints = new ArrayList<PT>();
+	private Paint mPaint;
+	private Paint mTextpaint;
+	private Paint mTargetPaint;
+	private int mScreenWidth;
+	private int mScreenHeigh;
+
+
+	private VelocityTracker mVelocity;
+
+	@Override
+	public void onCreate(Bundle savedInstanceState) {
+		super.onCreate(savedInstanceState);
+		this.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
+				WindowManager.LayoutParams.FLAG_FULLSCREEN);
+		requestWindowFeature(Window.FEATURE_NO_TITLE);
+		// getWindow().addFlags(WindowManager.LayoutParams.FLAG_HOMEKEY_DISPATCHED);
+		getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_IMMERSIVE_GESTURE_ISOLATED);
+		getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
+		setContentView(R.layout.activity_touch);
+
+		mLineView = new LineView(this);
+		RelativeLayout.LayoutParams param = new RelativeLayout.LayoutParams(
+				LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);
+		addContentView(mLineView, param);
+
+		initView();
+	}
+
+	private void initView() {
+		WindowManager dpy = (WindowManager) getSystemService(Context.WINDOW_SERVICE);
+		mScreenWidth = dpy.getDefaultDisplay().getWidth();
+		mScreenHeigh = dpy.getDefaultDisplay().getHeight();
+
+		mPaint = new Paint();
+		mPaint.setAntiAlias(true);
+		mPaint.setColor(Color.YELLOW);
+		mPaint.setStyle(Paint.Style.STROKE);
+		mPaint.setStrokeWidth(LINE_WIDTH);
+		
+		mTextpaint = new Paint();
+		mTextpaint.setColor(Color.BLACK);
+		mTextpaint.setAntiAlias(true);
+		mTextpaint.setTextSize(26);
+		mTextpaint.setTextAlign(Align.CENTER);
+
+		mTargetPaint = new Paint();
+		mTargetPaint.setAntiAlias(true);
+		mTargetPaint.setColor(Color.RED);
+		mTargetPaint.setStyle(Paint.Style.STROKE);
+		mTargetPaint.setStrokeWidth(3);
+	}
+
+	private boolean checkPoint(float y) {
+		if ((y > MARGIN_WIDTH - LINE_WIDTH / 2 && y < MARGIN_WIDTH + LINE_WIDTH
+				/ 2)
+				|| (y < mScreenHeigh / 2 - MARGIN_WIDTH + LINE_WIDTH / 2 && y > mScreenHeigh
+						/ 2 - MARGIN_WIDTH - LINE_WIDTH / 2)
+				|| (y > mScreenHeigh / 2 + MARGIN_WIDTH - LINE_WIDTH / 2 && y < mScreenHeigh
+						/ 2 + MARGIN_WIDTH + LINE_WIDTH / 2)
+				|| (y < mScreenHeigh - MARGIN_WIDTH + LINE_WIDTH / 2 && y > mScreenHeigh
+						- MARGIN_WIDTH - LINE_WIDTH / 2)) {
+			return false;
+		}
+		return true;
+	}
+
+	private void changLineState(float y) {
+		if ((y > MARGIN_WIDTH - LINE_WIDTH / 2)
+				&& (y < MARGIN_WIDTH + LINE_WIDTH / 2)) {
+			state_referenceLine[0] = true;
+		} else if ((y < mScreenHeigh / 2 - MARGIN_WIDTH + LINE_WIDTH / 2)
+				&& (y > mScreenHeigh / 2 - MARGIN_WIDTH - LINE_WIDTH / 2)) {
+			state_referenceLine[1] = true;
+		} else if ((y > mScreenHeigh / 2 + MARGIN_WIDTH - LINE_WIDTH / 2)
+				&& (y < mScreenHeigh / 2 + MARGIN_WIDTH + LINE_WIDTH / 2)) {
+			state_referenceLine[2] = true;
+		} else if ((y < mScreenHeigh - MARGIN_WIDTH + LINE_WIDTH / 2)
+				&& (y > mScreenHeigh - MARGIN_WIDTH - LINE_WIDTH / 2)) {
+			state_referenceLine[3] = true;
+		}
+	}
+
+	private boolean isSuccess() {
+		boolean isSuccess = true;
+		for (boolean iterable : state_referenceLine) {
+			if (!iterable) {
+				isSuccess = false;
+				break;
+			}
+		}
+		return isSuccess;
+	}
+
+	public class LineView extends View {
+
+		public LineView(Context context) {
+			super(context);
+		}
+
+		@Override
+		protected void onDraw(Canvas canvas) {
+			canvas.drawLine(0, MARGIN_WIDTH, mScreenWidth, MARGIN_WIDTH, mPaint);
+			canvas.drawLine(0, mScreenHeigh / 2 - MARGIN_WIDTH, mScreenWidth,
+					mScreenHeigh / 2 - MARGIN_WIDTH, mPaint);
+			canvas.drawLine(0, mScreenHeigh / 2 + MARGIN_WIDTH, mScreenWidth,
+					mScreenHeigh / 2 + MARGIN_WIDTH, mPaint);
+			canvas.drawLine(0, mScreenHeigh - MARGIN_WIDTH, mScreenWidth,
+					mScreenHeigh - MARGIN_WIDTH, mPaint);
+			canvas.drawText("Please draw on", mScreenWidth / 2, MARGIN_WIDTH,
+					mTextpaint);
+			canvas.drawText("the yellow aera", mScreenWidth / 2, MARGIN_WIDTH*2,
+					mTextpaint);
+			
+			if (mPoints != null && mPoints.size() > 0) {
+				int size = mPoints.size();
+				float lastX = 0, lastY = 0;
+
+				for (int i = 0; i < size; i++) {
+					PT n = mPoints.get(i);
+
+					if (i > 0) {
+						canvas.drawLine(lastX, lastY, n.x, n.y, mTargetPaint);
+						canvas.drawPoint(lastX, lastY, mTargetPaint);
+					}
+					lastX = n.x;
+					lastY = n.y;
+				}
+			}
+		}
+
+		public boolean onTouchEvent(MotionEvent event) {
+			float x = event.getX();
+			float y = event.getY();
+
+			switch (event.getAction()) {
+			case MotionEvent.ACTION_DOWN:
+				clear();
+				isbounds = false;
+				isbounds = checkPoint(y);
+				mVelocity = VelocityTracker.obtain();
+				if (mPoints != null) {
+					mPoints.add(new PT(x, y));
+					invalidate();
+				}
+				break;
+
+			case MotionEvent.ACTION_MOVE:
+				if (!isbounds) {
+					isbounds = checkPoint(y);
+				}
+				mVelocity.addMovement(event);
+				mVelocity.computeCurrentVelocity(10);
+				if (mPoints != null) {
+					mPoints.add(new PT(x, y));
+					invalidate();
+				}
+				break;
+
+			case MotionEvent.ACTION_UP:
+				checkPaint();
+				break;
+			default:
+				clear();
+				break;
+			}
+			return true;
+		}
+
+		void checkPaint() {
+			if (isbounds) {
+				showFailDialog("Pen out of bounds!");
+			} else if (Math.abs(mPoints.get(0).x
+					- mPoints.get(mPoints.size() - 1).x) < mScreenWidth
+					- ERROR_RANGE) {
+				showFailDialog("Line too short!");
+			} else {
+				changLineState(mPoints.get(0).y);
+			}
+
+			if (isSuccess()) {
+				showSuccessDialog();
+			}
+		}
+	}
+
+	protected void showSuccessDialog() {
+		AlertDialog.Builder builder = new Builder(TpOne.this);
+		builder.setMessage("OK!");
+		builder.setTitle("TEST RESULT");
+		builder.setPositiveButton("PASS", new OnClickListener() {
+			@Override
+			public void onClick(DialogInterface dialog, int which) {
+				dialog.dismiss();
+				Intent intent = new Intent(TpOne.this, MMITestDevice.class);
+				setResult(RESULT_OK, intent);
+				finish();
+			}
+		});
+
+		builder.setNegativeButton("FAIL", new OnClickListener() {
+
+			@Override
+			public void onClick(DialogInterface dialog, int which) {
+				clear();
+				Intent intent = new Intent(TpOne.this, MMITestDevice.class);
+				setResult(RESULT_CANCELED, intent);
+				finish();
+				dialog.dismiss();
+			}
+		});
+
+		builder.create().show();
+	}
+
+	protected void showFailDialog(String message) {
+		AlertDialog.Builder builder = new Builder(TpOne.this);
+		builder.setMessage(message);
+
+		builder.setTitle("TEST RESULT");
+
+		builder.setNegativeButton("FAIL", new OnClickListener() {
+
+			@Override
+			public void onClick(DialogInterface dialog, int which) {
+				clear();
+				dialog.dismiss();
+			}
+		});
+
+		builder.create().show();
+	}
+
+	@Override
+	protected void onStop() {
+		super.onStop();
+		if (mPoints != null) {
+			mPoints.clear();
+		}
+	}
+
+	public class PT {
+		public float x;
+		public float y;
+
+		public PT(float x, float y) {
+			this.x = x;
+			this.y = y;
+		}
+	};
+
+	void clear() {
+		if (mPoints != null) {
+			mPoints.clear();
+		}
+
+		if (mVelocity != null) {
+			mVelocity.clear();
+		}
+	}
+	
+	
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		if (MMITestDevice.isAutoTest()) {			
+			return true;
+		}
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable/button_bg_frequency.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable/button_bg_frequency.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable/button_bg_frequency.xml	(revision 1051)
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:drawable="@drawable/button_bg_frequency_enabled" android:state_enabled="true"/>
+    <item android:drawable="@color/button_diabled_color_frequency" android:state_enabled="false"/>
+</selector>
\ No newline at end of file
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable/button_bg_volume_enabled.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable/button_bg_volume_enabled.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable/button_bg_volume_enabled.xml	(revision 1051)
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:drawable="@color/button_color_volume" android:state_pressed="false"/>
+    <item android:drawable="@color/blue" android:state_pressed="true"/>
+</selector>
\ No newline at end of file
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable/background_camera.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable/background_camera.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable/background_camera.xml	(revision 1051)
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2012 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<!-- Copied from framework resource color/primary_text_holo_dark.xml -->
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    
+    <item android:color="@color/background_camera"/> <!-- not selected -->
+</selector>
+
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable/button_bg_volume.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable/button_bg_volume.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable/button_bg_volume.xml	(revision 1051)
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:drawable="@drawable/button_bg_volume_enabled" android:state_enabled="true"/>
+    <item android:drawable="@color/button_diabled_color" android:state_enabled="false"/>
+</selector>
\ No newline at end of file
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable/button_bg_enabled.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable/button_bg_enabled.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable/button_bg_enabled.xml	(revision 1051)
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:drawable="@color/button_color" android:state_pressed="false"/>
+    <item android:drawable="@color/darkOrange" android:state_pressed="true"/>
+</selector>
\ No newline at end of file
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable/button_bg_frequency_enabled.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable/button_bg_frequency_enabled.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable/button_bg_frequency_enabled.xml	(revision 1051)
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:drawable="@color/button_color_frequency" android:state_pressed="false"/>
+    <item android:drawable="@color/blue" android:state_pressed="true"/>
+</selector>
\ No newline at end of file
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable/list_item_bg.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable/list_item_bg.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable/list_item_bg.xml	(revision 1051)
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+   <item android:drawable="@color/black" android:state_pressed="false"/>
+    <item android:drawable="@color/darkOrange" android:state_pressed="true"/>
+</selector>
\ No newline at end of file
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable/button_bg.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable/button_bg.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable/button_bg.xml	(revision 1051)
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:drawable="@drawable/button_bg_enabled" android:state_enabled="true"/>
+    <item android:drawable="@color/button_diabled_color" android:state_enabled="false"/>
+</selector>
\ No newline at end of file
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable-hdpi/down.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable-hdpi/down.png
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable-hdpi/down.png	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable-hdpi/down.png	(revision 1051)

Property changes on: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable-hdpi/down.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable-hdpi/left.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable-hdpi/left.png
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable-hdpi/left.png	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable-hdpi/left.png	(revision 1051)

Property changes on: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable-hdpi/left.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable-hdpi/ic_launcher.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable-hdpi/ic_launcher.png
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable-hdpi/ic_launcher.png	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable-hdpi/ic_launcher.png	(revision 1051)

Property changes on: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable-hdpi/ic_launcher.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable-hdpi/right.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable-hdpi/right.png
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable-hdpi/right.png	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable-hdpi/right.png	(revision 1051)

Property changes on: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable-hdpi/right.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable-hdpi/bg_compasspointer.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable-hdpi/bg_compasspointer.png
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable-hdpi/bg_compasspointer.png	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable-hdpi/bg_compasspointer.png	(revision 1051)

Property changes on: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable-hdpi/bg_compasspointer.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable-hdpi/focus_focused.9.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable-hdpi/focus_focused.9.png
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable-hdpi/focus_focused.9.png	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable-hdpi/focus_focused.9.png	(revision 1051)

Property changes on: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable-hdpi/focus_focused.9.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable-hdpi/face_up.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable-hdpi/face_up.png
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable-hdpi/face_up.png	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable-hdpi/face_up.png	(revision 1051)

Property changes on: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable-hdpi/face_up.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable-hdpi/up.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable-hdpi/up.png
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable-hdpi/up.png	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable-hdpi/up.png	(revision 1051)

Property changes on: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable-hdpi/up.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable-hdpi/face_down.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable-hdpi/face_down.png
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable-hdpi/face_down.png	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable-hdpi/face_down.png	(revision 1051)

Property changes on: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable-hdpi/face_down.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable-mdpi/ic_launcher.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable-mdpi/ic_launcher.png
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable-mdpi/ic_launcher.png	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable-mdpi/ic_launcher.png	(revision 1051)

Property changes on: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable-mdpi/ic_launcher.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/raw/speaker.wav
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/raw/speaker.wav
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/raw/speaker.wav	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/raw/speaker.wav	(revision 1051)

Property changes on: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/raw/speaker.wav
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/raw/speakerr.wav
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/raw/speakerr.wav
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/raw/speakerr.wav	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/raw/speakerr.wav	(revision 1051)

Property changes on: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/raw/speakerr.wav
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/raw/audio1khz.wav
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/raw/audio1khz.wav
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/raw/audio1khz.wav	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/raw/audio1khz.wav	(revision 1051)

Property changes on: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/raw/audio1khz.wav
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/raw/pinknoise.wav
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/raw/pinknoise.wav
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/raw/pinknoise.wav	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/raw/pinknoise.wav	(revision 1051)

Property changes on: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/raw/pinknoise.wav
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/raw/speaker_rio.wav
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/raw/speaker_rio.wav
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/raw/speaker_rio.wav	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/raw/speaker_rio.wav	(revision 1051)

Property changes on: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/raw/speaker_rio.wav
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/raw/receiver.wav
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/raw/receiver.wav
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/raw/receiver.wav	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/raw/receiver.wav	(revision 1051)

Property changes on: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/raw/receiver.wav
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/raw/speakerl.wav
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/raw/speakerl.wav
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/raw/speakerl.wav	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/raw/speakerl.wav	(revision 1051)

Property changes on: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/raw/speakerl.wav
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable-xhdpi/ic_launcher.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable-xhdpi/ic_launcher.png
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable-xhdpi/ic_launcher.png	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable-xhdpi/ic_launcher.png	(revision 1051)

Property changes on: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/drawable-xhdpi/ic_launcher.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_battery.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_battery.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_battery.xml	(revision 1051)
@@ -0,0 +1,65 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:background="@color/black" >
+
+    <include
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentTop="true"
+        layout="@layout/base_title" />
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_centerInParent="true"
+        android:gravity="center"
+        android:orientation="vertical" >
+
+        <TextView
+            android:layout_marginBottom="16dp"
+            android:id="@+id/tv_battery_temp"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:background="@color/transparent"
+            android:gravity="center"
+            android:textColor="@color/font_white"
+            android:textSize="@dimen/base_title_tv_textsize" />
+
+        <TextView
+            android:layout_marginBottom="16dp"
+            android:id="@+id/tv_battery_content"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:background="@color/transparent"
+            android:gravity="center"
+            android:textColor="@color/font_white"
+            android:textSize="@dimen/base_title_tv_textsize" />
+        <TextView
+            android:layout_marginBottom="16dp"
+            android:id="@+id/tv_battery_voltage"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:background="@color/transparent"
+            android:gravity="center"
+            android:textColor="@color/font_white"
+            android:textSize="@dimen/base_title_tv_textsize" />
+         <TextView
+            android:layout_marginBottom="16dp"
+            android:id="@+id/tv_battery_id"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:background="@color/transparent"
+            android:gravity="center"
+            android:textColor="@color/font_white"
+            android:textSize="@dimen/base_title_tv_textsize" />
+    </LinearLayout>
+
+    <include
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentBottom="true"
+        layout="@layout/base_button" />
+
+</RelativeLayout>
\ No newline at end of file
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_keypad.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_keypad.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_keypad.xml	(revision 1051)
@@ -0,0 +1,105 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:background="@color/black"
+    android:orientation="vertical" >
+
+    <include
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentTop="true"
+        layout="@layout/base_title" />
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="vertical"
+        android:layout_centerInParent="true">
+
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:orientation="vertical"
+            android:gravity="right"  >
+
+            <Button
+                android:id="@+id/bt_keypad_power"
+                android:layout_width="80dp"
+                android:layout_height="@dimen/base_bottom_button_height"
+                android:layout_margin="5dp"
+                android:background="@color/white"
+                android:gravity="center"
+                android:textColor="@color/black"
+                android:textSize="@dimen/base_bottom_button_textsize"
+                android:visibility="gone"/>
+
+            <Button
+                android:id="@+id/bt_keypad_volUp"
+                android:layout_width="80dp"
+                android:layout_height="@dimen/base_bottom_button_height"
+                android:layout_margin="5dp"
+                android:background="@color/white"
+                android:gravity="center"
+                android:textColor="@color/black"
+                android:textSize="@dimen/base_bottom_button_textsize" />
+
+            <Button
+                android:id="@+id/bt_keypad_volDown"
+                android:layout_width="80dp"
+                android:layout_height="@dimen/base_bottom_button_height"
+                android:layout_margin="5dp"
+                android:background="@color/white"
+                android:gravity="center"
+                android:textColor="@color/black"
+                android:textSize="@dimen/base_bottom_button_textsize" />
+        </LinearLayout>
+
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:orientation="horizontal" >
+
+            <Button
+                android:id="@+id/bt_keypad_back"
+                android:layout_width="0dp"
+                android:layout_height="@dimen/base_bottom_button_height"
+                android:layout_margin="5dp"
+                android:layout_weight="1"
+                android:background="@color/white"
+                android:gravity="center"
+                android:textColor="@color/black"
+                android:textSize="@dimen/base_bottom_button_textsize" />
+
+            <Button
+                android:id="@+id/bt_keypad_home"
+                android:layout_width="0dp"
+                android:layout_height="@dimen/base_bottom_button_height"
+                android:layout_margin="5dp"
+                android:layout_weight="1"
+                android:background="@color/white"
+                android:gravity="center"
+                android:textColor="@color/black"
+                android:textSize="@dimen/base_bottom_button_textsize" />
+
+            <Button
+                android:id="@+id/bt_keypad_task"
+                android:layout_width="0dp"
+                android:layout_height="@dimen/base_bottom_button_height"
+                android:layout_margin="5dp"
+                android:layout_weight="1"
+                android:background="@color/white"
+                android:gravity="center"
+                android:textColor="@color/black"
+                android:textSize="@dimen/base_bottom_button_textsize" 
+                />
+        </LinearLayout>
+    </LinearLayout>
+
+    <include
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentBottom="true"
+        layout="@layout/base_button" />
+
+</RelativeLayout>
\ No newline at end of file
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_gyro.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_gyro.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_gyro.xml	(revision 1051)
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout android:orientation="vertical"
+  android:layout_width="fill_parent" 
+  android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <TextView 
+		android:textSize="20.0dip" 
+        android:id="@+id/gyro_info" 
+        android:layout_width="wrap_content" 
+        android:layout_height="wrap_content" />
+     <TextView 
+		android:textSize="20.0dip" 
+        android:id="@+id/gsensor_xyz" 
+        android:layout_width="wrap_content" 
+        android:layout_height="wrap_content" />
+    <include
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentBottom="true"
+        layout="@layout/base_button" />
+</LinearLayout>
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_hall.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_hall.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_hall.xml	(revision 1051)
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout 
+ android:orientation="vertical"
+ android:layout_width="fill_parent"
+ android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+		<TextView
+			android:textSize="22.0dip"
+
+			android:id="@+id/hall_tips"
+			android:layout_width="wrap_content"
+			android:layout_height="wrap_content"
+			android:text="@string/Hall_tips" />
+
+	 <include
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentBottom="true"
+        layout="@layout/base_button" />
+</LinearLayout>
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_touch.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_touch.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_touch.xml	(revision 1051)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="fill_parent"
+    android:layout_height="fill_parent"
+    android:orientation="vertical" >
+  
+</LinearLayout>
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_main.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_main.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_main.xml	(revision 1051)
@@ -0,0 +1,53 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:background="@color/black" >
+
+    <include
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentTop="true"
+        layout="@layout/base_title" />
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_centerInParent="true"
+        android:gravity="center"
+        android:orientation="vertical" >
+
+        <TextView
+            android:id="@+id/tv_base_pixi"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:background="@color/transparent"
+            android:gravity="center"
+            android:textColor="@color/font_white"
+            android:textSize="@dimen/base_title_tv_textsize" />
+
+        <TextView
+            android:id="@+id/tv_base_swn"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:background="@color/transparent"
+            android:gravity="center"
+            android:textColor="@color/font_white"
+            android:textSize="@dimen/base_title_tv_textsize" />
+    </LinearLayout>
+
+    <include
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentBottom="true"
+        layout="@layout/base_button" />
+
+    <ListView
+        android:id="@+id/lv_base_testItems"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:divider="@color/divider_color"
+        android:dividerHeight="1px" >
+    </ListView>
+
+</RelativeLayout>
\ No newline at end of file
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_autotestitem.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_autotestitem.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_autotestitem.xml	(revision 1051)
@@ -0,0 +1,73 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:background="@color/black" >
+
+	
+    <include
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentTop="true"
+        layout="@layout/base_title" />
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_centerInParent="true"
+        android:gravity="center"
+        android:orientation="vertical" >
+
+        <TextView
+            android:id="@+id/tv_failed_msg"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:background="@color/transparent"
+            android:gravity="center"
+            android:textColor="@color/font_white"
+            android:textSize="@dimen/base_title_tv_textsize" />
+    </LinearLayout>
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="@dimen/base_bottom_ll_height"
+        android:background="@color/transparent"
+        android:gravity="center"
+		android:layout_alignParentBottom="true"
+        android:orientation="horizontal" >
+
+        <Button
+            android:id="@+id/bt_yes"
+            android:layout_width="0dp"
+            android:layout_height="@dimen/base_bottom_button_height"
+            android:layout_margin="5dp"
+            android:layout_weight="1"
+            android:background="@drawable/button_bg"
+            android:gravity="center"
+            android:textColor="@color/black"
+            android:textSize="@dimen/base_bottom_button_textsize" />
+
+        <Button
+            android:id="@+id/bt_no"
+            android:layout_width="0dp"
+            android:layout_height="@dimen/base_bottom_button_height"
+            android:layout_margin="5dp"
+            android:layout_weight="1"
+            android:background="@drawable/button_bg"
+            android:gravity="center"
+            android:textColor="@color/black"
+            android:textSize="@dimen/base_bottom_button_textsize" />
+
+        <Button
+            android:id="@+id/bt_next"
+            android:layout_width="0dp"
+            android:layout_height="@dimen/base_bottom_button_height"
+            android:layout_margin="5dp"
+            android:layout_weight="1"
+            android:background="@drawable/button_bg"
+            android:gravity="center"
+            android:textColor="@color/black"
+            android:textSize="@dimen/base_bottom_button_textsize" />
+    </LinearLayout>
+
+</RelativeLayout>
\ No newline at end of file
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_tprawdata.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_tprawdata.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_tprawdata.xml	(revision 1051)
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout
+	android:orientation="vertical"
+	android:layout_width="fill_parent"
+	android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+  
+    <TextView 
+		android:textSize="22.0dip"
+		android:id="@+id/tprawdata_tips"
+		android:layout_width="wrap_content"
+		android:layout_height="wrap_content"
+		android:text="@string/tprawdata_tips" />
+	<TextView 
+		android:textSize="22.0dip"
+		android:id="@+id/tprawdata_content"
+		android:layout_width="wrap_content"
+		android:layout_height="wrap_content"
+		android:text="@string/tprawdata_content" />
+		
+    <include
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentBottom="true"
+        layout="@layout/base_button" />
+</LinearLayout>
\ No newline at end of file
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_fingerprint.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_fingerprint.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_fingerprint.xml	(revision 1051)
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout
+	android:orientation="vertical"
+	android:layout_width="fill_parent"
+	android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+  
+    <TextView 
+		android:textSize="22.0dip"
+		android:id="@+id/finger_tips"
+		android:layout_width="wrap_content"
+		android:layout_height="wrap_content"
+		android:text="@string/finger_tips" />
+    <include
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentBottom="true"
+        layout="@layout/base_button" />
+</LinearLayout>
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_camera.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_camera.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_camera.xml	(revision 1051)
@@ -0,0 +1,63 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:background="@color/black" >
+
+    <FrameLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_centerInParent="true"
+        android:orientation="vertical" >
+
+        <SurfaceView
+            android:id="@+id/sv_camera"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent" />
+    </FrameLayout>
+
+    <include
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentTop="true"
+        layout="@layout/base_title" />
+     
+   <TextView
+        android:id="@+id/tv_id"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_marginTop="20dp"
+        android:layout_marginLeft="80dp"
+        />
+
+    <TextView
+        android:id="@+id/tv_pixel"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_toRightOf="@+id/tv_id"
+        android:layout_marginTop="20dp"
+        android:layout_marginRight="0dp"
+        />   
+        
+    <TextView
+        android:id="@+id/tv_otp"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_below="@+id/tv_id"
+        android:layout_marginLeft="140dp"
+        />
+    <ImageView
+        android:id="@+id/focus"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:src="@drawable/focus_focused"
+        android:layout_alignParentBottom="true"
+		android:visibility="invisible"
+         />
+    <include
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentBottom="true"
+        layout="@layout/base_button" />
+
+</RelativeLayout>
\ No newline at end of file
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_lcd_monochrome.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_lcd_monochrome.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_lcd_monochrome.xml	(revision 1051)
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:id="@+id/rl_momochrome"
+    android:background="@color/black" >
+
+    <include
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentBottom="true"
+        layout="@layout/base_button" />
+
+</RelativeLayout>
\ No newline at end of file
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_vibrator.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_vibrator.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_vibrator.xml	(revision 1051)
@@ -0,0 +1,49 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:background="@color/black" >
+
+    <include
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentTop="true"
+        layout="@layout/base_title" />
+
+    <RelativeLayout
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:layout_centerInParent="true"
+        android:layout_marginBottom="@dimen/base_bottom_ll_height"
+        android:layout_marginTop="@dimen/base_title_tv_height" 
+        android:padding="10dp">
+
+        <TextView
+            android:id="@+id/tv_base_pixi"
+            android:layout_width="match_parent"
+            android:layout_height="@dimen/base_title_tv_height"
+            android:layout_centerInParent="true"
+            android:background="@color/transparent"
+            android:gravity="center"
+            android:textColor="@color/font_white"
+            android:textSize="@dimen/base_title_tv_textsize" />
+
+        <Button
+            android:id="@+id/bt_retest"
+            android:layout_alignParentBottom="true"
+            android:layout_width="match_parent"
+            android:layout_height="@dimen/base_bottom_button_height"
+            android:layout_margin="5dp"
+            android:background="@drawable/button_bg"
+            android:gravity="center"
+            android:textColor="@color/black"
+            android:textSize="@dimen/base_bottom_button_textsize" />
+    </RelativeLayout>
+
+    <include
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentBottom="true"
+        layout="@layout/base_button" />
+
+</RelativeLayout>
\ No newline at end of file
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/base_button.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/base_button.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/base_button.xml	(revision 1051)
@@ -0,0 +1,32 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/ll_base_bottom"
+    android:layout_width="match_parent"
+    android:layout_height="@dimen/base_bottom_ll_height"
+    android:background="@color/transparent"
+    android:gravity="center"
+    android:orientation="horizontal" >
+
+    <Button
+        android:id="@+id/bt_base_left"
+        android:layout_width="0dp"
+        android:layout_height="@dimen/base_bottom_button_height"
+        android:layout_margin="5dp"
+        android:layout_weight="1"
+        android:background="@drawable/button_bg"
+        android:gravity="center"
+        android:textColor="@color/black"
+        android:textSize="@dimen/base_bottom_button_textsize" />
+
+    <Button
+        android:id="@+id/bt_base_right"
+        android:layout_width="0dp"
+        android:layout_height="@dimen/base_bottom_button_height"
+        android:layout_margin="5dp"
+        android:layout_weight="1"
+        android:background="@drawable/button_bg"
+        android:gravity="center"
+        android:textColor="@color/black"
+        android:textSize="@dimen/base_bottom_button_textsize" />
+
+</LinearLayout>
\ No newline at end of file
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_usb.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_usb.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_usb.xml	(revision 1051)
@@ -0,0 +1,56 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:background="@color/black" >
+
+    <include
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentTop="true"
+        layout="@layout/base_title" />
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_centerInParent="true"
+        android:gravity="center"
+        android:orientation="vertical" >
+
+        <TextView
+            android:layout_marginBottom="16dp"
+            android:id="@+id/tv_insert_usb"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:background="@color/transparent"
+            android:gravity="center"
+            android:textColor="@color/font_white"
+            android:textSize="@dimen/base_title_tv_textsize" />
+
+        <TextView
+            android:layout_marginBottom="16dp"
+            android:id="@+id/tv_usb_state"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:background="@color/transparent"
+            android:gravity="center"
+            android:textColor="@color/font_white"
+            android:textSize="@dimen/base_title_tv_textsize" />
+        <TextView
+            android:layout_marginBottom="16dp"
+            android:id="@+id/tv_remove_usb"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:background="@color/transparent"
+            android:gravity="center"
+            android:textColor="@color/font_white"
+            android:textSize="@dimen/base_title_tv_textsize" />
+    </LinearLayout>
+
+    <include
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentBottom="true"
+        layout="@layout/base_button" />
+
+</RelativeLayout>
\ No newline at end of file
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_accessory.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_accessory.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_accessory.xml	(revision 1051)
@@ -0,0 +1,82 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:background="#4F4F4F" >
+
+    <include
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentTop="true"
+        layout="@layout/base_title" />
+
+    <LinearLayout
+        android:id="@+id/ll_fm_change_station"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_centerInParent="true"
+        android:layout_marginBottom="@dimen/base_bottom_ll_height"
+        android:layout_marginTop="@dimen/base_title_tv_height"
+        android:padding="10dp" 
+        android:background="@drawable/button_bg_frequency"
+        android:orientation="vertical">
+        
+        <TextView
+            android:id="@+id/tv_fm_station"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:background="@color/transparent"
+            android:gravity="center"
+            android:layout_margin="10dp"
+            android:textColor="@color/font_white"
+            android:textSize="@dimen/base_title_tv_textsize" />
+
+        <Button
+            android:id="@+id/bt_fm_change_station"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:background="@color/transparent"
+            android:gravity="center"
+            android:textColor="@color/font_white"
+            android:layout_margin="25dp"
+            android:textSize="@dimen/base_title_tv_textsize" 
+            android:text="@string/touch_change_frequency"/>
+
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="@dimen/base_bottom_ll_height"
+            android:background="@color/transparent"
+            android:gravity="center"
+            android:orientation="horizontal" >
+
+            <Button
+                android:id="@+id/bt_volume_down"
+                android:layout_width="0dp"
+                android:layout_height="@dimen/base_bottom_button_height"
+                android:layout_margin="5dp"
+                android:layout_weight="1"
+                android:background="@drawable/button_bg_volume"
+                android:gravity="center"
+                android:textColor="@color/font_white"
+                android:textSize="@dimen/base_bottom_button_textsize" />
+
+            <Button
+                android:id="@+id/bt_volume_up"
+                android:layout_width="0dp"
+                android:layout_height="@dimen/base_bottom_button_height"
+                android:layout_margin="5dp"
+                android:layout_weight="1"
+                android:background="@drawable/button_bg_volume"
+                android:gravity="center"
+                android:textColor="@color/font_white"
+                android:textSize="@dimen/base_bottom_button_textsize" />
+        </LinearLayout>
+    </LinearLayout>
+
+    <include
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentBottom="true"
+        layout="@layout/base_button" />
+
+</RelativeLayout>
\ No newline at end of file
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_tplock.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_tplock.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_tplock.xml	(revision 1051)
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout
+	android:orientation="vertical"
+	android:layout_width="fill_parent"
+	android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+  
+    <TextView 
+		android:textSize="22.0dip"
+		android:id="@+id/tplock_tips"
+		android:layout_width="wrap_content"
+		android:layout_height="wrap_content"
+		android:text="@string/tplock_tips" />
+	<TextView 
+		android:textSize="22.0dip"
+		android:id="@+id/tplock_content"
+		android:layout_width="wrap_content"
+		android:layout_height="wrap_content"
+		android:text="@string/tplock_content" />
+	
+    <include
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentBottom="true"
+        layout="@layout/base_button" />
+</LinearLayout>
\ No newline at end of file
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_gradient.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_gradient.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_gradient.xml	(revision 1051)
@@ -0,0 +1,130 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent">
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:orientation="vertical" >
+
+        <TextView
+            android:id="@+id/tv_gradient1"
+            android:layout_width="match_parent"
+            android:layout_height="0dp"
+            android:layout_weight="1"
+            android:background="@color/greya1" />
+
+        <TextView
+            android:id="@+id/tv_gradient2"
+            android:layout_width="match_parent"
+            android:layout_height="0dp"
+            android:layout_weight="1"
+            android:background="@color/greyb1" />
+
+        <TextView
+            android:id="@+id/tv_gradient3"
+            android:layout_width="match_parent"
+            android:layout_height="0dp"
+            android:layout_weight="1"
+            android:background="@color/greyc1" />
+
+        <TextView
+            android:id="@+id/tv_gradient4"
+            android:layout_width="match_parent"
+            android:layout_height="0dp"
+            android:layout_weight="1"
+            android:background="@color/greyd1" />
+
+        <TextView
+            android:id="@+id/tv_gradient5"
+            android:layout_width="match_parent"
+            android:layout_height="0dp"
+            android:layout_weight="1"
+            android:background="@color/greye1" />
+
+        <TextView
+            android:id="@+id/tv_gradient6"
+            android:layout_width="match_parent"
+            android:layout_height="0dp"
+            android:layout_weight="1"
+            android:background="@color/greyf1" />
+
+        <TextView
+            android:id="@+id/tv_gradient7"
+            android:layout_width="match_parent"
+            android:layout_height="0dp"
+            android:layout_weight="1"
+            android:background="@color/greyg1" />
+
+        <TextView
+            android:id="@+id/tv_gradient8"
+            android:layout_width="match_parent"
+            android:layout_height="0dp"
+            android:layout_weight="1"
+            android:background="@color/greyh1" />
+
+        <TextView
+            android:id="@+id/tv_gradient9"
+            android:layout_width="match_parent"
+            android:layout_height="0dp"
+            android:layout_weight="1"
+            android:background="@color/greyi1" />
+
+        <TextView
+            android:id="@+id/tv_gradient10"
+            android:layout_width="match_parent"
+            android:layout_height="0dp"
+            android:layout_weight="1"
+            android:background="@color/greyj1" />
+
+        <TextView
+            android:id="@+id/tv_gradient11"
+            android:layout_width="match_parent"
+            android:layout_height="0dp"
+            android:layout_weight="1"
+            android:background="@color/greyk1" />
+
+        <TextView
+            android:id="@+id/tv_gradient12"
+            android:layout_width="match_parent"
+            android:layout_height="0dp"
+            android:layout_weight="1"
+            android:background="@color/greyl1" />
+
+        <TextView
+            android:id="@+id/tv_gradient13"
+            android:layout_width="match_parent"
+            android:layout_height="0dp"
+            android:layout_weight="1"
+            android:background="@color/greyn1" />
+
+        <TextView
+            android:id="@+id/tv_gradient14"
+            android:layout_width="match_parent"
+            android:layout_height="0dp"
+            android:layout_weight="1"
+            android:background="@color/greym1" />
+
+        <TextView
+            android:id="@+id/tv_gradient15"
+            android:layout_width="match_parent"
+            android:layout_height="0dp"
+            android:layout_weight="1"
+            android:background="@color/greyo1" />
+
+        <TextView
+            android:id="@+id/tv_gradient16"
+            android:layout_width="match_parent"
+            android:layout_height="0dp"
+            android:layout_weight="1"
+            android:background="@color/greyp1" />
+    </LinearLayout>
+
+    <include
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentBottom="true"
+        layout="@layout/base_button" />
+
+</RelativeLayout>
\ No newline at end of file
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/base_title.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/base_title.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/base_title.xml	(revision 1051)
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:orientation="horizontal"
+    android:id="@+id/ll_base_title" >
+
+    <TextView
+        android:id="@+id/tv_base_title"
+        android:layout_width="0dp"
+        android:layout_height="@dimen/base_title_tv_height"
+        android:background="@color/transparent"
+        android:gravity="center"
+        android:textColor="@color/font_white"
+        android:textSize="@dimen/base_title_tv_textsize" 
+        android:layout_weight="1"/>
+
+</LinearLayout>
\ No newline at end of file
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_battery_level.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_battery_level.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_battery_level.xml	(revision 1051)
@@ -0,0 +1,78 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:background="@color/black"
+	 android:id="@+id/rl_battery_level">
+
+    <include
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentTop="true"
+        layout="@layout/base_title" />
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_centerInParent="true"
+        android:gravity="center"
+        android:orientation="vertical" >
+
+        <TextView
+            android:layout_marginBottom="16dp"
+            android:id="@+id/tv_battery_temp"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:background="@color/transparent"
+            android:gravity="center"
+            android:textColor="@color/font_white"
+            android:textSize="@dimen/base_title_tv_textsize" />
+
+        <TextView
+            android:layout_marginBottom="16dp"
+            android:id="@+id/tv_battery_content"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:background="@color/transparent"
+            android:gravity="center"
+            android:textColor="@color/font_white"
+            android:textSize="@dimen/base_title_tv_textsize" />
+        <TextView
+            android:layout_marginBottom="16dp"
+            android:id="@+id/tv_battery_voltage"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:background="@color/transparent"
+            android:gravity="center"
+            android:textColor="@color/font_white"
+            android:textSize="@dimen/base_title_tv_textsize" />
+         <TextView
+            android:layout_marginBottom="16dp"
+            android:id="@+id/tv_battery_id"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:background="@color/transparent"
+            android:gravity="center"
+            android:textColor="@color/font_white"
+            android:textSize="@dimen/base_title_tv_textsize" />
+    </LinearLayout>
+
+	<Button
+            android:layout_alignParentBottom="true"
+            android:id="@+id/power_off"
+            android:layout_width="match_parent"
+            android:layout_height="35dp"
+            android:background="@color/button_color"
+            android:gravity="center"
+			android:text="@string/power_off" 
+			android:textSize="25dp"
+             />
+    <include
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentBottom="true"
+        layout="@layout/base_button" 
+		android:visibility="gone"
+		/>
+
+</RelativeLayout>
\ No newline at end of file
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_compass.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_compass.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_compass.xml	(revision 1051)
@@ -0,0 +1,36 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout
+	android:orientation="vertical"
+	android:layout_width="fill_parent"
+	android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+  
+    <TextView 
+		android:textSize="22.0dip"
+		android:id="@+id/compass_tips"
+		android:layout_width="wrap_content"
+		android:layout_height="wrap_content"
+		android:text="@string/compass_title" />
+		
+ 	<ImageView
+        android:id="@+id/iv_compass"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_centerHorizontal="true"
+        android:layout_centerVertical="true"
+        android:src="@drawable/bg_compasspointer"
+        android:layout_marginLeft="30dp"/>
+        
+	<TextView 
+		android:textSize="22.0dip"
+		android:id="@+id/compass_tips"
+		android:layout_width="wrap_content"
+		android:layout_height="wrap_content"
+		android:text="@string/compass_tips" />
+        
+    <include
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentBottom="true"
+        layout="@layout/base_button" />
+</LinearLayout>
\ No newline at end of file
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_nfc.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_nfc.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_nfc.xml	(revision 1051)
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+  <!--  <LinearLayout android:orientation="vertical"
+	android:layout_width="fill_parent"
+	android:layout_height="fill_parent">
+        <Button
+		android:textSize="25.0dip" 
+                android:id="@id/nfc_bt_ok" 
+                android:layout_width="fill_parent" 
+                android:layout_height="wrap_content" 
+                android:text="@string/Success" 
+                android:layout_weight="0.8" />
+        <Button 
+		android:textSize="25.0dip" 
+                android:id="@id/nfc_bt_failed" 
+                android:layout_width="fill_parent" 
+                android:layout_height="wrap_content" 
+                android:text="@string/Failed" 
+                android:layout_weight="0.2" />
+    </LinearLayout>
+	-->
+	<include
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentBottom="true"
+        layout="@layout/base_button" />
+</LinearLayout>
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_frontcameraflasher.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_frontcameraflasher.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_frontcameraflasher.xml	(revision 1051)
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout
+	android:orientation="vertical"
+	android:layout_width="fill_parent"
+	android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+  
+    <TextView 
+		android:textSize="22.0dip"
+		android:id="@+id/frontcameraflasher_tips"
+		android:layout_width="wrap_content"
+		android:layout_height="wrap_content"
+		android:text="@string/frontcameraflasher_tips" />
+    <include
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentBottom="true"
+        layout="@layout/base_button" />
+</LinearLayout>
\ No newline at end of file
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_base.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_base.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_base.xml	(revision 1051)
@@ -0,0 +1,45 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:background="@color/black" >
+
+    <include
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentTop="true"
+        layout="@layout/base_title" />
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_centerInParent="true"
+        android:gravity="center"
+        android:orientation="vertical" >
+
+        <TextView
+            android:id="@+id/tv_base_pixi"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:background="@color/transparent"
+            android:gravity="center"
+            android:textColor="@color/font_white"
+            android:textSize="@dimen/base_title_tv_textsize" />
+
+        <TextView
+            android:id="@+id/tv_base_swn"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:background="@color/transparent"
+            android:gravity="center"
+            android:textColor="@color/font_white"
+            android:textSize="@dimen/base_title_tv_textsize" />
+    </LinearLayout>
+
+    <include
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentBottom="true"
+        layout="@layout/base_button" />
+
+</RelativeLayout>
\ No newline at end of file
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_call.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_call.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_call.xml	(revision 1051)
@@ -0,0 +1,32 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout android:orientation="vertical" 
+android:layout_width="fill_parent" 
+android:layout_height="fill_parent"
+xmlns:android="http://schemas.android.com/apk/res/android">
+
+  <LinearLayout android:orientation="vertical" 
+	android:layout_width="fill_parent" 
+	android:layout_height="wrap_content">
+	
+      <Button 
+		
+		android:textSize="25.0dip" 
+		android:layout_width="fill_parent"
+		android:layout_height="wrap_content"
+		android:visibility="gone"
+		android:layout_weight="1" />
+		
+      <Button 
+		android:textSize="25.0dip"
+		
+		android:layout_width="fill_parent" 
+		android:layout_height="wrap_content" 
+		android:visibility="gone"
+		android:layout_weight="1" />
+    </LinearLayout>
+	<include
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentBottom="true"
+        layout="@layout/base_button" />
+</RelativeLayout>
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_charger.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_charger.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_charger.xml	(revision 1051)
@@ -0,0 +1,81 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:background="@color/black" >
+
+    <include
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentTop="true"
+        layout="@layout/base_title" />
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_centerInParent="true"
+        android:gravity="center"
+        android:orientation="vertical" >
+
+        <TextView
+            android:layout_margin="20dp"
+            android:id="@+id/insertCharger"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:background="@color/transparent"
+            android:gravity="center"
+            android:textColor="@color/font_white"
+            android:textSize="@dimen/base_title_tv_textsize" />
+
+        <TextView
+            android:id="@+id/batteryVoltage"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:background="@color/transparent"
+            android:gravity="center"
+            android:textColor="@color/font_white"
+            android:textSize="@dimen/base_title_tv_textsize" />
+
+        <TextView
+            android:id="@+id/chargerCurrent"
+            android:layout_width="match_parent"
+            android:layout_height="@dimen/base_title_tv_height"
+            android:background="@color/transparent"
+            android:gravity="center"
+            android:textColor="@color/font_white"
+            android:textSize="@dimen/base_title_tv_textsize" />
+
+        <TextView
+            android:id="@+id/status"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:background="@color/transparent"
+            android:gravity="center"
+            android:textColor="@color/font_white"
+            android:textSize="@dimen/base_title_tv_textsize" />
+
+        <TextView
+            android:id="@+id/scale"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:background="@color/transparent"
+            android:gravity="center"
+            android:textColor="@color/font_white"
+            android:textSize="@dimen/base_title_tv_textsize" />
+        <TextView
+            android:id="@+id/removeCharger"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:background="@color/transparent"
+            android:gravity="center"
+            android:textColor="@color/font_white"
+            android:textSize="@dimen/base_title_tv_textsize" />
+    </LinearLayout>
+
+    <include
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentBottom="true"
+        layout="@layout/base_button" />
+
+</RelativeLayout>
\ No newline at end of file
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/listview_main_item.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/listview_main_item.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/listview_main_item.xml	(revision 1051)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<TextView xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/factor_button"
+    android:layout_width="match_parent"
+    android:layout_height="56dp"
+    android:background="@drawable/list_item_bg"
+    android:gravity="center_vertical"
+    android:minHeight="56dp"
+    android:paddingLeft="15dp"
+    android:textColor="@color/font_white"
+    android:textSize="@dimen/listview_main_tv_textsize" />
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_gsensor.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_gsensor.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_gsensor.xml	(revision 1051)
@@ -0,0 +1,122 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:background="@color/black"
+    android:orientation="vertical" >
+
+    <include
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentTop="true"
+        layout="@layout/base_title" />
+
+    <Button
+        android:id="@+id/bt_gsensor_pcba"
+        android:layout_width="match_parent"
+        android:layout_height="@dimen/base_bottom_button_height"
+        android:layout_margin="5dp"
+        android:background="@drawable/button_bg"
+        android:gravity="center"
+        android:text="@string/bt_pcba"
+        android:textColor="@color/black"
+        android:textSize="@dimen/base_bottom_button_textsize" />
+
+    <RelativeLayout
+        android:id="@+id/rl_gsensor"
+        android:layout_width="match_parent"
+        android:layout_height="0dp"
+        android:layout_weight="1"
+        android:background="@color/white" >
+
+        <TextView
+            android:id="@+id/tv_base_swn"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_alignParentLeft="true"
+            android:layout_centerVertical="true"
+            android:gravity="left"
+            android:textColor="@color/blue"
+            android:textSize="8sp" />
+
+        <ImageView
+            android:id="@+id/iv_up"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_centerInParent="true"
+            android:background="@drawable/up"
+            android:gravity="center" />
+    </RelativeLayout>
+
+    <LinearLayout
+        android:id="@+id/ll_gsensor"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_weight="1"
+        android:background="@color/white"
+        android:gravity="center"
+        android:orientation="vertical" >
+
+        <RelativeLayout
+            android:layout_width="220dp"
+            android:layout_height="220dp" >
+
+            <ImageView
+                android:id="@+id/iv_faceUp"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_alignParentLeft="true"
+                android:layout_alignParentTop="true"
+                android:background="@drawable/face_up" />
+
+            <ImageView
+                android:id="@+id/iv_faceDown"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_alignParentRight="true"
+                android:layout_alignParentTop="true"
+                android:background="@drawable/face_down" />
+
+            <ImageView
+                android:id="@+id/iv_left"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_alignParentLeft="true"
+                android:layout_centerVertical="true"
+                android:background="@drawable/left" />
+
+            <ImageView
+                android:id="@+id/iv_right"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_alignParentRight="true"
+                android:layout_centerVertical="true"
+                android:background="@drawable/right" />
+
+            <ImageView
+                android:id="@+id/iv_down"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_alignParentBottom="true"
+                android:layout_centerHorizontal="true"
+                android:background="@drawable/down" />
+
+            <TextView
+                android:id="@+id/tv_down"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_centerInParent="true"
+                android:gravity="center"
+                android:textColor="@color/font_white"
+                android:textSize="@dimen/base_title_tv_textsize"
+                android:visibility="gone" />
+        </RelativeLayout>
+    </LinearLayout>
+
+    <include
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentBottom="true"
+        layout="@layout/base_button" />
+
+</LinearLayout>
\ No newline at end of file
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_fmradio.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_fmradio.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_fmradio.xml	(revision 1051)
@@ -0,0 +1,80 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/rl_fm_touch_change_frequency"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:background="#4F4F4F" >
+
+    <include
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentTop="true"
+        layout="@layout/base_title" />
+
+    <RelativeLayout
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:layout_centerInParent="true"
+        android:layout_marginBottom="@dimen/base_bottom_ll_height"
+        android:layout_marginTop="@dimen/base_title_tv_height"
+        android:padding="10dp" >
+
+        <TextView
+            android:id="@+id/tv_fm_station"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_centerInParent="true"
+            android:background="@color/transparent"
+            android:gravity="center"
+            android:textColor="@color/font_white"
+            android:textSize="@dimen/base_title_tv_textsize" />
+
+        <TextView
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_alignBottom="@id/tv_fm_station"
+            android:background="@color/transparent"
+            android:gravity="center"
+            android:textColor="@color/font_white"
+            android:textSize="@dimen/base_title_tv_textsize" 
+            android:text="@string/touch_change_frequency"/>
+
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="@dimen/base_bottom_ll_height"
+            android:layout_alignParentBottom="true"
+            android:background="@color/transparent"
+            android:gravity="center"
+            android:orientation="horizontal" >
+
+            <Button
+                android:id="@+id/bt_volume_down"
+                android:layout_width="0dp"
+                android:layout_height="@dimen/base_bottom_button_height"
+                android:layout_margin="5dp"
+                android:layout_weight="1"
+                android:background="@drawable/button_bg"
+                android:gravity="center"
+                android:textColor="@color/black"
+                android:textSize="@dimen/base_bottom_button_textsize" />
+
+            <Button
+                android:id="@+id/bt_volume_up"
+                android:layout_width="0dp"
+                android:layout_height="@dimen/base_bottom_button_height"
+                android:layout_margin="5dp"
+                android:layout_weight="1"
+                android:background="@drawable/button_bg"
+                android:gravity="center"
+                android:textColor="@color/black"
+                android:textSize="@dimen/base_bottom_button_textsize" />
+        </LinearLayout>
+    </RelativeLayout>
+
+    <include
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentBottom="true"
+        layout="@layout/base_button" />
+
+</RelativeLayout>
\ No newline at end of file
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_backlight.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_backlight.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_backlight.xml	(revision 1051)
@@ -0,0 +1,49 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:background="#4F4F4F" >
+
+    <include
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentTop="true"
+        layout="@layout/base_title" />
+
+    <RelativeLayout
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:layout_centerInParent="true"
+        android:layout_marginBottom="@dimen/base_bottom_ll_height"
+        android:layout_marginTop="@dimen/base_title_tv_height" 
+        android:padding="10dp">
+
+        <TextView
+            android:id="@+id/tv_base_pixi"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_centerInParent="true"
+            android:background="@color/transparent"
+            android:gravity="center"
+            android:textColor="@color/font_white"
+            android:textSize="@dimen/base_title_tv_textsize" />
+
+        <Button
+            android:id="@+id/bt_retest"
+            android:layout_alignParentBottom="true"
+            android:layout_width="match_parent"
+            android:layout_height="@dimen/base_bottom_button_height"
+            android:layout_margin="5dp"
+            android:background="@drawable/button_bg"
+            android:gravity="center"
+            android:textColor="@color/black"
+            android:textSize="@dimen/base_bottom_button_textsize" />
+    </RelativeLayout>
+
+    <include
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentBottom="true"
+        layout="@layout/base_button" />
+
+</RelativeLayout>
\ No newline at end of file
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_gps.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_gps.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_gps.xml	(revision 1051)
@@ -0,0 +1,62 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:background="@color/black" >
+
+    <include
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentTop="true"
+        layout="@layout/base_title" />
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_centerInParent="true"
+        android:gravity="center"
+        android:orientation="vertical" >
+
+        <TextView
+            android:id="@+id/gps_state_id"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:background="@color/transparent"
+            android:gravity="center"
+            android:textColor="@color/font_white"
+            android:textSize="@dimen/base_title_tv_textsize" />
+
+        <TextView
+            android:id="@+id/gps_satellite_id"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:background="@color/transparent"
+            android:gravity="center"
+            android:textColor="@color/font_white"
+            android:textSize="@dimen/base_title_tv_textsize" />
+        <TextView
+            android:id="@+id/gps_signal_id"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:background="@color/transparent"
+            android:gravity="center"
+            android:textColor="@color/font_white"
+            android:textSize="@dimen/base_title_tv_textsize" />
+
+        <TextView
+            android:id="@+id/gps_result_id"
+            android:layout_width="match_parent"
+            android:layout_height="@dimen/base_title_tv_height"
+            android:background="@color/transparent"
+            android:gravity="center"
+            android:textColor="@color/font_white"
+            android:textSize="@dimen/base_title_tv_textsize" />
+    </LinearLayout>
+
+    <include
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentBottom="true"
+        layout="@layout/base_button" />
+
+</RelativeLayout>
\ No newline at end of file
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/listview_bt_item.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/listview_bt_item.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/listview_bt_item.xml	(revision 1051)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<TextView xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/factor_button"
+    android:paddingLeft="15dp"
+    android:layout_width="match_parent"
+    android:layout_height="56dp"
+    android:minHeight="56dp"
+    android:gravity="center"
+    android:background="@color/black"
+    android:textColor="@color/font_white"
+    android:textSize="@dimen/listview_main_tv_textsize" />
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_dtv.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_dtv.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_dtv.xml	(revision 1051)
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout
+	android:orientation="vertical"
+	android:layout_width="fill_parent"
+	android:layout_height="fill_parent"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+  
+    <TextView 
+		android:textSize="22.0dip"
+		android:id="@+id/dtv_tips"
+		android:layout_width="wrap_content"
+		android:layout_height="wrap_content"
+		android:text="@string/dtv_tips" />
+    <include
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentBottom="true"
+        layout="@layout/base_button" />
+</LinearLayout>
\ No newline at end of file
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_lightsensor.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_lightsensor.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_lightsensor.xml	(revision 1051)
@@ -0,0 +1,56 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:background="@color/black" >
+
+    <include
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentTop="true"
+        layout="@layout/base_title" />
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_centerInParent="true"
+        android:gravity="center"
+        android:orientation="vertical" >
+
+        <TextView
+            android:layout_marginBottom="16dp"
+            android:id="@+id/tv_light_value"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:background="@color/transparent"
+            android:gravity="center"
+            android:textColor="@color/font_white"
+            android:textSize="@dimen/base_title_tv_textsize" />
+
+        <TextView
+            android:layout_marginBottom="16dp"
+            android:id="@+id/tv_light_dark"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:background="@color/transparent"
+            android:gravity="center"
+            android:textColor="@color/font_white"
+            android:textSize="@dimen/base_title_tv_textsize" />
+        <TextView
+            android:layout_marginBottom="16dp"
+            android:id="@+id/tv_light_bright"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:background="@color/transparent"
+            android:gravity="center"
+            android:textColor="@color/font_white"
+            android:textSize="@dimen/base_title_tv_textsize" />
+    </LinearLayout>
+
+    <include
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentBottom="true"
+        layout="@layout/base_button" />
+
+</RelativeLayout>
\ No newline at end of file
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_lcd.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_lcd.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_lcd.xml	(revision 1051)
@@ -0,0 +1,35 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical" >
+
+    <RelativeLayout
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:layout_weight="1" 
+        android:background="@color/red">
+    </RelativeLayout>
+
+    <RelativeLayout
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:layout_weight="1" 
+        android:background="@color/green">
+    </RelativeLayout>
+
+    
+    <RelativeLayout
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:layout_weight="1" 
+        android:background="@color/blue">
+
+        <include
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_alignParentBottom="true"
+            layout="@layout/base_button" />
+    </RelativeLayout>
+
+</LinearLayout>
\ No newline at end of file
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_proximity.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_proximity.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_proximity.xml	(revision 1051)
@@ -0,0 +1,64 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:background="@color/black" >
+
+    <include
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentTop="true"
+        layout="@layout/base_title" />
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_centerInParent="true"
+        android:gravity="center"
+        android:orientation="vertical" >
+		<TextView
+            android:id="@+id/tv_tips"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:background="@color/transparent"
+            android:gravity="center"
+            android:textColor="@color/font_white"
+            android:textSize="@dimen/base_title_tv_textsize" />
+
+        <TextView
+            android:id="@+id/tv_base_pixi"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:background="@color/transparent"
+            android:gravity="center"
+            android:textColor="@color/font_white"
+            android:textSize="@dimen/base_title_tv_textsize" />
+
+        <TextView
+            android:id="@+id/tv_base_swn"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:background="@color/transparent"
+            android:gravity="center"
+            android:textColor="@color/font_white"
+            android:textSize="@dimen/base_title_tv_textsize" />
+		
+		<TextView
+            android:id="@+id/tv_ps"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:background="@color/transparent"
+            android:gravity="center"
+            android:textColor="@color/font_white"
+            android:textSize="@dimen/base_title_tv_textsize" />		
+			
+			
+    </LinearLayout>
+
+    <include
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentBottom="true"
+        layout="@layout/base_button" />
+
+</RelativeLayout>
\ No newline at end of file
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_bt.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_bt.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/layout/activity_bt.xml	(revision 1051)
@@ -0,0 +1,45 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:background="@color/black" >
+
+    <include
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentTop="true"
+        layout="@layout/base_title" />
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_centerInParent="true"
+        android:gravity="center"
+        android:orientation="vertical" >
+
+        <TextView
+            android:id="@+id/tv_base_pixi"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:background="@color/transparent"
+            android:gravity="center"
+            android:textColor="@color/font_white"
+            android:textSize="@dimen/base_title_tv_textsize" />
+
+        <ListView
+            android:id="@+id/listView1"
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content"
+            android:background="@color/transparent"
+            android:gravity="center"
+            >
+        </ListView>
+    </LinearLayout>
+
+    <include
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentBottom="true"
+        layout="@layout/base_button" />
+
+</RelativeLayout>
\ No newline at end of file
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/values/strings.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/values/strings.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/values/strings.xml	(revision 1051)
@@ -0,0 +1,100 @@
+<resources>
+
+    <string name="app_name">MMITestDevice</string>
+    <string name="phone_name">ALCATEL MOBILE PHONES</string>
+    <string name="pixi_name">A3A PLUS MMITEST</string>
+    <string name="swn_name">SWN:</string>
+    <string name="bt_auto">AUTO</string>
+    <string name="bt_manu">MANU</string>
+    <string name="bt_pass">PASS</string>
+    <string name="bt_fail">FAIL</string>
+    <string name="bt_ok">OK</string>
+    <string name="bt_no">NO</string>
+    <string name="bt_yes">YES</string>
+    <string name="bt_next">Next</string>
+    <string name="bt_pcba">PCBA</string>
+    <string name="bt_retest">RETEST</string>
+    <string name="power_name">Power</string>
+    <string name="volUp_name">Vol Up</string>
+    <string name="volDown_name">Vol Down</string>
+    <string name="back_name">Back</string>
+    <string name="home_name">Home</string>
+    <string name="task_name">Task</string>
+    <string name="camera_led_state">Please check Camera LED</string>
+    <string name="charger_led_state">Please check Charger LED</string>
+    <string name="is_vibrator_on">Is vibrator on ?</string>
+    <string name="test_finished">Test finished</string>
+    <string name="wifi_init_wait">WIFI Initializing ...</string>
+    <string name="wifi_init_fail">WIFI Initializing Fail</string>
+    <string name="wifi_detect_wait">Detecting WIFI network ...</string>
+    <string name="bluetooth_init_wait">Bluetooth Initializing ...</string>
+    <string name="bluetooth_init_fail">Bluetooth Initializing Fail</string>
+    <string name="bluetooth_detect_wait">Searching ...</string>
+    <string name="bluetooth_detect_success" />
+    <string name="bluetooth_detect_fail">No device detected</string>
+    <!-- MMITest Item -->
+    <!-- bug fix:28192 modify by NJ_AM_DCH at 2015-11-04 -->
+    <string name="tracability_name">Tracebility display</string>
+    <string name="tp0_name">TP0</string>
+    <string name="tp1_name">TP1</string>
+    <string name="tp2_name">TP2</string>
+    <string name="lcd_mirergb_name">LCD MIRERGB</string>
+    <string name="lcd_back_name">LCD BLACK</string>
+    <string name="lcd_greychart_name">LCD GREYCHART</string>
+    <string name="lcd_graylevel_name">LCD GRAYLEVEL</string>
+    <string name="lcd_white_name">LCD WHITE</string>
+    <string name="keypad_name">KEYPAD Test</string>
+    <string name="backlight_name">LCD backlight test</string>
+    <string name="camera_name">Camera test</string>
+    <string name="camera_submain_name">Camera SubMain test</string>
+    <string name="autotest_name">AUTOTEST</string>
+    <string name="camera_img_front_name">Front Camera test</string>
+    <string name="camera_led_name">Camera Flasher test</string>
+    <string name="charger_led_name">Charger LED Test</string>
+    <string name="audio_name">Audio elements</string>
+    <string name="vibrator_name">Vibrator Test</string>
+    <string name="accessory_name">Accessories present test</string>
+    <string name="fmradio_name">FMRADIO</string>
+    <string name="charger_name">Charger test</string>
+    <string name="usb_name">USB</string>
+    <string name="gsensor_name">G-sensor test</string>
+    <string name="sensor_name">Light sensor test</string>
+    <string name="proximity_name">Proximity sensor test</string>
+    <string name="sim_card_name">SIM test</string>
+    <string name="sd_card_name">Micro SD test</string>
+    <string name="battery_temp_name">Battery  test</string>
+    <string name="bt_name">Bluetooth test</string>
+    <string name="wifi_name">WIFI test</string>
+    <string name="gps_name">GPS test</string>
+    <string name="factory_reset_name">FACTORY RESET</string>
+	<string name="touch_change_frequency">Touch to change frequency</string>
+	<string name="bt_volume_down">Volume Down</string>
+	<string name="bt_volume_up">Volume Up</string>
+	<string name="fm_low_station">87.500 MHz</string>
+    <string name="fm_height_station">103.600 MHz</string>
+    <string name="calling_name">calling test</string>
+	<string name="gyroscope_name">GyroScope</string>
+	<string name="GSensor_tips">Gsensor check XYZ</string>
+	<string name="Hall_tips">Hall</string>
+	<string name="hall_name">HALL</string>
+	<string name="nfc_name">NFC</string>
+	<string name="finger_tips">Finger Print</string>
+	<string name="finger_name">FingerPrint test</string>
+	<string name="frontcameraflasher_name">Front Camera Flasher test</string>
+	<string name="compass_name">E-Compass test</string>
+	<string name="tprawdata_name">TP RAW DATA</string>
+	<string name="tplock_name">TP LOCK test</string>
+	<string name="dtv_name">TV test</string>
+	<string name="compass_tips">move the phone in an 8 shape first</string>
+	<string name="frontcameraflasher_tips">Front Camera Flasher</string>
+	<string name="dtv_tips">Dtv</string>
+	<string name="tprawdata_tips">Tp Raw Data</string>
+	<string name="tprawdata_content">TP is testing,  Do not touch the screen !</string>
+	<string name="tprawdata_ok">Tp Raw Data Test OK!</string>
+	<string name="tplock_tips">Tp Lock</string>
+	<string name="tplock_content">Please press power button to test !</string>
+	<string name="tv_id_TITIL">id</string>
+	<string name="compass_title">Compass</string>
+	<string name="battery_level_name">Battery level</string>
+	<string name="power_off">power off</string>
+</resources>
\ No newline at end of file
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/values/dimens.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/values/dimens.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/values/dimens.xml	(revision 1051)
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <dimen name="base_title_tv_height">18.0dp</dimen>
+    <dimen name="base_title_tv_textsize">16.0sp</dimen>
+    <dimen name="base_bottom_ll_height">46.0dp</dimen>
+    <dimen name="base_bottom_button_height">36.0dp</dimen>
+    <dimen name="base_bottom_button_textsize">18.0sp</dimen>
+    <dimen name="listview_main_tv_textsize">20.0sp</dimen>
+    
+</resources>
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/values/colors.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/values/colors.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/values/colors.xml	(revision 1051)
@@ -0,0 +1,40 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+
+    <color name="transparent">#00000000</color>
+    <color name="white">#ffffffff</color>
+    <color name="black">#ff000000</color>
+    <color name="darkOrange">#ffff8c00</color>
+    <color name="green">#ff00ff00</color>
+    <color name="red">#ffff0000</color>
+    <color name="blue">#ff0000ff</color>
+    <color name="grey">#ffBEBEBE</color>
+    <color name="divider_color">#ff696969</color>
+    <color name="button_color">#ffB4CDCD</color>
+    <color name="button_color_volume">#ff696969</color>
+    <color name="button_color_frequency">#ff778899</color>
+    <color name="button_diabled_color_frequency">#ff4F4F4F</color>
+    <color name="button_diabled_color">#ff8B8B7A</color>
+    <color name="greya1">#000000</color>
+    <color name="greyb1">#111111</color>
+    <color name="greyc1">#222222</color>
+    <color name="greyd1">#333333</color>
+    <color name="greye1">#444444</color>
+    <color name="greyf1">#555555</color>
+    <color name="greyg1">#666666</color>
+    <color name="greyh1">#777777</color>
+    <color name="greyi1">#888888</color>
+    <color name="greyj1">#999999</color>
+    <color name="greyk1">#aaaaaa</color>
+    <color name="greyl1">#bbbbbb</color>
+    <color name="greyn1">#cccccc</color>
+    <color name="greym1">#dddddd</color>
+    <color name="greyo1">#eeeeee</color>
+    <color name="greyp1">#ffffff</color>
+    
+    <color name="font_white">#ffffffff</color>
+    <color name="font_fail">#ffff0000</color>
+    <color name="font_pass">#ff0000ff</color>
+    <color name="background_camera">#007fa87f</color>
+
+</resources>
\ No newline at end of file
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/values/styles.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/values/styles.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/res/values/styles.xml	(revision 1051)
@@ -0,0 +1,20 @@
+<resources>
+
+    <!--
+        Base application theme, dependent on API level. This theme is replaced
+        by AppBaseTheme from res/values-vXX/styles.xml on newer devices.
+    -->
+    <style name="AppBaseTheme" parent="android:Theme.Light">
+        <!--
+            Theme customizations available in newer API levels can go in
+            res/values-vXX/styles.xml, while customizations related to
+            backward-compatibility can go here.
+        -->
+    </style>
+
+    <!-- Application theme. -->
+    <style name="AppTheme" parent="AppBaseTheme">
+        <!-- All customizations that are NOT specific to a particular API-level can go here. -->
+    </style>
+
+</resources>
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/jni/MMITestDevice.c
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/jni/MMITestDevice.c	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/jni/MMITestDevice.c	(revision 1051)
@@ -0,0 +1,56 @@
+#include <jni.h>
+#include <stdint.h>
+#include <string.h>
+#include <unistd.h>
+#include <errno.h>
+#include <fcntl.h>
+#include <pthread.h>
+#include <stdlib.h>
+#include <sys/ioctl.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <fcntl.h>
+#include <stdio.h>
+
+char const* const LCD_FILE = "/sys/class/leds/lcd-backlight/brightness";
+
+char const* const BUTTON_FILE = "/sys/class/leds/button-backlight/brightness";
+
+void write_int(char const* path, int value) {
+	int fd;
+	fd = open(path, O_RDWR);
+	if (fd >= 0) {
+		char buffer[20];
+		int bytes = snprintf(buffer, sizeof(buffer), "%d\n", value);
+		ssize_t amt = write(fd, buffer, (size_t) bytes);
+		close(fd);
+	}
+}
+
+void Java_com_android_mmi_backlight_Backlight_Bright(JNIEnv *env, jobject thiz) {
+	write_int(BUTTON_FILE, 255);
+	write_int(LCD_FILE, 255);
+}
+
+void Java_com_android_mmi_backlight_Backlight_Dark(JNIEnv *env, jobject thiz) {
+	write_int(BUTTON_FILE, 0);
+	write_int(LCD_FILE, 10);
+}
+
+jstring Java_com_android_mmi_backlight_Backlight_GetBackLightValue(JNIEnv *env,
+		jobject thiz) {
+	char buf[20];
+	int handle;
+	int bytes;
+	handle = open(LCD_FILE, O_RDWR);
+	if (handle >= 0) {
+		bytes = read(handle, buf, 20);
+	}
+    buf[bytes] = '\0';
+	return (*env)->NewStringUTF(env, buf);
+}
+
+void Java_com_android_mmi_backlight_Backlight_SetBackLightValue(JNIEnv *env,
+		jobject thiz, jint value) {
+	write_int(LCD_FILE, value);
+}
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/jni/Android.mk
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/jni/Android.mk	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/jni/Android.mk	(revision 1051)
@@ -0,0 +1,21 @@
+
+LOCAL_PATH := $(call my-dir)
+include $(CLEAR_VARS)
+
+LOCAL_MODULE := libmmitestdevice
+
+LOCAL_SRC_FILES := MMITestDevice.c
+
+LOCAL_MODULE_TAGS := optional
+
+# All of the shared libraries we link against.
+LOCAL_SHARED_LIBRARIES := \
+	libutils
+	
+# Also need the JNI headers.
+LOCAL_C_INCLUDES += \
+	$(JNI_H_INCLUDE) \
+	$(TOP)/device/sprd/common/apps/engineeringmodel/engcs
+
+LOCAL_PRELINK_MODULE := false
+include $(BUILD_SHARED_LIBRARY)
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/Android.mk
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/Android.mk	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/Android.mk	(revision 1051)
@@ -0,0 +1,19 @@
+LOCAL_PATH:= $(call my-dir)
+include $(CLEAR_VARS)
+
+LOCAL_JAVA_LIBRARIES := telephony-common
+
+LOCAL_JAVA_LIBRARIES += mediatek-framework
+
+LOCAL_MODULE_TAGS := optional
+
+LOCAL_SRC_FILES := $(call all-subdir-java-files) 
+
+LOCAL_PACKAGE_NAME := MMITestDevice
+
+LOCAL_CERTIFICATE := platform
+LOCAL_JNI_SHARED_LIBRARIES := libmmitestdevice
+LOCAL_REQUIRED_MODULES := libmmitestdevice
+
+include $(BUILD_PACKAGE)
+include $(call all-makefiles-under,$(LOCAL_PATH))
\ No newline at end of file
Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/AndroidManifest.xml
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/AndroidManifest.xml	(revision 0)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/AndroidManifest.xml	(revision 1051)
@@ -0,0 +1,197 @@
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.android.mmi"
+    android:sharedUserId="android.uid.system"
+    android:versionCode="1"
+    android:versionName="1.0" >
+
+    <uses-sdk
+        android:minSdkVersion="8"
+        android:targetSdkVersion="23" />
+
+    <uses-feature android:name="android.hardware.camera" />
+    <uses-feature android:name="android.hardware.camera.autofocus" />
+
+    <uses-permission android:name="android.permission.WRITE_SETTINGS" />
+    <uses-permission android:name="android.permission.READ_SETTINGS" />
+    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
+    <uses-permission android:name="android.permission.MOUNT_UNMOUNT_FILESYSTEMS" />
+    <uses-permission android:name="android.permission.CALL_PHONE" />
+    <uses-permission android:name="android.permission.CAMERA" />
+    <uses-permission android:name="android.permission.ACCESS_WIFI_STATE" />
+    <uses-permission android:name="android.permission.CHANGE_WIFI_STATE" />
+    <uses-permission android:name="android.permission.MODIFY_PHONE_STATE" />
+    <uses-permission android:name="android.permission.DIAGNOSTIC" />
+    <uses-permission android:name="android.permission.HARDWARE_TEST" />
+    <uses-permission android:name="android.permission.INTERNET" />
+    <uses-permission android:name="android.permission.ACCESS_BLUETOOTH_SHARE" />
+    <uses-permission android:name="android.permission.BLUETOOTH" />
+    <uses-permission android:name="android.permission.BLUETOOTH_ADMIN" />
+    <uses-permission android:name="android.permission.CHANGE_NETWORK_STATE" />
+    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
+    <uses-permission android:name="android.permission.ACCESS_MOCK_LOCATION" />
+    <uses-permission android:name="android.permission.UPDATE_DEVICE_STATS" />
+    <uses-permission android:name="android.permission.MODIFY_AUDIO_SETTINGS" />
+    <uses-permission android:name="android.permission.RESTART_PACKAGES" />
+    <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
+    <uses-permission android:name="android.permission.RECORD_AUDIO" />
+    <uses-permission android:name="android.permission.VIBRATE" />
+    <uses-permission android:name="android.permission.WRITE_SECURE_SETTINGS" />
+    <uses-permission android:name="android.permission.READ_PHONE_STATE" />
+    <uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED" />
+    <uses-permission android:name="android.permission.WAKE_LOCK" />
+    <uses-permission android:name="android.permission.DEVICE_POWER" />
+    <uses-permission android:name="android.permission.DISABLE_KEYGUARD"/> 
+	<uses-permission android:name="android.permission.SHUTDOWN"/>
+    <application
+        android:allowBackup="true"
+        android:icon="@drawable/ic_launcher"
+        android:label="@string/app_name"
+        android:theme="@style/AppTheme" >
+        <activity
+            android:name=".MMITestDevice"
+            android:label="@string/app_name"
+            android:screenOrientation="portrait" >
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+            </intent-filter>
+        </activity>
+		 <activity
+            android:name=".MyAutoTest"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".AutoTestItem"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".accessory.Accessory"
+            android:screenOrientation="portrait" />
+		 <activity
+            android:name=".fmradio.MyFmRadio"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".audio.Audio"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".backlight.Backlight"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".batterytemp.BatteryTemp"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".bt.Bt"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".camera.MyCamera"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".cameraimgfront.CameraImgFront"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".cameraled.CameraLed"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".charger.Charger"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".chargerled.ChargerLed"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".factoryreset.FactoryReset"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".gps.Gps"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".gsensor.Gsensor"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".keypad.Keypad"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".lcdblack.LcdBlack"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".lcdgreychart.LcdGreychart"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".lcdgraylevel.LcdGraylevel"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".lcdmirergb.LcdMireRGB"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".lcdwhite.LcdWhite"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".lightsensor.LightSensor"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".proximity.Proximity"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".sdcard.SdCard"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".simcard.SimCard"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".tpone.TpOne"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".tptwo.TpTwo"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".tpzero.TpZero"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".tracability.Tracability"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".usb.Usb"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".vibrator.MyVibrator"
+            android:screenOrientation="portrait" />
+        <activity
+            android:name=".wifi.Wifi"
+            android:screenOrientation="portrait" />
+			
+ 		<activity
+             android:name=".call.Call"
+             android:screenOrientation="portrait" />
+ 		<activity
+             android:name=".fm.FM"
+             android:screenOrientation="portrait" />
+ 		<activity
+             android:name=".hall.Hall"
+             android:screenOrientation="portrait" />
+ 		<activity
+             android:name=".dtv.Dtv"
+             android:screenOrientation="portrait" />
+ 		<activity
+             android:name=".nfc.Nfc"
+             android:screenOrientation="portrait" />
+ 		<activity
+             android:name=".frontcameraflasher.FrontCameraFlasher"
+             android:screenOrientation="portrait" />
+ 		<activity
+             android:name=".compass.Compass"
+             android:screenOrientation="portrait" />
+ 		<activity
+             android:name=".gyro.Gyro"
+             android:screenOrientation="portrait" />
+ 		<activity
+             android:name=".fingerprint.Fingerprint"
+             android:screenOrientation="portrait" />
+ 		<activity
+             android:name=".tprawdata.TpRawData"
+             android:screenOrientation="portrait" />
+ 		<activity
+             android:name=".tplock.TpLock"
+             android:screenOrientation="portrait" />
+        <activity
+             android:name=".batterylevel.BatteryLevel"
+             android:screenOrientation="portrait" />
+            
+    </application>
+
+</manifest>
\ No newline at end of file
