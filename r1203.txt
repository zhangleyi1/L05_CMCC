Index: frameworks/base/proto/src/metrics_constants.proto
===================================================================
--- frameworks/base/proto/src/metrics_constants.proto	(revision 1202)
+++ frameworks/base/proto/src/metrics_constants.proto	(revision 1203)
@@ -2216,5 +2216,6 @@
     // Add new aosp constants above this line.
     // END OF AOSP CONSTANTS
 	QS_AUDIOPROFILE = 497;
+	QS_DIRAC = 498;
   }
 }
Index: frameworks/base/packages/SystemUI/AndroidManifest.xml
===================================================================
--- frameworks/base/packages/SystemUI/AndroidManifest.xml	(revision 1202)
+++ frameworks/base/packages/SystemUI/AndroidManifest.xml	(revision 1203)
@@ -530,6 +530,14 @@
                 <action android:name="android.intent.action.SHOW_KEYBOARD_SHORTCUTS" />
             </intent-filter>
         </receiver>
+        <!-- Add dirac -->
+         <activity android:name=".dirac.DiracActivity"
+            android:theme="@style/DiracTheme">
+        </activity>
+        <activity android:name=".dirac.HeadsetActivity"
+            android:theme="@style/DiracTheme">
+        </activity>
+        
 		    <!-- Add func settings -->
 		<activity android:name=".funcsetting.FuncSettings"
 			android:theme="@style/FuncTheme">
Index: frameworks/base/packages/SystemUI/src/com/IAADiracService.java
===================================================================
--- frameworks/base/packages/SystemUI/src/com/IAADiracService.java	(revision 0)
+++ frameworks/base/packages/SystemUI/src/com/IAADiracService.java	(revision 1203)
@@ -0,0 +1,205 @@
+/*
+ * This file is auto-generated.  DO NOT MODIFY.
+ * Original file: D:\\project\\Dirac\\app\\src\\main\\aidl\\com\\aa\\dirac\\IAADiracService.aidl
+ */
+package com.aa.dirac;
+public interface IAADiracService extends android.os.IInterface
+{
+/** Local-side IPC implementation stub class. */
+public static abstract class Stub extends android.os.Binder implements com.aa.dirac.IAADiracService
+{
+private static final java.lang.String DESCRIPTOR = "com.aa.dirac.IAADiracService";
+/** Construct the stub at attach it to the interface. */
+public Stub()
+{
+this.attachInterface(this, DESCRIPTOR);
+}
+/**
+ * Cast an IBinder object into an com.aa.dirac.IAADiracService interface,
+ * generating a proxy if needed.
+ */
+public static com.aa.dirac.IAADiracService asInterface(android.os.IBinder obj)
+{
+if ((obj==null)) {
+return null;
+}
+android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);
+if (((iin!=null)&&(iin instanceof com.aa.dirac.IAADiracService))) {
+return ((com.aa.dirac.IAADiracService)iin);
+}
+return new com.aa.dirac.IAADiracService.Stub.Proxy(obj);
+}
+@Override public android.os.IBinder asBinder()
+{
+return this;
+}
+@Override public boolean onTransact(int code, android.os.Parcel data, android.os.Parcel reply, int flags) throws android.os.RemoteException
+{
+switch (code)
+{
+case INTERFACE_TRANSACTION:
+{
+reply.writeString(DESCRIPTOR);
+return true;
+}
+case TRANSACTION_setEffectEnable:
+{
+data.enforceInterface(DESCRIPTOR);
+boolean _arg0;
+_arg0 = (0!=data.readInt());
+this.setEffectEnable(_arg0);
+reply.writeNoException();
+return true;
+}
+case TRANSACTION_getEffectEnable:
+{
+data.enforceInterface(DESCRIPTOR);
+boolean _result = this.getEffectEnable();
+reply.writeNoException();
+reply.writeInt(((_result)?(1):(0)));
+return true;
+}
+case TRANSACTION_setPreset:
+{
+data.enforceInterface(DESCRIPTOR);
+int _arg0;
+_arg0 = data.readInt();
+this.setPreset(_arg0);
+reply.writeNoException();
+return true;
+}
+case TRANSACTION_getPreset:
+{
+data.enforceInterface(DESCRIPTOR);
+int _result = this.getPreset();
+reply.writeNoException();
+reply.writeInt(_result);
+return true;
+}
+}
+return super.onTransact(code, data, reply, flags);
+}
+private static class Proxy implements com.aa.dirac.IAADiracService
+{
+private android.os.IBinder mRemote;
+Proxy(android.os.IBinder remote)
+{
+mRemote = remote;
+}
+@Override public android.os.IBinder asBinder()
+{
+return mRemote;
+}
+public java.lang.String getInterfaceDescriptor()
+{
+return DESCRIPTOR;
+}
+/**
+    		 * set the Dirac Effect on or off
+    		 *
+    		 * @param  enable  set dirac enable or not
+    		 *
+    		 * */
+@Override public void setEffectEnable(boolean activate) throws android.os.RemoteException
+{
+android.os.Parcel _data = android.os.Parcel.obtain();
+android.os.Parcel _reply = android.os.Parcel.obtain();
+try {
+_data.writeInterfaceToken(DESCRIPTOR);
+_data.writeInt(((activate)?(1):(0)));
+mRemote.transact(Stub.TRANSACTION_setEffectEnable, _data, _reply, 0);
+_reply.readException();
+}
+finally {
+_reply.recycle();
+_data.recycle();
+}
+}
+/**
+    		 * get the Dirac Effect on or off
+    		 *
+    		 * @return true if enable ,false if disable
+    		 * */
+@Override public boolean getEffectEnable() throws android.os.RemoteException
+{
+android.os.Parcel _data = android.os.Parcel.obtain();
+android.os.Parcel _reply = android.os.Parcel.obtain();
+boolean _result;
+try {
+_data.writeInterfaceToken(DESCRIPTOR);
+mRemote.transact(Stub.TRANSACTION_getEffectEnable, _data, _reply, 0);
+_reply.readException();
+_result = (0!=_reply.readInt());
+}
+finally {
+_reply.recycle();
+_data.recycle();
+}
+return _result;
+}
+/**
+    		 * set the global mode of audio-control in a new status
+    		 *
+    		 * @param NewPresetID   the new status id that will be set, the detail value see Constant.java
+    		 *
+    		 * */
+@Override public void setPreset(int NewPresetID) throws android.os.RemoteException
+{
+android.os.Parcel _data = android.os.Parcel.obtain();
+android.os.Parcel _reply = android.os.Parcel.obtain();
+try {
+_data.writeInterfaceToken(DESCRIPTOR);
+_data.writeInt(NewPresetID);
+mRemote.transact(Stub.TRANSACTION_setPreset, _data, _reply, 0);
+_reply.readException();
+}
+finally {
+_reply.recycle();
+_data.recycle();
+}
+}
+@Override public int getPreset() throws android.os.RemoteException
+{
+android.os.Parcel _data = android.os.Parcel.obtain();
+android.os.Parcel _reply = android.os.Parcel.obtain();
+int _result;
+try {
+_data.writeInterfaceToken(DESCRIPTOR);
+mRemote.transact(Stub.TRANSACTION_getPreset, _data, _reply, 0);
+_reply.readException();
+_result = _reply.readInt();
+}
+finally {
+_reply.recycle();
+_data.recycle();
+}
+return _result;
+}
+}
+static final int TRANSACTION_setEffectEnable = (android.os.IBinder.FIRST_CALL_TRANSACTION + 0);
+static final int TRANSACTION_getEffectEnable = (android.os.IBinder.FIRST_CALL_TRANSACTION + 1);
+static final int TRANSACTION_setPreset = (android.os.IBinder.FIRST_CALL_TRANSACTION + 2);
+static final int TRANSACTION_getPreset = (android.os.IBinder.FIRST_CALL_TRANSACTION + 3);
+}
+/**
+    		 * set the Dirac Effect on or off
+    		 *
+    		 * @param  enable  set dirac enable or not
+    		 *
+    		 * */
+public void setEffectEnable(boolean activate) throws android.os.RemoteException;
+/**
+    		 * get the Dirac Effect on or off
+    		 *
+    		 * @return true if enable ,false if disable
+    		 * */
+public boolean getEffectEnable() throws android.os.RemoteException;
+/**
+    		 * set the global mode of audio-control in a new status
+    		 *
+    		 * @param NewPresetID   the new status id that will be set, the detail value see Constant.java
+    		 *
+    		 * */
+public void setPreset(int NewPresetID) throws android.os.RemoteException;
+public int getPreset() throws android.os.RemoteException;
+}
Index: frameworks/base/packages/SystemUI/src/com/android/systemui/dirac/ItemDialog.java
===================================================================
--- frameworks/base/packages/SystemUI/src/com/android/systemui/dirac/ItemDialog.java	(revision 0)
+++ frameworks/base/packages/SystemUI/src/com/android/systemui/dirac/ItemDialog.java	(revision 1203)
@@ -0,0 +1,78 @@
+package com.android.systemui.dirac;
+
+
+import android.content.Context;
+import android.graphics.drawable.ColorDrawable;
+import android.support.v7.widget.LinearLayoutManager;
+import android.support.v7.widget.RecyclerView;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.widget.PopupWindow;
+import android.widget.TextView;
+import com.android.systemui.R;
+import java.util.List;
+
+
+/**
+ * Created by Administrator on 2017/10/16.
+ */
+public class ItemDialog extends PopupWindow {
+	private Context mContext;
+	public static ItemDialog dialog;
+	public OnCheckedChangeListener listener;
+	private TextView mTitle;
+	private final RecyclerView mRecyclerView;
+	private  View view;
+	
+	public ItemDialog(Context context) {
+		super(context);
+		LayoutInflater inflater = (LayoutInflater) context.getSystemService(context.LAYOUT_INFLATER_SERVICE);
+		view = inflater.inflate(R.layout.dialog_view, null);
+		setContentView(view);
+		this.setFocusable(true);
+		this.setOutsideTouchable(true);
+		int colors = context.getResources().getColor(R.color.white);
+	//		  ColorDrawable color=new ColorDrawable(0000000000);
+		ColorDrawable color = new ColorDrawable(colors);
+		this.setBackgroundDrawable(color);
+		this.setAnimationStyle(R.style.AnimationPreview);
+		mContext=context;
+		mTitle = (TextView)view. findViewById(R.id.title);
+		mRecyclerView = (RecyclerView)view. findViewById(R.id.recycler_view);
+		mRecyclerView.setLayoutManager(new LinearLayoutManager(context,LinearLayoutManager.VERTICAL,false));
+	}
+	public void show(View v){
+		v.measure(View.MeasureSpec.UNSPECIFIED, View.MeasureSpec.UNSPECIFIED);
+		int  mShowMorePopupWindowWidth = -v.getMeasuredWidth();
+		int  mShowMorePopupWindowHeight = -v.getMeasuredHeight();
+		showAsDropDown(v,mShowMorePopupWindowWidth-40,mShowMorePopupWindowHeight);
+	}
+	public interface OnCheckedChangeListener{
+		void setOnCheckedChangeListener(String title);
+	}
+	
+	public static ItemDialog newInstance(Context context){
+		if(dialog==null)
+			 dialog = new ItemDialog(context);
+		return dialog;
+	}
+	public	void setOnCheckedChangeListener(OnCheckedChangeListener listener){
+		this.listener=listener;
+	}
+	public void setData(String title,List<ItemInfo> list){
+		mTitle.setText(title);
+		DialogItemAdapter adapter=new DialogItemAdapter(mContext,list);
+		adapter.setOnAdapterListener(new DialogItemAdapter.OnAdapterListener() {
+			@Override
+			public void setOnAdapterListener(String title) {
+				 if(listener!=null)
+					listener.setOnCheckedChangeListener(title);
+					dismiss();
+			}
+		 });
+		 mRecyclerView.setAdapter(adapter);
+	  }
+	
+}
+
+
Index: frameworks/base/packages/SystemUI/src/com/android/systemui/dirac/DialogItemAdapter.java
===================================================================
--- frameworks/base/packages/SystemUI/src/com/android/systemui/dirac/DialogItemAdapter.java	(revision 0)
+++ frameworks/base/packages/SystemUI/src/com/android/systemui/dirac/DialogItemAdapter.java	(revision 1203)
@@ -0,0 +1,93 @@
+package com.android.systemui.dirac;
+
+import android.content.Context;
+import android.support.v7.widget.RecyclerView;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.CheckBox;
+import android.widget.CompoundButton;
+import android.widget.LinearLayout;
+import android.widget.RelativeLayout;
+import android.widget.TextView;
+import android.widget.Toast;
+import com.android.systemui.R;
+import java.util.List;
+
+/**
+ * Created by Administrator on 2017/10/16.
+ */
+
+public class DialogItemAdapter extends RecyclerView.Adapter<DialogItemAdapter.ItemHolder> {
+    private Context mContext;
+    private List<ItemInfo> mList;
+    private OnAdapterListener mListener;
+
+    public DialogItemAdapter(Context context, List<ItemInfo> list) {
+        mContext = context;
+        mList = list;
+    }
+
+    public void setOnAdapterListener(OnAdapterListener listener) {
+        mListener = listener;
+    }
+
+    public interface OnAdapterListener {
+        void setOnAdapterListener(String title);
+    }
+
+    @Override
+    public ItemHolder onCreateViewHolder(ViewGroup parent, int viewType) {
+        View view = LayoutInflater.from(mContext).inflate(R.layout.item_dialog, parent, false);
+        return new ItemHolder(view);
+    }
+
+    @Override
+    public void onBindViewHolder(ItemHolder holder, final int position) {
+        holder.title.setText(mList.get(position).getTitle());
+        /*if(mList.get(position).isCheck()){
+            holder.checkItem.setChecked(true);
+        }else{
+            holder.checkItem.setChecked(false);
+        }*/
+        holder.item.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                if(!mList.get(position).isCheck()){
+                    for (int i = 0; i < mList.size(); i++) {
+                        ItemInfo itemInfo= mList.get(i);
+                        if(i==position){
+                            itemInfo.setCheck(true);
+                        }else{
+                            itemInfo.setCheck(false);
+                        }
+                    }
+                    if (mListener != null) {
+                        mListener.setOnAdapterListener(mList.get(position).getTitle());
+
+                    }
+                }
+
+//notifyDataSetChanged();
+            }
+        });
+    }
+
+    @Override
+    public int getItemCount() {
+        return mList.size();
+    }
+
+    public class ItemHolder extends RecyclerView.ViewHolder {
+		LinearLayout item;
+        TextView title;
+        //CheckBox checkItem;
+
+        public ItemHolder(View itemView) {
+            super(itemView);
+			item = (LinearLayout) itemView.findViewById(R.id.item);
+            title = (TextView) itemView.findViewById(R.id.title);
+            //checkItem = (CheckBox) itemView.findViewById(R.id.item_check);
+        }
+    }
+}
Index: frameworks/base/packages/SystemUI/src/com/android/systemui/dirac/DiracActivity.java
===================================================================
--- frameworks/base/packages/SystemUI/src/com/android/systemui/dirac/DiracActivity.java	(revision 0)
+++ frameworks/base/packages/SystemUI/src/com/android/systemui/dirac/DiracActivity.java	(revision 1203)
@@ -0,0 +1,214 @@
+package com.android.systemui.dirac;
+
+import android.support.v7.app.AppCompatActivity;
+import android.os.Bundle;
+import android.support.v7.widget.LinearLayoutManager;
+import android.support.v7.widget.RecyclerView;
+import android.support.v7.widget.Toolbar;
+import android.view.View;
+import android.widget.CompoundButton;
+import android.widget.Switch;
+import android.widget.TextView;
+import com.android.systemui.R;
+import java.util.ArrayList;
+import java.util.List;
+import android.content.Context;
+import android.widget.Toast;
+import com.aa.dirac.IAADiracService;
+import android.os.RemoteException;
+import android.util.Log;
+
+public class DiracActivity extends AppCompatActivity {
+
+    private RecyclerView mRecyclerView;
+    private TextView mSwitchContont;
+    private Switch mSwitch;
+    private TextView mSwitchOff;
+	private String mOn;
+	private String mOff;
+	private Context mContext;
+	private ItemDialog dialog;
+	
+	private IAADiracService  mDiracService;
+	private SharedPreferencesUtil mSp;
+	private DiracTuneManager mDiracTuneManager;
+	private List<ItemInfo> mList;
+	private DiracAdapter mAdapter;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_dirac);
+	
+        initActionBar();
+		initDirac();
+
+    }
+	private void initDirac() {
+		mSp = SharedPreferencesUtil.instance(this);
+        DiracTuneManager.BindSuccessCallback mBindSuccessCallback = new DiracTuneManager.BindSuccessCallback() {
+            public void onBindSuccess(IAADiracService service) {
+                mDiracService = service;
+                try {
+                    initView(mDiracService.getEffectEnable());
+                    initListener();
+                    initData();
+					
+                } catch (RemoteException e) {
+                    e.printStackTrace();
+                }
+
+            }
+
+            @Override
+            public void onBindError() {
+                Log.d("fangyi","onBindError");
+            }
+        };
+        mDiracTuneManager = DiracTuneManager.getInstance(this);
+
+        mDiracTuneManager.setBindSuccessCallback(mBindSuccessCallback);
+        mDiracTuneManager.bindDiracService(this);
+    }
+    private void initListener() {
+        mSwitch.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
+            @Override
+            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
+                if(isChecked){
+                    mSwitchContont.setText(mOn);
+                    mSwitch.setChecked(true);
+                    mRecyclerView.setVisibility(View.VISIBLE);
+                    mSwitchOff.setVisibility(View.GONE);
+					mDiracTuneManager.bindDiracService(mContext);
+                }else{
+                    mSwitchContont.setText(mOff);
+                    mSwitch.setChecked(false);
+                    mRecyclerView.setVisibility(View.GONE);
+                    mSwitchOff.setVisibility(View.VISIBLE);
+					mDiracTuneManager.unBindDiracService(mContext);
+                }
+				try {
+                    mDiracService.setEffectEnable(isChecked);
+					mSp.putBoolean(Constant.DIRAC_SWITCH,isChecked);
+                } catch (RemoteException e) {
+                    e.printStackTrace();
+                }
+            }
+        });
+    }
+
+    private void initData() {
+		
+        mList=new ArrayList<>();
+        ItemInfo info=new ItemInfo(getString(R.string.headset),ItemInfo.TITLE_INDEX);
+        mList.add(info);
+        String[] title={getString(R.string.dirac_auto),getString(R.string.dirac_music),
+                getString(R.string.dirac_movie),getString(R.string.dirac_game)};
+		
+        int modeNum=mSp.getInt(Constant.DIRAC_MODE,Constant.DIRAC_MODE_AUTO);
+        for (int i=0;i<title.length;i++){
+            info=new ItemInfo();
+            info.setTitle(title[i]);
+            info.setIndex(ItemInfo.CONTENT_INDEX);
+            info.setCheck(false);            
+            mList.add(info);
+        }
+		 mList.get(2).setContent(mSp.getString(Constant.DIRAC_MUSIC_MODE,"Dance"));
+		if(modeNum==Constant.DIRAC_MODE_AUTO){
+            mList.get(1).setCheck(true);
+        }else if(modeNum==Constant.DIRAC_MODE_MUSIC){
+            mList.get(2).setCheck(true);
+			 mList.get(2).setContent(mSp.getString(Constant.DIRAC_MUSIC_MODE,"Dance"));
+        }else if(modeNum==Constant.DIRAC_MODE_MOVIE){
+            mList.get(3).setCheck(true);
+        }else if(modeNum==Constant.DIRAC_MODE_GAME){
+            mList.get(4).setCheck(true);
+        }else{
+            mList.get(1).setCheck(true);
+        }
+        info=new ItemInfo(getString(R.string.headset_brand),ItemInfo.TITLE_INDEX);
+        mList.add(info);
+        info=new ItemInfo(getString(R.string.headset_brand_item),ItemInfo.FOOTER_INDEX);
+        info.setContent(mSp.getString(Constant.DIRAC_DEFAULT_HEADSET,"AKG K374"));
+        mList.add(info);
+       setData();
+
+    }
+	private void setData() {
+		mAdapter=new DiracAdapter(this,mList,mDiracService);
+			   
+			   mAdapter.setShowDialogListener(new DiracAdapter.ShowDialogListener() {
+				   @Override
+				   public void showDialogListener(View view ,String title, List<ItemInfo> list) {
+					   dialog.setData(title,list);
+					   dialog.show(view);
+				   }
+			   });
+			   mRecyclerView.setAdapter(mAdapter);
+
+	}
+
+    private void initView(boolean isShow) {
+        mRecyclerView = (RecyclerView) findViewById(R.id.recycler_view);
+        mRecyclerView.setLayoutManager(new LinearLayoutManager(this, LinearLayoutManager.VERTICAL, false));
+        mSwitchContont = (TextView) findViewById(R.id.switch_contont);
+        mSwitch = (Switch) findViewById(R.id.switch_dirac);
+        mSwitchOff = (TextView) findViewById(R.id.dirac_off);
+		mSwitchOff.setText(getString(R.string.audio_off));
+		
+        
+		mOn = getString(R.string.switch_on);
+        mOff = getString(R.string.switch_off);
+
+        if(isShow){
+            mSwitchContont.setText(mOn);
+            mSwitch.setChecked(true);
+            mRecyclerView.setVisibility(View.VISIBLE);
+            mSwitchOff.setVisibility(View.GONE);
+			
+        }else{
+            mSwitchContont.setText(mOff);
+            mSwitch.setChecked(false);
+            mRecyclerView.setVisibility(View.GONE);
+            mSwitchOff.setVisibility(View.VISIBLE);
+        }
+		dialog=  ItemDialog.newInstance(mContext);
+        dialog.setOnCheckedChangeListener(new ItemDialog.OnCheckedChangeListener() {
+            @Override
+            public void setOnCheckedChangeListener(String title) {
+                Toast.makeText(mContext,title,1).show();
+				mSp.putString(Constant.DIRAC_MUSIC_MODE,title);
+				updateData();
+            }
+        });
+
+    }
+
+    private void initActionBar() {
+        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
+        String title=getString(R.string.audio_title);
+        toolbar.setTitle(title);
+        setSupportActionBar(toolbar);
+        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
+        toolbar.setNavigationOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                finish();
+            }
+        });
+		mContext = this;
+    }
+	private void updateData(){
+		if(mList!=null&&mList.size()>0&&mAdapter!=null){
+			Log.d("fangyi","restart===="+mSp.getString(Constant.DIRAC_DEFAULT_HEADSET,"AKG K374"));
+			initData();
+            mAdapter.notifyDataSetChanged();
+        }
+	}
+	 @Override
+    protected void onRestart() {
+        super.onRestart();
+        updateData();
+    }
+
+}
Index: frameworks/base/packages/SystemUI/src/com/android/systemui/dirac/DiracAdapter.java
===================================================================
--- frameworks/base/packages/SystemUI/src/com/android/systemui/dirac/DiracAdapter.java	(revision 0)
+++ frameworks/base/packages/SystemUI/src/com/android/systemui/dirac/DiracAdapter.java	(revision 1203)
@@ -0,0 +1,192 @@
+package com.android.systemui.dirac;
+
+
+import android.content.Context;
+import android.support.v7.widget.RecyclerView;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.CheckBox;
+import android.widget.CompoundButton;
+import android.widget.LinearLayout;
+import android.widget.RelativeLayout;
+import android.widget.TextView;
+import android.widget.Toast;
+import com.android.systemui.dirac.HeadsetActivity;
+import com.android.systemui.R;
+import java.util.List;
+import android.content.Intent;
+import com.aa.dirac.IAADiracService;
+import android.os.RemoteException;
+import android.widget.ImageView;
+import android.content.ContentResolver;
+import android.provider.Settings;
+import android.util.Log;
+
+
+
+/**
+ * Created by Administrator on 2017/10/16.
+ */
+
+public class DiracAdapter extends RecyclerView.Adapter<DiracAdapter.ItemHolder> {
+    private Context mContext;
+    private List<ItemInfo> mList;
+    private ItemDialog dialog;
+	private ShowDialogListener mListener;
+	private final SharedPreferencesUtil mSp;
+    private IAADiracService mDiracService;
+	private ContentResolver mContentResolver;
+
+	public interface ShowDialogListener{
+		void showDialogListener(View view,String title,List<ItemInfo> list);
+	
+	}
+	public void setShowDialogListener(ShowDialogListener listener){
+		mListener=listener;
+	}
+
+    public DiracAdapter(Context context, List<ItemInfo> list,IAADiracService diracService) {
+        mContext = context;
+        mList = list;
+        dialog=  ItemDialog.newInstance(mContext);
+		mDiracService=diracService;
+        mSp = SharedPreferencesUtil.instance(context);
+		mContentResolver = mContext.getContentResolver();
+
+    }
+
+    @Override
+    public int getItemViewType(int position) {
+        int viewType = mList.get(position).getIndex();
+        return viewType;
+    }
+
+    @Override
+    public ItemHolder onCreateViewHolder(ViewGroup parent, int viewType) {
+        View view = null;
+        if (viewType == ItemInfo.TITLE_INDEX)
+            view = LayoutInflater.from(mContext).inflate(R.layout.item_title, parent, false);
+        else if (viewType == ItemInfo.CONTENT_INDEX)
+            view = LayoutInflater.from(mContext).inflate(R.layout.item_content, parent, false);
+        else if (viewType == ItemInfo.FOOTER_INDEX)
+            view = LayoutInflater.from(mContext).inflate(R.layout.item_footer, parent, false);
+        return new ItemHolder(view, viewType);
+    }
+
+    @Override
+    public void onBindViewHolder(ItemHolder holder, final int position) {
+       final ItemInfo info = mList.get(position);
+
+        if (info.getIndex() == ItemInfo.TITLE_INDEX) {
+            holder.title.setText(info.getTitle());
+        } else if (info.getIndex() == ItemInfo.CONTENT_INDEX) {
+            
+            holder.title.setText(info.getTitle());
+			
+            
+            if (info.isCheck()) {
+                if(info.getTitle().equals(mContext.getString(R.string.dirac_music))){
+                	holder.displayDetails.setVisibility(View.VISIBLE);
+					holder.item.setText(info.getContent());
+					Log.d("fangyi","content"+info.getContent());
+            	}else{
+                	holder.displayDetails.setVisibility(View.GONE);
+            	}
+                holder.checkItem.setChecked(true);
+            } else {
+                holder.displayDetails.setVisibility(View.GONE);
+                holder.checkItem.setChecked(false);
+            }
+            holder.checkItem.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
+                @Override
+                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
+                    if (isChecked) {
+                        for (int i = 0; i < mList.size(); i++) {
+                            ItemInfo itemInfo= mList.get(i);
+                            if(i==position){
+                                itemInfo.setCheck(true);
+                            }else{
+                                itemInfo.setCheck(false);
+                            }
+                        }
+                        String mode=mList.get(position).getTitle();
+                        int modeNum=-1;
+						String modeText="";
+                        if(mode.equals(mContext.getString(R.string.dirac_auto))){
+                            modeNum=Constant.DIRAC_MODE_AUTO;
+							modeText="auto";
+                        }else if(mode.equals(mContext.getString(R.string.dirac_music))){
+                            modeNum=Constant.DIRAC_MODE_MUSIC;
+							modeText="music";
+                        }else if(mode.equals(mContext.getString(R.string.dirac_movie))){
+                            modeNum=Constant.DIRAC_MODE_MOVIE;
+							modeText="movie";
+                        }else if(mode.equals(mContext.getString(R.string.dirac_game))){
+                            modeNum=Constant.DIRAC_MODE_GAME;
+							modeText="game";
+                        }
+						
+                        try {
+                            mDiracService.setPreset(modeNum);
+							Settings.System.putString(mContentResolver,Constant.DIRAC_MODE,modeText);
+                        	mSp.putInt(Constant.DIRAC_MODE,modeNum);
+                        } catch (RemoteException e) {
+                            e.printStackTrace();
+                        }
+                        notifyDataSetChanged();
+                    }
+					
+                }
+            });
+            holder.displayDetails.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    mListener.showDialogListener(holder.title,info.getTitle(),mList);
+                }
+            });
+
+        } else if (info.getIndex() == ItemInfo.FOOTER_INDEX) {
+            holder.title.setText(info.getTitle());
+            holder.item.setText(info.getContent());
+            holder.footerItemClick.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    mContext.startActivity(new Intent(mContext,HeadsetActivity.class));
+                }
+            });
+        }
+    }
+
+    @Override
+    public int getItemCount() {
+        return mList.size();
+    }
+
+    public class ItemHolder extends RecyclerView.ViewHolder {
+        TextView title;
+        TextView item;
+        CheckBox checkItem;
+        RelativeLayout contentItemClick;
+        LinearLayout footerItemClick;
+        LinearLayout displayDetails;
+        ImageView downView;
+        public ItemHolder(View itemView, int viewType) {
+            super(itemView);
+            if (viewType == ItemInfo.TITLE_INDEX) {
+                title = (TextView) itemView.findViewById(R.id.title);
+            } else if (viewType == ItemInfo.CONTENT_INDEX) {
+                contentItemClick = (RelativeLayout) itemView.findViewById(R.id.item_click);
+                displayDetails = (LinearLayout) itemView.findViewById(R.id.display_details);
+                checkItem = (CheckBox) itemView.findViewById(R.id.item_check);
+                title = (TextView) itemView.findViewById(R.id.title);
+                item = (TextView) itemView.findViewById(R.id.item);
+                downView = (ImageView) itemView.findViewById(R.id.downView);
+            } else if (viewType == ItemInfo.FOOTER_INDEX) {
+                footerItemClick = (LinearLayout) itemView.findViewById(R.id.item_click);
+                title = (TextView) itemView.findViewById(R.id.footer_title);
+                item = (TextView) itemView.findViewById(R.id.footer_content);
+            }
+        }
+    }
+}
Index: frameworks/base/packages/SystemUI/src/com/android/systemui/dirac/HeadsetBrandAdapter.java
===================================================================
--- frameworks/base/packages/SystemUI/src/com/android/systemui/dirac/HeadsetBrandAdapter.java	(revision 0)
+++ frameworks/base/packages/SystemUI/src/com/android/systemui/dirac/HeadsetBrandAdapter.java	(revision 1203)
@@ -0,0 +1,86 @@
+package com.android.systemui.dirac;
+
+import android.content.Context;
+import android.support.v7.widget.RecyclerView;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.CheckBox;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import java.util.List;
+import com.android.systemui.R;
+
+import com.android.systemui.dirac.ItemInfo;
+
+
+/**
+ * Created by Administrator on 2017/10/16.
+ */
+
+public class HeadsetBrandAdapter extends RecyclerView.Adapter<HeadsetBrandAdapter.ItemHolder> {
+    private Context mContext;
+    private List<ItemInfo> mList;
+	private  SharedPreferencesUtil mSp;
+
+    public HeadsetBrandAdapter(Context context, List<ItemInfo> list) {
+        mContext = context;
+        mList = list;
+		mSp = SharedPreferencesUtil.instance(context);
+    }
+
+
+    @Override
+    public ItemHolder onCreateViewHolder(ViewGroup parent, int viewType) {
+        View view = LayoutInflater.from(mContext).inflate(R.layout.item_headset_brand, parent, false);
+        return new ItemHolder(view);
+    }
+
+    @Override
+    public void onBindViewHolder(ItemHolder holder, final int position) {
+       ItemInfo info= mList.get(position);
+        holder.title.setText(info.getTitle());
+        if(info.isCheck()){
+            holder.title.setTextColor(mContext.getResources().getColor(R.color.colorPrimary));
+            holder.checkItem.setVisibility(View.VISIBLE);
+        }else{
+            holder.checkItem.setVisibility(View.GONE);
+            holder.title.setTextColor(mContext.getResources().getColor(R.color.gray));
+        }
+        holder.item.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                for (int i = 0; i < mList.size(); i++) {
+                    ItemInfo itemInfo= mList.get(i);
+                    if(i==position){
+                        itemInfo.setCheck(true);
+						mSp.putString(Constant.DIRAC_DEFAULT_HEADSET,itemInfo.getTitle());
+						
+                    }else{
+                        itemInfo.setCheck(false);
+                    }
+                }
+                notifyDataSetChanged();
+            }
+        });
+    }
+
+    @Override
+    public int getItemCount() {
+        return mList.size();
+    }
+
+    public class ItemHolder extends RecyclerView.ViewHolder {
+        TextView title;
+        ImageView checkItem;
+        LinearLayout item;
+        public ItemHolder(View itemView) {
+            super(itemView);
+            title = (TextView) itemView.findViewById(R.id.title);
+            checkItem = (ImageView) itemView.findViewById(R.id.headset_check);
+            item = (LinearLayout) itemView.findViewById(R.id.item);
+        }
+    }
+}
Index: frameworks/base/packages/SystemUI/src/com/android/systemui/dirac/SharedPreferencesUtil.java
===================================================================
--- frameworks/base/packages/SystemUI/src/com/android/systemui/dirac/SharedPreferencesUtil.java	(revision 0)
+++ frameworks/base/packages/SystemUI/src/com/android/systemui/dirac/SharedPreferencesUtil.java	(revision 1203)
@@ -0,0 +1,70 @@
+package com.android.systemui.dirac;
+
+import android.content.Context;
+import android.content.SharedPreferences;
+
+/**
+ *
+ */
+public class SharedPreferencesUtil
+{
+    private static SharedPreferences sp;
+    private static SharedPreferencesUtil spUtil;
+    private static Context context;
+    private static String spName;
+
+    public static SharedPreferencesUtil instance(Context context)
+    {
+        SharedPreferencesUtil.context = context;
+        if (spUtil == null)
+        {
+
+            SharedPreferencesUtil.context = context;
+            spUtil = new SharedPreferencesUtil();
+        }
+        try
+        {
+
+            sp = context.getSharedPreferences("dirac", Context.MODE_PRIVATE);
+        } catch (NullPointerException e)
+        {
+            e.printStackTrace();
+        } finally
+        {
+            return spUtil;
+        }
+    }
+    public boolean putString(String key, String value)
+    {
+        sp = context.getSharedPreferences(spName, Context.MODE_PRIVATE);
+        boolean b = sp.edit().putString(key, value).commit();
+        return b;
+    }
+    public boolean putBoolean(String key, boolean value)
+    {
+        sp = context.getSharedPreferences(spName, Context.MODE_PRIVATE);
+        boolean b = sp.edit().putBoolean(key, value).commit();
+        return b;
+    }
+    public boolean putInt(String key, int value)
+    {
+        sp = context.getSharedPreferences(spName, Context.MODE_PRIVATE);
+        boolean b = sp.edit().putInt(key, value).commit();
+        return b;
+    }
+    public String getString(String key,String defultValue)
+    {
+        sp = context.getSharedPreferences(spName, Context.MODE_PRIVATE);
+        return sp.getString(key,defultValue);
+    }
+    public boolean getBoolean(String key)
+    {
+        sp = context.getSharedPreferences(spName, Context.MODE_PRIVATE);
+        return sp.getBoolean(key, false);
+    }
+    public int getInt(String key,int defaultValue)
+    {
+        sp = context.getSharedPreferences(spName, Context.MODE_PRIVATE);
+        return sp.getInt(key, defaultValue);
+    }
+}
Index: frameworks/base/packages/SystemUI/src/com/android/systemui/dirac/Constant.java
===================================================================
--- frameworks/base/packages/SystemUI/src/com/android/systemui/dirac/Constant.java	(revision 0)
+++ frameworks/base/packages/SystemUI/src/com/android/systemui/dirac/Constant.java	(revision 1203)
@@ -0,0 +1,53 @@
+package com.android.systemui.dirac;
+public class Constant {
+	 /**sp key*/
+	public static final String DIRAC_DEFAULT_HEADSET = "defaultHeadset";
+    public static final String DIRAC_MODE = "dirac_mode";
+	public static final String DIRAC_SWITCH = "diracSwitch";
+	public static final String DIRAC_IS_FIRST_LONG_CLICK = "isFirstLongClick";
+	public static final String DIRAC_MUSIC_MODE = "music_mode";
+	 /** the status of Auto-mode  n*/
+     public static final String DIRAC_PACKAGE = "com.aa.dirac";
+    public static final String DIRAC_PACKAGE_SERVICE = "com.aa.dirac.AADiracService";
+	
+    public static final int DIRAC_MODE_AUTO=1;
+    
+    public static final int DIRAC_MODE_MOVIE=3;
+    public static final int DIRAC_MODE_GAME=2;
+
+    
+    public static final int DIRAC_MODE_MUSIC_FLAT=4;
+    public static final int DIRAC_MODE_MUSIC_BLUES=5;
+    public static final int DIRAC_MODE_MUSIC_CLASSIC=6;
+    public static final int DIRAC_MODE_MUSIC_COUNTRY=7;
+    public static final int DIRAC_MODE_MUSIC_DANCE=8;
+    public static final int DIRAC_MODE_MUSIC_ELECTRONIC=9;
+    public static final int DIRAC_MODE_MUSIC_HIP_HOP=10;
+    public static final int DIRAC_MODE_MUSIC_JAZZ=11;
+    public static final int DIRAC_MODE_MUSIC_METAL=12;
+    public static final int DIRAC_MODE_MUSIC_POP=13;
+    public static final int DIRAC_MODE_MUSIC_ROCK_ROLL=14;
+    public static final int DIRAC_MODE_MUSIC_USER_DEFINED=15;
+    
+    public static final int MUSIC_EQ_MIN = DIRAC_MODE_MUSIC_FLAT;
+    public static final int MUSIC_EQ_MAX = DIRAC_MODE_MUSIC_ROCK_ROLL;
+    public static final int DIRAC_MODE_MUSIC = DIRAC_MODE_MUSIC_FLAT;
+    
+	public final static String SPEAK_MUSIC = "speak_music";
+	public final static String SPEAK_MOVIE = "speak_movie";
+	public final static String SPEAK_GAME = "speak_game";
+	public final static String HEADSET_MUSIC = "headset_music";
+	public final static String HEADSET_MOVIE = "headset_movie";
+	public final static String HEADSET_GAME = "headset_game";
+    public static final int STEREO_WIDTH = 2;
+    public static final int TONAL_BALANCE = 3;
+    
+	public static final String KEY_USER_MODE = "user_mode";
+	public static final String KEY_TONAL_BALANCE = "tonal_balance";
+	public static final String KEY_STEREO_WIDTH = "stereo_width";
+	
+	public static final int USECASE_SPEAKER=1;
+	public static final int USECASE_HEADSET=2;
+	public static final int N_BANDS=7;
+	
+}
Index: frameworks/base/packages/SystemUI/src/com/android/systemui/dirac/DiracTuneManager.java
===================================================================
--- frameworks/base/packages/SystemUI/src/com/android/systemui/dirac/DiracTuneManager.java	(revision 0)
+++ frameworks/base/packages/SystemUI/src/com/android/systemui/dirac/DiracTuneManager.java	(revision 1203)
@@ -0,0 +1,131 @@
+package com.android.systemui.dirac;
+
+import android.content.ComponentName;
+import android.content.Context;
+import android.content.Intent;
+import android.content.ServiceConnection;
+import android.media.AudioManager;
+import android.os.IBinder;
+import android.os.RemoteException;
+import android.util.Log;
+import com.aa.dirac.IAADiracService;
+
+/**
+ * Created by jinlong.lu on 17-3-6.
+ */
+
+public class DiracTuneManager {
+    //public static final String TAG = DiracTuneManager.class.getSimpleName();
+	public static final String TAG = "fangyi";
+    public static final String DIRAC_SERVICE_START_ACTION="com.aa.dirac.aadiracservice.action.start";
+
+    public AudioManager mAudioManager;
+    private boolean mIsServiceBind = false;
+    private static DiracTuneManager INSTANCE;
+    private IAADiracService mAAService;
+    private boolean mAutoMode = false;
+    BindSuccessCallback mBindSuccessCallback;
+
+    public DiracTuneManager(Context ctx){
+        mAudioManager = (AudioManager) ctx.getSystemService(Context.AUDIO_SERVICE);
+        //mIsServiceBind = bindDiracService(ctx);
+        if(!mIsServiceBind)
+            Log.d(TAG, "[DiracTuneManager] can't bind Dirac service");
+		else
+			Log.d(TAG, "bind Dirac service success");
+        Log.d(TAG, "[DiracTuneManager] contrctor");
+    }
+
+    public static DiracTuneManager getInstance(Context context){
+        if(INSTANCE == null){
+            INSTANCE = new DiracTuneManager(context);
+        }
+
+        return INSTANCE;
+    }
+
+    public void setBindSuccessCallback(BindSuccessCallback mBindSuccessCallback) {
+        this.mBindSuccessCallback = mBindSuccessCallback;
+    }
+
+    public boolean bindDiracService(Context ctx){
+        Intent intent = new Intent();
+        intent.setClassName(Constant.DIRAC_PACKAGE,Constant.DIRAC_PACKAGE_SERVICE);
+        boolean ret = ctx.bindService(intent, mConnection, Context.BIND_AUTO_CREATE);
+        if(ret){
+            Log.d(TAG,"[bindDiracService] bind to mAAService successfully");
+        }else{
+			Log.d(TAG,"bindDriacService error");
+		}
+        mIsServiceBind =ret;
+        return ret;
+    }
+    public void unBindDiracService(Context ctx){
+        if(mConnection!=null){
+            try {
+                ctx.unbindService(mConnection);
+            }
+            catch (Exception e){
+                Log.e(TAG,"[unBindDiracService] failed:"+e);
+            }
+
+        }
+    }
+
+    private ServiceConnection mConnection = new ServiceConnection() {
+        @Override
+        public void onServiceConnected(ComponentName name, IBinder service) {
+            mAAService = IAADiracService.Stub.asInterface(service);
+            Log.d(TAG, "[onServiceConnected] mAAService is "+mAAService);
+            if (mAAService != null && mBindSuccessCallback != null) {
+                Log.d(TAG, "[onServiceConnected] mBindSuccessCallback callback");
+                mBindSuccessCallback.onBindSuccess(mAAService);
+            }else{
+                mBindSuccessCallback.onBindError();
+            }
+            boolean isDiracOn;
+            try {
+                isDiracOn = mAAService.getEffectEnable();
+               mAutoMode = mAAService.getPreset() == Constant.DIRAC_MODE_AUTO;
+                Log.d(TAG, "[onServiceConnected] isDiracOn is " + isDiracOn + ", mAutoMode is " + mAutoMode);
+            } catch (RemoteException e) {
+                e.printStackTrace();
+            }
+        }
+
+        @Override
+        public void onServiceDisconnected(ComponentName name) {
+            mAAService = null;
+			mBindSuccessCallback.onBindError();
+            Log.d(TAG,"[onServiceDisconnected] mAAService disconnected");
+        }
+    };
+
+
+    public synchronized boolean isHeadsetConnectionIn(){
+        // Modify  for task 4978256 by wei.shen.hz 20170701 start
+           if (mAudioManager != null && (mAudioManager.isWiredHeadsetOn() ||  mAudioManager.isBluetoothA2dpOn()) ) {
+           	return true;
+           } else {
+           	return false;
+           }
+   	 // Modify  for task 4978256 by wei.shen.hz 20170701 end
+    }
+
+
+    public boolean getServiceState(){
+        return mIsServiceBind;
+    }
+
+    public IAADiracService getAAService(){
+        return mAAService;
+    }
+
+    public ServiceConnection getmConnection(){
+        return mConnection;
+    }
+    public interface BindSuccessCallback{
+        void onBindSuccess(IAADiracService service);
+		void onBindError();
+    }
+}
Index: frameworks/base/packages/SystemUI/src/com/android/systemui/dirac/HeadsetActivity.java
===================================================================
--- frameworks/base/packages/SystemUI/src/com/android/systemui/dirac/HeadsetActivity.java	(revision 0)
+++ frameworks/base/packages/SystemUI/src/com/android/systemui/dirac/HeadsetActivity.java	(revision 1203)
@@ -0,0 +1,75 @@
+package com.android.systemui.dirac;
+
+import android.support.v7.app.AppCompatActivity;
+import android.os.Bundle;
+import android.support.v7.widget.LinearLayoutManager;
+import android.support.v7.widget.RecyclerView;
+import android.support.v7.widget.Toolbar;
+import android.view.View;
+import android.widget.CheckBox;
+import android.widget.Switch;
+
+import java.util.ArrayList;
+import java.util.List;
+import com.android.systemui.R;
+
+import com.android.systemui.dirac.ItemInfo;
+
+
+public class HeadsetActivity extends AppCompatActivity {
+	private SharedPreferencesUtil mSp;
+
+    private CheckBox mDefaultHeadset;
+    private RecyclerView mRecyclerView;
+    private String[] headsetBrand = {"AKG K374", "AKG K323 XS", "AKG Q460", "Apple EarPods",
+            "Bowers & Wilkins P5", "JBL E10", "JBL S300", "Sennheiser CX215", "Sennheiser CX30ll"
+            , "Sennheiser MX365", "Sennheiser PX100ll", "Sennheiser PX200ll", "Shure SE215"
+            , "Sony STH30", "Edifier H285"};
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_headset);
+        initActionBar();
+        initView();
+        initData();
+    }
+
+    private void initData() {
+		mSp = SharedPreferencesUtil.instance(this);
+        List<ItemInfo> list = new ArrayList();
+        String defaultHeadset = mSp.getString(Constant.DIRAC_DEFAULT_HEADSET,"AKG K374");
+        for (int i = 0; i < headsetBrand.length; i++) {
+            ItemInfo info = new ItemInfo();
+            info.setTitle(headsetBrand[i]);
+            if (defaultHeadset.equals(headsetBrand[i]))
+                info.setCheck(true);
+            else
+                info.setCheck(false);
+            list.add(info);
+        }
+        HeadsetBrandAdapter adapter = new HeadsetBrandAdapter(this, list);
+        mRecyclerView.setAdapter(adapter);
+    }
+
+    private void initView() {
+		
+        mDefaultHeadset = (CheckBox) findViewById(R.id.switch_headset);
+        mRecyclerView = (RecyclerView) findViewById(R.id.recycler_view);
+        mRecyclerView.setLayoutManager(new LinearLayoutManager(this, LinearLayoutManager.VERTICAL, false));
+    }
+
+    private void initActionBar() {
+        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
+        String title = getString(R.string.headset_title);
+        toolbar.setTitle(title);
+        setSupportActionBar(toolbar);
+        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
+        toolbar.setNavigationOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                finish();
+            }
+        });
+    }
+}
Index: frameworks/base/packages/SystemUI/src/com/android/systemui/dirac/ItemInfo.java
===================================================================
--- frameworks/base/packages/SystemUI/src/com/android/systemui/dirac/ItemInfo.java	(revision 0)
+++ frameworks/base/packages/SystemUI/src/com/android/systemui/dirac/ItemInfo.java	(revision 1203)
@@ -0,0 +1,55 @@
+package com.android.systemui.dirac;
+
+
+/**
+ * Created by Administrator on 2017/10/16.
+ */
+
+public class ItemInfo {
+    public final  static int TITLE_INDEX=1;
+    public final  static int CONTENT_INDEX=2;
+    public final  static int FOOTER_INDEX=3;
+
+    private String title;
+    private boolean isCheck;
+
+    public boolean isCheck() {
+        return isCheck;
+    }
+
+    public void setCheck(boolean check) {
+        isCheck = check;
+    }
+
+    public String getContent() {
+        return content;
+    }
+
+    public void setContent(String content) {
+        this.content = content;
+    }
+
+    private String content;
+    private int index;
+    public ItemInfo (String title,int index){
+        this.title=title;
+        this.index=index;
+    }
+    public ItemInfo (){
+    }
+    public String getTitle() {
+        return title;
+    }
+
+    public void setTitle(String title) {
+        this.title = title;
+    }
+
+    public int getIndex() {
+        return index;
+    }
+
+    public void setIndex(int index) {
+        this.index = index;
+    }
+}
Index: frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/QSTileHost.java
===================================================================
--- frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/QSTileHost.java	(revision 1202)
+++ frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/QSTileHost.java	(revision 1203)
@@ -58,6 +58,8 @@
 import com.android.systemui.qs.tiles.RotationLockTile;
 import com.android.systemui.qs.tiles.UserTile;
 import com.android.systemui.qs.tiles.WifiTile;
+import com.android.systemui.qs.tiles.DiracTile;
+
 import com.android.systemui.qs.tiles.WorkModeTile;
 import com.android.systemui.statusbar.policy.BatteryController;
 import com.android.systemui.statusbar.policy.BluetoothController;
@@ -459,6 +461,7 @@
                 .getQuickSettingsPlugin(mContext);
         if (tileSpec.equals("wifi")) return new WifiTile(this);
 		else if (tileSpec.equals("night")) return new NightDisplayTile(this);
+		else if (tileSpec.equals("dirac")) return new DiracTile(this);
         else if (tileSpec.equals("bt")) return new BluetoothTile(this);
         else if (tileSpec.equals("cell")) return new CellularTile(this);
         else if (tileSpec.equals("dnd")) return new DndTile(this);
Index: frameworks/base/packages/SystemUI/src/com/android/systemui/qs/tiles/DiracTile.java
===================================================================
--- frameworks/base/packages/SystemUI/src/com/android/systemui/qs/tiles/DiracTile.java	(revision 0)
+++ frameworks/base/packages/SystemUI/src/com/android/systemui/qs/tiles/DiracTile.java	(revision 1203)
@@ -0,0 +1,109 @@
+package com.android.systemui.qs.tiles;
+
+import android.util.Log;
+
+import com.android.systemui.R;
+import com.android.systemui.qs.QSTile;
+import com.android.systemui.dirac.DiracActivity;
+import com.android.systemui.dirac.Constant;
+
+import android.content.ComponentName;
+import android.content.Intent;
+import com.android.internal.logging.MetricsProto.MetricsEvent;
+import com.android.systemui.qs.QSTile.ResourceIcon;
+import android.content.SharedPreferences;
+import com.android.systemui.dirac.SharedPreferencesUtil;
+import com.aa.dirac.IAADiracService;
+import com.android.systemui.dirac.DiracTuneManager;
+import android.os.RemoteException;
+
+/**
+ * Created by Administrator on 2017/10/16.
+ */
+
+public class DiracTile extends QSTile<QSTile.BooleanState> {
+    
+	private final String mEnableContont=mContext.getString(R.string.dirac_enable);
+	private final String mDisableContont=mContext.getString(R.string.dirac_disable);
+	private boolean refreshState=false;
+	private IAADiracService  mDiracService;
+	private SharedPreferencesUtil mSp;
+	private DiracTuneManager mDiracTuneManager;
+    public DiracTile(Host host) {
+        super(host);
+		/*
+		DiracTuneManager.BindSuccessCallback mBindSuccessCallback = new DiracTuneManager.BindSuccessCallback() {
+            public void onBindSuccess(IAADiracService service) {
+                mDiracService = service;
+            }
+        };
+        mDiracTuneManager=DiracTuneManager.getInstance(mContext);		
+        mDiracTuneManager.setBindSuccessCallback(mBindSuccessCallback);
+        mDiracTuneManager.bindDiracService(mContext);
+        try {
+           refreshState=mDiracService.getEffectEnable();
+        } catch (RemoteException e) {
+            e.printStackTrace();
+        }
+        */
+		
+    }
+    @Override
+    public void setListening(boolean listening) {
+        if (listening)
+            refreshState();
+    }
+    @Override
+    public BooleanState newTileState() {
+        return new BooleanState();
+    }
+    @Override
+    public Intent getLongClickIntent() {
+    	mSp=SharedPreferencesUtil.instance(mContext);
+        boolean b=mSp.getBoolean(Constant.DIRAC_IS_FIRST_LONG_CLICK);
+		Intent intent =null;
+        if(b){
+            intent = new Intent(mContext,DiracActivity.class);
+        }else{
+        	intent = new Intent(mContext,DiracActivity.class);
+            mSp.putBoolean(Constant.DIRAC_IS_FIRST_LONG_CLICK,true);
+        }
+        
+      	
+        return intent;
+    }
+    @Override
+    protected void handleClick() {
+    /*
+    	try {
+           mDiracService.setEffectEnable(!refreshState);
+        } catch (RemoteException e) {
+            e.printStackTrace();
+        }
+        */
+        refreshState=!refreshState;
+        refreshState();
+    }
+    @Override
+    public CharSequence getTileLabel() {
+        return mEnableContont;
+    }
+	@Override
+    public int getMetricsCategory() {
+        return MetricsEvent.QS_DIRAC;
+    }
+     @Override  
+    protected void handleUpdateState(BooleanState state, Object arg) {  
+        // TODO: Right now this is just a dropper, needs an actual night icon.
+        /*
+        try {
+           refreshState=mDiracService.getEffectEnable();
+        } catch (RemoteException e) {
+            e.printStackTrace();
+        }
+        */
+        state.icon = ResourceIcon.get(R.drawable.shop);
+        state.label = refreshState ?mEnableContont:mDisableContont;
+        state.contentDescription =mEnableContont;
+    }
+}
Index: frameworks/base/packages/SystemUI/res/mipmap-hdpi/arrow_down.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: frameworks/base/packages/SystemUI/res/mipmap-hdpi/arrow_down.png
===================================================================
--- frameworks/base/packages/SystemUI/res/mipmap-hdpi/arrow_down.png	(revision 0)
+++ frameworks/base/packages/SystemUI/res/mipmap-hdpi/arrow_down.png	(revision 1203)

Property changes on: frameworks/base/packages/SystemUI/res/mipmap-hdpi/arrow_down.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: frameworks/base/packages/SystemUI/res/anim/fade_in.xml
===================================================================
--- frameworks/base/packages/SystemUI/res/anim/fade_in.xml	(revision 0)
+++ frameworks/base/packages/SystemUI/res/anim/fade_in.xml	(revision 1203)
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<alpha xmlns:android="http://schemas.android.com/apk/res/android"
+    android:interpolator="@android:anim/accelerate_interpolator"
+    android:fromAlpha="0.0" android:toAlpha="1.0"
+    android:duration="150" />
\ No newline at end of file
Index: frameworks/base/packages/SystemUI/res/anim/fade_out.xml
===================================================================
--- frameworks/base/packages/SystemUI/res/anim/fade_out.xml	(revision 0)
+++ frameworks/base/packages/SystemUI/res/anim/fade_out.xml	(revision 1203)
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<alpha xmlns:android="http://schemas.android.com/apk/res/android"
+    android:interpolator="@android:anim/accelerate_interpolator"
+    android:fromAlpha="1.0" android:toAlpha="0.0"
+    android:duration="150" />
\ No newline at end of file
Index: frameworks/base/packages/SystemUI/res/values/styles.xml
===================================================================
--- frameworks/base/packages/SystemUI/res/values/styles.xml	(revision 1202)
+++ frameworks/base/packages/SystemUI/res/values/styles.xml	(revision 1203)
@@ -370,7 +370,12 @@
         <item name="colorPrimaryDark">@color/colorPrimaryDark</item>
         <item name="colorAccent">@color/colorAccent</item>
     </style>
-  
+    <style name="DiracTheme" parent="Theme.AppCompat.Light.NoActionBar">
+        <!-- Customize your theme here. -->
+        <item name="colorPrimary">#ffffff</item>
+        <item name="colorPrimaryDark">#cccccc</item>
+        <item name="colorAccent">#008080</item>
+    </style>
     <style name="FuncTheme" parent="Theme.AppCompat.Light.NoActionBar">
         <!-- Customize your theme here. -->
         <item name="colorPrimary">#008080</item>
@@ -377,4 +382,9 @@
         <item name="colorPrimaryDark">#000000</item>
         <item name="colorAccent">#008080</item>
     </style>
+	<style name="AnimationPreview">
+        <item name="android:windowEnterAnimation">@anim/fade_in</item>
+        <item name="android:windowExitAnimation">@anim/fade_out</item>
+        <item name="android:windowIsFloating">true</item>
+    </style>
 </resources>
Index: frameworks/base/packages/SystemUI/res/values/strings.xml
===================================================================
--- frameworks/base/packages/SystemUI/res/values/strings.xml	(revision 1202)
+++ frameworks/base/packages/SystemUI/res/values/strings.xml	(revision 1203)
@@ -1694,4 +1694,24 @@
 	<string name="torch_text">"Torch"</string>
 
 
+<!-- Dirac -->	
+	<string name="dirac_enable">on</string>
+	<string name="dirac_disable">off</string>
+	<string name="headset">Headset</string>
+    <string name="headset_brand">Headset presets</string>
+    <string name="headset_brand_item">Headset brand model</string>
+    <string name="dirac_auto">Auto</string>
+    <string name="dirac_music">Music</string>
+    <string name="dirac_movie">Movie</string>
+    <string name="dirac_game">Game</string>
+    <string name="audio_title">Audio Enhancement</string>
+    <string name="headset_title">Headset brand model</string>
+    <string name="default_headset">Default</string>
+    <string name="switch_on">On</string>
+    <string name="switch_off">Off</string>
+    <string name="select_headset">Select the headset which  you use</string>
+    <string name="audio_off">With Audio Enhancement  you can control the \n
+        sound quality of speaker  and headset using \n
+        nothing more than the tip  of your ?nger.</string>
+
 </resources>
Index: frameworks/base/packages/SystemUI/res/values/colors.xml
===================================================================
--- frameworks/base/packages/SystemUI/res/values/colors.xml	(revision 1202)
+++ frameworks/base/packages/SystemUI/res/values/colors.xml	(revision 1203)
@@ -163,4 +163,7 @@
 	
     <color name="switch_background">#f2f2f2</color>
 	<color name="func_title_bg">#ff37474F</color>
+	<!--Dirac-->
+	<color name="gray">#999999</color>
+	<color name="white">#ffffff</color>
 </resources>
Index: frameworks/base/packages/SystemUI/res/values/config.xml
===================================================================
--- frameworks/base/packages/SystemUI/res/values/config.xml	(revision 1202)
+++ frameworks/base/packages/SystemUI/res/values/config.xml	(revision 1203)
@@ -104,13 +104,17 @@
 
     
 	<string name="quick_settings_tiles_default" translatable="false">
-        wifi,bt,cell,audioprofile,airplane,rotation,battery,location,flashlight,hotspot,dirac,night
 
+       wifi,cell,battery,dnd,flashlight,rotation,bt,location,airplane,night,audioprofile,dirac
+
     </string>
 
     <!-- Tiles native to System UI. Order should match "quick_settings_tiles_default" -->
     <string name="quick_settings_tiles_stock" translatable="false">
-        wifi,bt,cell,audioprofile,airplane,rotation,battery,location,flashlight,hotspot,dnd,hotknot,inversion,saver,work,cast,dirac,night
+
+
+        wifi,cell,battery,dnd,flashlight,rotation,bt,airplane,hotknot,location,hotspot,inversion,saver,work,cast,night,audioprofile,dirac
+
     </string>
 
     <!-- The tiles to display in QuickSettings -->
Index: frameworks/base/packages/SystemUI/res/drawable-hdpi/shop.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: frameworks/base/packages/SystemUI/res/drawable-hdpi/shop.png
===================================================================
--- frameworks/base/packages/SystemUI/res/drawable-hdpi/shop.png	(revision 0)
+++ frameworks/base/packages/SystemUI/res/drawable-hdpi/shop.png	(revision 1203)

Property changes on: frameworks/base/packages/SystemUI/res/drawable-hdpi/shop.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: frameworks/base/packages/SystemUI/res/drawable-hdpi/icon_headset.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: frameworks/base/packages/SystemUI/res/drawable-hdpi/icon_headset.png
===================================================================
--- frameworks/base/packages/SystemUI/res/drawable-hdpi/icon_headset.png	(revision 0)
+++ frameworks/base/packages/SystemUI/res/drawable-hdpi/icon_headset.png	(revision 1203)

Property changes on: frameworks/base/packages/SystemUI/res/drawable-hdpi/icon_headset.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: frameworks/base/packages/SystemUI/res/drawable-hdpi/headset_check.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: frameworks/base/packages/SystemUI/res/drawable-hdpi/headset_check.png
===================================================================
--- frameworks/base/packages/SystemUI/res/drawable-hdpi/headset_check.png	(revision 0)
+++ frameworks/base/packages/SystemUI/res/drawable-hdpi/headset_check.png	(revision 1203)

Property changes on: frameworks/base/packages/SystemUI/res/drawable-hdpi/headset_check.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: frameworks/base/packages/SystemUI/res/layout/item_footer.xml
===================================================================
--- frameworks/base/packages/SystemUI/res/layout/item_footer.xml	(revision 0)
+++ frameworks/base/packages/SystemUI/res/layout/item_footer.xml	(revision 1203)
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/item_click"
+    android:orientation="vertical" android:layout_width="match_parent"
+    android:layout_height="wrap_content">
+    <TextView
+        android:id="@+id/footer_title"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:textColor="#000"
+        android:textSize="20sp"
+        android:layout_marginBottom="5dp"/>
+    <TextView
+        android:id="@+id/footer_content"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:textColor="#808080"
+        android:textSize="17sp"/>
+</LinearLayout>
\ No newline at end of file
Index: frameworks/base/packages/SystemUI/res/layout/item_title.xml
===================================================================
--- frameworks/base/packages/SystemUI/res/layout/item_title.xml	(revision 0)
+++ frameworks/base/packages/SystemUI/res/layout/item_title.xml	(revision 1203)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:orientation="vertical" android:layout_width="match_parent"
+    android:layout_height="wrap_content">
+    <TextView
+        android:id="@+id/title"
+        android:layout_width="match_parent"
+        android:layout_height="30dp"
+        android:textSize="20sp"
+        android:textColor="#f00"
+        android:gravity="center_vertical"/>
+</LinearLayout>
\ No newline at end of file
Index: frameworks/base/packages/SystemUI/res/layout/item_dialog.xml
===================================================================
--- frameworks/base/packages/SystemUI/res/layout/item_dialog.xml	(revision 0)
+++ frameworks/base/packages/SystemUI/res/layout/item_dialog.xml	(revision 1203)
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="40dp"
+    android:id="@+id/item">
+
+    <CheckBox
+        android:id="@+id/item_check"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:visibility="gone"
+        android:layout_gravity="center_vertical"/>
+
+    <TextView
+        android:id="@+id/title"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_toRightOf="@id/item_check"
+        android:layout_marginLeft="20dp"
+        android:layout_gravity="center_vertical"/>
+</LinearLayout>
\ No newline at end of file
Index: frameworks/base/packages/SystemUI/res/layout/item_content.xml
===================================================================
--- frameworks/base/packages/SystemUI/res/layout/item_content.xml	(revision 0)
+++ frameworks/base/packages/SystemUI/res/layout/item_content.xml	(revision 1203)
@@ -0,0 +1,48 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content">
+
+    <RelativeLayout
+        android:id="@+id/item_click"
+        android:layout_width="match_parent"
+        android:layout_height="40dp">
+
+        <CheckBox
+            android:id="@+id/item_check"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_centerVertical="true"/>
+
+        <TextView
+            android:id="@+id/title"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_toRightOf="@id/item_check"
+            android:layout_marginLeft="30dp"
+            android:layout_centerVertical="true"/>
+ 		<LinearLayout
+            android:id="@+id/display_details"
+            android:layout_alignParentRight="true"
+            android:layout_width="wrap_content"
+            android:layout_height="match_parent"
+            android:visibility="gone"
+            android:layout_marginRight="20dp">
+            <TextView
+                android:id="@+id/item"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_gravity="center_vertical"/>
+            <ImageView
+                android:id="@+id/downView"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_gravity="center_vertical"
+                android:src="@mipmap/arrow_down"
+                android:layout_marginLeft="30dp"
+                android:paddingLeft="5dp"
+                android:paddingRight="5dp"/>
+        </LinearLayout>
+            
+    </RelativeLayout>
+</LinearLayout>
\ No newline at end of file
Index: frameworks/base/packages/SystemUI/res/layout/dialog_view.xml
===================================================================
--- frameworks/base/packages/SystemUI/res/layout/dialog_view.xml	(revision 0)
+++ frameworks/base/packages/SystemUI/res/layout/dialog_view.xml	(revision 1203)
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:orientation="vertical"
+    android:padding="10dp">
+    <TextView
+        android:id="@+id/title"
+        android:layout_width="match_parent"
+        android:layout_height="30dp"
+        android:gravity="center_vertical"
+        
+        android:textSize="20sp"/>
+    <android.support.v7.widget.RecyclerView
+        android:id="@+id/recycler_view"
+        android:layout_width="250dp"
+        android:layout_height="400dp"
+        android:paddingLeft="15dp"
+        android:paddingRight="8dp"
+         />
+</LinearLayout>
\ No newline at end of file
Index: frameworks/base/packages/SystemUI/res/layout/activity_dirac.xml
===================================================================
--- frameworks/base/packages/SystemUI/res/layout/activity_dirac.xml	(revision 0)
+++ frameworks/base/packages/SystemUI/res/layout/activity_dirac.xml	(revision 1203)
@@ -0,0 +1,66 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    tools:context="systemui.android.com.dirac.MainActivity">
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:orientation="vertical">
+
+        <android.support.v7.widget.Toolbar
+            android:id="@+id/toolbar"
+            android:layout_width="match_parent"
+            android:layout_height="?attr/actionBarSize"
+            android:background="?attr/colorPrimary"
+            app:popupTheme="@style/ThemeOverlay.AppCompat.Light" />
+
+
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:paddingLeft="8dp"
+            android:paddingRight="8dp">
+
+            <TextView
+                android:id="@+id/switch_contont"
+                android:layout_width="0dp"
+                android:layout_height="wrap_content"
+                android:layout_weight="1"
+                 />
+
+            <Switch
+                android:id="@+id/switch_dirac"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:showText="false" />
+        </LinearLayout>
+
+        <TextView
+            android:id="@+id/dirac_off"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:gravity="center"
+             />
+
+        <android.support.v7.widget.RecyclerView
+            android:id="@+id/recycler_view"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:paddingLeft="8dp"
+            android:paddingRight="8dp"
+            android:visibility="gone" />
+
+
+    </LinearLayout>
+    <ImageView
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:src="@mipmap/ic_launcher_dreams"
+        android:layout_alignParentRight="true"
+        android:layout_alignParentBottom="true"
+        android:layout_margin="20dp"/>
+</RelativeLayout>
Index: frameworks/base/packages/SystemUI/res/layout/item_headset_brand.xml
===================================================================
--- frameworks/base/packages/SystemUI/res/layout/item_headset_brand.xml	(revision 0)
+++ frameworks/base/packages/SystemUI/res/layout/item_headset_brand.xml	(revision 1203)
@@ -0,0 +1,34 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:orientation="vertical">
+    <LinearLayout
+        android:id="@+id/item"
+        android:layout_width="match_parent"
+        android:layout_height="50dp">
+        <ImageView
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center_vertical"
+            android:src="@drawable/icon_headset"/>
+        <TextView
+            android:id="@+id/title"
+            android:layout_weight="1"
+            android:layout_marginLeft="20dp"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center_vertical"/>
+        <ImageView
+            android:id="@+id/headset_check"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:visibility="gone"
+            android:layout_gravity="center_vertical"
+            android:src="@drawable/headset_check"/>
+    </LinearLayout>
+    <View
+        android:layout_width="match_parent"
+        android:layout_height="1dp"
+        android:background="#cccccc"/>
+</LinearLayout>
\ No newline at end of file
Index: frameworks/base/packages/SystemUI/res/layout/activity_headset.xml
===================================================================
--- frameworks/base/packages/SystemUI/res/layout/activity_headset.xml	(revision 0)
+++ frameworks/base/packages/SystemUI/res/layout/activity_headset.xml	(revision 1203)
@@ -0,0 +1,41 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical"
+    tools:context="com.android.systemui.dirac.HeadsetActivity">
+    <android.support.v7.widget.Toolbar
+        android:id="@+id/toolbar"
+        android:layout_width="match_parent"
+        android:layout_height="?attr/actionBarSize"
+        android:background="?attr/colorPrimary"
+        app:popupTheme="@style/ThemeOverlay.AppCompat.Light" />
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:paddingLeft="8dp"
+        android:paddingRight="8dp">
+
+        <TextView
+            android:id="@+id/switch_contont"
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            android:layout_weight="1"
+            android:text="@string/default_headset" />
+
+        <CheckBox
+            android:id="@+id/switch_headset"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+             />
+    </LinearLayout>
+    <android.support.v7.widget.RecyclerView
+        android:id="@+id/recycler_view"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:paddingLeft="8dp"
+        android:paddingRight="8dp"
+         />
+</LinearLayout>
Index: frameworks/base/packages/SystemUI
===================================================================
--- frameworks/base/packages/SystemUI	(revision 1202)
+++ frameworks/base/packages/SystemUI	(revision 1203)

Property changes on: frameworks/base/packages/SystemUI
___________________________________________________________________
Modified: svn:mergeinfo
   Merged /L05A/Trunk/ALPS-MP-N1.MP18-OF.P53_K39V1_INHOUSE/frameworks/base/packages/SystemUI:r861
Index: frameworks/base/packages
===================================================================
--- frameworks/base/packages	(revision 1202)
+++ frameworks/base/packages	(revision 1203)

Property changes on: frameworks/base/packages
___________________________________________________________________
Modified: svn:mergeinfo
   Merged /L05A/Trunk/ALPS-MP-N1.MP18-OF.P53_K39V1_INHOUSE/frameworks/base/packages:r861
Index: frameworks/base
===================================================================
--- frameworks/base	(revision 1202)
+++ frameworks/base	(revision 1203)

Property changes on: frameworks/base
___________________________________________________________________
Modified: svn:mergeinfo
   Merged /L05A/Trunk/ALPS-MP-N1.MP18-OF.P53_K39V1_INHOUSE/frameworks/base:r861
Index: frameworks
===================================================================
--- frameworks	(revision 1202)
+++ frameworks	(revision 1203)

Property changes on: frameworks
___________________________________________________________________
Modified: svn:mergeinfo
   Merged /L05A/Trunk/ALPS-MP-N1.MP18-OF.P53_K39V1_INHOUSE/frameworks:r861
Index: packages/apps/Settings/src/com/android/settings/notification/SoundSettings.java
===================================================================
--- packages/apps/Settings/src/com/android/settings/notification/SoundSettings.java	(revision 1202)
+++ packages/apps/Settings/src/com/android/settings/notification/SoundSettings.java	(revision 1203)
@@ -93,6 +93,7 @@
     private static final String KEY_WIFI_DISPLAY = "wifi_display";
     private static final String KEY_ZEN_MODE = "zen_mode";
     private static final String KEY_CELL_BROADCAST_SETTINGS = "cell_broadcast_settings";
+	private static final String KEY_DIRAC = "dirac";
 
     private static final String SELECTED_PREFERENCE_KEY = "selected_preference";
     private static final int REQUEST_CODE = 200;
@@ -134,6 +135,7 @@
 
 	private static NotificationManager mNotificationManager;
     private IAudioProfileExt mExt;
+	private Preference mDiracPreference ;
 
     @Override
     protected int getMetricsCategory() {
@@ -157,6 +159,8 @@
         }
 
         addPreferencesFromResource(R.xml.sound_settings);
+		mDiracPreference = findPreference("dirac");
+		
         mExt.addCustomizedPreference(this.getPreferenceScreen());
         initVolumePreference(KEY_MEDIA_VOLUME, AudioManager.STREAM_MUSIC,
                 com.android.internal.R.drawable.ic_audio_media_mute);
@@ -242,6 +246,12 @@
                     UserManager.DISALLOW_CONFIG_CELL_BROADCASTS);
         }
         mExt.onAudioProfileSettingResumed(this);
+		String diracMode=Settings.System.getString(getContentResolver(),"dirac_mode");
+		if(diracMode==null){
+			diracMode="auto";
+		}
+		
+		mDiracPreference.setSummary("Headset("+diracMode+")");
     }
 
     @Override

Property changes on: packages/apps/Settings/src/com/android/settings/notification/SoundSettings.java
___________________________________________________________________
Modified: svn:mergeinfo
   Merged /L05A/Trunk/ALPS-MP-N1.MP18-OF.P53_K39V1_INHOUSE/packages/apps/Settings/src/com/android/settings/notification/SoundSettings.java:r861
Index: packages/apps/Settings/res/values/strings.xml
===================================================================
--- packages/apps/Settings/res/values/strings.xml	(revision 1202)
+++ packages/apps/Settings/res/values/strings.xml	(revision 1203)
@@ -8032,4 +8032,8 @@
 	<string name="three_finger_screenshot_summary">Slide 3 fingers simultaneously in a downwards motion on screen to make screenshot.</string>
 	<!--add for tcl gesture end-->
 
+	<!--dirac-->
+	<string name="dirac_title">Audio Enhancement</string>
+	<string name="dirac_content">Auto</string>
+
 </resources>
Index: packages/apps/Settings/res/xml/sound_settings.xml
===================================================================
--- packages/apps/Settings/res/xml/sound_settings.xml	(revision 1202)
+++ packages/apps/Settings/res/xml/sound_settings.xml	(revision 1203)
@@ -59,7 +59,22 @@
         <SwitchPreference
                 android:key="vibrate_when_ringing"
                 android:title="@string/vibrate_when_ringing_title" />
-				
+		<!-- dirac 
+        <PreferenceScreen
+                android:key="dirac"
+                android:title="@string/dirac_title"
+                android:summary="@string/dirac_content"
+                />	-->
+         <Preference android:key="dirac"
+                android:title="@string/dirac_title"
+                android:summary="@string/dirac_content"
+                android:persistent="false">
+
+            <intent android:action="android.intent.action.MAIN"
+                    android:targetPackage="com.android.systemui"
+                    android:targetClass="com.android.systemui.dirac.DiracActivity"/>
+
+        </Preference>       
         <!-- Phone ringtone -->
         <com.android.settings.DefaultRingtonePreference
                 android:key="ringtone"
Index: packages/apps/Settings
===================================================================
--- packages/apps/Settings	(revision 1202)
+++ packages/apps/Settings	(revision 1203)

Property changes on: packages/apps/Settings
___________________________________________________________________
Modified: svn:mergeinfo
   Merged /L05A/Trunk/ALPS-MP-N1.MP18-OF.P53_K39V1_INHOUSE/packages/apps/Settings:r861
Index: packages/apps
===================================================================
--- packages/apps	(revision 1202)
+++ packages/apps	(revision 1203)

Property changes on: packages/apps
___________________________________________________________________
Modified: svn:mergeinfo
   Merged /L05A/Trunk/ALPS-MP-N1.MP18-OF.P53_K39V1_INHOUSE/packages/apps:r861
Index: packages
===================================================================
--- packages	(revision 1202)
+++ packages	(revision 1203)

Property changes on: packages
___________________________________________________________________
Modified: svn:mergeinfo
   Merged /L05A/Trunk/ALPS-MP-N1.MP18-OF.P53_K39V1_INHOUSE/packages:r861
Index: vendor/branch
===================================================================
--- vendor/branch	(revision 1202)
+++ vendor/branch	(revision 1203)

Property changes on: vendor/branch
___________________________________________________________________
Added: svn:mergeinfo
   Merged /L05A/Trunk/ALPS-MP-N1.MP18-OF.P53_K39V1_INHOUSE/vendor/branch:r861
Index: vendor
===================================================================
--- vendor	(revision 1202)
+++ vendor	(revision 1203)

Property changes on: vendor
___________________________________________________________________
Modified: svn:mergeinfo
   Merged /L05A/Trunk/ALPS-MP-N1.MP18-OF.P53_K39V1_INHOUSE/vendor:r861
