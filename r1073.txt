Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/NvRAMAgent.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/NvRAMAgent.java	(revision 1072)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/NvRAMAgent.java	(revision 1073)
@@ -76,7 +76,7 @@
                     reply.writeString(DESCRIPTOR);
                     return true;
                 }
-                case TRANSACTION_READFILE: {
+                case TRANSACTION_readFile: {
                     data.enforceInterface(DESCRIPTOR);
                     int _arg0;
                     _arg0 = data.readInt();
@@ -85,7 +85,7 @@
                     reply.writeByteArray(_result);
                     return true;
                 }
-                case TRANSACTION_WRITEFILE: {
+                case TRANSACTION_writeFile: {
                     data.enforceInterface(DESCRIPTOR);
                     int _arg0;
                     _arg0 = data.readInt();
@@ -96,108 +96,155 @@
                     reply.writeInt(_result);
                     return true;
                 }
-                default: {
-                    break;
-                }
-            }
-            return super.onTransact(code, data, reply, flags);
-        }
-        private static class Proxy implements NvRAMAgent {
-            private android.os.IBinder mRemote;
-            Proxy(android.os.IBinder remote) {
-                mRemote = remote;
-            }
-            public android.os.IBinder asBinder() {
-                return mRemote;
-            }
-            public java.lang.String getInterfaceDescriptor() {
-                return DESCRIPTOR;
-            }
-            public byte[] readFile(int file_lid) throws android.os.RemoteException {
-                android.os.Parcel _data = android.os.Parcel.obtain();
-                android.os.Parcel _reply = android.os.Parcel.obtain();
-                byte[] _result;
+				case TRANSACTION_readFileByName:{
+					data.enforceInterface(DESCRIPTOR);
+					System.out.println("NVRAM TRANSACTION_readFile="+data.readString());
+					String _arg0;
+					_arg0 = data.readString();
+					byte[] _result = this.readFileByName(_arg0);
+					reply.writeNoException();
+					reply.writeByteArray(_result);
+					return true;
+				      }
+				
+				case TRANSACTION_writeFileByName:{
+					data.enforceInterface(DESCRIPTOR);
+						String _arg0;
+					_arg0 = data.readString();
+					
+					
+					System.out.println("NVRAM TRANSACTION_writeFile="+data.readString());
+					byte[] _arg1;
+					_arg1 = data.createByteArray();
+					int _result = this.writeFileByName(_arg0, _arg1);
+					reply.writeNoException();
+					reply.writeInt(_result);
+					return true;
+				}
+			}
+			
+			return super.onTransact(code, data, reply, flags);
+		}
+		
+		private static class Proxy implements NvRAMAgent
+		{
+			private android.os.IBinder mRemote;
+			Proxy(android.os.IBinder remote)
+			{
+				mRemote = remote;
+			}
+			
+			public android.os.IBinder asBinder()
+			{
+				return mRemote;
+			}
+			
+			public java.lang.String getInterfaceDescriptor()
+			{
+				return DESCRIPTOR;
+			}
+			
+			public byte[] readFile(int file_lid) throws android.os.RemoteException
+			{
+				android.os.Parcel _data = android.os.Parcel.obtain();
+				android.os.Parcel _reply = android.os.Parcel.obtain();
+				byte[] _result;
+				try {
+					_data.writeInterfaceToken(DESCRIPTOR);
+					_data.writeInt(file_lid);
+					mRemote.transact(Stub.TRANSACTION_readFile, _data, _reply, 0);
+					_reply.readException();
+					_result = _reply.createByteArray();
+				}
+				
+				finally {
+					_reply.recycle();
+					_data.recycle();
+				}
+				return _result;
+			}
+		
+			public int writeFile(int file_lid, byte[] buff) throws android.os.RemoteException
+			{
+				android.os.Parcel _data = android.os.Parcel.obtain();
+				android.os.Parcel _reply = android.os.Parcel.obtain();
+				int _result;
+				try {
+					_data.writeInterfaceToken(DESCRIPTOR);
+					_data.writeInt(file_lid);
+					_data.writeByteArray(buff);
+					mRemote.transact(Stub.TRANSACTION_writeFile, _data, _reply, 0);
+					_reply.readException();
+					_result = _reply.readInt();
+				}
+				finally {
+					_reply.recycle();
+					_data.recycle();
+				}
+				return _result;
+			}
+			
+			public byte[] readFileByName(String filename) throws android.os.RemoteException
+			{
+				android.os.Parcel _data = android.os.Parcel.obtain();
+				android.os.Parcel _reply = android.os.Parcel.obtain();
+				byte[] _result;
 
-                try {
-                    _data.writeInterfaceToken(DESCRIPTOR);
-                    _data.writeInt(file_lid);
-                    mRemote.transact(Stub.TRANSACTION_READFILE, _data, _reply, 0);
-                    _reply.readException();
-                    _result = _reply.createByteArray();
-                } finally {
-                    _reply.recycle();
-                    _data.recycle();
-                }
+				try 
+				{
+					_data.writeInterfaceToken(DESCRIPTOR);
 
-                return _result;
-            }
-            public int writeFile(int file_lid, byte[] buff) throws android.os.RemoteException {
-                android.os.Parcel _data = android.os.Parcel.obtain();
-                android.os.Parcel _reply = android.os.Parcel.obtain();
-                int _result;
+					_data.writeString(filename);
+					mRemote.transact(Stub.TRANSACTION_readFileByName, _data, _reply, 0);
+					_reply.readException();
+					_result = _reply.createByteArray();
+				}
+				finally 
+				{
+					_reply.recycle();
+					_data.recycle();
+				}
+				return _result;
+			}
+			public int writeFileByName(String filename, byte[] buff) throws android.os.RemoteException
+			{
+				android.os.Parcel _data = android.os.Parcel.obtain();
+				android.os.Parcel _reply = android.os.Parcel.obtain();
+				int _result;
 
-                try {
-                    _data.writeInterfaceToken(DESCRIPTOR);
-                    _data.writeInt(file_lid);
-                    _data.writeByteArray(buff);
-                    mRemote.transact(Stub.TRANSACTION_WRITEFILE, _data, _reply, 0);
-                    _reply.readException();
-                    _result = _reply.readInt();
-                } finally {
-                    _reply.recycle();
-                    _data.recycle();
-                }
+				
+					
+				System.out.println("writeFile"+filename);	
+					
+				try 
+				{
+					_data.writeInterfaceToken(DESCRIPTOR);
+					_data.writeString(filename);
 
-                return _result;
-            }
+					_data.writeByteArray(buff);
+					mRemote.transact(Stub.TRANSACTION_writeFileByName, _data, _reply, 0);
+					_reply.readException();
+					_result = _reply.readInt();
+				}
+				finally 
+				{
+					_reply.recycle();
+					_data.recycle();
+				}
+				return _result;
+			}
+			
+			
+			
+		}
+static final int TRANSACTION_readFile = (IBinder.FIRST_CALL_TRANSACTION + 0);
+static final int TRANSACTION_writeFile = (IBinder.FIRST_CALL_TRANSACTION + 1);
+static final int TRANSACTION_readFileByName = (IBinder.FIRST_CALL_TRANSACTION + 2);
+static final int TRANSACTION_writeFileByName = (IBinder.FIRST_CALL_TRANSACTION + 3);
 
-            public byte[] readFileByName(String filename) throws android.os.RemoteException {
-                android.os.Parcel _data = android.os.Parcel.obtain();
-                android.os.Parcel _reply = android.os.Parcel.obtain();
-                byte[] _result;
-
-                try {
-                    _data.writeInterfaceToken(DESCRIPTOR);
-                    _data.writeString(filename);
-                    mRemote.transact(Stub.TRANSACTION_READFILEBYNAME, _data, _reply, 0);
-                    _reply.readException();
-                    _result = _reply.createByteArray();
-                } finally {
-                    _reply.recycle();
-                    _data.recycle();
-                }
-
-                return _result;
-            }
-
-            public int writeFileByName(String filename, byte[] buff)
-                throws android.os.RemoteException {
-                android.os.Parcel _data = android.os.Parcel.obtain();
-                android.os.Parcel _reply = android.os.Parcel.obtain();
-                int _result;
-
-                try {
-                    _data.writeInterfaceToken(DESCRIPTOR);
-                    _data.writeString(filename);
-                    _data.writeByteArray(buff);
-                    mRemote.transact(Stub.TRANSACTION_WRITEFILEBYNAME, _data, _reply, 0);
-                    _reply.readException();
-                    _result = _reply.readInt();
-                } finally {
-                    _reply.recycle();
-                    _data.recycle();
-                }
-
-                return _result;
-            }
-        }
-        static final int TRANSACTION_READFILE = (IBinder.FIRST_CALL_TRANSACTION + 0);
-        static final int TRANSACTION_WRITEFILE = (IBinder.FIRST_CALL_TRANSACTION + 1);
-        static final int TRANSACTION_READFILEBYNAME = (IBinder.FIRST_CALL_TRANSACTION + 2);
-        static final int TRANSACTION_WRITEFILEBYNAME = (IBinder.FIRST_CALL_TRANSACTION + 3);
-    }
-    public byte[] readFile(int file_lid) throws android.os.RemoteException;
-    public int writeFile(int file_lid, byte[] buff) throws android.os.RemoteException;
-    public byte[] readFileByName(String filepath) throws android.os.RemoteException;
-    public int writeFileByName(String filepath, byte[] buff) throws android.os.RemoteException;
+	}
+public byte[] readFile(int file_lid) throws android.os.RemoteException;
+public int writeFile(int file_lid, byte[] buff) throws android.os.RemoteException;
+public byte[] readFileByName(String filename) throws android.os.RemoteException;
+public int writeFileByName(String filename, byte[] buff) throws android.os.RemoteException;
 }
Index: vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/FactoryModeBootCompleteServer.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/FactoryModeBootCompleteServer.java	(revision 1072)
+++ vendor/mediatek/proprietary/packages/apps/FactoryMode/src/com/mediatek/factorymode/FactoryModeBootCompleteServer.java	(revision 1073)
@@ -27,8 +27,10 @@
 	//private static final int PRODUCT_INFO_NVRAM_LID = 59;
 	private static final int SWR_INFO_NV_POS = 600; 
     private String SWR_INFO_STRING = "ro.build.swr.id"; 
-    private static final int BT_NVRAM_ID = 1;
-    private static final int WIFI_NVRAM_ID = 53;
+    //private static final int BT_NVRAM_ID = 1;
+    //private static final int WIFI_NVRAM_ID = 53;
+    private static final String BT_NVRAM_ADDR = "/data/nvram/APCFG/APRDEB/BT_Addr";
+    private static final String WIFI_NVRAM_ADDR = "/data/nvram/APCFG/APRDEB/WIFI";
     private byte[] mProductInfoBuff = null;
 	private static final int BT_NVRAM_POS = 309;
 	private static final int BT_LENGTH = 6;
@@ -80,7 +82,7 @@
         NvRAMAgent agent = NvRAMAgent.Stub.asInterface(binder);
         
         try{
-            buff = agent.readFile(WIFI_NVRAM_ID);
+            buff = agent.readFileByName(WIFI_NVRAM_ADDR);
         }catch(Exception e){
             e.printStackTrace();
         } 
@@ -103,7 +105,7 @@
 
         if(!isNvramNull){
             try{
-                agent.writeFile(WIFI_NVRAM_ID,buff);
+                agent.writeFileByName(WIFI_NVRAM_ADDR,buff);
             }catch(Exception e){
                 e.printStackTrace();
                 return ;
@@ -119,15 +121,10 @@
         boolean isNvramNull = true;
 
         try{
-            buff = agent.readFile(BT_NVRAM_ID);
+            buff = agent.readFileByName(BT_NVRAM_ADDR);
         }catch(Exception e){
             e.printStackTrace();
         }
-        if(mProductInfoBuff == null){
-        	Log.d(TAG, "BT--mProductInfoBuff = null");
-        	return;
-        }
-           
 
         for (int i = 0; i < BT_LENGTH; i++) {
         	  Log.d(TAG, "BT: i= " + i);
@@ -137,7 +134,7 @@
                 break;
             }
         }
-
+        if(buff == null)  return;
         for (int i = 0; i < BT_LENGTH && !isNvramNull; i++) {
         	  Log.d(TAG, "BT: i= " + i);
             buff[i] = mProductInfoBuff[BT_NVRAM_POS+i];
@@ -146,7 +143,7 @@
 
         if(!isNvramNull){
             try{
-                agent.writeFile(BT_NVRAM_ID,buff);
+                agent.writeFileByName(BT_NVRAM_ADDR,buff);
             }catch(Exception e){
             	  Log.d(TAG, "agent.writeFile error");
                 e.printStackTrace();
