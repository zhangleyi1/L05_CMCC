Index: frameworks/base/services/core/java/com/android/server/BatteryService.java
===================================================================
--- frameworks/base/services/core/java/com/android/server/BatteryService.java	(revision 1147)
+++ frameworks/base/services/core/java/com/android/server/BatteryService.java	(revision 1148)
@@ -23,6 +23,8 @@
 
 import android.database.ContentObserver;
 import android.os.BatteryStats;
+import android.app.AlertDialog;
+import android.view.WindowManager;
 
 import android.os.ResultReceiver;
 import android.os.ShellCommand;
@@ -33,6 +35,7 @@
 
 import android.app.ActivityManagerNative;
 import android.content.ContentResolver;
+import android.content.DialogInterface;
 import android.content.Context;
 import android.content.Intent;
 import android.content.IntentFilter;
@@ -168,6 +171,7 @@
     private boolean LowLevelFlag = false;
     // True if boot completed occurred.  We keep the battery status update hold until this happens.
     private boolean mBootCompleted = false;
+	private static AlertDialog sConfirmDialog;
 
     public BatteryService(Context context) {
         super(context);
@@ -318,6 +322,24 @@
         // shut down gracefully if our battery is critically low and we are not powered.
         // wait until the system has booted before attempting to display the shutdown dialog.
         if (mBatteryProps.batteryLevel == 0 && !isPoweredLocked(BatteryManager.BATTERY_PLUGGED_ANY)) {
+			mHandler.post(new Runnable() {
+                @Override
+                public void run() {
+                   showAlertDialog();
+                }
+            });
+			mHandler.postDelayed(new Runnable() {
+			@Override
+			public void run() {
+				if(ActivityManagerNative.isSystemReady()) {
+                   	Intent intent = new Intent(Intent.ACTION_REQUEST_SHUTDOWN);
+                   	intent.putExtra(Intent.EXTRA_KEY_CONFIRM, false);
+                   	intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+                   	mContext.startActivityAsUser(intent, UserHandle.CURRENT);
+                 }
+			}
+		}, 15000);
+			/*
             mHandler.post(new Runnable() {
                 @Override
                 public void run() {
@@ -332,8 +354,24 @@
                     }
                 }
             });
+            */
         }
     }
+	private void showAlertDialog(){
+		if(sConfirmDialog != null) {
+        	sConfirmDialog.dismiss();
+        }
+        Log.d(TAG, "PowerOff dialog doesn't exist. Create it first");
+        sConfirmDialog = new AlertDialog.Builder(mContext)
+            .setTitle(com.android.internal.R.string.power_off)
+            .setMessage(com.android.internal.R.string.battery_countdown)
+            .create();
+	   final CloseDialogReceiver closer = new CloseDialogReceiver(mContext,sConfirmDialog);
+       sConfirmDialog.setOnDismissListener(closer);
+       sConfirmDialog.getWindow().setType(WindowManager.LayoutParams.TYPE_KEYGUARD_DIALOG);
+       sConfirmDialog.show();
+	  
+	}
 
     private void shutdownIfOverTempLocked() {
         // shut down gracefully if temperature is too high (> 68.0C by default)
@@ -1099,4 +1137,25 @@
             }
         }
     }
+	 private static class CloseDialogReceiver extends BroadcastReceiver
+            implements DialogInterface.OnDismissListener {
+        private Context mContext;
+        public AlertDialog mDialog;
+
+        CloseDialogReceiver(Context context,AlertDialog dialog) {
+            mContext = context;
+			mDialog=dialog;
+            IntentFilter filter = new IntentFilter(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);
+            context.registerReceiver(this, filter);
+        }
+
+        @Override
+        public void onReceive(Context context, Intent intent) {
+            mDialog.cancel();
+        }
+
+        public void onDismiss(DialogInterface unused) {
+            mContext.unregisterReceiver(this);
+        }
+    }
 }
Index: frameworks/base/core/res/res/values/symbols.xml
===================================================================
--- frameworks/base/core/res/res/values/symbols.xml	(revision 1147)
+++ frameworks/base/core/res/res/values/symbols.xml	(revision 1148)
@@ -2731,6 +2731,7 @@
   <java-symbol type="string" name="free_memory_free_up_space_btn" />
   <java-symbol type="string" name="reboot" />
   <java-symbol type="string" name="reboot_confirm" />
+  <java-symbol type="string" name="battery_countdown" />
   
   
 
