Index: packages/apps/Settings/src/com/android/settings/NightModeTypeSettings.java
===================================================================
--- packages/apps/Settings/src/com/android/settings/NightModeTypeSettings.java	(revision 4349)
+++ packages/apps/Settings/src/com/android/settings/NightModeTypeSettings.java	(revision 4350)
@@ -87,46 +87,36 @@
             	schedulePlanPreference.setShouldDisableView(true);
 				modePrenference.edit().putBoolean(SETTING_TIME,false).commit();
 			}
+			Log.d(TAG, "javen onResume mPrefChangeFlag = " + mPrefChangeFlag);
 			if(automateSchedulePreference.isChecked()){
 				boolean checkoutTime = modePrenference.getBoolean(SETTING_TIME_PLAN, false);	
 				boolean auto = modePrenference.getBoolean(SUNSET_TO_SUNRISE, false);
 				if(auto){
-					schedulePlanPreference.setSummary("22:00 to 7:00");
+					schedulePlanPreference.setSummary(mPrefChangeFlag ? "22:00 to 7:00" : "10:00PM to 7:00AM");
 				}else if(checkoutTime){
-                    mPrefChangeFlag =PrefChangeBroadcast.mPrefChangeFlag;
+                    //mPrefChangeFlag =PrefChangeBroadcast.mPrefChangeFlag;
                     String[] deOnTime=modePrenference.getString(TIME_ON,timeOn).split(":");
                     String[] deOffTime=modePrenference.getString(TIME_Off,timeOff).split(":");
-                    int deOnHour=Integer.parseInt(deOnTime[0]);
-                    int deOffHour=Integer.parseInt(deOffTime[0]);
-                    if(mPrefChangeFlag){
-                        if(deOnHour<12){
-                            String nTimeOn=(deOnHour+12)+":"+deOnTime[1];
-                            //turn_on_at.setSummary(nTimeOn);
-                            Log.i("faker:", "nTimeOn:"+nTimeOn);
-                            modePrenference.edit().putString(TIME_ON,nTimeOn).commit();     
-                        }
-                        if(deOffHour<12){
-                             String nTimeOff=(deOffHour+12)+":"+deOffTime[1];
-                             Log.i("faker:", "nTimeOff:"+nTimeOff);
-                             modePrenference.edit().putString(TIME_Off,nTimeOff).commit();
-                        }
-                    }else{
-                        if(deOnHour>12){
-                            String nTimeOn=(deOnHour-12)+":"+deOnTime[1];
-                            //turn_on_at.setSummary(nTimeOn);
-                            Log.i("faker:", "nTimeOn:"+nTimeOn);
-                            modePrenference.edit().putString(TIME_ON,nTimeOn).commit();     
-                        }
-                        if(deOffHour>12){
-                             String nTimeOff=(deOffHour-12)+":"+deOffTime[1];
-                             Log.i("faker:", "nTimeOff:"+nTimeOff);
-                             modePrenference.edit().putString(TIME_Off,nTimeOff).commit();
-                        }
-                    }
-                    
-					String timeOns=modePrenference.getString(TIME_ON,timeOn);
-					String timeOffs=modePrenference.getString(TIME_Off,timeOff);
-					schedulePlanPreference.setSummary(timeOns+" to "+timeOffs);
+					Log.d(TAG, "javen deOffTime[0] = "+deOffTime[0] + ", deOffTime[1] = " + deOffTime[1]);
+                    //int deOnHour=Integer.parseInt(deOnTime[0]);
+                    //int deOffHour=Integer.parseInt(deOffTime[0]);
+					
+					if(mPrefChangeFlag){
+						schedulePlanPreference.setSummary(deOnTime[0]+":"+deOnTime[1]+" to "+deOffTime[0]+":"+deOffTime[1]);
+					}else{
+						int nHFrom = Integer.parseInt(deOnTime[0]);
+						int nHTo = Integer.parseInt(deOffTime[0]);
+						boolean f1 = (nHFrom >12) ? true : false;
+						boolean t1 = (nHTo >12) ? true : false;
+						String fAmPm = f1 ? " PM" : " AM";
+						String tAmPm = t1 ? " PM" : " AM";
+						String sFrom = (f1 ? (nHFrom-12) : deOnTime[0]) + ":" + deOnTime[1] + fAmPm;
+						String sTo = (t1 ? (nHTo-12) : deOffTime[0]) + ":" + deOffTime[1] + tAmPm;
+						
+						Log.d(TAG, "javen sFrom = "+sFrom + ", sTo = " + sTo);
+						
+						schedulePlanPreference.setSummary(sFrom+" to "+sTo);
+					}                    
 				}else{
 					schedulePlanPreference.setSummary(R.string.sunset2sunrise_title);
 				}
@@ -148,10 +138,17 @@
 			super.onCreate(savedInstanceState);
 			final Activity activity = getActivity();
 			addPreferencesFromResource(R.xml.nightmode_settings);
-			mContentResolver = getContext().getContentResolver();		
+			mContentResolver = getContext().getContentResolver();	
+			String sFormat =android.provider.Settings.System.getString(mContentResolver, Settings.System.TIME_12_24);
+		
+			mPrefChangeFlag =  ("24".equals(sFormat)) ? true : false;
+			PrefChangeBroadcast.mPrefChangeFlag = mPrefChangeFlag;
+			
 			initPreference();
 			IntentFilter filter = new IntentFilter(NIGHT_MODE_ACTION_ON);
             filter.addAction(NIGHT_MODE_ACTION_OFF);
+			filter.addAction(OPEN_ACTION);
+			filter.addAction(CLOSE_ACTION);
             activity.registerReceiver(manuallyNightReceiver,filter);
 	}
       private BroadcastReceiver manuallyNightReceiver = new BroadcastReceiver(){  
@@ -158,9 +155,9 @@
         @Override  
         public void onReceive(Context context, Intent intent) {  
             Log.d(TAG,"intent.getAction()="+intent.getAction());
-            if(intent.getAction().equals(NIGHT_MODE_ACTION_ON)){
+            if(intent.getAction().equals(NIGHT_MODE_ACTION_ON) || intent.getAction().equals(OPEN_ACTION)){
                 manuallyEnablePreference.setChecked(true);
-            }else if(intent.getAction().equals(NIGHT_MODE_ACTION_OFF)){
+            }else if(intent.getAction().equals(NIGHT_MODE_ACTION_OFF) || intent.getAction().equals(CLOSE_ACTION)){
                 manuallyEnablePreference.setChecked(false);
             }
         }  
@@ -186,8 +183,10 @@
 		/*manuallyPreference.setSeekbarProgress(modePrenference.getInt(NIGHT_MODE_LEVEL,5));*/
 		Log.e("indexfargmen",modePrenference.getInt(NIGHT_MODE_LEVEL,5)+"");
 		
+		String sFrom = modePrenference.getString(TIME_ON,timeOn);
+		String sTo = modePrenference.getString(TIME_Off,timeOff);
+		Log.d(TAG, "javen initPreference sFrom = " + sFrom + ", sTo = " + sTo);
 		
-		
 		schedulePlanPreference.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener() {
             @Override
             public boolean onPreferenceClick(Preference preference) {
@@ -308,5 +307,13 @@
 		});
 
     }
-	
+	String getTimeStr(int type, int data){
+        String sFormat =android.provider.Settings.System.getString(mContentResolver, Settings.System.TIME_12_24);
+		if("24".equals(sFormat)){
+			
+		}else{
+			
+		}
+		return null;
+	}
 }
Index: packages/apps/Settings/src/com/android/settings/SchedulePlanTypeSettings.java
===================================================================
--- packages/apps/Settings/src/com/android/settings/SchedulePlanTypeSettings.java	(revision 4349)
+++ packages/apps/Settings/src/com/android/settings/SchedulePlanTypeSettings.java	(revision 4350)
@@ -56,7 +56,7 @@
 	private static final String KEY_TIME_OFF = "turn_off_at";
 	private static final String KEY_SETTING_TIME = "custom_schedule";
 	private static final String KEY_SUNSET_SUNRISE = "sunset2sunrise";
-	private final String timeOn="10:00";
+	private final String timeOn="22:00";
 	private final String timeOff="07:00";
 	 private final String OPEN="open_nightMode";
     private final String CLOSE="close_nightMode";
@@ -201,7 +201,7 @@
                 }else{
 
        				String timeon=modePrenference.getString(TIME_ON,timeOn);
-                    Log.d("faker:","timeon:"+timeon);
+                    Log.d(TAG,"javen timeon:"+timeon);
 					String[] hourMin=timeon.split(":");
 					TimePickerDialog timeOnDialog=new TimePickerDialog(getContext(),timeOnListener,
 							 Integer.parseInt(hourMin[0]),Integer.parseInt(hourMin[1]),
@@ -219,7 +219,7 @@
                 }else{
 					String timeoff=modePrenference.getString(TIME_Off,timeOff);
 					String[] hourMin=timeoff.split(":");
-
+					Log.d(TAG,"javen timeoff:"+timeoff);
         			TimePickerDialog dialog=new TimePickerDialog(getContext(),timeOffListener,
                 							Integer.parseInt(hourMin[0]),Integer.parseInt(hourMin[1]),
                								 DateFormat.is24HourFormat(getActivity()));
@@ -250,14 +250,14 @@
 					min=""+minute;
 				}
                 if(mIs24HourBool){
-                   modePrenference.edit().putString(TIME_ON,hour+":"+min).commit();
+                   modePrenference.edit().putString(TIME_ON,hourOfDay+":"+min).commit();
                 }else{
                     int stHour=Integer.parseInt(hour);
                     if(stHour>12){
                         hour=(stHour-12)+"";
                     }
-                   modePrenference.edit().putString(TIME_ON,hour+":"+min).commit();
-                   Log.d("faker:", "245lin");                   
+                   modePrenference.edit().putString(TIME_ON,stHour+":"+min).commit();
+                   Log.d(TAG, "245lin");                   
                 }
             	updateTimeDisplay();
 				//modified by zxp for 112000
@@ -302,8 +302,8 @@
                     if(stHour>12){
                         hour=(stHour-12)+"";
                     }
-                   modePrenference.edit().putString(TIME_Off,hour+":"+min).commit(); 
-                   Log.d("faker:", "288lin");
+                   modePrenference.edit().putString(TIME_Off,stHour+":"+min).commit(); 
+                   Log.d(TAG, "288lin");
                 }
                 updateTimeDisplay();
 				// modified by zxp for 112000
@@ -317,58 +317,30 @@
 	public void updateTimeDisplay(){
     
             mPrefChangeFlag =PrefChangeBroadcast.mPrefChangeFlag;
-            Log.d("faker:updateTimeDisplay:", ""+mPrefChangeFlag);
+            Log.d(TAG, "javen updateTimeDisplay mPrefChangeFlag = "+mPrefChangeFlag);
             String[] deOnTime=modePrenference.getString(TIME_ON,timeOn).split(":");
             String[] deOffTime=modePrenference.getString(TIME_Off,timeOff).split(":");
-            int deOnHour=Integer.parseInt(deOnTime[0]);
-            int deOffHour=Integer.parseInt(deOffTime[0]);
+            //int deOnHour=Integer.parseInt(deOnTime[0]);
+            //int deOffHour=Integer.parseInt(deOffTime[0]);
+			Log.d(TAG, "javen deOnTime = "+deOnTime[0] + ":" + deOnTime[1]+ ", deOffTime = " + deOffTime[0]+":"+deOffTime[1]);
+			
             if(mPrefChangeFlag){
-                   if(deOnHour<12){
-                       String nTimeOn=(deOnHour+12)+":"+deOnTime[1];
-                       //turn_on_at.setSummary(nTimeOn);
-                       Log.i("faker:", "nTimeOn:"+nTimeOn);
-                       modePrenference.edit().putString(TIME_ON,nTimeOn).commit();
-                       //turn_on_at.setSummary(modePrenference.getString(TIME_ON,timeOn));
-                   }
-                   /*
-                   else if(deOnHour>12){
-                        String nTimeOn=(deOnHour-12)+":"+deOnTime[1];
-                        modePrenference.edit().putString(TIME_ON,nTimeOn).commit();
-                        turn_on_at.setSummary(modePrenference.getString(TIME_ON,timeOn));
-                   }
-                   */
-                   if(deOffHour<12){
-                       Log.i("faker:", "deOffHour"+deOffHour);  
-                       String nTimeOff=(deOffHour+12)+":"+deOffTime[1];
-                       //turn_off_at.setSummary(nTimeOff);
-                       Log.i("faker:", "nTimeOff:"+nTimeOff);
-                       modePrenference.edit().putString(TIME_Off,nTimeOff).commit();
-                       //turn_off_at.setSummary(modePrenference.getString(TIME_Off,timeOff)); 
-                   }
-                   /*
-                   else if(deOffHour>12){
-                       String nTimeOff=(deOffHour-12)+":"+deOffTime[1];
-                       modePrenference.edit().putString(TIME_Off,nTimeOff).commit();
-                       turn_off_at.setSummary(modePrenference.getString(TIME_Off,timeOff));
-                   }
-                   */
-                    turn_on_at.setSummary(modePrenference.getString(TIME_ON,timeOn));
-                    turn_off_at.setSummary(modePrenference.getString(TIME_Off,timeOff)); 
+				turn_on_at.setSummary(modePrenference.getString(TIME_ON, deOnTime[0]+":"+deOnTime[1]));
+				turn_off_at.setSummary(modePrenference.getString(TIME_Off, deOffTime[0]+":"+deOffTime[1])); 
             }else if(!mPrefChangeFlag){
-                    if(deOnHour>12){
-                        String nTimeOn=(deOnHour-12)+":"+deOnTime[1];
-                        modePrenference.edit().putString(TIME_ON,nTimeOn).commit();
-                        //turn_on_at.setSummary(modePrenference.getString(TIME_ON,timeOn));
-                    }
-                    if(deOffHour>12){
-                       String nTimeOff=(deOffHour-12)+":"+deOffTime[1];
-                       modePrenference.edit().putString(TIME_Off,nTimeOff).commit();
-                       //turn_off_at.setSummary(modePrenference.getString(TIME_Off,timeOff));
-                   }
-                       turn_on_at.setSummary(modePrenference.getString(TIME_ON,timeOn));
-                       turn_off_at.setSummary(modePrenference.getString(TIME_Off,timeOff));
-                   
-	}
+				int nHFrom = Integer.parseInt(deOnTime[0]);
+				int nHTo = Integer.parseInt(deOffTime[0]);
+				boolean f1 = (nHFrom >12) ? true : false;
+				boolean t1 = (nHTo >12) ? true : false;
+				String fAmPm = f1 ? " PM" : " AM";
+				String tAmPm = t1 ? " PM" : " AM";
+				String sFrom = (f1 ? (nHFrom-12) : deOnTime[0]) + ":" + deOnTime[1] + fAmPm;
+				String sTo = (t1 ? (nHTo-12) : deOffTime[0]) + ":" + deOffTime[1] + tAmPm;
+				Log.d(TAG, "javen sFrom = "+sFrom + ", sTo = " + sTo);
+				
+				turn_on_at.setSummary(modePrenference.getString(TIME_ON,sFrom));
+				turn_off_at.setSummary(modePrenference.getString(TIME_Off,sTo));
+			}
     }
      private boolean is24Hour() {
         return DateFormat.is24HourFormat(getActivity());
